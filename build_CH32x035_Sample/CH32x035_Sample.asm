
build_CH32x035_Sample/CH32x035_Sample.elf:     file format elf32-littleriscv


Disassembly of section .init:

00000000 <_sinit>:

	.section	.init,"ax",@progbits
	.global	_start
	.align	1
_start:
	j	handle_reset
   0:	5140c06f          	j	c514 <handle_reset>

Disassembly of section .vector:

00000004 <_vector_base>:
	...
   c:	c4ba                	sw	a4,72(sp)
   e:	0000                	unimp
  10:	c4bc                	sw	a5,72(s1)
  12:	0000                	unimp
  14:	0000                	unimp
  16:	0000                	unimp
  18:	c4be                	sw	a5,72(sp)
	...
  22:	0000                	unimp
  24:	c4c0                	sw	s0,12(s1)
  26:	0000                	unimp
  28:	c4c2                	sw	a6,72(sp)
	...
  32:	0000                	unimp
  34:	8cd2                	mv	s9,s4
  36:	0000                	unimp
  38:	0000                	unimp
  3a:	0000                	unimp
  3c:	c394                	sw	a3,0(a5)
  3e:	0000                	unimp
  40:	0000                	unimp
  42:	0000                	unimp
  44:	c4c8                	sw	a0,12(s1)
  46:	0000                	unimp
  48:	c4ca                	sw	s2,72(sp)
  4a:	0000                	unimp
  4c:	c4cc                	sw	a1,12(s1)
  4e:	0000                	unimp
  50:	0000                	unimp
  52:	0000                	unimp
  54:	c4ce                	sw	s3,72(sp)
  56:	0000                	unimp
  58:	c4d0                	sw	a2,12(s1)
  5a:	0000                	unimp
  5c:	c4d2                	sw	s4,72(sp)
  5e:	0000                	unimp
  60:	c4d4                	sw	a3,12(s1)
  62:	0000                	unimp
  64:	c4d6                	sw	s5,72(sp)
  66:	0000                	unimp
  68:	c4d8                	sw	a4,12(s1)
  6a:	0000                	unimp
  6c:	c4da                	sw	s6,72(sp)
  6e:	0000                	unimp
  70:	c4dc                	sw	a5,12(s1)
  72:	0000                	unimp
  74:	c4de                	sw	s7,72(sp)
  76:	0000                	unimp
  78:	c4e0                	sw	s0,76(s1)
  7a:	0000                	unimp
  7c:	c4e2                	sw	s8,72(sp)
  7e:	0000                	unimp
  80:	c4e4                	sw	s1,76(s1)
  82:	0000                	unimp
  84:	c4e6                	sw	s9,72(sp)
  86:	0000                	unimp
  88:	c4e8                	sw	a0,76(s1)
  8a:	0000                	unimp
  8c:	c4ea                	sw	s10,72(sp)
  8e:	0000                	unimp
  90:	c4ec                	sw	a1,76(s1)
  92:	0000                	unimp
  94:	c4ee                	sw	s11,72(sp)
  96:	0000                	unimp
  98:	c4f0                	sw	a2,76(s1)
  9a:	0000                	unimp
  9c:	c4f2                	sw	t3,72(sp)
  9e:	0000                	unimp
  a0:	c4f4                	sw	a3,76(s1)
  a2:	0000                	unimp
  a4:	c4f6                	sw	t4,72(sp)
  a6:	0000                	unimp
  a8:	c4f8                	sw	a4,76(s1)
  aa:	0000                	unimp
  ac:	c4fa                	sw	t5,72(sp)
  ae:	0000                	unimp
  b0:	c4fc                	sw	a5,76(s1)
  b2:	0000                	unimp
  b4:	c4fe                	sw	t6,72(sp)
  b6:	0000                	unimp
  b8:	c500                	sw	s0,8(a0)
  ba:	0000                	unimp
  bc:	c502                	sw	zero,136(sp)
  be:	0000                	unimp
  c0:	c504                	sw	s1,8(a0)
  c2:	0000                	unimp
  c4:	c506                	sw	ra,136(sp)
  c6:	0000                	unimp
  c8:	c508                	sw	a0,8(a0)
  ca:	0000                	unimp
  cc:	c50a                	sw	sp,136(sp)
  ce:	0000                	unimp
  d0:	c50c                	sw	a1,8(a0)
  d2:	0000                	unimp
  d4:	c50e                	sw	gp,136(sp)
  d6:	0000                	unimp
  d8:	c510                	sw	a2,8(a0)
  da:	0000                	unimp
  dc:	c512                	sw	tp,136(sp)
	...

Disassembly of section .text:

00000100 <__get_MSTATUS>:
 * @brief   Return the Machine Status Register
 *
 * @return  mstatus value
 */
uint32_t __get_MSTATUS(void)
{
     100:	1101                	addi	sp,sp,-32
     102:	ce22                	sw	s0,28(sp)
     104:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mstatus" : "=r" (result) );
     106:	300027f3          	csrr	a5,mstatus
     10a:	fef42623          	sw	a5,-20(s0)
  return (result);
     10e:	fec42783          	lw	a5,-20(s0)
}
     112:	853e                	mv	a0,a5
     114:	4472                	lw	s0,28(sp)
     116:	6105                	addi	sp,sp,32
     118:	8082                	ret

0000011a <__set_MSTATUS>:
 * @param   value  - set mstatus value
 *
 * @return  none
 */
void __set_MSTATUS(uint32_t value)
{
     11a:	1101                	addi	sp,sp,-32
     11c:	ce22                	sw	s0,28(sp)
     11e:	1000                	addi	s0,sp,32
     120:	fea42623          	sw	a0,-20(s0)
  __ASM volatile ("csrw mstatus, %0" : : "r" (value) );
     124:	fec42783          	lw	a5,-20(s0)
     128:	30079073          	csrw	mstatus,a5
}
     12c:	0001                	nop
     12e:	4472                	lw	s0,28(sp)
     130:	6105                	addi	sp,sp,32
     132:	8082                	ret

00000134 <__get_MISA>:
 * @brief   Return the Machine ISA Register
 *
 * @return  misa value
 */
uint32_t __get_MISA(void)
{
     134:	1101                	addi	sp,sp,-32
     136:	ce22                	sw	s0,28(sp)
     138:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "misa" : "=r" (result) );
     13a:	301027f3          	csrr	a5,misa
     13e:	fef42623          	sw	a5,-20(s0)
  return (result);
     142:	fec42783          	lw	a5,-20(s0)
}
     146:	853e                	mv	a0,a5
     148:	4472                	lw	s0,28(sp)
     14a:	6105                	addi	sp,sp,32
     14c:	8082                	ret

0000014e <__set_MISA>:
 * @param   value  - set misa value
 *
 * @return  none
 */
void __set_MISA(uint32_t value)
{
     14e:	1101                	addi	sp,sp,-32
     150:	ce22                	sw	s0,28(sp)
     152:	1000                	addi	s0,sp,32
     154:	fea42623          	sw	a0,-20(s0)
  __ASM volatile ("csrw misa, %0" : : "r" (value) );
     158:	fec42783          	lw	a5,-20(s0)
     15c:	30179073          	csrw	misa,a5
}
     160:	0001                	nop
     162:	4472                	lw	s0,28(sp)
     164:	6105                	addi	sp,sp,32
     166:	8082                	ret

00000168 <__get_MTVEC>:
 * @brief   Return the Machine Trap-Vector Base-Address Register
 *
 * @return  mtvec value
 */
uint32_t __get_MTVEC(void)
{
     168:	1101                	addi	sp,sp,-32
     16a:	ce22                	sw	s0,28(sp)
     16c:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mtvec" : "=r" (result) );
     16e:	305027f3          	csrr	a5,mtvec
     172:	fef42623          	sw	a5,-20(s0)
  return (result);
     176:	fec42783          	lw	a5,-20(s0)
}
     17a:	853e                	mv	a0,a5
     17c:	4472                	lw	s0,28(sp)
     17e:	6105                	addi	sp,sp,32
     180:	8082                	ret

00000182 <__set_MTVEC>:
 * @param   value  - set mtvec value
 *
 * @return  none
 */
void __set_MTVEC(uint32_t value)
{
     182:	1101                	addi	sp,sp,-32
     184:	ce22                	sw	s0,28(sp)
     186:	1000                	addi	s0,sp,32
     188:	fea42623          	sw	a0,-20(s0)
  __ASM volatile ("csrw mtvec, %0" : : "r" (value) );
     18c:	fec42783          	lw	a5,-20(s0)
     190:	30579073          	csrw	mtvec,a5
}
     194:	0001                	nop
     196:	4472                	lw	s0,28(sp)
     198:	6105                	addi	sp,sp,32
     19a:	8082                	ret

0000019c <__get_MSCRATCH>:
 * @brief   Return the Machine Seratch Register
 *
 * @return  mscratch value
 */
uint32_t __get_MSCRATCH(void)
{
     19c:	1101                	addi	sp,sp,-32
     19e:	ce22                	sw	s0,28(sp)
     1a0:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mscratch" : "=r" (result) );
     1a2:	340027f3          	csrr	a5,mscratch
     1a6:	fef42623          	sw	a5,-20(s0)
  return (result);
     1aa:	fec42783          	lw	a5,-20(s0)
}
     1ae:	853e                	mv	a0,a5
     1b0:	4472                	lw	s0,28(sp)
     1b2:	6105                	addi	sp,sp,32
     1b4:	8082                	ret

000001b6 <__set_MSCRATCH>:
 * @param   value  - set mscratch value
 *
 * @return  none
 */
void __set_MSCRATCH(uint32_t value)
{
     1b6:	1101                	addi	sp,sp,-32
     1b8:	ce22                	sw	s0,28(sp)
     1ba:	1000                	addi	s0,sp,32
     1bc:	fea42623          	sw	a0,-20(s0)
  __ASM volatile ("csrw mscratch, %0" : : "r" (value) );
     1c0:	fec42783          	lw	a5,-20(s0)
     1c4:	34079073          	csrw	mscratch,a5
}
     1c8:	0001                	nop
     1ca:	4472                	lw	s0,28(sp)
     1cc:	6105                	addi	sp,sp,32
     1ce:	8082                	ret

000001d0 <__get_MEPC>:
 * @brief   Return the Machine Exception Program Register
 *
 * @return  mepc value
 */
uint32_t __get_MEPC(void)
{
     1d0:	1101                	addi	sp,sp,-32
     1d2:	ce22                	sw	s0,28(sp)
     1d4:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mepc" : "=r" (result) );
     1d6:	341027f3          	csrr	a5,mepc
     1da:	fef42623          	sw	a5,-20(s0)
  return (result);
     1de:	fec42783          	lw	a5,-20(s0)
}
     1e2:	853e                	mv	a0,a5
     1e4:	4472                	lw	s0,28(sp)
     1e6:	6105                	addi	sp,sp,32
     1e8:	8082                	ret

000001ea <__set_MEPC>:
 * @brief   Set the Machine Exception Program Register
 *
 * @return  mepc value
 */
void __set_MEPC(uint32_t value)
{
     1ea:	1101                	addi	sp,sp,-32
     1ec:	ce22                	sw	s0,28(sp)
     1ee:	1000                	addi	s0,sp,32
     1f0:	fea42623          	sw	a0,-20(s0)
  __ASM volatile ("csrw mepc, %0" : : "r" (value) );
     1f4:	fec42783          	lw	a5,-20(s0)
     1f8:	34179073          	csrw	mepc,a5
}
     1fc:	0001                	nop
     1fe:	4472                	lw	s0,28(sp)
     200:	6105                	addi	sp,sp,32
     202:	8082                	ret

00000204 <__get_MCAUSE>:
 * @brief   Return the Machine Cause Register
 *
 * @return  mcause value
 */
uint32_t __get_MCAUSE(void)
{
     204:	1101                	addi	sp,sp,-32
     206:	ce22                	sw	s0,28(sp)
     208:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mcause" : "=r" (result) );
     20a:	342027f3          	csrr	a5,mcause
     20e:	fef42623          	sw	a5,-20(s0)
  return (result);
     212:	fec42783          	lw	a5,-20(s0)
}
     216:	853e                	mv	a0,a5
     218:	4472                	lw	s0,28(sp)
     21a:	6105                	addi	sp,sp,32
     21c:	8082                	ret

0000021e <__set_MCAUSE>:
 * @brief   Set the Machine Cause Register
 *
 * @return  mcause value
 */
void __set_MCAUSE(uint32_t value)
{
     21e:	1101                	addi	sp,sp,-32
     220:	ce22                	sw	s0,28(sp)
     222:	1000                	addi	s0,sp,32
     224:	fea42623          	sw	a0,-20(s0)
  __ASM volatile ("csrw mcause, %0" : : "r" (value) );
     228:	fec42783          	lw	a5,-20(s0)
     22c:	34279073          	csrw	mcause,a5
}
     230:	0001                	nop
     232:	4472                	lw	s0,28(sp)
     234:	6105                	addi	sp,sp,32
     236:	8082                	ret

00000238 <__get_MTVAL>:
 * @brief   Return the Machine Trap Value Register
 *
 * @return  mtval value
 */
uint32_t __get_MTVAL(void)
{
     238:	1101                	addi	sp,sp,-32
     23a:	ce22                	sw	s0,28(sp)
     23c:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mtval" : "=r" (result) );
     23e:	343027f3          	csrr	a5,mtval
     242:	fef42623          	sw	a5,-20(s0)
  return (result);
     246:	fec42783          	lw	a5,-20(s0)
}
     24a:	853e                	mv	a0,a5
     24c:	4472                	lw	s0,28(sp)
     24e:	6105                	addi	sp,sp,32
     250:	8082                	ret

00000252 <__set_MTVAL>:
 * @brief   Set the Machine Trap Value Register
 *
 * @return  mtval value
 */
void __set_MTVAL(uint32_t value)
{
     252:	1101                	addi	sp,sp,-32
     254:	ce22                	sw	s0,28(sp)
     256:	1000                	addi	s0,sp,32
     258:	fea42623          	sw	a0,-20(s0)
  __ASM volatile ("csrw mtval, %0" : : "r" (value) );
     25c:	fec42783          	lw	a5,-20(s0)
     260:	34379073          	csrw	mtval,a5
}
     264:	0001                	nop
     266:	4472                	lw	s0,28(sp)
     268:	6105                	addi	sp,sp,32
     26a:	8082                	ret

0000026c <__get_MVENDORID>:
 * @brief   Return Vendor ID Register
 *
 * @return  mvendorid value
 */
uint32_t __get_MVENDORID(void)
{
     26c:	1101                	addi	sp,sp,-32
     26e:	ce22                	sw	s0,28(sp)
     270:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mvendorid" : "=r" (result) );
     272:	f11027f3          	csrr	a5,mvendorid
     276:	fef42623          	sw	a5,-20(s0)
  return (result);
     27a:	fec42783          	lw	a5,-20(s0)
}
     27e:	853e                	mv	a0,a5
     280:	4472                	lw	s0,28(sp)
     282:	6105                	addi	sp,sp,32
     284:	8082                	ret

00000286 <__get_MARCHID>:
 * @brief   Return Machine Architecture ID Register
 *
 * @return  marchid value
 */
uint32_t __get_MARCHID(void)
{
     286:	1101                	addi	sp,sp,-32
     288:	ce22                	sw	s0,28(sp)
     28a:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "marchid" : "=r" (result) );
     28c:	f12027f3          	csrr	a5,marchid
     290:	fef42623          	sw	a5,-20(s0)
  return (result);
     294:	fec42783          	lw	a5,-20(s0)
}
     298:	853e                	mv	a0,a5
     29a:	4472                	lw	s0,28(sp)
     29c:	6105                	addi	sp,sp,32
     29e:	8082                	ret

000002a0 <__get_MIMPID>:
 * @brief   Return Machine Implementation ID Register
 *
 * @return  mimpid value
 */
uint32_t __get_MIMPID(void)
{
     2a0:	1101                	addi	sp,sp,-32
     2a2:	ce22                	sw	s0,28(sp)
     2a4:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mimpid" : "=r" (result) );
     2a6:	f13027f3          	csrr	a5,mimpid
     2aa:	fef42623          	sw	a5,-20(s0)
  return (result);
     2ae:	fec42783          	lw	a5,-20(s0)
}
     2b2:	853e                	mv	a0,a5
     2b4:	4472                	lw	s0,28(sp)
     2b6:	6105                	addi	sp,sp,32
     2b8:	8082                	ret

000002ba <__get_MHARTID>:
 * @brief   Return Hart ID Register
 *
 * @return  mhartid value
 */
uint32_t __get_MHARTID(void)
{
     2ba:	1101                	addi	sp,sp,-32
     2bc:	ce22                	sw	s0,28(sp)
     2be:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "csrr %0," "mhartid" : "=r" (result) );
     2c0:	f14027f3          	csrr	a5,mhartid
     2c4:	fef42623          	sw	a5,-20(s0)
  return (result);
     2c8:	fec42783          	lw	a5,-20(s0)
}
     2cc:	853e                	mv	a0,a5
     2ce:	4472                	lw	s0,28(sp)
     2d0:	6105                	addi	sp,sp,32
     2d2:	8082                	ret

000002d4 <__get_SP>:
 * @brief   Return SP Register
 *
 * @return  SP value
 */
uint32_t __get_SP(void)
{
     2d4:	1101                	addi	sp,sp,-32
     2d6:	ce22                	sw	s0,28(sp)
     2d8:	1000                	addi	s0,sp,32
  uint32_t result;

  __ASM volatile ( "mv %0," "sp" : "=r"(result) : );
     2da:	878a                	mv	a5,sp
     2dc:	fef42623          	sw	a5,-20(s0)
  return (result);
     2e0:	fec42783          	lw	a5,-20(s0)
}
     2e4:	853e                	mv	a0,a5
     2e6:	4472                	lw	s0,28(sp)
     2e8:	6105                	addi	sp,sp,32
     2ea:	8082                	ret

000002ec <SystemInit>:
 *        update the SystemCoreClock variable.
 *
 * @return  none
 */
void SystemInit (void)
{
     2ec:	1141                	addi	sp,sp,-16
     2ee:	c606                	sw	ra,12(sp)
     2f0:	c422                	sw	s0,8(sp)
     2f2:	0800                	addi	s0,sp,16
  RCC->CTLR |= (uint32_t)0x00000001;
     2f4:	400217b7          	lui	a5,0x40021
     2f8:	4398                	lw	a4,0(a5)
     2fa:	400217b7          	lui	a5,0x40021
     2fe:	00176713          	ori	a4,a4,1
     302:	c398                	sw	a4,0(a5)
  RCC->CFGR0 |= (uint32_t)0x00000050;
     304:	400217b7          	lui	a5,0x40021
     308:	43d8                	lw	a4,4(a5)
     30a:	400217b7          	lui	a5,0x40021
     30e:	05076713          	ori	a4,a4,80
     312:	c3d8                	sw	a4,4(a5)
  RCC->CFGR0 &= (uint32_t)0xF8FFFF5F;
     314:	400217b7          	lui	a5,0x40021
     318:	43d4                	lw	a3,4(a5)
     31a:	400217b7          	lui	a5,0x40021
     31e:	f9000737          	lui	a4,0xf9000
     322:	f5f70713          	addi	a4,a4,-161 # f8ffff5f <_eusrstack+0xd8ffbf5f>
     326:	8f75                	and	a4,a4,a3
     328:	c3d8                	sw	a4,4(a5)
  SetSysClock();
     32a:	2079                	jal	3b8 <SetSysClock>
}
     32c:	0001                	nop
     32e:	40b2                	lw	ra,12(sp)
     330:	4422                	lw	s0,8(sp)
     332:	0141                	addi	sp,sp,16
     334:	8082                	ret

00000336 <SystemCoreClockUpdate>:
 * @brief   Update SystemCoreClock variable according to Clock Register Values.
 *
 * @return  none
 */
void SystemCoreClockUpdate (void)
{
     336:	1101                	addi	sp,sp,-32
     338:	ce22                	sw	s0,28(sp)
     33a:	1000                	addi	s0,sp,32
    uint32_t tmp = 0;
     33c:	fe042623          	sw	zero,-20(s0)

    SystemCoreClock = HSI_VALUE;
     340:	200007b7          	lui	a5,0x20000
     344:	02dc7737          	lui	a4,0x2dc7
     348:	c0070713          	addi	a4,a4,-1024 # 2dc6c00 <_data_lma+0x2db79f4>
     34c:	02e7a023          	sw	a4,32(a5) # 20000020 <SystemCoreClock>
    tmp = AHBPrescTable[((RCC->CFGR0 & RCC_HPRE) >> 4)];
     350:	400217b7          	lui	a5,0x40021
     354:	43dc                	lw	a5,4(a5)
     356:	8391                	srli	a5,a5,0x4
     358:	00f7f713          	andi	a4,a5,15
     35c:	200007b7          	lui	a5,0x20000
     360:	00078793          	mv	a5,a5
     364:	97ba                	add	a5,a5,a4
     366:	0007c783          	lbu	a5,0(a5) # 20000000 <_data_vma>
     36a:	0ff7f793          	andi	a5,a5,255
     36e:	fef42623          	sw	a5,-20(s0)

    if(((RCC->CFGR0 & RCC_HPRE) >> 4) < 8)
     372:	400217b7          	lui	a5,0x40021
     376:	43dc                	lw	a5,4(a5)
     378:	0807f793          	andi	a5,a5,128
     37c:	ef91                	bnez	a5,398 <SystemCoreClockUpdate+0x62>
    {
        SystemCoreClock /= tmp;
     37e:	200007b7          	lui	a5,0x20000
     382:	0207a703          	lw	a4,32(a5) # 20000020 <SystemCoreClock>
     386:	fec42783          	lw	a5,-20(s0)
     38a:	02f75733          	divu	a4,a4,a5
     38e:	200007b7          	lui	a5,0x20000
     392:	02e7a023          	sw	a4,32(a5) # 20000020 <SystemCoreClock>
    }
    else
    {
        SystemCoreClock >>= tmp;
    }
}
     396:	a829                	j	3b0 <SystemCoreClockUpdate+0x7a>
        SystemCoreClock >>= tmp;
     398:	200007b7          	lui	a5,0x20000
     39c:	0207a703          	lw	a4,32(a5) # 20000020 <SystemCoreClock>
     3a0:	fec42783          	lw	a5,-20(s0)
     3a4:	00f75733          	srl	a4,a4,a5
     3a8:	200007b7          	lui	a5,0x20000
     3ac:	02e7a023          	sw	a4,32(a5) # 20000020 <SystemCoreClock>
}
     3b0:	0001                	nop
     3b2:	4472                	lw	s0,28(sp)
     3b4:	6105                	addi	sp,sp,32
     3b6:	8082                	ret

000003b8 <SetSysClock>:
 * @brief   Configures the System clock frequency, HCLK prescalers.
 *
 * @return  none
 */
static void SetSysClock(void)
{
     3b8:	1141                	addi	sp,sp,-16
     3ba:	c606                	sw	ra,12(sp)
     3bc:	c422                	sw	s0,8(sp)
     3be:	0800                	addi	s0,sp,16
#elif defined SYSCLK_FREQ_16MHz_HSI
    SetSysClockTo16_HSI();
#elif defined SYSCLK_FREQ_24MHz_HSI
    SetSysClockTo24_HSI();
#elif defined SYSCLK_FREQ_48MHz_HSI
    SetSysClockTo48_HSI();
     3c0:	2031                	jal	3cc <SetSysClockTo48_HSI>

#endif
}
     3c2:	0001                	nop
     3c4:	40b2                	lw	ra,12(sp)
     3c6:	4422                	lw	s0,8(sp)
     3c8:	0141                	addi	sp,sp,16
     3ca:	8082                	ret

000003cc <SetSysClockTo48_HSI>:
 * @brief   Sets System clock frequency to 48MHz and configure HCLK prescalers.
 *
 * @return  none
 */
static void SetSysClockTo48_HSI(void)
{
     3cc:	1141                	addi	sp,sp,-16
     3ce:	c622                	sw	s0,12(sp)
     3d0:	0800                	addi	s0,sp,16
    /* Flash 2 wait state */
    FLASH->ACTLR &= (uint32_t)((uint32_t)~FLASH_ACTLR_LATENCY);
     3d2:	400227b7          	lui	a5,0x40022
     3d6:	4398                	lw	a4,0(a5)
     3d8:	400227b7          	lui	a5,0x40022
     3dc:	9b71                	andi	a4,a4,-4
     3de:	c398                	sw	a4,0(a5)
    FLASH->ACTLR |= (uint32_t)FLASH_ACTLR_LATENCY_2;
     3e0:	400227b7          	lui	a5,0x40022
     3e4:	4398                	lw	a4,0(a5)
     3e6:	400227b7          	lui	a5,0x40022
     3ea:	00276713          	ori	a4,a4,2
     3ee:	c398                	sw	a4,0(a5)

    /* HCLK = SYSCLK = APB1 */
    RCC->CFGR0 &= (uint32_t)0xFFFFFF0F;
     3f0:	400217b7          	lui	a5,0x40021
     3f4:	43d8                	lw	a4,4(a5)
     3f6:	400217b7          	lui	a5,0x40021
     3fa:	f0f77713          	andi	a4,a4,-241
     3fe:	c3d8                	sw	a4,4(a5)
    RCC->CFGR0 |= (uint32_t)RCC_HPRE_DIV1;
     400:	40021737          	lui	a4,0x40021
     404:	400217b7          	lui	a5,0x40021
     408:	4358                	lw	a4,4(a4)
     40a:	c3d8                	sw	a4,4(a5)
}
     40c:	0001                	nop
     40e:	4432                	lw	s0,12(sp)
     410:	0141                	addi	sp,sp,16
     412:	8082                	ret

00000414 <ADC_DeInit>:
 * @param   ADCx - where x can be 1 to select the ADC peripheral.
 *
 * @return  none
 */
void ADC_DeInit(ADC_TypeDef *ADCx)
{
     414:	1101                	addi	sp,sp,-32
     416:	ce06                	sw	ra,28(sp)
     418:	cc22                	sw	s0,24(sp)
     41a:	1000                	addi	s0,sp,32
     41c:	fea42623          	sw	a0,-20(s0)
    if(ADCx == ADC1)
     420:	fec42703          	lw	a4,-20(s0)
     424:	400127b7          	lui	a5,0x40012
     428:	40078793          	addi	a5,a5,1024 # 40012400 <_eusrstack+0x2000e400>
     42c:	00f71c63          	bne	a4,a5,444 <ADC_DeInit+0x30>
    {
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, ENABLE);
     430:	4585                	li	a1,1
     432:	20000513          	li	a0,512
     436:	754040ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_ADC1, DISABLE);
     43a:	4581                	li	a1,0
     43c:	20000513          	li	a0,512
     440:	74a040ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
    }
}
     444:	0001                	nop
     446:	40f2                	lw	ra,28(sp)
     448:	4462                	lw	s0,24(sp)
     44a:	6105                	addi	sp,sp,32
     44c:	8082                	ret

0000044e <ADC_Init>:
 *        peripheral.
 *
 * @return  none
 */
void ADC_Init(ADC_TypeDef *ADCx, ADC_InitTypeDef *ADC_InitStruct)
{
     44e:	7179                	addi	sp,sp,-48
     450:	d622                	sw	s0,44(sp)
     452:	1800                	addi	s0,sp,48
     454:	fca42e23          	sw	a0,-36(s0)
     458:	fcb42c23          	sw	a1,-40(s0)
    uint32_t tmpreg1 = 0;
     45c:	fe042623          	sw	zero,-20(s0)
    uint8_t  tmpreg2 = 0;
     460:	fe0405a3          	sb	zero,-21(s0)

    tmpreg1 = ADCx->CTLR1;
     464:	fdc42783          	lw	a5,-36(s0)
     468:	43dc                	lw	a5,4(a5)
     46a:	fef42623          	sw	a5,-20(s0)
    tmpreg1 &= CTLR1_CLEAR_Mask;
     46e:	fec42703          	lw	a4,-20(s0)
     472:	e0f107b7          	lui	a5,0xe0f10
     476:	eff78793          	addi	a5,a5,-257 # e0f0feff <_eusrstack+0xc0f0beff>
     47a:	8ff9                	and	a5,a5,a4
     47c:	fef42623          	sw	a5,-20(s0)
    tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | (uint32_t)ADC_InitStruct->ADC_OutputBuffer |
     480:	fd842783          	lw	a5,-40(s0)
     484:	4398                	lw	a4,0(a5)
     486:	fd842783          	lw	a5,-40(s0)
     48a:	4f9c                	lw	a5,24(a5)
     48c:	8f5d                	or	a4,a4,a5
                          (uint32_t)ADC_InitStruct->ADC_Pga | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
     48e:	fd842783          	lw	a5,-40(s0)
     492:	4fdc                	lw	a5,28(a5)
    tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | (uint32_t)ADC_InitStruct->ADC_OutputBuffer |
     494:	8f5d                	or	a4,a4,a5
                          (uint32_t)ADC_InitStruct->ADC_Pga | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
     496:	fd842783          	lw	a5,-40(s0)
     49a:	43dc                	lw	a5,4(a5)
     49c:	07a2                	slli	a5,a5,0x8
    tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | (uint32_t)ADC_InitStruct->ADC_OutputBuffer |
     49e:	8fd9                	or	a5,a5,a4
     4a0:	fec42703          	lw	a4,-20(s0)
     4a4:	8fd9                	or	a5,a5,a4
     4a6:	fef42623          	sw	a5,-20(s0)
    ADCx->CTLR1 = tmpreg1;
     4aa:	fdc42783          	lw	a5,-36(s0)
     4ae:	fec42703          	lw	a4,-20(s0)
     4b2:	c3d8                	sw	a4,4(a5)

    tmpreg1 = ADCx->CTLR2;
     4b4:	fdc42783          	lw	a5,-36(s0)
     4b8:	479c                	lw	a5,8(a5)
     4ba:	fef42623          	sw	a5,-20(s0)
    tmpreg1 &= CTLR2_CLEAR_Mask;
     4be:	fec42703          	lw	a4,-20(s0)
     4c2:	fff1f7b7          	lui	a5,0xfff1f
     4c6:	7fd78793          	addi	a5,a5,2045 # fff1f7fd <_eusrstack+0xdff1b7fd>
     4ca:	8ff9                	and	a5,a5,a4
     4cc:	fef42623          	sw	a5,-20(s0)
    tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
     4d0:	fd842783          	lw	a5,-40(s0)
     4d4:	4b98                	lw	a4,16(a5)
     4d6:	fd842783          	lw	a5,-40(s0)
     4da:	47dc                	lw	a5,12(a5)
     4dc:	8f5d                	or	a4,a4,a5
                          ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
     4de:	fd842783          	lw	a5,-40(s0)
     4e2:	479c                	lw	a5,8(a5)
     4e4:	0786                	slli	a5,a5,0x1
    tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
     4e6:	8fd9                	or	a5,a5,a4
     4e8:	fec42703          	lw	a4,-20(s0)
     4ec:	8fd9                	or	a5,a5,a4
     4ee:	fef42623          	sw	a5,-20(s0)
    ADCx->CTLR2 = tmpreg1;
     4f2:	fdc42783          	lw	a5,-36(s0)
     4f6:	fec42703          	lw	a4,-20(s0)
     4fa:	c798                	sw	a4,8(a5)

    tmpreg1 = ADCx->RSQR1;
     4fc:	fdc42783          	lw	a5,-36(s0)
     500:	57dc                	lw	a5,44(a5)
     502:	fef42623          	sw	a5,-20(s0)
    tmpreg1 &= RSQR1_CLEAR_Mask;
     506:	fec42703          	lw	a4,-20(s0)
     50a:	ff1007b7          	lui	a5,0xff100
     50e:	17fd                	addi	a5,a5,-1
     510:	8ff9                	and	a5,a5,a4
     512:	fef42623          	sw	a5,-20(s0)
    tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
     516:	fd842783          	lw	a5,-40(s0)
     51a:	0147c783          	lbu	a5,20(a5) # ff100014 <_eusrstack+0xdf0fc014>
     51e:	17fd                	addi	a5,a5,-1
     520:	0ff7f713          	andi	a4,a5,255
     524:	feb44783          	lbu	a5,-21(s0)
     528:	8fd9                	or	a5,a5,a4
     52a:	fef405a3          	sb	a5,-21(s0)
    tmpreg1 |= (uint32_t)tmpreg2 << 20;
     52e:	feb44783          	lbu	a5,-21(s0)
     532:	07d2                	slli	a5,a5,0x14
     534:	fec42703          	lw	a4,-20(s0)
     538:	8fd9                	or	a5,a5,a4
     53a:	fef42623          	sw	a5,-20(s0)
    ADCx->RSQR1 = tmpreg1;
     53e:	fdc42783          	lw	a5,-36(s0)
     542:	fec42703          	lw	a4,-20(s0)
     546:	d7d8                	sw	a4,44(a5)
}
     548:	0001                	nop
     54a:	5432                	lw	s0,44(sp)
     54c:	6145                	addi	sp,sp,48
     54e:	8082                	ret

00000550 <ADC_StructInit>:
 *        peripheral.
 *
 * @return  none
 */
void ADC_StructInit(ADC_InitTypeDef *ADC_InitStruct)
{
     550:	1101                	addi	sp,sp,-32
     552:	ce22                	sw	s0,28(sp)
     554:	1000                	addi	s0,sp,32
     556:	fea42623          	sw	a0,-20(s0)
    ADC_InitStruct->ADC_Mode = ADC_Mode_Independent;
     55a:	fec42783          	lw	a5,-20(s0)
     55e:	0007a023          	sw	zero,0(a5)
    ADC_InitStruct->ADC_ScanConvMode = DISABLE;
     562:	fec42783          	lw	a5,-20(s0)
     566:	0007a223          	sw	zero,4(a5)
    ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
     56a:	fec42783          	lw	a5,-20(s0)
     56e:	0007a423          	sw	zero,8(a5)
    ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
     572:	fec42783          	lw	a5,-20(s0)
     576:	00020737          	lui	a4,0x20
     57a:	c7d8                	sw	a4,12(a5)
    ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
     57c:	fec42783          	lw	a5,-20(s0)
     580:	0007a823          	sw	zero,16(a5)
    ADC_InitStruct->ADC_NbrOfChannel = 1;
     584:	fec42783          	lw	a5,-20(s0)
     588:	4705                	li	a4,1
     58a:	00e78a23          	sb	a4,20(a5)
}
     58e:	0001                	nop
     590:	4472                	lw	s0,28(sp)
     592:	6105                	addi	sp,sp,32
     594:	8082                	ret

00000596 <ADC_Cmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void ADC_Cmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     596:	1101                	addi	sp,sp,-32
     598:	ce22                	sw	s0,28(sp)
     59a:	1000                	addi	s0,sp,32
     59c:	fea42623          	sw	a0,-20(s0)
     5a0:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     5a4:	fe842783          	lw	a5,-24(s0)
     5a8:	cb91                	beqz	a5,5bc <ADC_Cmd+0x26>
    {
        ADCx->CTLR2 |= CTLR2_ADON_Set;
     5aa:	fec42783          	lw	a5,-20(s0)
     5ae:	479c                	lw	a5,8(a5)
     5b0:	0017e713          	ori	a4,a5,1
     5b4:	fec42783          	lw	a5,-20(s0)
     5b8:	c798                	sw	a4,8(a5)
    }
    else
    {
        ADCx->CTLR2 &= CTLR2_ADON_Reset;
    }
}
     5ba:	a809                	j	5cc <ADC_Cmd+0x36>
        ADCx->CTLR2 &= CTLR2_ADON_Reset;
     5bc:	fec42783          	lw	a5,-20(s0)
     5c0:	479c                	lw	a5,8(a5)
     5c2:	ffe7f713          	andi	a4,a5,-2
     5c6:	fec42783          	lw	a5,-20(s0)
     5ca:	c798                	sw	a4,8(a5)
}
     5cc:	0001                	nop
     5ce:	4472                	lw	s0,28(sp)
     5d0:	6105                	addi	sp,sp,32
     5d2:	8082                	ret

000005d4 <ADC_DMACmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void ADC_DMACmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     5d4:	1101                	addi	sp,sp,-32
     5d6:	ce22                	sw	s0,28(sp)
     5d8:	1000                	addi	s0,sp,32
     5da:	fea42623          	sw	a0,-20(s0)
     5de:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     5e2:	fe842783          	lw	a5,-24(s0)
     5e6:	cb91                	beqz	a5,5fa <ADC_DMACmd+0x26>
    {
        ADCx->CTLR2 |= CTLR2_DMA_Set;
     5e8:	fec42783          	lw	a5,-20(s0)
     5ec:	479c                	lw	a5,8(a5)
     5ee:	1007e713          	ori	a4,a5,256
     5f2:	fec42783          	lw	a5,-20(s0)
     5f6:	c798                	sw	a4,8(a5)
    }
    else
    {
        ADCx->CTLR2 &= CTLR2_DMA_Reset;
    }
}
     5f8:	a809                	j	60a <ADC_DMACmd+0x36>
        ADCx->CTLR2 &= CTLR2_DMA_Reset;
     5fa:	fec42783          	lw	a5,-20(s0)
     5fe:	479c                	lw	a5,8(a5)
     600:	eff7f713          	andi	a4,a5,-257
     604:	fec42783          	lw	a5,-20(s0)
     608:	c798                	sw	a4,8(a5)
}
     60a:	0001                	nop
     60c:	4472                	lw	s0,28(sp)
     60e:	6105                	addi	sp,sp,32
     610:	8082                	ret

00000612 <ADC_ITConfig>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void ADC_ITConfig(ADC_TypeDef *ADCx, uint16_t ADC_IT, FunctionalState NewState)
{
     612:	7179                	addi	sp,sp,-48
     614:	d622                	sw	s0,44(sp)
     616:	1800                	addi	s0,sp,48
     618:	fca42e23          	sw	a0,-36(s0)
     61c:	87ae                	mv	a5,a1
     61e:	fcc42a23          	sw	a2,-44(s0)
     622:	fcf41d23          	sh	a5,-38(s0)
    uint8_t itmask = 0;
     626:	fe0407a3          	sb	zero,-17(s0)

    itmask = (uint8_t)ADC_IT;
     62a:	fda45783          	lhu	a5,-38(s0)
     62e:	fef407a3          	sb	a5,-17(s0)

    if(NewState != DISABLE)
     632:	fd442783          	lw	a5,-44(s0)
     636:	cb99                	beqz	a5,64c <ADC_ITConfig+0x3a>
    {
        ADCx->CTLR1 |= itmask;
     638:	fdc42783          	lw	a5,-36(s0)
     63c:	43d8                	lw	a4,4(a5)
     63e:	fef44783          	lbu	a5,-17(s0)
     642:	8f5d                	or	a4,a4,a5
     644:	fdc42783          	lw	a5,-36(s0)
     648:	c3d8                	sw	a4,4(a5)
    }
    else
    {
        ADCx->CTLR1 &= (~(uint32_t)itmask);
    }
}
     64a:	a821                	j	662 <ADC_ITConfig+0x50>
        ADCx->CTLR1 &= (~(uint32_t)itmask);
     64c:	fdc42783          	lw	a5,-36(s0)
     650:	43d8                	lw	a4,4(a5)
     652:	fef44783          	lbu	a5,-17(s0)
     656:	fff7c793          	not	a5,a5
     65a:	8f7d                	and	a4,a4,a5
     65c:	fdc42783          	lw	a5,-36(s0)
     660:	c3d8                	sw	a4,4(a5)
}
     662:	0001                	nop
     664:	5432                	lw	s0,44(sp)
     666:	6145                	addi	sp,sp,48
     668:	8082                	ret

0000066a <ADC_SoftwareStartConvCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  None
 */
void ADC_SoftwareStartConvCmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     66a:	1101                	addi	sp,sp,-32
     66c:	ce22                	sw	s0,28(sp)
     66e:	1000                	addi	s0,sp,32
     670:	fea42623          	sw	a0,-20(s0)
     674:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     678:	fe842783          	lw	a5,-24(s0)
     67c:	cb99                	beqz	a5,692 <ADC_SoftwareStartConvCmd+0x28>
    {
        ADCx->CTLR2 |= CTLR2_EXTTRIG_SWSTART_Set;
     67e:	fec42783          	lw	a5,-20(s0)
     682:	4798                	lw	a4,8(a5)
     684:	005007b7          	lui	a5,0x500
     688:	8f5d                	or	a4,a4,a5
     68a:	fec42783          	lw	a5,-20(s0)
     68e:	c798                	sw	a4,8(a5)
    }
    else
    {
        ADCx->CTLR2 &= CTLR2_EXTTRIG_SWSTART_Reset;
    }
}
     690:	a819                	j	6a6 <ADC_SoftwareStartConvCmd+0x3c>
        ADCx->CTLR2 &= CTLR2_EXTTRIG_SWSTART_Reset;
     692:	fec42783          	lw	a5,-20(s0)
     696:	4798                	lw	a4,8(a5)
     698:	ffb007b7          	lui	a5,0xffb00
     69c:	17fd                	addi	a5,a5,-1
     69e:	8f7d                	and	a4,a4,a5
     6a0:	fec42783          	lw	a5,-20(s0)
     6a4:	c798                	sw	a4,8(a5)
}
     6a6:	0001                	nop
     6a8:	4472                	lw	s0,28(sp)
     6aa:	6105                	addi	sp,sp,32
     6ac:	8082                	ret

000006ae <ADC_GetSoftwareStartConvStatus>:
 *
 * @return  FlagStatus - SET or RESET.
 */

FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef *ADCx)
{
     6ae:	7179                	addi	sp,sp,-48
     6b0:	d622                	sw	s0,44(sp)
     6b2:	1800                	addi	s0,sp,48
     6b4:	fca42e23          	sw	a0,-36(s0)
    FlagStatus bitstatus = RESET;
     6b8:	fe042623          	sw	zero,-20(s0)

    if((ADCx->CTLR2 & CTLR2_SWSTART_Set) != (uint32_t)RESET)
     6bc:	fdc42783          	lw	a5,-36(s0)
     6c0:	4798                	lw	a4,8(a5)
     6c2:	004007b7          	lui	a5,0x400
     6c6:	8ff9                	and	a5,a5,a4
     6c8:	c789                	beqz	a5,6d2 <ADC_GetSoftwareStartConvStatus+0x24>
    {
        bitstatus = SET;
     6ca:	4785                	li	a5,1
     6cc:	fef42623          	sw	a5,-20(s0)
     6d0:	a019                	j	6d6 <ADC_GetSoftwareStartConvStatus+0x28>
    }
    else
    {
        bitstatus = RESET;
     6d2:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
     6d6:	fec42783          	lw	a5,-20(s0)
}
     6da:	853e                	mv	a0,a5
     6dc:	5432                	lw	s0,44(sp)
     6de:	6145                	addi	sp,sp,48
     6e0:	8082                	ret

000006e2 <ADC_DiscModeChannelCountConfig>:
 *            count value(1-8).
 *
 * @return  None
 */
void ADC_DiscModeChannelCountConfig(ADC_TypeDef *ADCx, uint8_t Number)
{
     6e2:	7179                	addi	sp,sp,-48
     6e4:	d622                	sw	s0,44(sp)
     6e6:	1800                	addi	s0,sp,48
     6e8:	fca42e23          	sw	a0,-36(s0)
     6ec:	87ae                	mv	a5,a1
     6ee:	fcf40da3          	sb	a5,-37(s0)
    uint32_t tmpreg1 = 0;
     6f2:	fe042623          	sw	zero,-20(s0)
    uint32_t tmpreg2 = 0;
     6f6:	fe042423          	sw	zero,-24(s0)

    tmpreg1 = ADCx->CTLR1;
     6fa:	fdc42783          	lw	a5,-36(s0)
     6fe:	43dc                	lw	a5,4(a5)
     700:	fef42623          	sw	a5,-20(s0)
    tmpreg1 &= CTLR1_DISCNUM_Reset;
     704:	fec42703          	lw	a4,-20(s0)
     708:	77c9                	lui	a5,0xffff2
     70a:	17fd                	addi	a5,a5,-1
     70c:	8ff9                	and	a5,a5,a4
     70e:	fef42623          	sw	a5,-20(s0)
    tmpreg2 = Number - 1;
     712:	fdb44783          	lbu	a5,-37(s0)
     716:	17fd                	addi	a5,a5,-1
     718:	fef42423          	sw	a5,-24(s0)
    tmpreg1 |= tmpreg2 << 13;
     71c:	fe842783          	lw	a5,-24(s0)
     720:	07b6                	slli	a5,a5,0xd
     722:	fec42703          	lw	a4,-20(s0)
     726:	8fd9                	or	a5,a5,a4
     728:	fef42623          	sw	a5,-20(s0)
    ADCx->CTLR1 = tmpreg1;
     72c:	fdc42783          	lw	a5,-36(s0)
     730:	fec42703          	lw	a4,-20(s0)
     734:	c3d8                	sw	a4,4(a5)
}
     736:	0001                	nop
     738:	5432                	lw	s0,44(sp)
     73a:	6145                	addi	sp,sp,48
     73c:	8082                	ret

0000073e <ADC_DiscModeCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  None
 */
void ADC_DiscModeCmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     73e:	1101                	addi	sp,sp,-32
     740:	ce22                	sw	s0,28(sp)
     742:	1000                	addi	s0,sp,32
     744:	fea42623          	sw	a0,-20(s0)
     748:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     74c:	fe842783          	lw	a5,-24(s0)
     750:	cf81                	beqz	a5,768 <ADC_DiscModeCmd+0x2a>
    {
        ADCx->CTLR1 |= CTLR1_DISCEN_Set;
     752:	fec42783          	lw	a5,-20(s0)
     756:	43d8                	lw	a4,4(a5)
     758:	6785                	lui	a5,0x1
     75a:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
     75e:	8f5d                	or	a4,a4,a5
     760:	fec42783          	lw	a5,-20(s0)
     764:	c3d8                	sw	a4,4(a5)
    }
    else
    {
        ADCx->CTLR1 &= CTLR1_DISCEN_Reset;
    }
}
     766:	a819                	j	77c <ADC_DiscModeCmd+0x3e>
        ADCx->CTLR1 &= CTLR1_DISCEN_Reset;
     768:	fec42783          	lw	a5,-20(s0)
     76c:	43d8                	lw	a4,4(a5)
     76e:	77fd                	lui	a5,0xfffff
     770:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
     774:	8f7d                	and	a4,a4,a5
     776:	fec42783          	lw	a5,-20(s0)
     77a:	c3d8                	sw	a4,4(a5)
}
     77c:	0001                	nop
     77e:	4472                	lw	s0,28(sp)
     780:	6105                	addi	sp,sp,32
     782:	8082                	ret

00000784 <ADC_RegularChannelConfig>:
 *            ADC_SampleTime_11Cycles - Sample time equal to 11 cycles.
 *
 * @return  None
 */
void ADC_RegularChannelConfig(ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     784:	7179                	addi	sp,sp,-48
     786:	d622                	sw	s0,44(sp)
     788:	1800                	addi	s0,sp,48
     78a:	fca42e23          	sw	a0,-36(s0)
     78e:	87ae                	mv	a5,a1
     790:	8736                	mv	a4,a3
     792:	fcf40da3          	sb	a5,-37(s0)
     796:	87b2                	mv	a5,a2
     798:	fcf40d23          	sb	a5,-38(s0)
     79c:	87ba                	mv	a5,a4
     79e:	fcf40ca3          	sb	a5,-39(s0)
    uint32_t tmpreg1 = 0, tmpreg2 = 0;
     7a2:	fe042623          	sw	zero,-20(s0)
     7a6:	fe042423          	sw	zero,-24(s0)

    if(ADC_Channel > ADC_Channel_9)
     7aa:	fdb44703          	lbu	a4,-37(s0)
     7ae:	47a5                	li	a5,9
     7b0:	06e7f663          	bgeu	a5,a4,81c <__stack_size+0x1c>
    {
        tmpreg1 = ADCx->SAMPTR1;
     7b4:	fdc42783          	lw	a5,-36(s0)
     7b8:	47dc                	lw	a5,12(a5)
     7ba:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = SAMPTR1_SMP_Set << (3 * (ADC_Channel - 10));
     7be:	fdb44783          	lbu	a5,-37(s0)
     7c2:	ff678713          	addi	a4,a5,-10
     7c6:	87ba                	mv	a5,a4
     7c8:	0786                	slli	a5,a5,0x1
     7ca:	97ba                	add	a5,a5,a4
     7cc:	471d                	li	a4,7
     7ce:	00f717b3          	sll	a5,a4,a5
     7d2:	fef42423          	sw	a5,-24(s0)
        tmpreg1 &= ~tmpreg2;
     7d6:	fe842783          	lw	a5,-24(s0)
     7da:	fff7c793          	not	a5,a5
     7de:	fec42703          	lw	a4,-20(s0)
     7e2:	8ff9                	and	a5,a5,a4
     7e4:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
     7e8:	fd944683          	lbu	a3,-39(s0)
     7ec:	fdb44783          	lbu	a5,-37(s0)
     7f0:	ff678713          	addi	a4,a5,-10
     7f4:	87ba                	mv	a5,a4
     7f6:	0786                	slli	a5,a5,0x1
     7f8:	97ba                	add	a5,a5,a4
     7fa:	00f697b3          	sll	a5,a3,a5
     7fe:	fef42423          	sw	a5,-24(s0)
        tmpreg1 |= tmpreg2;
     802:	fec42703          	lw	a4,-20(s0)
     806:	fe842783          	lw	a5,-24(s0)
     80a:	8fd9                	or	a5,a5,a4
     80c:	fef42623          	sw	a5,-20(s0)
        ADCx->SAMPTR1 = tmpreg1;
     810:	fdc42783          	lw	a5,-36(s0)
     814:	fec42703          	lw	a4,-20(s0)
     818:	c7d8                	sw	a4,12(a5)
     81a:	a085                	j	87a <__stack_size+0x7a>
    }
    else
    {
        tmpreg1 = ADCx->SAMPTR2;
     81c:	fdc42783          	lw	a5,-36(s0)
     820:	4b9c                	lw	a5,16(a5)
     822:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = SAMPTR2_SMP_Set << (3 * ADC_Channel);
     826:	fdb44703          	lbu	a4,-37(s0)
     82a:	87ba                	mv	a5,a4
     82c:	0786                	slli	a5,a5,0x1
     82e:	97ba                	add	a5,a5,a4
     830:	471d                	li	a4,7
     832:	00f717b3          	sll	a5,a4,a5
     836:	fef42423          	sw	a5,-24(s0)
        tmpreg1 &= ~tmpreg2;
     83a:	fe842783          	lw	a5,-24(s0)
     83e:	fff7c793          	not	a5,a5
     842:	fec42703          	lw	a4,-20(s0)
     846:	8ff9                	and	a5,a5,a4
     848:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     84c:	fd944683          	lbu	a3,-39(s0)
     850:	fdb44703          	lbu	a4,-37(s0)
     854:	87ba                	mv	a5,a4
     856:	0786                	slli	a5,a5,0x1
     858:	97ba                	add	a5,a5,a4
     85a:	00f697b3          	sll	a5,a3,a5
     85e:	fef42423          	sw	a5,-24(s0)
        tmpreg1 |= tmpreg2;
     862:	fec42703          	lw	a4,-20(s0)
     866:	fe842783          	lw	a5,-24(s0)
     86a:	8fd9                	or	a5,a5,a4
     86c:	fef42623          	sw	a5,-20(s0)
        ADCx->SAMPTR2 = tmpreg1;
     870:	fdc42783          	lw	a5,-36(s0)
     874:	fec42703          	lw	a4,-20(s0)
     878:	cb98                	sw	a4,16(a5)
    }

    if(Rank < 7)
     87a:	fda44703          	lbu	a4,-38(s0)
     87e:	4799                	li	a5,6
     880:	06e7e663          	bltu	a5,a4,8ec <__stack_size+0xec>
    {
        tmpreg1 = ADCx->RSQR3;
     884:	fdc42783          	lw	a5,-36(s0)
     888:	5bdc                	lw	a5,52(a5)
     88a:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = RSQR3_SQ_Set << (5 * (Rank - 1));
     88e:	fda44783          	lbu	a5,-38(s0)
     892:	fff78713          	addi	a4,a5,-1
     896:	87ba                	mv	a5,a4
     898:	078a                	slli	a5,a5,0x2
     89a:	97ba                	add	a5,a5,a4
     89c:	477d                	li	a4,31
     89e:	00f717b3          	sll	a5,a4,a5
     8a2:	fef42423          	sw	a5,-24(s0)
        tmpreg1 &= ~tmpreg2;
     8a6:	fe842783          	lw	a5,-24(s0)
     8aa:	fff7c793          	not	a5,a5
     8ae:	fec42703          	lw	a4,-20(s0)
     8b2:	8ff9                	and	a5,a5,a4
     8b4:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
     8b8:	fdb44683          	lbu	a3,-37(s0)
     8bc:	fda44783          	lbu	a5,-38(s0)
     8c0:	fff78713          	addi	a4,a5,-1
     8c4:	87ba                	mv	a5,a4
     8c6:	078a                	slli	a5,a5,0x2
     8c8:	97ba                	add	a5,a5,a4
     8ca:	00f697b3          	sll	a5,a3,a5
     8ce:	fef42423          	sw	a5,-24(s0)
        tmpreg1 |= tmpreg2;
     8d2:	fec42703          	lw	a4,-20(s0)
     8d6:	fe842783          	lw	a5,-24(s0)
     8da:	8fd9                	or	a5,a5,a4
     8dc:	fef42623          	sw	a5,-20(s0)
        ADCx->RSQR3 = tmpreg1;
     8e0:	fdc42783          	lw	a5,-36(s0)
     8e4:	fec42703          	lw	a4,-20(s0)
     8e8:	dbd8                	sw	a4,52(a5)
        tmpreg1 &= ~tmpreg2;
        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
        tmpreg1 |= tmpreg2;
        ADCx->RSQR1 = tmpreg1;
    }
}
     8ea:	a8e9                	j	9c4 <__stack_size+0x1c4>
    else if(Rank < 13)
     8ec:	fda44703          	lbu	a4,-38(s0)
     8f0:	47b1                	li	a5,12
     8f2:	06e7e663          	bltu	a5,a4,95e <__stack_size+0x15e>
        tmpreg1 = ADCx->RSQR2;
     8f6:	fdc42783          	lw	a5,-36(s0)
     8fa:	5b9c                	lw	a5,48(a5)
     8fc:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = RSQR2_SQ_Set << (5 * (Rank - 7));
     900:	fda44783          	lbu	a5,-38(s0)
     904:	ff978713          	addi	a4,a5,-7
     908:	87ba                	mv	a5,a4
     90a:	078a                	slli	a5,a5,0x2
     90c:	97ba                	add	a5,a5,a4
     90e:	477d                	li	a4,31
     910:	00f717b3          	sll	a5,a4,a5
     914:	fef42423          	sw	a5,-24(s0)
        tmpreg1 &= ~tmpreg2;
     918:	fe842783          	lw	a5,-24(s0)
     91c:	fff7c793          	not	a5,a5
     920:	fec42703          	lw	a4,-20(s0)
     924:	8ff9                	and	a5,a5,a4
     926:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
     92a:	fdb44683          	lbu	a3,-37(s0)
     92e:	fda44783          	lbu	a5,-38(s0)
     932:	ff978713          	addi	a4,a5,-7
     936:	87ba                	mv	a5,a4
     938:	078a                	slli	a5,a5,0x2
     93a:	97ba                	add	a5,a5,a4
     93c:	00f697b3          	sll	a5,a3,a5
     940:	fef42423          	sw	a5,-24(s0)
        tmpreg1 |= tmpreg2;
     944:	fec42703          	lw	a4,-20(s0)
     948:	fe842783          	lw	a5,-24(s0)
     94c:	8fd9                	or	a5,a5,a4
     94e:	fef42623          	sw	a5,-20(s0)
        ADCx->RSQR2 = tmpreg1;
     952:	fdc42783          	lw	a5,-36(s0)
     956:	fec42703          	lw	a4,-20(s0)
     95a:	db98                	sw	a4,48(a5)
}
     95c:	a0a5                	j	9c4 <__stack_size+0x1c4>
        tmpreg1 = ADCx->RSQR1;
     95e:	fdc42783          	lw	a5,-36(s0)
     962:	57dc                	lw	a5,44(a5)
     964:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = RSQR1_SQ_Set << (5 * (Rank - 13));
     968:	fda44783          	lbu	a5,-38(s0)
     96c:	ff378713          	addi	a4,a5,-13
     970:	87ba                	mv	a5,a4
     972:	078a                	slli	a5,a5,0x2
     974:	97ba                	add	a5,a5,a4
     976:	477d                	li	a4,31
     978:	00f717b3          	sll	a5,a4,a5
     97c:	fef42423          	sw	a5,-24(s0)
        tmpreg1 &= ~tmpreg2;
     980:	fe842783          	lw	a5,-24(s0)
     984:	fff7c793          	not	a5,a5
     988:	fec42703          	lw	a4,-20(s0)
     98c:	8ff9                	and	a5,a5,a4
     98e:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
     992:	fdb44683          	lbu	a3,-37(s0)
     996:	fda44783          	lbu	a5,-38(s0)
     99a:	ff378713          	addi	a4,a5,-13
     99e:	87ba                	mv	a5,a4
     9a0:	078a                	slli	a5,a5,0x2
     9a2:	97ba                	add	a5,a5,a4
     9a4:	00f697b3          	sll	a5,a3,a5
     9a8:	fef42423          	sw	a5,-24(s0)
        tmpreg1 |= tmpreg2;
     9ac:	fec42703          	lw	a4,-20(s0)
     9b0:	fe842783          	lw	a5,-24(s0)
     9b4:	8fd9                	or	a5,a5,a4
     9b6:	fef42623          	sw	a5,-20(s0)
        ADCx->RSQR1 = tmpreg1;
     9ba:	fdc42783          	lw	a5,-36(s0)
     9be:	fec42703          	lw	a4,-20(s0)
     9c2:	d7d8                	sw	a4,44(a5)
}
     9c4:	0001                	nop
     9c6:	5432                	lw	s0,44(sp)
     9c8:	6145                	addi	sp,sp,48
     9ca:	8082                	ret

000009cc <ADC_ExternalTrigConvCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  None
 */
void ADC_ExternalTrigConvCmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     9cc:	1101                	addi	sp,sp,-32
     9ce:	ce22                	sw	s0,28(sp)
     9d0:	1000                	addi	s0,sp,32
     9d2:	fea42623          	sw	a0,-20(s0)
     9d6:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     9da:	fe842783          	lw	a5,-24(s0)
     9de:	cb99                	beqz	a5,9f4 <ADC_ExternalTrigConvCmd+0x28>
    {
        ADCx->CTLR2 |= CTLR2_EXTTRIG_Set;
     9e0:	fec42783          	lw	a5,-20(s0)
     9e4:	4798                	lw	a4,8(a5)
     9e6:	001007b7          	lui	a5,0x100
     9ea:	8f5d                	or	a4,a4,a5
     9ec:	fec42783          	lw	a5,-20(s0)
     9f0:	c798                	sw	a4,8(a5)
    }
    else
    {
        ADCx->CTLR2 &= CTLR2_EXTTRIG_Reset;
    }
}
     9f2:	a819                	j	a08 <ADC_ExternalTrigConvCmd+0x3c>
        ADCx->CTLR2 &= CTLR2_EXTTRIG_Reset;
     9f4:	fec42783          	lw	a5,-20(s0)
     9f8:	4798                	lw	a4,8(a5)
     9fa:	fff007b7          	lui	a5,0xfff00
     9fe:	17fd                	addi	a5,a5,-1
     a00:	8f7d                	and	a4,a4,a5
     a02:	fec42783          	lw	a5,-20(s0)
     a06:	c798                	sw	a4,8(a5)
}
     a08:	0001                	nop
     a0a:	4472                	lw	s0,28(sp)
     a0c:	6105                	addi	sp,sp,32
     a0e:	8082                	ret

00000a10 <ADC_GetConversionValue>:
 * @param   ADCx - where x can be 1 to select the ADC peripheral.
 *
 * @return  ADCx->RDATAR - The Data conversion value.
 */
uint16_t ADC_GetConversionValue(ADC_TypeDef *ADCx)
{
     a10:	1101                	addi	sp,sp,-32
     a12:	ce22                	sw	s0,28(sp)
     a14:	1000                	addi	s0,sp,32
     a16:	fea42623          	sw	a0,-20(s0)
    return (uint16_t)ADCx->RDATAR;
     a1a:	fec42783          	lw	a5,-20(s0)
     a1e:	47fc                	lw	a5,76(a5)
     a20:	07c2                	slli	a5,a5,0x10
     a22:	83c1                	srli	a5,a5,0x10
}
     a24:	853e                	mv	a0,a5
     a26:	4472                	lw	s0,28(sp)
     a28:	6105                	addi	sp,sp,32
     a2a:	8082                	ret

00000a2c <ADC_GetDualModeConversionValue>:
 * @brief   Returns the last ADC1 conversion result data in dual mode.
 *
 * @return  RDATAR_ADDRESS - The Data conversion value.
 */
uint32_t ADC_GetDualModeConversionValue(void)
{
     a2c:	1141                	addi	sp,sp,-16
     a2e:	c622                	sw	s0,12(sp)
     a30:	0800                	addi	s0,sp,16
    return (*(__IO uint32_t *)RDATAR_ADDRESS);
     a32:	400127b7          	lui	a5,0x40012
     a36:	44c78793          	addi	a5,a5,1100 # 4001244c <_eusrstack+0x2000e44c>
     a3a:	439c                	lw	a5,0(a5)
}
     a3c:	853e                	mv	a0,a5
     a3e:	4432                	lw	s0,12(sp)
     a40:	0141                	addi	sp,sp,16
     a42:	8082                	ret

00000a44 <ADC_AutoInjectedConvCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  None
 */
void ADC_AutoInjectedConvCmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     a44:	1101                	addi	sp,sp,-32
     a46:	ce22                	sw	s0,28(sp)
     a48:	1000                	addi	s0,sp,32
     a4a:	fea42623          	sw	a0,-20(s0)
     a4e:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     a52:	fe842783          	lw	a5,-24(s0)
     a56:	cb91                	beqz	a5,a6a <ADC_AutoInjectedConvCmd+0x26>
    {
        ADCx->CTLR1 |= CTLR1_JAUTO_Set;
     a58:	fec42783          	lw	a5,-20(s0)
     a5c:	43dc                	lw	a5,4(a5)
     a5e:	4007e713          	ori	a4,a5,1024
     a62:	fec42783          	lw	a5,-20(s0)
     a66:	c3d8                	sw	a4,4(a5)
    }
    else
    {
        ADCx->CTLR1 &= CTLR1_JAUTO_Reset;
    }
}
     a68:	a809                	j	a7a <ADC_AutoInjectedConvCmd+0x36>
        ADCx->CTLR1 &= CTLR1_JAUTO_Reset;
     a6a:	fec42783          	lw	a5,-20(s0)
     a6e:	43dc                	lw	a5,4(a5)
     a70:	bff7f713          	andi	a4,a5,-1025
     a74:	fec42783          	lw	a5,-20(s0)
     a78:	c3d8                	sw	a4,4(a5)
}
     a7a:	0001                	nop
     a7c:	4472                	lw	s0,28(sp)
     a7e:	6105                	addi	sp,sp,32
     a80:	8082                	ret

00000a82 <ADC_InjectedDiscModeCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  None
 */
void ADC_InjectedDiscModeCmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     a82:	1101                	addi	sp,sp,-32
     a84:	ce22                	sw	s0,28(sp)
     a86:	1000                	addi	s0,sp,32
     a88:	fea42623          	sw	a0,-20(s0)
     a8c:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     a90:	fe842783          	lw	a5,-24(s0)
     a94:	cb91                	beqz	a5,aa8 <ADC_InjectedDiscModeCmd+0x26>
    {
        ADCx->CTLR1 |= CTLR1_JDISCEN_Set;
     a96:	fec42783          	lw	a5,-20(s0)
     a9a:	43d8                	lw	a4,4(a5)
     a9c:	6785                	lui	a5,0x1
     a9e:	8f5d                	or	a4,a4,a5
     aa0:	fec42783          	lw	a5,-20(s0)
     aa4:	c3d8                	sw	a4,4(a5)
    }
    else
    {
        ADCx->CTLR1 &= CTLR1_JDISCEN_Reset;
    }
}
     aa6:	a811                	j	aba <ADC_InjectedDiscModeCmd+0x38>
        ADCx->CTLR1 &= CTLR1_JDISCEN_Reset;
     aa8:	fec42783          	lw	a5,-20(s0)
     aac:	43d8                	lw	a4,4(a5)
     aae:	77fd                	lui	a5,0xfffff
     ab0:	17fd                	addi	a5,a5,-1
     ab2:	8f7d                	and	a4,a4,a5
     ab4:	fec42783          	lw	a5,-20(s0)
     ab8:	c3d8                	sw	a4,4(a5)
}
     aba:	0001                	nop
     abc:	4472                	lw	s0,28(sp)
     abe:	6105                	addi	sp,sp,32
     ac0:	8082                	ret

00000ac2 <ADC_ExternalTrigInjectedConvConfig>:
 *        by software and not by external trigger.
 *
 * @return  None
 */
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef *ADCx, uint32_t ADC_ExternalTrigInjecConv)
{
     ac2:	7179                	addi	sp,sp,-48
     ac4:	d622                	sw	s0,44(sp)
     ac6:	1800                	addi	s0,sp,48
     ac8:	fca42e23          	sw	a0,-36(s0)
     acc:	fcb42c23          	sw	a1,-40(s0)
    uint32_t tmpreg = 0;
     ad0:	fe042623          	sw	zero,-20(s0)

    tmpreg = ADCx->CTLR2;
     ad4:	fdc42783          	lw	a5,-36(s0)
     ad8:	479c                	lw	a5,8(a5)
     ada:	fef42623          	sw	a5,-20(s0)
    tmpreg &= CTLR2_JEXTSEL_Reset;
     ade:	fec42703          	lw	a4,-20(s0)
     ae2:	77e5                	lui	a5,0xffff9
     ae4:	17fd                	addi	a5,a5,-1
     ae6:	8ff9                	and	a5,a5,a4
     ae8:	fef42623          	sw	a5,-20(s0)
    tmpreg |= ADC_ExternalTrigInjecConv;
     aec:	fec42703          	lw	a4,-20(s0)
     af0:	fd842783          	lw	a5,-40(s0)
     af4:	8fd9                	or	a5,a5,a4
     af6:	fef42623          	sw	a5,-20(s0)
    ADCx->CTLR2 = tmpreg;
     afa:	fdc42783          	lw	a5,-36(s0)
     afe:	fec42703          	lw	a4,-20(s0)
     b02:	c798                	sw	a4,8(a5)
}
     b04:	0001                	nop
     b06:	5432                	lw	s0,44(sp)
     b08:	6145                	addi	sp,sp,48
     b0a:	8082                	ret

00000b0c <ADC_ExternalTrigInjectedConvCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  None
 */
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     b0c:	1101                	addi	sp,sp,-32
     b0e:	ce22                	sw	s0,28(sp)
     b10:	1000                	addi	s0,sp,32
     b12:	fea42623          	sw	a0,-20(s0)
     b16:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     b1a:	fe842783          	lw	a5,-24(s0)
     b1e:	cb91                	beqz	a5,b32 <ADC_ExternalTrigInjectedConvCmd+0x26>
    {
        ADCx->CTLR2 |= CTLR2_JEXTTRIG_Set;
     b20:	fec42783          	lw	a5,-20(s0)
     b24:	4798                	lw	a4,8(a5)
     b26:	67a1                	lui	a5,0x8
     b28:	8f5d                	or	a4,a4,a5
     b2a:	fec42783          	lw	a5,-20(s0)
     b2e:	c798                	sw	a4,8(a5)
    }
    else
    {
        ADCx->CTLR2 &= CTLR2_JEXTTRIG_Reset;
    }
}
     b30:	a811                	j	b44 <ADC_ExternalTrigInjectedConvCmd+0x38>
        ADCx->CTLR2 &= CTLR2_JEXTTRIG_Reset;
     b32:	fec42783          	lw	a5,-20(s0)
     b36:	4798                	lw	a4,8(a5)
     b38:	77e1                	lui	a5,0xffff8
     b3a:	17fd                	addi	a5,a5,-1
     b3c:	8f7d                	and	a4,a4,a5
     b3e:	fec42783          	lw	a5,-20(s0)
     b42:	c798                	sw	a4,8(a5)
}
     b44:	0001                	nop
     b46:	4472                	lw	s0,28(sp)
     b48:	6105                	addi	sp,sp,32
     b4a:	8082                	ret

00000b4c <ADC_SoftwareStartInjectedConvCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  None
 */
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
     b4c:	1101                	addi	sp,sp,-32
     b4e:	ce22                	sw	s0,28(sp)
     b50:	1000                	addi	s0,sp,32
     b52:	fea42623          	sw	a0,-20(s0)
     b56:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
     b5a:	fe842783          	lw	a5,-24(s0)
     b5e:	cb99                	beqz	a5,b74 <ADC_SoftwareStartInjectedConvCmd+0x28>
    {
        ADCx->CTLR2 |= CTLR2_JEXTTRIG_JSWSTART_Set;
     b60:	fec42783          	lw	a5,-20(s0)
     b64:	4798                	lw	a4,8(a5)
     b66:	002087b7          	lui	a5,0x208
     b6a:	8f5d                	or	a4,a4,a5
     b6c:	fec42783          	lw	a5,-20(s0)
     b70:	c798                	sw	a4,8(a5)
    }
    else
    {
        ADCx->CTLR2 &= CTLR2_JEXTTRIG_JSWSTART_Reset;
    }
}
     b72:	a819                	j	b88 <ADC_SoftwareStartInjectedConvCmd+0x3c>
        ADCx->CTLR2 &= CTLR2_JEXTTRIG_JSWSTART_Reset;
     b74:	fec42783          	lw	a5,-20(s0)
     b78:	4798                	lw	a4,8(a5)
     b7a:	ffdf87b7          	lui	a5,0xffdf8
     b7e:	17fd                	addi	a5,a5,-1
     b80:	8f7d                	and	a4,a4,a5
     b82:	fec42783          	lw	a5,-20(s0)
     b86:	c798                	sw	a4,8(a5)
}
     b88:	0001                	nop
     b8a:	4472                	lw	s0,28(sp)
     b8c:	6105                	addi	sp,sp,32
     b8e:	8082                	ret

00000b90 <ADC_GetSoftwareStartInjectedConvCmdStatus>:
 * @param   ADCx - where x can be 1 to select the ADC peripheral.
 *
 * @return  FlagStatus: SET or RESET.
 */
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef *ADCx)
{
     b90:	7179                	addi	sp,sp,-48
     b92:	d622                	sw	s0,44(sp)
     b94:	1800                	addi	s0,sp,48
     b96:	fca42e23          	sw	a0,-36(s0)
    FlagStatus bitstatus = RESET;
     b9a:	fe042623          	sw	zero,-20(s0)

    if((ADCx->CTLR2 & CTLR2_JSWSTART_Set) != (uint32_t)RESET)
     b9e:	fdc42783          	lw	a5,-36(s0)
     ba2:	4798                	lw	a4,8(a5)
     ba4:	002007b7          	lui	a5,0x200
     ba8:	8ff9                	and	a5,a5,a4
     baa:	c789                	beqz	a5,bb4 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x24>
    {
        bitstatus = SET;
     bac:	4785                	li	a5,1
     bae:	fef42623          	sw	a5,-20(s0)
     bb2:	a019                	j	bb8 <ADC_GetSoftwareStartInjectedConvCmdStatus+0x28>
    }
    else
    {
        bitstatus = RESET;
     bb4:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
     bb8:	fec42783          	lw	a5,-20(s0)
}
     bbc:	853e                	mv	a0,a5
     bbe:	5432                	lw	s0,44(sp)
     bc0:	6145                	addi	sp,sp,48
     bc2:	8082                	ret

00000bc4 <ADC_InjectedChannelConfig>:
 *            ADC_SampleTime_11Cycles - Sample time equal to 11 cycles.
 *
 * @return  None
 */
void ADC_InjectedChannelConfig(ADC_TypeDef *ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
     bc4:	7179                	addi	sp,sp,-48
     bc6:	d622                	sw	s0,44(sp)
     bc8:	1800                	addi	s0,sp,48
     bca:	fca42e23          	sw	a0,-36(s0)
     bce:	87ae                	mv	a5,a1
     bd0:	8736                	mv	a4,a3
     bd2:	fcf40da3          	sb	a5,-37(s0)
     bd6:	87b2                	mv	a5,a2
     bd8:	fcf40d23          	sb	a5,-38(s0)
     bdc:	87ba                	mv	a5,a4
     bde:	fcf40ca3          	sb	a5,-39(s0)
    uint32_t tmpreg1 = 0, tmpreg2 = 0, tmpreg3 = 0;
     be2:	fe042623          	sw	zero,-20(s0)
     be6:	fe042423          	sw	zero,-24(s0)
     bea:	fe042223          	sw	zero,-28(s0)

    if(ADC_Channel > ADC_Channel_9)
     bee:	fdb44703          	lbu	a4,-37(s0)
     bf2:	47a5                	li	a5,9
     bf4:	06e7f663          	bgeu	a5,a4,c60 <ADC_InjectedChannelConfig+0x9c>
    {
        tmpreg1 = ADCx->SAMPTR1;
     bf8:	fdc42783          	lw	a5,-36(s0)
     bfc:	47dc                	lw	a5,12(a5)
     bfe:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = SAMPTR1_SMP_Set << (3 * (ADC_Channel - 10));
     c02:	fdb44783          	lbu	a5,-37(s0)
     c06:	ff678713          	addi	a4,a5,-10 # 1ffff6 <_data_lma+0x1f0dea>
     c0a:	87ba                	mv	a5,a4
     c0c:	0786                	slli	a5,a5,0x1
     c0e:	97ba                	add	a5,a5,a4
     c10:	471d                	li	a4,7
     c12:	00f717b3          	sll	a5,a4,a5
     c16:	fef42423          	sw	a5,-24(s0)
        tmpreg1 &= ~tmpreg2;
     c1a:	fe842783          	lw	a5,-24(s0)
     c1e:	fff7c793          	not	a5,a5
     c22:	fec42703          	lw	a4,-20(s0)
     c26:	8ff9                	and	a5,a5,a4
     c28:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
     c2c:	fd944683          	lbu	a3,-39(s0)
     c30:	fdb44783          	lbu	a5,-37(s0)
     c34:	ff678713          	addi	a4,a5,-10
     c38:	87ba                	mv	a5,a4
     c3a:	0786                	slli	a5,a5,0x1
     c3c:	97ba                	add	a5,a5,a4
     c3e:	00f697b3          	sll	a5,a3,a5
     c42:	fef42423          	sw	a5,-24(s0)
        tmpreg1 |= tmpreg2;
     c46:	fec42703          	lw	a4,-20(s0)
     c4a:	fe842783          	lw	a5,-24(s0)
     c4e:	8fd9                	or	a5,a5,a4
     c50:	fef42623          	sw	a5,-20(s0)
        ADCx->SAMPTR1 = tmpreg1;
     c54:	fdc42783          	lw	a5,-36(s0)
     c58:	fec42703          	lw	a4,-20(s0)
     c5c:	c7d8                	sw	a4,12(a5)
     c5e:	a085                	j	cbe <ADC_InjectedChannelConfig+0xfa>
    }
    else
    {
        tmpreg1 = ADCx->SAMPTR2;
     c60:	fdc42783          	lw	a5,-36(s0)
     c64:	4b9c                	lw	a5,16(a5)
     c66:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = SAMPTR2_SMP_Set << (3 * ADC_Channel);
     c6a:	fdb44703          	lbu	a4,-37(s0)
     c6e:	87ba                	mv	a5,a4
     c70:	0786                	slli	a5,a5,0x1
     c72:	97ba                	add	a5,a5,a4
     c74:	471d                	li	a4,7
     c76:	00f717b3          	sll	a5,a4,a5
     c7a:	fef42423          	sw	a5,-24(s0)
        tmpreg1 &= ~tmpreg2;
     c7e:	fe842783          	lw	a5,-24(s0)
     c82:	fff7c793          	not	a5,a5
     c86:	fec42703          	lw	a4,-20(s0)
     c8a:	8ff9                	and	a5,a5,a4
     c8c:	fef42623          	sw	a5,-20(s0)
        tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
     c90:	fd944683          	lbu	a3,-39(s0)
     c94:	fdb44703          	lbu	a4,-37(s0)
     c98:	87ba                	mv	a5,a4
     c9a:	0786                	slli	a5,a5,0x1
     c9c:	97ba                	add	a5,a5,a4
     c9e:	00f697b3          	sll	a5,a3,a5
     ca2:	fef42423          	sw	a5,-24(s0)
        tmpreg1 |= tmpreg2;
     ca6:	fec42703          	lw	a4,-20(s0)
     caa:	fe842783          	lw	a5,-24(s0)
     cae:	8fd9                	or	a5,a5,a4
     cb0:	fef42623          	sw	a5,-20(s0)
        ADCx->SAMPTR2 = tmpreg1;
     cb4:	fdc42783          	lw	a5,-36(s0)
     cb8:	fec42703          	lw	a4,-20(s0)
     cbc:	cb98                	sw	a4,16(a5)
    }

    tmpreg1 = ADCx->ISQR;
     cbe:	fdc42783          	lw	a5,-36(s0)
     cc2:	5f9c                	lw	a5,56(a5)
     cc4:	fef42623          	sw	a5,-20(s0)
    tmpreg3 = (tmpreg1 & ISQR_JL_Set) >> 20;
     cc8:	fec42783          	lw	a5,-20(s0)
     ccc:	83d1                	srli	a5,a5,0x14
     cce:	8b8d                	andi	a5,a5,3
     cd0:	fef42223          	sw	a5,-28(s0)
    tmpreg2 = ISQR_JSQ_Set << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     cd4:	fe442783          	lw	a5,-28(s0)
     cd8:	0ff7f793          	andi	a5,a5,255
     cdc:	fda44703          	lbu	a4,-38(s0)
     ce0:	40f707b3          	sub	a5,a4,a5
     ce4:	0ff7f793          	andi	a5,a5,255
     ce8:	0789                	addi	a5,a5,2
     cea:	0ff7f793          	andi	a5,a5,255
     cee:	873e                	mv	a4,a5
     cf0:	87ba                	mv	a5,a4
     cf2:	078a                	slli	a5,a5,0x2
     cf4:	97ba                	add	a5,a5,a4
     cf6:	477d                	li	a4,31
     cf8:	00f717b3          	sll	a5,a4,a5
     cfc:	fef42423          	sw	a5,-24(s0)
    tmpreg1 &= ~tmpreg2;
     d00:	fe842783          	lw	a5,-24(s0)
     d04:	fff7c793          	not	a5,a5
     d08:	fec42703          	lw	a4,-20(s0)
     d0c:	8ff9                	and	a5,a5,a4
     d0e:	fef42623          	sw	a5,-20(s0)
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (uint8_t)((Rank + 3) - (tmpreg3 + 1)));
     d12:	fdb44703          	lbu	a4,-37(s0)
     d16:	fe442783          	lw	a5,-28(s0)
     d1a:	0ff7f793          	andi	a5,a5,255
     d1e:	fda44683          	lbu	a3,-38(s0)
     d22:	40f687b3          	sub	a5,a3,a5
     d26:	0ff7f793          	andi	a5,a5,255
     d2a:	0789                	addi	a5,a5,2
     d2c:	0ff7f793          	andi	a5,a5,255
     d30:	86be                	mv	a3,a5
     d32:	87b6                	mv	a5,a3
     d34:	078a                	slli	a5,a5,0x2
     d36:	97b6                	add	a5,a5,a3
     d38:	00f717b3          	sll	a5,a4,a5
     d3c:	fef42423          	sw	a5,-24(s0)
    tmpreg1 |= tmpreg2;
     d40:	fec42703          	lw	a4,-20(s0)
     d44:	fe842783          	lw	a5,-24(s0)
     d48:	8fd9                	or	a5,a5,a4
     d4a:	fef42623          	sw	a5,-20(s0)
    ADCx->ISQR = tmpreg1;
     d4e:	fdc42783          	lw	a5,-36(s0)
     d52:	fec42703          	lw	a4,-20(s0)
     d56:	df98                	sw	a4,56(a5)
}
     d58:	0001                	nop
     d5a:	5432                	lw	s0,44(sp)
     d5c:	6145                	addi	sp,sp,48
     d5e:	8082                	ret

00000d60 <ADC_InjectedSequencerLengthConfig>:
 *            This parameter must be a number between 1 to 4.
 *
 * @return  None
 */
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef *ADCx, uint8_t Length)
{
     d60:	7179                	addi	sp,sp,-48
     d62:	d622                	sw	s0,44(sp)
     d64:	1800                	addi	s0,sp,48
     d66:	fca42e23          	sw	a0,-36(s0)
     d6a:	87ae                	mv	a5,a1
     d6c:	fcf40da3          	sb	a5,-37(s0)
    uint32_t tmpreg1 = 0;
     d70:	fe042623          	sw	zero,-20(s0)
    uint32_t tmpreg2 = 0;
     d74:	fe042423          	sw	zero,-24(s0)

    tmpreg1 = ADCx->ISQR;
     d78:	fdc42783          	lw	a5,-36(s0)
     d7c:	5f9c                	lw	a5,56(a5)
     d7e:	fef42623          	sw	a5,-20(s0)
    tmpreg1 &= ISQR_JL_Reset;
     d82:	fec42703          	lw	a4,-20(s0)
     d86:	ffd007b7          	lui	a5,0xffd00
     d8a:	17fd                	addi	a5,a5,-1
     d8c:	8ff9                	and	a5,a5,a4
     d8e:	fef42623          	sw	a5,-20(s0)
    tmpreg2 = Length - 1;
     d92:	fdb44783          	lbu	a5,-37(s0)
     d96:	17fd                	addi	a5,a5,-1
     d98:	fef42423          	sw	a5,-24(s0)
    tmpreg1 |= tmpreg2 << 20;
     d9c:	fe842783          	lw	a5,-24(s0)
     da0:	07d2                	slli	a5,a5,0x14
     da2:	fec42703          	lw	a4,-20(s0)
     da6:	8fd9                	or	a5,a5,a4
     da8:	fef42623          	sw	a5,-20(s0)
    ADCx->ISQR = tmpreg1;
     dac:	fdc42783          	lw	a5,-36(s0)
     db0:	fec42703          	lw	a4,-20(s0)
     db4:	df98                	sw	a4,56(a5)
}
     db6:	0001                	nop
     db8:	5432                	lw	s0,44(sp)
     dba:	6145                	addi	sp,sp,48
     dbc:	8082                	ret

00000dbe <ADC_SetInjectedOffset>:
 *            This parameter must be a 12bit value.
 *
 * @return  None
 */
void ADC_SetInjectedOffset(ADC_TypeDef *ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset)
{
     dbe:	7179                	addi	sp,sp,-48
     dc0:	d622                	sw	s0,44(sp)
     dc2:	1800                	addi	s0,sp,48
     dc4:	fca42e23          	sw	a0,-36(s0)
     dc8:	87ae                	mv	a5,a1
     dca:	8732                	mv	a4,a2
     dcc:	fcf40da3          	sb	a5,-37(s0)
     dd0:	87ba                	mv	a5,a4
     dd2:	fcf41c23          	sh	a5,-40(s0)
    __IO uint32_t tmp = 0;
     dd6:	fe042623          	sw	zero,-20(s0)

    tmp = (uint32_t)ADCx;
     dda:	fdc42783          	lw	a5,-36(s0)
     dde:	fef42623          	sw	a5,-20(s0)
    tmp += ADC_InjectedChannel;
     de2:	fdb44703          	lbu	a4,-37(s0)
     de6:	fec42783          	lw	a5,-20(s0)
     dea:	97ba                	add	a5,a5,a4
     dec:	fef42623          	sw	a5,-20(s0)

    *(__IO uint32_t *)tmp = (uint32_t)Offset;
     df0:	fec42783          	lw	a5,-20(s0)
     df4:	873e                	mv	a4,a5
     df6:	fd845783          	lhu	a5,-40(s0)
     dfa:	c31c                	sw	a5,0(a4)
}
     dfc:	0001                	nop
     dfe:	5432                	lw	s0,44(sp)
     e00:	6145                	addi	sp,sp,48
     e02:	8082                	ret

00000e04 <ADC_GetInjectedConversionValue>:
 *            ADC_InjectedChannel_4 - Injected Channel4 selected.
 *
 * @return  tmp - The Data conversion value.
 */
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef *ADCx, uint8_t ADC_InjectedChannel)
{
     e04:	7179                	addi	sp,sp,-48
     e06:	d622                	sw	s0,44(sp)
     e08:	1800                	addi	s0,sp,48
     e0a:	fca42e23          	sw	a0,-36(s0)
     e0e:	87ae                	mv	a5,a1
     e10:	fcf40da3          	sb	a5,-37(s0)
    __IO uint32_t tmp = 0;
     e14:	fe042623          	sw	zero,-20(s0)

    tmp = (uint32_t)ADCx;
     e18:	fdc42783          	lw	a5,-36(s0)
     e1c:	fef42623          	sw	a5,-20(s0)
    tmp += ADC_InjectedChannel + IDATAR_Offset;
     e20:	fdb44703          	lbu	a4,-37(s0)
     e24:	fec42783          	lw	a5,-20(s0)
     e28:	97ba                	add	a5,a5,a4
     e2a:	02878793          	addi	a5,a5,40 # ffd00028 <_eusrstack+0xdfcfc028>
     e2e:	fef42623          	sw	a5,-20(s0)

    return (uint16_t)(*(__IO uint32_t *)tmp);
     e32:	fec42783          	lw	a5,-20(s0)
     e36:	439c                	lw	a5,0(a5)
     e38:	07c2                	slli	a5,a5,0x10
     e3a:	83c1                	srli	a5,a5,0x10
}
     e3c:	853e                	mv	a0,a5
     e3e:	5432                	lw	s0,44(sp)
     e40:	6145                	addi	sp,sp,48
     e42:	8082                	ret

00000e44 <ADC_AnalogWatchdogCmd>:
 *        watchdog.
 *
 * @return  none
 */
void ADC_AnalogWatchdogCmd(ADC_TypeDef *ADCx, uint32_t ADC_AnalogWatchdog)
{
     e44:	7179                	addi	sp,sp,-48
     e46:	d622                	sw	s0,44(sp)
     e48:	1800                	addi	s0,sp,48
     e4a:	fca42e23          	sw	a0,-36(s0)
     e4e:	fcb42c23          	sw	a1,-40(s0)
    uint32_t tmpreg = 0;
     e52:	fe042623          	sw	zero,-20(s0)

    tmpreg = ADCx->CTLR1;
     e56:	fdc42783          	lw	a5,-36(s0)
     e5a:	43dc                	lw	a5,4(a5)
     e5c:	fef42623          	sw	a5,-20(s0)
    tmpreg &= CTLR1_AWDMode_Reset;
     e60:	fec42703          	lw	a4,-20(s0)
     e64:	ff4007b7          	lui	a5,0xff400
     e68:	dff78793          	addi	a5,a5,-513 # ff3ffdff <_eusrstack+0xdf3fbdff>
     e6c:	8ff9                	and	a5,a5,a4
     e6e:	fef42623          	sw	a5,-20(s0)
    tmpreg |= ADC_AnalogWatchdog;
     e72:	fec42703          	lw	a4,-20(s0)
     e76:	fd842783          	lw	a5,-40(s0)
     e7a:	8fd9                	or	a5,a5,a4
     e7c:	fef42623          	sw	a5,-20(s0)
    ADCx->CTLR1 = tmpreg;
     e80:	fdc42783          	lw	a5,-36(s0)
     e84:	fec42703          	lw	a4,-20(s0)
     e88:	c3d8                	sw	a4,4(a5)
}
     e8a:	0001                	nop
     e8c:	5432                	lw	s0,44(sp)
     e8e:	6145                	addi	sp,sp,48
     e90:	8082                	ret

00000e92 <ADC_AnalogWatchdogThresholdsConfig>:
 *
 * @return  none
 */
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef *ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     e92:	1101                	addi	sp,sp,-32
     e94:	ce22                	sw	s0,28(sp)
     e96:	1000                	addi	s0,sp,32
     e98:	fea42623          	sw	a0,-20(s0)
     e9c:	87ae                	mv	a5,a1
     e9e:	8732                	mv	a4,a2
     ea0:	fef41523          	sh	a5,-22(s0)
     ea4:	87ba                	mv	a5,a4
     ea6:	fef41423          	sh	a5,-24(s0)
    ADCx->WDHTR = HighThreshold;
     eaa:	fea45703          	lhu	a4,-22(s0)
     eae:	fec42783          	lw	a5,-20(s0)
     eb2:	d3d8                	sw	a4,36(a5)
    ADCx->WDLTR = LowThreshold;
     eb4:	fe845703          	lhu	a4,-24(s0)
     eb8:	fec42783          	lw	a5,-20(s0)
     ebc:	d798                	sw	a4,40(a5)
}
     ebe:	0001                	nop
     ec0:	4472                	lw	s0,28(sp)
     ec2:	6105                	addi	sp,sp,32
     ec4:	8082                	ret

00000ec6 <ADC_AnalogWatchdog1ThresholdsConfig>:
 *
 * @return  none
 */
void ADC_AnalogWatchdog1ThresholdsConfig(ADC_TypeDef *ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     ec6:	1101                	addi	sp,sp,-32
     ec8:	ce22                	sw	s0,28(sp)
     eca:	1000                	addi	s0,sp,32
     ecc:	fea42623          	sw	a0,-20(s0)
     ed0:	87ae                	mv	a5,a1
     ed2:	8732                	mv	a4,a2
     ed4:	fef41523          	sh	a5,-22(s0)
     ed8:	87ba                	mv	a5,a4
     eda:	fef41423          	sh	a5,-24(s0)
    ADCx->WDTR1 = (uint32_t)HighThreshold<<16;
     ede:	fea45783          	lhu	a5,-22(s0)
     ee2:	01079713          	slli	a4,a5,0x10
     ee6:	fec42783          	lw	a5,-20(s0)
     eea:	cbf8                	sw	a4,84(a5)
    ADCx->WDTR1 |= (uint32_t)LowThreshold;
     eec:	fec42783          	lw	a5,-20(s0)
     ef0:	4bf8                	lw	a4,84(a5)
     ef2:	fe845783          	lhu	a5,-24(s0)
     ef6:	8f5d                	or	a4,a4,a5
     ef8:	fec42783          	lw	a5,-20(s0)
     efc:	cbf8                	sw	a4,84(a5)
}
     efe:	0001                	nop
     f00:	4472                	lw	s0,28(sp)
     f02:	6105                	addi	sp,sp,32
     f04:	8082                	ret

00000f06 <ADC_AnalogWatchdog2ThresholdsConfig>:
 *
 * @return  none
 */
void ADC_AnalogWatchdog2ThresholdsConfig(ADC_TypeDef *ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     f06:	1101                	addi	sp,sp,-32
     f08:	ce22                	sw	s0,28(sp)
     f0a:	1000                	addi	s0,sp,32
     f0c:	fea42623          	sw	a0,-20(s0)
     f10:	87ae                	mv	a5,a1
     f12:	8732                	mv	a4,a2
     f14:	fef41523          	sh	a5,-22(s0)
     f18:	87ba                	mv	a5,a4
     f1a:	fef41423          	sh	a5,-24(s0)
    ADCx->WDTR2 = (uint32_t)HighThreshold<<16;
     f1e:	fea45783          	lhu	a5,-22(s0)
     f22:	01079713          	slli	a4,a5,0x10
     f26:	fec42783          	lw	a5,-20(s0)
     f2a:	cfb8                	sw	a4,88(a5)
    ADCx->WDTR2 |= (uint32_t)LowThreshold;
     f2c:	fec42783          	lw	a5,-20(s0)
     f30:	4fb8                	lw	a4,88(a5)
     f32:	fe845783          	lhu	a5,-24(s0)
     f36:	8f5d                	or	a4,a4,a5
     f38:	fec42783          	lw	a5,-20(s0)
     f3c:	cfb8                	sw	a4,88(a5)
}
     f3e:	0001                	nop
     f40:	4472                	lw	s0,28(sp)
     f42:	6105                	addi	sp,sp,32
     f44:	8082                	ret

00000f46 <ADC_AnalogWatchdog3ThresholdsConfig>:
 *
 * @return  none
 */
void ADC_AnalogWatchdog3ThresholdsConfig(ADC_TypeDef *ADCx, uint16_t HighThreshold,
                                        uint16_t LowThreshold)
{
     f46:	1101                	addi	sp,sp,-32
     f48:	ce22                	sw	s0,28(sp)
     f4a:	1000                	addi	s0,sp,32
     f4c:	fea42623          	sw	a0,-20(s0)
     f50:	87ae                	mv	a5,a1
     f52:	8732                	mv	a4,a2
     f54:	fef41523          	sh	a5,-22(s0)
     f58:	87ba                	mv	a5,a4
     f5a:	fef41423          	sh	a5,-24(s0)
    ADCx->WDTR3 = (uint32_t)HighThreshold<<16;
     f5e:	fea45783          	lhu	a5,-22(s0)
     f62:	01079713          	slli	a4,a5,0x10
     f66:	fec42783          	lw	a5,-20(s0)
     f6a:	cff8                	sw	a4,92(a5)
    ADCx->WDTR3 |= (uint32_t)LowThreshold;
     f6c:	fec42783          	lw	a5,-20(s0)
     f70:	4ff8                	lw	a4,92(a5)
     f72:	fe845783          	lhu	a5,-24(s0)
     f76:	8f5d                	or	a4,a4,a5
     f78:	fec42783          	lw	a5,-20(s0)
     f7c:	cff8                	sw	a4,92(a5)
}
     f7e:	0001                	nop
     f80:	4472                	lw	s0,28(sp)
     f82:	6105                	addi	sp,sp,32
     f84:	8082                	ret

00000f86 <ADC_AnalogWatchdogSingleChannelConfig>:
 *            ADC_Channel_15 - ADC Channel15 selected.
 *
 * @return  None
 */
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef *ADCx, uint8_t ADC_Channel)
{
     f86:	7179                	addi	sp,sp,-48
     f88:	d622                	sw	s0,44(sp)
     f8a:	1800                	addi	s0,sp,48
     f8c:	fca42e23          	sw	a0,-36(s0)
     f90:	87ae                	mv	a5,a1
     f92:	fcf40da3          	sb	a5,-37(s0)
    uint32_t tmpreg = 0;
     f96:	fe042623          	sw	zero,-20(s0)

    tmpreg = ADCx->CTLR1;
     f9a:	fdc42783          	lw	a5,-36(s0)
     f9e:	43dc                	lw	a5,4(a5)
     fa0:	fef42623          	sw	a5,-20(s0)
    tmpreg &= CTLR1_AWDCH_Reset;
     fa4:	fec42783          	lw	a5,-20(s0)
     fa8:	9b81                	andi	a5,a5,-32
     faa:	fef42623          	sw	a5,-20(s0)
    tmpreg |= ADC_Channel;
     fae:	fdb44783          	lbu	a5,-37(s0)
     fb2:	fec42703          	lw	a4,-20(s0)
     fb6:	8fd9                	or	a5,a5,a4
     fb8:	fef42623          	sw	a5,-20(s0)
    ADCx->CTLR1 = tmpreg;
     fbc:	fdc42783          	lw	a5,-36(s0)
     fc0:	fec42703          	lw	a4,-20(s0)
     fc4:	c3d8                	sw	a4,4(a5)
}
     fc6:	0001                	nop
     fc8:	5432                	lw	s0,44(sp)
     fca:	6145                	addi	sp,sp,48
     fcc:	8082                	ret

00000fce <ADC_GetFlagStatus>:
 *            ADC_FLAG_STRT - Start of regular group conversion flag.
 *
 * @return  FlagStatus: SET or RESET.
 */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef *ADCx, uint8_t ADC_FLAG)
{
     fce:	7179                	addi	sp,sp,-48
     fd0:	d622                	sw	s0,44(sp)
     fd2:	1800                	addi	s0,sp,48
     fd4:	fca42e23          	sw	a0,-36(s0)
     fd8:	87ae                	mv	a5,a1
     fda:	fcf40da3          	sb	a5,-37(s0)
    FlagStatus bitstatus = RESET;
     fde:	fe042623          	sw	zero,-20(s0)

    if((ADCx->STATR & ADC_FLAG) != (uint8_t)RESET)
     fe2:	fdc42783          	lw	a5,-36(s0)
     fe6:	4398                	lw	a4,0(a5)
     fe8:	fdb44783          	lbu	a5,-37(s0)
     fec:	8ff9                	and	a5,a5,a4
     fee:	c789                	beqz	a5,ff8 <ADC_GetFlagStatus+0x2a>
    {
        bitstatus = SET;
     ff0:	4785                	li	a5,1
     ff2:	fef42623          	sw	a5,-20(s0)
     ff6:	a019                	j	ffc <ADC_GetFlagStatus+0x2e>
    }
    else
    {
        bitstatus = RESET;
     ff8:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
     ffc:	fec42783          	lw	a5,-20(s0)
}
    1000:	853e                	mv	a0,a5
    1002:	5432                	lw	s0,44(sp)
    1004:	6145                	addi	sp,sp,48
    1006:	8082                	ret

00001008 <ADC_ClearFlag>:
 *            ADC_FLAG_STRT - Start of regular group conversion flag.
 *
 * @return  none
 */
void ADC_ClearFlag(ADC_TypeDef *ADCx, uint8_t ADC_FLAG)
{
    1008:	1101                	addi	sp,sp,-32
    100a:	ce22                	sw	s0,28(sp)
    100c:	1000                	addi	s0,sp,32
    100e:	fea42623          	sw	a0,-20(s0)
    1012:	87ae                	mv	a5,a1
    1014:	fef405a3          	sb	a5,-21(s0)
    ADCx->STATR = ~(uint32_t)ADC_FLAG;
    1018:	feb44783          	lbu	a5,-21(s0)
    101c:	fff7c713          	not	a4,a5
    1020:	fec42783          	lw	a5,-20(s0)
    1024:	c398                	sw	a4,0(a5)
}
    1026:	0001                	nop
    1028:	4472                	lw	s0,28(sp)
    102a:	6105                	addi	sp,sp,32
    102c:	8082                	ret

0000102e <ADC_GetITStatus>:
 *            ADC_IT_JEOC - End of injected conversion interrupt mask.
 *
 * @return  FlagStatus: SET or RESET.
 */
ITStatus ADC_GetITStatus(ADC_TypeDef *ADCx, uint16_t ADC_IT)
{
    102e:	7179                	addi	sp,sp,-48
    1030:	d622                	sw	s0,44(sp)
    1032:	1800                	addi	s0,sp,48
    1034:	fca42e23          	sw	a0,-36(s0)
    1038:	87ae                	mv	a5,a1
    103a:	fcf41d23          	sh	a5,-38(s0)
    ITStatus bitstatus = RESET;
    103e:	fe042623          	sw	zero,-20(s0)
    uint32_t itmask = 0, enablestatus = 0;
    1042:	fe042423          	sw	zero,-24(s0)
    1046:	fe042223          	sw	zero,-28(s0)

    itmask = ADC_IT >> 8;
    104a:	fda45783          	lhu	a5,-38(s0)
    104e:	83a1                	srli	a5,a5,0x8
    1050:	07c2                	slli	a5,a5,0x10
    1052:	83c1                	srli	a5,a5,0x10
    1054:	fef42423          	sw	a5,-24(s0)
    enablestatus = (ADCx->CTLR1 & (uint8_t)ADC_IT);
    1058:	fdc42783          	lw	a5,-36(s0)
    105c:	43dc                	lw	a5,4(a5)
    105e:	fda45703          	lhu	a4,-38(s0)
    1062:	0ff77713          	andi	a4,a4,255
    1066:	8ff9                	and	a5,a5,a4
    1068:	fef42223          	sw	a5,-28(s0)

    if(((ADCx->STATR & itmask) != (uint32_t)RESET) && enablestatus)
    106c:	fdc42783          	lw	a5,-36(s0)
    1070:	4398                	lw	a4,0(a5)
    1072:	fe842783          	lw	a5,-24(s0)
    1076:	8ff9                	and	a5,a5,a4
    1078:	cb81                	beqz	a5,1088 <ADC_GetITStatus+0x5a>
    107a:	fe442783          	lw	a5,-28(s0)
    107e:	c789                	beqz	a5,1088 <ADC_GetITStatus+0x5a>
    {
        bitstatus = SET;
    1080:	4785                	li	a5,1
    1082:	fef42623          	sw	a5,-20(s0)
    1086:	a019                	j	108c <ADC_GetITStatus+0x5e>
    }
    else
    {
        bitstatus = RESET;
    1088:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    108c:	fec42783          	lw	a5,-20(s0)
}
    1090:	853e                	mv	a0,a5
    1092:	5432                	lw	s0,44(sp)
    1094:	6145                	addi	sp,sp,48
    1096:	8082                	ret

00001098 <ADC_ClearITPendingBit>:
 *            ADC_IT_JEOC - End of injected conversion interrupt mask.
 *
 * @return  none
 */
void ADC_ClearITPendingBit(ADC_TypeDef *ADCx, uint16_t ADC_IT)
{
    1098:	7179                	addi	sp,sp,-48
    109a:	d622                	sw	s0,44(sp)
    109c:	1800                	addi	s0,sp,48
    109e:	fca42e23          	sw	a0,-36(s0)
    10a2:	87ae                	mv	a5,a1
    10a4:	fcf41d23          	sh	a5,-38(s0)
    uint8_t itmask = 0;
    10a8:	fe0407a3          	sb	zero,-17(s0)

    itmask = (uint8_t)(ADC_IT >> 8);
    10ac:	fda45783          	lhu	a5,-38(s0)
    10b0:	83a1                	srli	a5,a5,0x8
    10b2:	07c2                	slli	a5,a5,0x10
    10b4:	83c1                	srli	a5,a5,0x10
    10b6:	fef407a3          	sb	a5,-17(s0)
    ADCx->STATR = ~(uint32_t)itmask;
    10ba:	fef44783          	lbu	a5,-17(s0)
    10be:	fff7c713          	not	a4,a5
    10c2:	fdc42783          	lw	a5,-36(s0)
    10c6:	c398                	sw	a4,0(a5)
}
    10c8:	0001                	nop
    10ca:	5432                	lw	s0,44(sp)
    10cc:	6145                	addi	sp,sp,48
    10ce:	8082                	ret

000010d0 <ADC_AnalogWatchdogResetCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void ADC_AnalogWatchdogResetCmd(ADC_TypeDef *ADCx, uint32_t ADC_AnalogWatchdog_x, FunctionalState NewState)
{
    10d0:	1101                	addi	sp,sp,-32
    10d2:	ce22                	sw	s0,28(sp)
    10d4:	1000                	addi	s0,sp,32
    10d6:	fea42623          	sw	a0,-20(s0)
    10da:	feb42423          	sw	a1,-24(s0)
    10de:	fec42223          	sw	a2,-28(s0)
  if (NewState != DISABLE)
    10e2:	fe442783          	lw	a5,-28(s0)
    10e6:	cb99                	beqz	a5,10fc <ADC_AnalogWatchdogResetCmd+0x2c>
  {
      ADCx->CTLR3 |= ADC_AnalogWatchdog_x;
    10e8:	fec42783          	lw	a5,-20(s0)
    10ec:	4bb8                	lw	a4,80(a5)
    10ee:	fe842783          	lw	a5,-24(s0)
    10f2:	8f5d                	or	a4,a4,a5
    10f4:	fec42783          	lw	a5,-20(s0)
    10f8:	cbb8                	sw	a4,80(a5)
  }
  else
  {
      ADCx->CTLR3 &= ~ADC_AnalogWatchdog_x;
  }
}
    10fa:	a821                	j	1112 <ADC_AnalogWatchdogResetCmd+0x42>
      ADCx->CTLR3 &= ~ADC_AnalogWatchdog_x;
    10fc:	fec42783          	lw	a5,-20(s0)
    1100:	4bb8                	lw	a4,80(a5)
    1102:	fe842783          	lw	a5,-24(s0)
    1106:	fff7c793          	not	a5,a5
    110a:	8f7d                	and	a4,a4,a5
    110c:	fec42783          	lw	a5,-20(s0)
    1110:	cbb8                	sw	a4,80(a5)
}
    1112:	0001                	nop
    1114:	4472                	lw	s0,28(sp)
    1116:	6105                	addi	sp,sp,32
    1118:	8082                	ret

0000111a <ADC_AnalogWatchdogScanCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void ADC_AnalogWatchdogScanCmd(ADC_TypeDef *ADCx, FunctionalState NewState)
{
    111a:	1101                	addi	sp,sp,-32
    111c:	ce22                	sw	s0,28(sp)
    111e:	1000                	addi	s0,sp,32
    1120:	fea42623          	sw	a0,-20(s0)
    1124:	feb42423          	sw	a1,-24(s0)
    if (NewState != DISABLE)
    1128:	fe842783          	lw	a5,-24(s0)
    112c:	cb91                	beqz	a5,1140 <ADC_AnalogWatchdogScanCmd+0x26>
    {
      ADCx->CTLR3 |= (1<<9);
    112e:	fec42783          	lw	a5,-20(s0)
    1132:	4bbc                	lw	a5,80(a5)
    1134:	2007e713          	ori	a4,a5,512
    1138:	fec42783          	lw	a5,-20(s0)
    113c:	cbb8                	sw	a4,80(a5)
    }
    else
    {
      ADCx->CTLR3 &= ~(1<<9);
    }
}
    113e:	a809                	j	1150 <ADC_AnalogWatchdogScanCmd+0x36>
      ADCx->CTLR3 &= ~(1<<9);
    1140:	fec42783          	lw	a5,-20(s0)
    1144:	4bbc                	lw	a5,80(a5)
    1146:	dff7f713          	andi	a4,a5,-513
    114a:	fec42783          	lw	a5,-20(s0)
    114e:	cbb8                	sw	a4,80(a5)
}
    1150:	0001                	nop
    1152:	4472                	lw	s0,28(sp)
    1154:	6105                	addi	sp,sp,32
    1156:	8082                	ret

00001158 <ADC_CLKConfig>:
 *            ADC_CLK_Div15 - ADC clock = SYSCLK/15
 *            ADC_CLK_Div16 - ADC clock = SYSCLK/16
 * @return  none
 */
void ADC_CLKConfig(ADC_TypeDef *ADCx, uint32_t ADC_CLK_Div_x)
{
    1158:	7179                	addi	sp,sp,-48
    115a:	d622                	sw	s0,44(sp)
    115c:	1800                	addi	s0,sp,48
    115e:	fca42e23          	sw	a0,-36(s0)
    1162:	fcb42c23          	sw	a1,-40(s0)
  uint32_t tmpreg = 0;
    1166:	fe042623          	sw	zero,-20(s0)

  tmpreg = ADCx->CTLR3;
    116a:	fdc42783          	lw	a5,-36(s0)
    116e:	4bbc                	lw	a5,80(a5)
    1170:	fef42623          	sw	a5,-20(s0)

  tmpreg &= CTLR3_CLK_Mask;
    1174:	fec42783          	lw	a5,-20(s0)
    1178:	e007f793          	andi	a5,a5,-512
    117c:	fef42623          	sw	a5,-20(s0)
  tmpreg |= ADC_CLK_Div_x;
    1180:	fec42703          	lw	a4,-20(s0)
    1184:	fd842783          	lw	a5,-40(s0)
    1188:	8fd9                	or	a5,a5,a4
    118a:	fef42623          	sw	a5,-20(s0)
  ADCx->CTLR3 = tmpreg;
    118e:	fdc42783          	lw	a5,-36(s0)
    1192:	fec42703          	lw	a4,-20(s0)
    1196:	cbb8                	sw	a4,80(a5)
}
    1198:	0001                	nop
    119a:	5432                	lw	s0,44(sp)
    119c:	6145                	addi	sp,sp,48
    119e:	8082                	ret

000011a0 <AutoWakeUpCmd>:
 *        (ENABLE or DISABLE).
 *
 * @return  none
 */
void AutoWakeUpCmd(FunctionalState NewState)
{
    11a0:	1101                	addi	sp,sp,-32
    11a2:	ce22                	sw	s0,28(sp)
    11a4:	1000                	addi	s0,sp,32
    11a6:	fea42623          	sw	a0,-20(s0)
    if(NewState)
    11aa:	fec42783          	lw	a5,-20(s0)
    11ae:	cf91                	beqz	a5,11ca <AutoWakeUpCmd+0x2a>
    {
        AWU->CSR |= (1 << 1);
    11b0:	400267b7          	lui	a5,0x40026
    11b4:	40078793          	addi	a5,a5,1024 # 40026400 <_eusrstack+0x20022400>
    11b8:	4398                	lw	a4,0(a5)
    11ba:	400267b7          	lui	a5,0x40026
    11be:	40078793          	addi	a5,a5,1024 # 40026400 <_eusrstack+0x20022400>
    11c2:	00276713          	ori	a4,a4,2
    11c6:	c398                	sw	a4,0(a5)
    }
    else
    {
        AWU->CSR &= ~(1 << 1);
    }
}
    11c8:	a821                	j	11e0 <AutoWakeUpCmd+0x40>
        AWU->CSR &= ~(1 << 1);
    11ca:	400267b7          	lui	a5,0x40026
    11ce:	40078793          	addi	a5,a5,1024 # 40026400 <_eusrstack+0x20022400>
    11d2:	4398                	lw	a4,0(a5)
    11d4:	400267b7          	lui	a5,0x40026
    11d8:	40078793          	addi	a5,a5,1024 # 40026400 <_eusrstack+0x20022400>
    11dc:	9b75                	andi	a4,a4,-3
    11de:	c398                	sw	a4,0(a5)
}
    11e0:	0001                	nop
    11e2:	4472                	lw	s0,28(sp)
    11e4:	6105                	addi	sp,sp,32
    11e6:	8082                	ret

000011e8 <AWU_SetPrescaler>:
 *            AWU_Prescaler_61440 - AWU counter clock = LSI/61440
 *
 * @return  none
 */
void AWU_SetPrescaler(uint32_t AWU_Prescaler)
{
    11e8:	7179                	addi	sp,sp,-48
    11ea:	d622                	sw	s0,44(sp)
    11ec:	1800                	addi	s0,sp,48
    11ee:	fca42e23          	sw	a0,-36(s0)
    uint32_t tmpreg = 0;
    11f2:	fe042623          	sw	zero,-20(s0)
    tmpreg = AWU->PSC & AWUPSC_MASK;
    11f6:	400267b7          	lui	a5,0x40026
    11fa:	40078793          	addi	a5,a5,1024 # 40026400 <_eusrstack+0x20022400>
    11fe:	479c                	lw	a5,8(a5)
    1200:	9bc1                	andi	a5,a5,-16
    1202:	fef42623          	sw	a5,-20(s0)
    tmpreg |= AWU_Prescaler;
    1206:	fec42703          	lw	a4,-20(s0)
    120a:	fdc42783          	lw	a5,-36(s0)
    120e:	8fd9                	or	a5,a5,a4
    1210:	fef42623          	sw	a5,-20(s0)
    AWU->PSC = tmpreg;
    1214:	400267b7          	lui	a5,0x40026
    1218:	40078793          	addi	a5,a5,1024 # 40026400 <_eusrstack+0x20022400>
    121c:	fec42703          	lw	a4,-20(s0)
    1220:	c798                	sw	a4,8(a5)
}
    1222:	0001                	nop
    1224:	5432                	lw	s0,44(sp)
    1226:	6145                	addi	sp,sp,48
    1228:	8082                	ret

0000122a <AWU_SetWindowValue>:
 *        downcounter,which must be lower than 0x3F
 *
 * @return  none
 */
void AWU_SetWindowValue(uint8_t WindowValue)
{
    122a:	7179                	addi	sp,sp,-48
    122c:	d622                	sw	s0,44(sp)
    122e:	1800                	addi	s0,sp,48
    1230:	87aa                	mv	a5,a0
    1232:	fcf40fa3          	sb	a5,-33(s0)
    __IO uint32_t tmpreg = 0;
    1236:	fe042623          	sw	zero,-20(s0)

    tmpreg = AWU->WR & AWUWR_MASK;
    123a:	400267b7          	lui	a5,0x40026
    123e:	40078793          	addi	a5,a5,1024 # 40026400 <_eusrstack+0x20022400>
    1242:	43dc                	lw	a5,4(a5)
    1244:	fc07f793          	andi	a5,a5,-64
    1248:	fef42623          	sw	a5,-20(s0)
    tmpreg |= WindowValue;
    124c:	fdf44703          	lbu	a4,-33(s0)
    1250:	fec42783          	lw	a5,-20(s0)
    1254:	8fd9                	or	a5,a5,a4
    1256:	fef42623          	sw	a5,-20(s0)

    AWU->WR = tmpreg;
    125a:	400267b7          	lui	a5,0x40026
    125e:	40078793          	addi	a5,a5,1024 # 40026400 <_eusrstack+0x20022400>
    1262:	fec42703          	lw	a4,-20(s0)
    1266:	c3d8                	sw	a4,4(a5)
}
    1268:	0001                	nop
    126a:	5432                	lw	s0,44(sp)
    126c:	6145                	addi	sp,sp,48
    126e:	8082                	ret

00001270 <DBGMCU_GetREVID>:
 * @brief   Returns the device revision identifier.
 *
 * @return  Revision identifier.
 */
uint32_t DBGMCU_GetREVID(void)
{
    1270:	1141                	addi	sp,sp,-16
    1272:	c622                	sw	s0,12(sp)
    1274:	0800                	addi	s0,sp,16
	return ((*(uint32_t *)0x1FFFF704) >> 16);
    1276:	1ffff7b7          	lui	a5,0x1ffff
    127a:	70478793          	addi	a5,a5,1796 # 1ffff704 <_data_lma+0x1fff04f8>
    127e:	439c                	lw	a5,0(a5)
    1280:	83c1                	srli	a5,a5,0x10
}
    1282:	853e                	mv	a0,a5
    1284:	4432                	lw	s0,12(sp)
    1286:	0141                	addi	sp,sp,16
    1288:	8082                	ret

0000128a <DBGMCU_GetDEVID>:
 * @brief   Returns the device identifier.
 *
 * @return  Device identifier.
 */
uint32_t DBGMCU_GetDEVID(void)
{
    128a:	1141                	addi	sp,sp,-16
    128c:	c622                	sw	s0,12(sp)
    128e:	0800                	addi	s0,sp,16
	return ((*(uint32_t *)0x1FFFF704) & IDCODE_DEVID_MASK);
    1290:	1ffff7b7          	lui	a5,0x1ffff
    1294:	70478793          	addi	a5,a5,1796 # 1ffff704 <_data_lma+0x1fff04f8>
    1298:	4398                	lw	a4,0(a5)
    129a:	67c1                	lui	a5,0x10
    129c:	17fd                	addi	a5,a5,-1
    129e:	8ff9                	and	a5,a5,a4
}
    12a0:	853e                	mv	a0,a5
    12a2:	4432                	lw	s0,12(sp)
    12a4:	0141                	addi	sp,sp,16
    12a6:	8082                	ret

000012a8 <__get_DEBUG_CR>:
 * @brief   Return the DEBUGE Control Register
 *
 * @return  DEBUGE Control value
 */
uint32_t __get_DEBUG_CR(void)
{
    12a8:	1101                	addi	sp,sp,-32
    12aa:	ce22                	sw	s0,28(sp)
    12ac:	1000                	addi	s0,sp,32
	uint32_t result;

	__asm volatile("csrr %0,""0x7C0" : "=r"(result));
    12ae:	7c0027f3          	csrr	a5,0x7c0
    12b2:	fef42623          	sw	a5,-20(s0)
	return (result);
    12b6:	fec42783          	lw	a5,-20(s0)
}
    12ba:	853e                	mv	a0,a5
    12bc:	4472                	lw	s0,28(sp)
    12be:	6105                	addi	sp,sp,32
    12c0:	8082                	ret

000012c2 <__set_DEBUG_CR>:
 * @param   value  - set DEBUGE Control value
 *
 * @return  none
 */
void __set_DEBUG_CR(uint32_t value)
{
    12c2:	1101                	addi	sp,sp,-32
    12c4:	ce22                	sw	s0,28(sp)
    12c6:	1000                	addi	s0,sp,32
    12c8:	fea42623          	sw	a0,-20(s0)
	__asm volatile("csrw 0x7C0, %0" : : "r"(value));
    12cc:	fec42783          	lw	a5,-20(s0)
    12d0:	7c079073          	csrw	0x7c0,a5
}
    12d4:	0001                	nop
    12d6:	4472                	lw	s0,28(sp)
    12d8:	6105                	addi	sp,sp,32
    12da:	8082                	ret

000012dc <DBGMCU_Config>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
{
    12dc:	7179                	addi	sp,sp,-48
    12de:	d606                	sw	ra,44(sp)
    12e0:	d422                	sw	s0,40(sp)
    12e2:	1800                	addi	s0,sp,48
    12e4:	fca42e23          	sw	a0,-36(s0)
    12e8:	fcb42c23          	sw	a1,-40(s0)
	uint32_t val;

	if(NewState != DISABLE)
    12ec:	fd842783          	lw	a5,-40(s0)
    12f0:	c789                	beqz	a5,12fa <DBGMCU_Config+0x1e>
	{
		__set_DEBUG_CR(DBGMCU_Periph);
    12f2:	fdc42503          	lw	a0,-36(s0)
    12f6:	37f1                	jal	12c2 <__set_DEBUG_CR>
		val = __get_DEBUG_CR();
		val &= ~(uint32_t)DBGMCU_Periph;
		__set_DEBUG_CR(val);
	}

}
    12f8:	a005                	j	1318 <DBGMCU_Config+0x3c>
		val = __get_DEBUG_CR();
    12fa:	377d                	jal	12a8 <__get_DEBUG_CR>
    12fc:	fea42623          	sw	a0,-20(s0)
		val &= ~(uint32_t)DBGMCU_Periph;
    1300:	fdc42783          	lw	a5,-36(s0)
    1304:	fff7c793          	not	a5,a5
    1308:	fec42703          	lw	a4,-20(s0)
    130c:	8ff9                	and	a5,a5,a4
    130e:	fef42623          	sw	a5,-20(s0)
		__set_DEBUG_CR(val);
    1312:	fec42503          	lw	a0,-20(s0)
    1316:	3775                	jal	12c2 <__set_DEBUG_CR>
}
    1318:	0001                	nop
    131a:	50b2                	lw	ra,44(sp)
    131c:	5422                	lw	s0,40(sp)
    131e:	6145                	addi	sp,sp,48
    1320:	8082                	ret

00001322 <DBGMCU_GetCHIPID>:
 *  CH32X035G8R6-0x035B06x1
 *  CH32X035F7P6-0x035706x1
 *  CH32X033F8P6-0x035A06x1
 */
uint32_t DBGMCU_GetCHIPID( void )
{
    1322:	1141                	addi	sp,sp,-16
    1324:	c622                	sw	s0,12(sp)
    1326:	0800                	addi	s0,sp,16
	return( *( uint32_t * )0x1FFFF704 );
    1328:	1ffff7b7          	lui	a5,0x1ffff
    132c:	70478793          	addi	a5,a5,1796 # 1ffff704 <_data_lma+0x1fff04f8>
    1330:	439c                	lw	a5,0(a5)
}
    1332:	853e                	mv	a0,a5
    1334:	4432                	lw	s0,12(sp)
    1336:	0141                	addi	sp,sp,16
    1338:	8082                	ret

0000133a <DMA_DeInit>:
 *        1 to 8 for DMA1 to select the DMA Channel.
 *
 * @return  none
 */
void DMA_DeInit(DMA_Channel_TypeDef *DMAy_Channelx)
{
    133a:	1101                	addi	sp,sp,-32
    133c:	ce22                	sw	s0,28(sp)
    133e:	1000                	addi	s0,sp,32
    1340:	fea42623          	sw	a0,-20(s0)
    DMAy_Channelx->CFGR &= (uint16_t)(~DMA_CFGR1_EN);
    1344:	fec42783          	lw	a5,-20(s0)
    1348:	4398                	lw	a4,0(a5)
    134a:	67c1                	lui	a5,0x10
    134c:	17f9                	addi	a5,a5,-2
    134e:	8f7d                	and	a4,a4,a5
    1350:	fec42783          	lw	a5,-20(s0)
    1354:	c398                	sw	a4,0(a5)
    DMAy_Channelx->CFGR = 0;
    1356:	fec42783          	lw	a5,-20(s0)
    135a:	0007a023          	sw	zero,0(a5) # 10000 <_data_lma+0xdf4>
    DMAy_Channelx->CNTR = 0;
    135e:	fec42783          	lw	a5,-20(s0)
    1362:	0007a223          	sw	zero,4(a5)
    DMAy_Channelx->PADDR = 0;
    1366:	fec42783          	lw	a5,-20(s0)
    136a:	0007a423          	sw	zero,8(a5)
    DMAy_Channelx->MADDR = 0;
    136e:	fec42783          	lw	a5,-20(s0)
    1372:	0007a623          	sw	zero,12(a5)
    if(DMAy_Channelx == DMA1_Channel1)
    1376:	fec42703          	lw	a4,-20(s0)
    137a:	400207b7          	lui	a5,0x40020
    137e:	07a1                	addi	a5,a5,8
    1380:	00f71b63          	bne	a4,a5,1396 <DMA_DeInit+0x5c>
    {
        DMA1->INTFCR |= DMA1_Channel1_IT_Mask;
    1384:	400207b7          	lui	a5,0x40020
    1388:	43d8                	lw	a4,4(a5)
    138a:	400207b7          	lui	a5,0x40020
    138e:	00f76713          	ori	a4,a4,15
    1392:	c3d8                	sw	a4,4(a5)
    }
    else if(DMAy_Channelx == DMA1_Channel8)
    {
        DMA1->INTFCR |= DMA1_Channel8_IT_Mask;
    }
}
    1394:	a8e5                	j	148c <DMA_DeInit+0x152>
    else if(DMAy_Channelx == DMA1_Channel2)
    1396:	fec42703          	lw	a4,-20(s0)
    139a:	400207b7          	lui	a5,0x40020
    139e:	07f1                	addi	a5,a5,28
    13a0:	00f71b63          	bne	a4,a5,13b6 <DMA_DeInit+0x7c>
        DMA1->INTFCR |= DMA1_Channel2_IT_Mask;
    13a4:	400207b7          	lui	a5,0x40020
    13a8:	43d8                	lw	a4,4(a5)
    13aa:	400207b7          	lui	a5,0x40020
    13ae:	0f076713          	ori	a4,a4,240
    13b2:	c3d8                	sw	a4,4(a5)
}
    13b4:	a8e1                	j	148c <DMA_DeInit+0x152>
    else if(DMAy_Channelx == DMA1_Channel3)
    13b6:	fec42703          	lw	a4,-20(s0)
    13ba:	400207b7          	lui	a5,0x40020
    13be:	03078793          	addi	a5,a5,48 # 40020030 <_eusrstack+0x2001c030>
    13c2:	00f71d63          	bne	a4,a5,13dc <DMA_DeInit+0xa2>
        DMA1->INTFCR |= DMA1_Channel3_IT_Mask;
    13c6:	400207b7          	lui	a5,0x40020
    13ca:	43d4                	lw	a3,4(a5)
    13cc:	400207b7          	lui	a5,0x40020
    13d0:	6705                	lui	a4,0x1
    13d2:	f0070713          	addi	a4,a4,-256 # f00 <ADC_AnalogWatchdog1ThresholdsConfig+0x3a>
    13d6:	8f55                	or	a4,a4,a3
    13d8:	c3d8                	sw	a4,4(a5)
}
    13da:	a84d                	j	148c <DMA_DeInit+0x152>
    else if(DMAy_Channelx == DMA1_Channel4)
    13dc:	fec42703          	lw	a4,-20(s0)
    13e0:	400207b7          	lui	a5,0x40020
    13e4:	04478793          	addi	a5,a5,68 # 40020044 <_eusrstack+0x2001c044>
    13e8:	00f71b63          	bne	a4,a5,13fe <DMA_DeInit+0xc4>
        DMA1->INTFCR |= DMA1_Channel4_IT_Mask;
    13ec:	400207b7          	lui	a5,0x40020
    13f0:	43d4                	lw	a3,4(a5)
    13f2:	400207b7          	lui	a5,0x40020
    13f6:	673d                	lui	a4,0xf
    13f8:	8f55                	or	a4,a4,a3
    13fa:	c3d8                	sw	a4,4(a5)
}
    13fc:	a841                	j	148c <DMA_DeInit+0x152>
    else if(DMAy_Channelx == DMA1_Channel5)
    13fe:	fec42703          	lw	a4,-20(s0)
    1402:	400207b7          	lui	a5,0x40020
    1406:	05878793          	addi	a5,a5,88 # 40020058 <_eusrstack+0x2001c058>
    140a:	00f71c63          	bne	a4,a5,1422 <DMA_DeInit+0xe8>
        DMA1->INTFCR |= DMA1_Channel5_IT_Mask;
    140e:	400207b7          	lui	a5,0x40020
    1412:	43d4                	lw	a3,4(a5)
    1414:	400207b7          	lui	a5,0x40020
    1418:	000f0737          	lui	a4,0xf0
    141c:	8f55                	or	a4,a4,a3
    141e:	c3d8                	sw	a4,4(a5)
}
    1420:	a0b5                	j	148c <DMA_DeInit+0x152>
    else if(DMAy_Channelx == DMA1_Channel6)
    1422:	fec42703          	lw	a4,-20(s0)
    1426:	400207b7          	lui	a5,0x40020
    142a:	06c78793          	addi	a5,a5,108 # 4002006c <_eusrstack+0x2001c06c>
    142e:	00f71c63          	bne	a4,a5,1446 <DMA_DeInit+0x10c>
        DMA1->INTFCR |= DMA1_Channel6_IT_Mask;
    1432:	400207b7          	lui	a5,0x40020
    1436:	43d4                	lw	a3,4(a5)
    1438:	400207b7          	lui	a5,0x40020
    143c:	00f00737          	lui	a4,0xf00
    1440:	8f55                	or	a4,a4,a3
    1442:	c3d8                	sw	a4,4(a5)
}
    1444:	a0a1                	j	148c <DMA_DeInit+0x152>
    else if(DMAy_Channelx == DMA1_Channel7)
    1446:	fec42703          	lw	a4,-20(s0)
    144a:	400207b7          	lui	a5,0x40020
    144e:	08078793          	addi	a5,a5,128 # 40020080 <_eusrstack+0x2001c080>
    1452:	00f71c63          	bne	a4,a5,146a <DMA_DeInit+0x130>
        DMA1->INTFCR |= DMA1_Channel7_IT_Mask;
    1456:	400207b7          	lui	a5,0x40020
    145a:	43d4                	lw	a3,4(a5)
    145c:	400207b7          	lui	a5,0x40020
    1460:	0f000737          	lui	a4,0xf000
    1464:	8f55                	or	a4,a4,a3
    1466:	c3d8                	sw	a4,4(a5)
}
    1468:	a015                	j	148c <DMA_DeInit+0x152>
    else if(DMAy_Channelx == DMA1_Channel8)
    146a:	fec42703          	lw	a4,-20(s0)
    146e:	400207b7          	lui	a5,0x40020
    1472:	09478793          	addi	a5,a5,148 # 40020094 <_eusrstack+0x2001c094>
    1476:	00f71b63          	bne	a4,a5,148c <DMA_DeInit+0x152>
        DMA1->INTFCR |= DMA1_Channel8_IT_Mask;
    147a:	400207b7          	lui	a5,0x40020
    147e:	43d4                	lw	a3,4(a5)
    1480:	400207b7          	lui	a5,0x40020
    1484:	f0000737          	lui	a4,0xf0000
    1488:	8f55                	or	a4,a4,a3
    148a:	c3d8                	sw	a4,4(a5)
}
    148c:	0001                	nop
    148e:	4472                	lw	s0,28(sp)
    1490:	6105                	addi	sp,sp,32
    1492:	8082                	ret

00001494 <DMA_Init>:
 *        contains the configuration information for the specified DMA Channel.
 *
 * @return  none
 */
void DMA_Init(DMA_Channel_TypeDef *DMAy_Channelx, DMA_InitTypeDef *DMA_InitStruct)
{
    1494:	7179                	addi	sp,sp,-48
    1496:	d622                	sw	s0,44(sp)
    1498:	1800                	addi	s0,sp,48
    149a:	fca42e23          	sw	a0,-36(s0)
    149e:	fcb42c23          	sw	a1,-40(s0)
    uint32_t tmpreg = 0;
    14a2:	fe042623          	sw	zero,-20(s0)

    tmpreg = DMAy_Channelx->CFGR;
    14a6:	fdc42783          	lw	a5,-36(s0)
    14aa:	439c                	lw	a5,0(a5)
    14ac:	fef42623          	sw	a5,-20(s0)
    tmpreg &= CFGR_CLEAR_Mask;
    14b0:	fec42703          	lw	a4,-20(s0)
    14b4:	77e1                	lui	a5,0xffff8
    14b6:	07bd                	addi	a5,a5,15
    14b8:	8ff9                	and	a5,a5,a4
    14ba:	fef42623          	sw	a5,-20(s0)
    tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
    14be:	fd842783          	lw	a5,-40(s0)
    14c2:	4798                	lw	a4,8(a5)
    14c4:	fd842783          	lw	a5,-40(s0)
    14c8:	539c                	lw	a5,32(a5)
    14ca:	8f5d                	or	a4,a4,a5
              DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
    14cc:	fd842783          	lw	a5,-40(s0)
    14d0:	4b9c                	lw	a5,16(a5)
    tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
    14d2:	8f5d                	or	a4,a4,a5
              DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
    14d4:	fd842783          	lw	a5,-40(s0)
    14d8:	4bdc                	lw	a5,20(a5)
    14da:	8f5d                	or	a4,a4,a5
              DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
    14dc:	fd842783          	lw	a5,-40(s0)
    14e0:	4f9c                	lw	a5,24(a5)
              DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
    14e2:	8f5d                	or	a4,a4,a5
              DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
    14e4:	fd842783          	lw	a5,-40(s0)
    14e8:	4fdc                	lw	a5,28(a5)
    14ea:	8f5d                	or	a4,a4,a5
              DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
    14ec:	fd842783          	lw	a5,-40(s0)
    14f0:	53dc                	lw	a5,36(a5)
              DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
    14f2:	8f5d                	or	a4,a4,a5
              DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
    14f4:	fd842783          	lw	a5,-40(s0)
    14f8:	579c                	lw	a5,40(a5)
    14fa:	8fd9                	or	a5,a5,a4
    tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
    14fc:	fec42703          	lw	a4,-20(s0)
    1500:	8fd9                	or	a5,a5,a4
    1502:	fef42623          	sw	a5,-20(s0)

    DMAy_Channelx->CFGR = tmpreg;
    1506:	fdc42783          	lw	a5,-36(s0)
    150a:	fec42703          	lw	a4,-20(s0)
    150e:	c398                	sw	a4,0(a5)
    DMAy_Channelx->CNTR = DMA_InitStruct->DMA_BufferSize;
    1510:	fd842783          	lw	a5,-40(s0)
    1514:	47d8                	lw	a4,12(a5)
    1516:	fdc42783          	lw	a5,-36(s0)
    151a:	c3d8                	sw	a4,4(a5)
    DMAy_Channelx->PADDR = DMA_InitStruct->DMA_PeripheralBaseAddr;
    151c:	fd842783          	lw	a5,-40(s0)
    1520:	4398                	lw	a4,0(a5)
    1522:	fdc42783          	lw	a5,-36(s0)
    1526:	c798                	sw	a4,8(a5)
    DMAy_Channelx->MADDR = DMA_InitStruct->DMA_MemoryBaseAddr;
    1528:	fd842783          	lw	a5,-40(s0)
    152c:	43d8                	lw	a4,4(a5)
    152e:	fdc42783          	lw	a5,-36(s0)
    1532:	c7d8                	sw	a4,12(a5)
}
    1534:	0001                	nop
    1536:	5432                	lw	s0,44(sp)
    1538:	6145                	addi	sp,sp,48
    153a:	8082                	ret

0000153c <DMA_StructInit>:
 *        contains the configuration information for the specified DMA Channel.
 *
 * @return  none
 */
void DMA_StructInit(DMA_InitTypeDef *DMA_InitStruct)
{
    153c:	1101                	addi	sp,sp,-32
    153e:	ce22                	sw	s0,28(sp)
    1540:	1000                	addi	s0,sp,32
    1542:	fea42623          	sw	a0,-20(s0)
    DMA_InitStruct->DMA_PeripheralBaseAddr = 0;
    1546:	fec42783          	lw	a5,-20(s0)
    154a:	0007a023          	sw	zero,0(a5) # ffff8000 <_eusrstack+0xdfff4000>
    DMA_InitStruct->DMA_MemoryBaseAddr = 0;
    154e:	fec42783          	lw	a5,-20(s0)
    1552:	0007a223          	sw	zero,4(a5)
    DMA_InitStruct->DMA_DIR = DMA_DIR_PeripheralSRC;
    1556:	fec42783          	lw	a5,-20(s0)
    155a:	0007a423          	sw	zero,8(a5)
    DMA_InitStruct->DMA_BufferSize = 0;
    155e:	fec42783          	lw	a5,-20(s0)
    1562:	0007a623          	sw	zero,12(a5)
    DMA_InitStruct->DMA_PeripheralInc = DMA_PeripheralInc_Disable;
    1566:	fec42783          	lw	a5,-20(s0)
    156a:	0007a823          	sw	zero,16(a5)
    DMA_InitStruct->DMA_MemoryInc = DMA_MemoryInc_Disable;
    156e:	fec42783          	lw	a5,-20(s0)
    1572:	0007aa23          	sw	zero,20(a5)
    DMA_InitStruct->DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
    1576:	fec42783          	lw	a5,-20(s0)
    157a:	0007ac23          	sw	zero,24(a5)
    DMA_InitStruct->DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
    157e:	fec42783          	lw	a5,-20(s0)
    1582:	0007ae23          	sw	zero,28(a5)
    DMA_InitStruct->DMA_Mode = DMA_Mode_Normal;
    1586:	fec42783          	lw	a5,-20(s0)
    158a:	0207a023          	sw	zero,32(a5)
    DMA_InitStruct->DMA_Priority = DMA_Priority_Low;
    158e:	fec42783          	lw	a5,-20(s0)
    1592:	0207a223          	sw	zero,36(a5)
    DMA_InitStruct->DMA_M2M = DMA_M2M_Disable;
    1596:	fec42783          	lw	a5,-20(s0)
    159a:	0207a423          	sw	zero,40(a5)
}
    159e:	0001                	nop
    15a0:	4472                	lw	s0,28(sp)
    15a2:	6105                	addi	sp,sp,32
    15a4:	8082                	ret

000015a6 <DMA_Cmd>:
 *          NewState - new state of the DMAy Channelx(ENABLE or DISABLE).
 *
 * @return  none
 */
void DMA_Cmd(DMA_Channel_TypeDef *DMAy_Channelx, FunctionalState NewState)
{
    15a6:	1101                	addi	sp,sp,-32
    15a8:	ce22                	sw	s0,28(sp)
    15aa:	1000                	addi	s0,sp,32
    15ac:	fea42623          	sw	a0,-20(s0)
    15b0:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    15b4:	fe842783          	lw	a5,-24(s0)
    15b8:	cb91                	beqz	a5,15cc <DMA_Cmd+0x26>
    {
        DMAy_Channelx->CFGR |= DMA_CFGR1_EN;
    15ba:	fec42783          	lw	a5,-20(s0)
    15be:	439c                	lw	a5,0(a5)
    15c0:	0017e713          	ori	a4,a5,1
    15c4:	fec42783          	lw	a5,-20(s0)
    15c8:	c398                	sw	a4,0(a5)
    }
    else
    {
        DMAy_Channelx->CFGR &= (uint16_t)(~DMA_CFGR1_EN);
    }
}
    15ca:	a811                	j	15de <DMA_Cmd+0x38>
        DMAy_Channelx->CFGR &= (uint16_t)(~DMA_CFGR1_EN);
    15cc:	fec42783          	lw	a5,-20(s0)
    15d0:	4398                	lw	a4,0(a5)
    15d2:	67c1                	lui	a5,0x10
    15d4:	17f9                	addi	a5,a5,-2
    15d6:	8f7d                	and	a4,a4,a5
    15d8:	fec42783          	lw	a5,-20(s0)
    15dc:	c398                	sw	a4,0(a5)
}
    15de:	0001                	nop
    15e0:	4472                	lw	s0,28(sp)
    15e2:	6105                	addi	sp,sp,32
    15e4:	8082                	ret

000015e6 <DMA_ITConfig>:
 *          NewState - new state of the DMAy Channelx(ENABLE or DISABLE).
 *
 * @return  none
 */
void DMA_ITConfig(DMA_Channel_TypeDef *DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
    15e6:	1101                	addi	sp,sp,-32
    15e8:	ce22                	sw	s0,28(sp)
    15ea:	1000                	addi	s0,sp,32
    15ec:	fea42623          	sw	a0,-20(s0)
    15f0:	feb42423          	sw	a1,-24(s0)
    15f4:	fec42223          	sw	a2,-28(s0)
    if(NewState != DISABLE)
    15f8:	fe442783          	lw	a5,-28(s0)
    15fc:	cb99                	beqz	a5,1612 <DMA_ITConfig+0x2c>
    {
        DMAy_Channelx->CFGR |= DMA_IT;
    15fe:	fec42783          	lw	a5,-20(s0)
    1602:	4398                	lw	a4,0(a5)
    1604:	fe842783          	lw	a5,-24(s0)
    1608:	8f5d                	or	a4,a4,a5
    160a:	fec42783          	lw	a5,-20(s0)
    160e:	c398                	sw	a4,0(a5)
    }
    else
    {
        DMAy_Channelx->CFGR &= ~DMA_IT;
    }
}
    1610:	a821                	j	1628 <DMA_ITConfig+0x42>
        DMAy_Channelx->CFGR &= ~DMA_IT;
    1612:	fec42783          	lw	a5,-20(s0)
    1616:	4398                	lw	a4,0(a5)
    1618:	fe842783          	lw	a5,-24(s0)
    161c:	fff7c793          	not	a5,a5
    1620:	8f7d                	and	a4,a4,a5
    1622:	fec42783          	lw	a5,-20(s0)
    1626:	c398                	sw	a4,0(a5)
}
    1628:	0001                	nop
    162a:	4472                	lw	s0,28(sp)
    162c:	6105                	addi	sp,sp,32
    162e:	8082                	ret

00001630 <DMA_SetCurrDataCounter>:
 *        transfer.
 *
 * @return  none
 */
void DMA_SetCurrDataCounter(DMA_Channel_TypeDef *DMAy_Channelx, uint16_t DataNumber)
{
    1630:	1101                	addi	sp,sp,-32
    1632:	ce22                	sw	s0,28(sp)
    1634:	1000                	addi	s0,sp,32
    1636:	fea42623          	sw	a0,-20(s0)
    163a:	87ae                	mv	a5,a1
    163c:	fef41523          	sh	a5,-22(s0)
    DMAy_Channelx->CNTR = DataNumber;
    1640:	fea45703          	lhu	a4,-22(s0)
    1644:	fec42783          	lw	a5,-20(s0)
    1648:	c3d8                	sw	a4,4(a5)
}
    164a:	0001                	nop
    164c:	4472                	lw	s0,28(sp)
    164e:	6105                	addi	sp,sp,32
    1650:	8082                	ret

00001652 <DMA_GetCurrDataCounter>:
 *
 * @return  DataNumber - The number of remaining data units in the current
 *        DMAy Channelx transfer.
 */
uint16_t DMA_GetCurrDataCounter(DMA_Channel_TypeDef *DMAy_Channelx)
{
    1652:	1101                	addi	sp,sp,-32
    1654:	ce22                	sw	s0,28(sp)
    1656:	1000                	addi	s0,sp,32
    1658:	fea42623          	sw	a0,-20(s0)
    return ((uint16_t)(DMAy_Channelx->CNTR));
    165c:	fec42783          	lw	a5,-20(s0)
    1660:	43dc                	lw	a5,4(a5)
    1662:	07c2                	slli	a5,a5,0x10
    1664:	83c1                	srli	a5,a5,0x10
}
    1666:	853e                	mv	a0,a5
    1668:	4472                	lw	s0,28(sp)
    166a:	6105                	addi	sp,sp,32
    166c:	8082                	ret

0000166e <DMA_GetFlagStatus>:
 *            DMA1_FLAG_TE8 - DMA1 Channel8 transfer error flag.

 * @return  The new state of DMAy_FLAG (SET or RESET).
 */
FlagStatus DMA_GetFlagStatus(uint32_t DMAy_FLAG)
{
    166e:	7179                	addi	sp,sp,-48
    1670:	d622                	sw	s0,44(sp)
    1672:	1800                	addi	s0,sp,48
    1674:	fca42e23          	sw	a0,-36(s0)
    FlagStatus bitstatus = RESET;
    1678:	fe042623          	sw	zero,-20(s0)
    uint32_t   tmpreg = 0;
    167c:	fe042423          	sw	zero,-24(s0)

    tmpreg = DMA1->INTFR;
    1680:	400207b7          	lui	a5,0x40020
    1684:	439c                	lw	a5,0(a5)
    1686:	fef42423          	sw	a5,-24(s0)

    if((tmpreg & DMAy_FLAG) != (uint32_t)RESET)
    168a:	fe842703          	lw	a4,-24(s0)
    168e:	fdc42783          	lw	a5,-36(s0)
    1692:	8ff9                	and	a5,a5,a4
    1694:	c789                	beqz	a5,169e <DMA_GetFlagStatus+0x30>
    {
        bitstatus = SET;
    1696:	4785                	li	a5,1
    1698:	fef42623          	sw	a5,-20(s0)
    169c:	a019                	j	16a2 <DMA_GetFlagStatus+0x34>
    }
    else
    {
        bitstatus = RESET;
    169e:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    16a2:	fec42783          	lw	a5,-20(s0)
}
    16a6:	853e                	mv	a0,a5
    16a8:	5432                	lw	s0,44(sp)
    16aa:	6145                	addi	sp,sp,48
    16ac:	8082                	ret

000016ae <DMA_ClearFlag>:
 *            DMA1_FLAG_HT8 - DMA1 Channel8 half transfer flag.
 *            DMA1_FLAG_TE8 - DMA1 Channel8 transfer error flag.
 * @return  none
 */
void DMA_ClearFlag(uint32_t DMAy_FLAG)
{
    16ae:	1101                	addi	sp,sp,-32
    16b0:	ce22                	sw	s0,28(sp)
    16b2:	1000                	addi	s0,sp,32
    16b4:	fea42623          	sw	a0,-20(s0)
    DMA1->INTFCR = DMAy_FLAG;
    16b8:	400207b7          	lui	a5,0x40020
    16bc:	fec42703          	lw	a4,-20(s0)
    16c0:	c3d8                	sw	a4,4(a5)
}
    16c2:	0001                	nop
    16c4:	4472                	lw	s0,28(sp)
    16c6:	6105                	addi	sp,sp,32
    16c8:	8082                	ret

000016ca <DMA_GetITStatus>:
 *            DMA1_IT_HT8 - DMA1 Channel8 half transfer flag.
 *            DMA1_IT_TE8 - DMA1 Channel8 transfer error flag.
 * @return  The new state of DMAy_IT (SET or RESET).
 */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
    16ca:	7179                	addi	sp,sp,-48
    16cc:	d622                	sw	s0,44(sp)
    16ce:	1800                	addi	s0,sp,48
    16d0:	fca42e23          	sw	a0,-36(s0)
    ITStatus bitstatus = RESET;
    16d4:	fe042623          	sw	zero,-20(s0)
    uint32_t tmpreg = 0;
    16d8:	fe042423          	sw	zero,-24(s0)

    tmpreg = DMA1->INTFR;
    16dc:	400207b7          	lui	a5,0x40020
    16e0:	439c                	lw	a5,0(a5)
    16e2:	fef42423          	sw	a5,-24(s0)

    if((tmpreg & DMAy_IT) != (uint32_t)RESET)
    16e6:	fe842703          	lw	a4,-24(s0)
    16ea:	fdc42783          	lw	a5,-36(s0)
    16ee:	8ff9                	and	a5,a5,a4
    16f0:	c789                	beqz	a5,16fa <DMA_GetITStatus+0x30>
    {
        bitstatus = SET;
    16f2:	4785                	li	a5,1
    16f4:	fef42623          	sw	a5,-20(s0)
    16f8:	a019                	j	16fe <DMA_GetITStatus+0x34>
    }
    else
    {
        bitstatus = RESET;
    16fa:	fe042623          	sw	zero,-20(s0)
    }
    return bitstatus;
    16fe:	fec42783          	lw	a5,-20(s0)
}
    1702:	853e                	mv	a0,a5
    1704:	5432                	lw	s0,44(sp)
    1706:	6145                	addi	sp,sp,48
    1708:	8082                	ret

0000170a <DMA_ClearITPendingBit>:
 *            DMA1_IT_HT8 - DMA1 Channel8 half transfer flag.
 *            DMA1_IT_TE8 - DMA1 Channel8 transfer error flag.
 * @return  none
 */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
    170a:	1101                	addi	sp,sp,-32
    170c:	ce22                	sw	s0,28(sp)
    170e:	1000                	addi	s0,sp,32
    1710:	fea42623          	sw	a0,-20(s0)
    DMA1->INTFCR = DMAy_IT;
    1714:	400207b7          	lui	a5,0x40020
    1718:	fec42703          	lw	a4,-20(s0)
    171c:	c3d8                	sw	a4,4(a5)
}
    171e:	0001                	nop
    1720:	4472                	lw	s0,28(sp)
    1722:	6105                	addi	sp,sp,32
    1724:	8082                	ret

00001726 <EXTI_DeInit>:
 *        reset values.
 *
 * @return  none.
 */
void EXTI_DeInit(void)
{
    1726:	1141                	addi	sp,sp,-16
    1728:	c622                	sw	s0,12(sp)
    172a:	0800                	addi	s0,sp,16
    EXTI->INTENR = 0x00000000;
    172c:	400107b7          	lui	a5,0x40010
    1730:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1734:	0007a023          	sw	zero,0(a5)
    EXTI->EVENR = 0x00000000;
    1738:	400107b7          	lui	a5,0x40010
    173c:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1740:	0007a223          	sw	zero,4(a5)
    EXTI->RTENR = 0x00000000;
    1744:	400107b7          	lui	a5,0x40010
    1748:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    174c:	0007a423          	sw	zero,8(a5)
    EXTI->FTENR = 0x00000000;
    1750:	400107b7          	lui	a5,0x40010
    1754:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1758:	0007a623          	sw	zero,12(a5)
    EXTI->INTFR = 0x000FFFFF;
    175c:	400107b7          	lui	a5,0x40010
    1760:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1764:	00100737          	lui	a4,0x100
    1768:	177d                	addi	a4,a4,-1
    176a:	cbd8                	sw	a4,20(a5)
}
    176c:	0001                	nop
    176e:	4432                	lw	s0,12(sp)
    1770:	0141                	addi	sp,sp,16
    1772:	8082                	ret

00001774 <EXTI_Init>:
 * @param   EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
 *
 * @return  none.
 */
void EXTI_Init(EXTI_InitTypeDef *EXTI_InitStruct)
{
    1774:	7179                	addi	sp,sp,-48
    1776:	d622                	sw	s0,44(sp)
    1778:	1800                	addi	s0,sp,48
    177a:	fca42e23          	sw	a0,-36(s0)
    uint32_t tmp = 0;
    177e:	fe042623          	sw	zero,-20(s0)

    tmp = (uint32_t)EXTI_BASE;
    1782:	400107b7          	lui	a5,0x40010
    1786:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    178a:	fef42623          	sw	a5,-20(s0)
    if(EXTI_InitStruct->EXTI_LineCmd != DISABLE)
    178e:	fdc42783          	lw	a5,-36(s0)
    1792:	47dc                	lw	a5,12(a5)
    1794:	12078063          	beqz	a5,18b4 <EXTI_Init+0x140>
    {
        EXTI->INTENR &= ~EXTI_InitStruct->EXTI_Line;
    1798:	400107b7          	lui	a5,0x40010
    179c:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    17a0:	4394                	lw	a3,0(a5)
    17a2:	fdc42783          	lw	a5,-36(s0)
    17a6:	439c                	lw	a5,0(a5)
    17a8:	fff7c713          	not	a4,a5
    17ac:	400107b7          	lui	a5,0x40010
    17b0:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    17b4:	8f75                	and	a4,a4,a3
    17b6:	c398                	sw	a4,0(a5)
        EXTI->EVENR &= ~EXTI_InitStruct->EXTI_Line;
    17b8:	400107b7          	lui	a5,0x40010
    17bc:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    17c0:	43d4                	lw	a3,4(a5)
    17c2:	fdc42783          	lw	a5,-36(s0)
    17c6:	439c                	lw	a5,0(a5)
    17c8:	fff7c713          	not	a4,a5
    17cc:	400107b7          	lui	a5,0x40010
    17d0:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    17d4:	8f75                	and	a4,a4,a3
    17d6:	c3d8                	sw	a4,4(a5)
        tmp += EXTI_InitStruct->EXTI_Mode;
    17d8:	fdc42783          	lw	a5,-36(s0)
    17dc:	43dc                	lw	a5,4(a5)
    17de:	fec42703          	lw	a4,-20(s0)
    17e2:	97ba                	add	a5,a5,a4
    17e4:	fef42623          	sw	a5,-20(s0)
        *(__IO uint32_t *)tmp |= EXTI_InitStruct->EXTI_Line;
    17e8:	fec42783          	lw	a5,-20(s0)
    17ec:	4394                	lw	a3,0(a5)
    17ee:	fdc42783          	lw	a5,-36(s0)
    17f2:	4398                	lw	a4,0(a5)
    17f4:	fec42783          	lw	a5,-20(s0)
    17f8:	8f55                	or	a4,a4,a3
    17fa:	c398                	sw	a4,0(a5)
        EXTI->RTENR &= ~EXTI_InitStruct->EXTI_Line;
    17fc:	400107b7          	lui	a5,0x40010
    1800:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1804:	4794                	lw	a3,8(a5)
    1806:	fdc42783          	lw	a5,-36(s0)
    180a:	439c                	lw	a5,0(a5)
    180c:	fff7c713          	not	a4,a5
    1810:	400107b7          	lui	a5,0x40010
    1814:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1818:	8f75                	and	a4,a4,a3
    181a:	c798                	sw	a4,8(a5)
        EXTI->FTENR &= ~EXTI_InitStruct->EXTI_Line;
    181c:	400107b7          	lui	a5,0x40010
    1820:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1824:	47d4                	lw	a3,12(a5)
    1826:	fdc42783          	lw	a5,-36(s0)
    182a:	439c                	lw	a5,0(a5)
    182c:	fff7c713          	not	a4,a5
    1830:	400107b7          	lui	a5,0x40010
    1834:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1838:	8f75                	and	a4,a4,a3
    183a:	c7d8                	sw	a4,12(a5)
        if(EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
    183c:	fdc42783          	lw	a5,-36(s0)
    1840:	4798                	lw	a4,8(a5)
    1842:	47c1                	li	a5,16
    1844:	02f71f63          	bne	a4,a5,1882 <EXTI_Init+0x10e>
        {
            EXTI->RTENR |= EXTI_InitStruct->EXTI_Line;
    1848:	400107b7          	lui	a5,0x40010
    184c:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1850:	4794                	lw	a3,8(a5)
    1852:	fdc42783          	lw	a5,-36(s0)
    1856:	4398                	lw	a4,0(a5)
    1858:	400107b7          	lui	a5,0x40010
    185c:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1860:	8f55                	or	a4,a4,a3
    1862:	c798                	sw	a4,8(a5)
            EXTI->FTENR |= EXTI_InitStruct->EXTI_Line;
    1864:	400107b7          	lui	a5,0x40010
    1868:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    186c:	47d4                	lw	a3,12(a5)
    186e:	fdc42783          	lw	a5,-36(s0)
    1872:	4398                	lw	a4,0(a5)
    1874:	400107b7          	lui	a5,0x40010
    1878:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    187c:	8f55                	or	a4,a4,a3
    187e:	c7d8                	sw	a4,12(a5)
    else
    {
        tmp += EXTI_InitStruct->EXTI_Mode;
        *(__IO uint32_t *)tmp &= ~EXTI_InitStruct->EXTI_Line;
    }
}
    1880:	a8b1                	j	18dc <EXTI_Init+0x168>
            tmp = (uint32_t)EXTI_BASE;
    1882:	400107b7          	lui	a5,0x40010
    1886:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    188a:	fef42623          	sw	a5,-20(s0)
            tmp += EXTI_InitStruct->EXTI_Trigger;
    188e:	fdc42783          	lw	a5,-36(s0)
    1892:	479c                	lw	a5,8(a5)
    1894:	fec42703          	lw	a4,-20(s0)
    1898:	97ba                	add	a5,a5,a4
    189a:	fef42623          	sw	a5,-20(s0)
            *(__IO uint32_t *)tmp |= EXTI_InitStruct->EXTI_Line;
    189e:	fec42783          	lw	a5,-20(s0)
    18a2:	4394                	lw	a3,0(a5)
    18a4:	fdc42783          	lw	a5,-36(s0)
    18a8:	4398                	lw	a4,0(a5)
    18aa:	fec42783          	lw	a5,-20(s0)
    18ae:	8f55                	or	a4,a4,a3
    18b0:	c398                	sw	a4,0(a5)
}
    18b2:	a02d                	j	18dc <EXTI_Init+0x168>
        tmp += EXTI_InitStruct->EXTI_Mode;
    18b4:	fdc42783          	lw	a5,-36(s0)
    18b8:	43dc                	lw	a5,4(a5)
    18ba:	fec42703          	lw	a4,-20(s0)
    18be:	97ba                	add	a5,a5,a4
    18c0:	fef42623          	sw	a5,-20(s0)
        *(__IO uint32_t *)tmp &= ~EXTI_InitStruct->EXTI_Line;
    18c4:	fec42783          	lw	a5,-20(s0)
    18c8:	4394                	lw	a3,0(a5)
    18ca:	fdc42783          	lw	a5,-36(s0)
    18ce:	439c                	lw	a5,0(a5)
    18d0:	fff7c713          	not	a4,a5
    18d4:	fec42783          	lw	a5,-20(s0)
    18d8:	8f75                	and	a4,a4,a3
    18da:	c398                	sw	a4,0(a5)
}
    18dc:	0001                	nop
    18de:	5432                	lw	s0,44(sp)
    18e0:	6145                	addi	sp,sp,48
    18e2:	8082                	ret

000018e4 <EXTI_StructInit>:
 * @param   EXTI_InitStruct - pointer to a EXTI_InitTypeDef structure
 *
 * @return  none.
 */
void EXTI_StructInit(EXTI_InitTypeDef *EXTI_InitStruct)
{
    18e4:	1101                	addi	sp,sp,-32
    18e6:	ce22                	sw	s0,28(sp)
    18e8:	1000                	addi	s0,sp,32
    18ea:	fea42623          	sw	a0,-20(s0)
    EXTI_InitStruct->EXTI_Line = EXTI_LINENONE;
    18ee:	fec42783          	lw	a5,-20(s0)
    18f2:	0007a023          	sw	zero,0(a5)
    EXTI_InitStruct->EXTI_Mode = EXTI_Mode_Interrupt;
    18f6:	fec42783          	lw	a5,-20(s0)
    18fa:	0007a223          	sw	zero,4(a5)
    EXTI_InitStruct->EXTI_Trigger = EXTI_Trigger_Falling;
    18fe:	fec42783          	lw	a5,-20(s0)
    1902:	4731                	li	a4,12
    1904:	c798                	sw	a4,8(a5)
    EXTI_InitStruct->EXTI_LineCmd = DISABLE;
    1906:	fec42783          	lw	a5,-20(s0)
    190a:	0007a623          	sw	zero,12(a5)
}
    190e:	0001                	nop
    1910:	4472                	lw	s0,28(sp)
    1912:	6105                	addi	sp,sp,32
    1914:	8082                	ret

00001916 <EXTI_GenerateSWInterrupt>:
 * @param   EXTI_Line - specifies the EXTI lines to be enabled or disabled.
 *
 * @return  none.
 */
void EXTI_GenerateSWInterrupt(uint32_t EXTI_Line)
{
    1916:	1101                	addi	sp,sp,-32
    1918:	ce22                	sw	s0,28(sp)
    191a:	1000                	addi	s0,sp,32
    191c:	fea42623          	sw	a0,-20(s0)
    EXTI->SWIEVR |= EXTI_Line;
    1920:	400107b7          	lui	a5,0x40010
    1924:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1928:	4b94                	lw	a3,16(a5)
    192a:	400107b7          	lui	a5,0x40010
    192e:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1932:	fec42703          	lw	a4,-20(s0)
    1936:	8f55                	or	a4,a4,a3
    1938:	cb98                	sw	a4,16(a5)
}
    193a:	0001                	nop
    193c:	4472                	lw	s0,28(sp)
    193e:	6105                	addi	sp,sp,32
    1940:	8082                	ret

00001942 <EXTI_GetFlagStatus>:
 * @param   EXTI_Line - specifies the EXTI lines to be enabled or disabled.
 *
 * @return  The new state of EXTI_Line (SET or RESET).
 */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
    1942:	7179                	addi	sp,sp,-48
    1944:	d622                	sw	s0,44(sp)
    1946:	1800                	addi	s0,sp,48
    1948:	fca42e23          	sw	a0,-36(s0)
    FlagStatus bitstatus = RESET;
    194c:	fe042623          	sw	zero,-20(s0)
    if((EXTI->INTFR & EXTI_Line) != (uint32_t)RESET)
    1950:	400107b7          	lui	a5,0x40010
    1954:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1958:	4bd8                	lw	a4,20(a5)
    195a:	fdc42783          	lw	a5,-36(s0)
    195e:	8ff9                	and	a5,a5,a4
    1960:	c789                	beqz	a5,196a <EXTI_GetFlagStatus+0x28>
    {
        bitstatus = SET;
    1962:	4785                	li	a5,1
    1964:	fef42623          	sw	a5,-20(s0)
    1968:	a019                	j	196e <EXTI_GetFlagStatus+0x2c>
    }
    else
    {
        bitstatus = RESET;
    196a:	fe042623          	sw	zero,-20(s0)
    }
    return bitstatus;
    196e:	fec42783          	lw	a5,-20(s0)
}
    1972:	853e                	mv	a0,a5
    1974:	5432                	lw	s0,44(sp)
    1976:	6145                	addi	sp,sp,48
    1978:	8082                	ret

0000197a <EXTI_ClearFlag>:
 * @param   EXTI_Line - specifies the EXTI lines to be enabled or disabled.
 *
 * @return  None
 */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
    197a:	1101                	addi	sp,sp,-32
    197c:	ce22                	sw	s0,28(sp)
    197e:	1000                	addi	s0,sp,32
    1980:	fea42623          	sw	a0,-20(s0)
    EXTI->INTFR = EXTI_Line;
    1984:	400107b7          	lui	a5,0x40010
    1988:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    198c:	fec42703          	lw	a4,-20(s0)
    1990:	cbd8                	sw	a4,20(a5)
}
    1992:	0001                	nop
    1994:	4472                	lw	s0,28(sp)
    1996:	6105                	addi	sp,sp,32
    1998:	8082                	ret

0000199a <EXTI_GetITStatus>:
 * @param   EXTI_Line - specifies the EXTI lines to be enabled or disabled.
 *
 * @return  The new state of EXTI_Line (SET or RESET).
 */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
    199a:	7179                	addi	sp,sp,-48
    199c:	d622                	sw	s0,44(sp)
    199e:	1800                	addi	s0,sp,48
    19a0:	fca42e23          	sw	a0,-36(s0)
    ITStatus bitstatus = RESET;
    19a4:	fe042623          	sw	zero,-20(s0)
    uint32_t enablestatus = 0;
    19a8:	fe042423          	sw	zero,-24(s0)

    enablestatus = EXTI->INTENR & EXTI_Line;
    19ac:	400107b7          	lui	a5,0x40010
    19b0:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    19b4:	439c                	lw	a5,0(a5)
    19b6:	fdc42703          	lw	a4,-36(s0)
    19ba:	8ff9                	and	a5,a5,a4
    19bc:	fef42423          	sw	a5,-24(s0)
    if(((EXTI->INTFR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
    19c0:	400107b7          	lui	a5,0x40010
    19c4:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    19c8:	4bd8                	lw	a4,20(a5)
    19ca:	fdc42783          	lw	a5,-36(s0)
    19ce:	8ff9                	and	a5,a5,a4
    19d0:	cb81                	beqz	a5,19e0 <EXTI_GetITStatus+0x46>
    19d2:	fe842783          	lw	a5,-24(s0)
    19d6:	c789                	beqz	a5,19e0 <EXTI_GetITStatus+0x46>
    {
        bitstatus = SET;
    19d8:	4785                	li	a5,1
    19da:	fef42623          	sw	a5,-20(s0)
    19de:	a019                	j	19e4 <EXTI_GetITStatus+0x4a>
    }
    else
    {
        bitstatus = RESET;
    19e0:	fe042623          	sw	zero,-20(s0)
    }
    return bitstatus;
    19e4:	fec42783          	lw	a5,-20(s0)
}
    19e8:	853e                	mv	a0,a5
    19ea:	5432                	lw	s0,44(sp)
    19ec:	6145                	addi	sp,sp,48
    19ee:	8082                	ret

000019f0 <EXTI_ClearITPendingBit>:
 * @param   EXTI_Line - specifies the EXTI lines to be enabled or disabled.
 *
 * @return  none
 */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
    19f0:	1101                	addi	sp,sp,-32
    19f2:	ce22                	sw	s0,28(sp)
    19f4:	1000                	addi	s0,sp,32
    19f6:	fea42623          	sw	a0,-20(s0)
    EXTI->INTFR = EXTI_Line;
    19fa:	400107b7          	lui	a5,0x40010
    19fe:	40078793          	addi	a5,a5,1024 # 40010400 <_eusrstack+0x2000c400>
    1a02:	fec42703          	lw	a4,-20(s0)
    1a06:	cbd8                	sw	a4,20(a5)
}
    1a08:	0001                	nop
    1a0a:	4472                	lw	s0,28(sp)
    1a0c:	6105                	addi	sp,sp,32
    1a0e:	8082                	ret

00001a10 <FLASH_SetLatency>:
  *                    FLASH_Latency_2 - FLASH Two Latency cycles
  *
  * @return         None
  */
void FLASH_SetLatency(uint32_t FLASH_Latency)
{
    1a10:	7179                	addi	sp,sp,-48
    1a12:	d622                	sw	s0,44(sp)
    1a14:	1800                	addi	s0,sp,48
    1a16:	fca42e23          	sw	a0,-36(s0)
    uint32_t tmpreg = 0;
    1a1a:	fe042623          	sw	zero,-20(s0)

    tmpreg = FLASH->ACTLR;
    1a1e:	400227b7          	lui	a5,0x40022
    1a22:	439c                	lw	a5,0(a5)
    1a24:	fef42623          	sw	a5,-20(s0)
    tmpreg &= ACR_LATENCY_Mask;
    1a28:	fec42783          	lw	a5,-20(s0)
    1a2c:	0387f793          	andi	a5,a5,56
    1a30:	fef42623          	sw	a5,-20(s0)
    tmpreg |= FLASH_Latency;
    1a34:	fec42703          	lw	a4,-20(s0)
    1a38:	fdc42783          	lw	a5,-36(s0)
    1a3c:	8fd9                	or	a5,a5,a4
    1a3e:	fef42623          	sw	a5,-20(s0)
    FLASH->ACTLR = tmpreg;
    1a42:	400227b7          	lui	a5,0x40022
    1a46:	fec42703          	lw	a4,-20(s0)
    1a4a:	c398                	sw	a4,0(a5)
}
    1a4c:	0001                	nop
    1a4e:	5432                	lw	s0,44(sp)
    1a50:	6145                	addi	sp,sp,48
    1a52:	8082                	ret

00001a54 <FLASH_Unlock>:
 * @brief          Unlocks the FLASH Program Erase Controller.
 *
 * @return         None
 */
void FLASH_Unlock(void)
{
    1a54:	1141                	addi	sp,sp,-16
    1a56:	c622                	sw	s0,12(sp)
    1a58:	0800                	addi	s0,sp,16
    /* Authorize the FPEC of Bank1 Access */
    FLASH->KEYR = FLASH_KEY1;
    1a5a:	400227b7          	lui	a5,0x40022
    1a5e:	45670737          	lui	a4,0x45670
    1a62:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566c123>
    1a66:	c3d8                	sw	a4,4(a5)
    FLASH->KEYR = FLASH_KEY2;
    1a68:	400227b7          	lui	a5,0x40022
    1a6c:	cdef9737          	lui	a4,0xcdef9
    1a70:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef49ab>
    1a74:	c3d8                	sw	a4,4(a5)
}
    1a76:	0001                	nop
    1a78:	4432                	lw	s0,12(sp)
    1a7a:	0141                	addi	sp,sp,16
    1a7c:	8082                	ret

00001a7e <FLASH_Lock>:
 * @brief          Locks the FLASH Program Erase Controller.
 *
 * @return         None
 */
void FLASH_Lock(void)
{
    1a7e:	1141                	addi	sp,sp,-16
    1a80:	c622                	sw	s0,12(sp)
    1a82:	0800                	addi	s0,sp,16
    FLASH->CTLR |= CR_LOCK_Set;
    1a84:	400227b7          	lui	a5,0x40022
    1a88:	4b98                	lw	a4,16(a5)
    1a8a:	400227b7          	lui	a5,0x40022
    1a8e:	08076713          	ori	a4,a4,128
    1a92:	cb98                	sw	a4,16(a5)
}
    1a94:	0001                	nop
    1a96:	4432                	lw	s0,12(sp)
    1a98:	0141                	addi	sp,sp,16
    1a9a:	8082                	ret

00001a9c <FLASH_ErasePage>:
 *
 * @return         FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *                 FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 */
FLASH_Status FLASH_ErasePage(uint32_t Page_Address)
{
    1a9c:	7179                	addi	sp,sp,-48
    1a9e:	d606                	sw	ra,44(sp)
    1aa0:	d422                	sw	s0,40(sp)
    1aa2:	1800                	addi	s0,sp,48
    1aa4:	fca42e23          	sw	a0,-36(s0)
    FLASH_Status status = FLASH_COMPLETE;
    1aa8:	4791                	li	a5,4
    1aaa:	fef42623          	sw	a5,-20(s0)

    status = FLASH_WaitForLastOperation(EraseTimeout);
    1aae:	000b0537          	lui	a0,0xb0
    1ab2:	2511                	jal	20b6 <FLASH_WaitForLastOperation>
    1ab4:	fea42623          	sw	a0,-20(s0)

    if(status == FLASH_COMPLETE)
    1ab8:	fec42703          	lw	a4,-20(s0)
    1abc:	4791                	li	a5,4
    1abe:	04f71363          	bne	a4,a5,1b04 <FLASH_ErasePage+0x68>
    {
        FLASH->CTLR |= CR_PER_Set;
    1ac2:	400227b7          	lui	a5,0x40022
    1ac6:	4b98                	lw	a4,16(a5)
    1ac8:	400227b7          	lui	a5,0x40022
    1acc:	00276713          	ori	a4,a4,2
    1ad0:	cb98                	sw	a4,16(a5)
        FLASH->ADDR = Page_Address;
    1ad2:	400227b7          	lui	a5,0x40022
    1ad6:	fdc42703          	lw	a4,-36(s0)
    1ada:	cbd8                	sw	a4,20(a5)
        FLASH->CTLR |= CR_STRT_Set;
    1adc:	400227b7          	lui	a5,0x40022
    1ae0:	4b98                	lw	a4,16(a5)
    1ae2:	400227b7          	lui	a5,0x40022
    1ae6:	04076713          	ori	a4,a4,64
    1aea:	cb98                	sw	a4,16(a5)

        status = FLASH_WaitForLastOperation(EraseTimeout);
    1aec:	000b0537          	lui	a0,0xb0
    1af0:	23d9                	jal	20b6 <FLASH_WaitForLastOperation>
    1af2:	fea42623          	sw	a0,-20(s0)

        FLASH->CTLR &= CR_PER_Reset;
    1af6:	400227b7          	lui	a5,0x40022
    1afa:	4b98                	lw	a4,16(a5)
    1afc:	400227b7          	lui	a5,0x40022
    1b00:	9b75                	andi	a4,a4,-3
    1b02:	cb98                	sw	a4,16(a5)
    }

    return status;
    1b04:	fec42783          	lw	a5,-20(s0)
}
    1b08:	853e                	mv	a0,a5
    1b0a:	50b2                	lw	ra,44(sp)
    1b0c:	5422                	lw	s0,40(sp)
    1b0e:	6145                	addi	sp,sp,48
    1b10:	8082                	ret

00001b12 <FLASH_EraseAllPages>:
 *
 * @return         FLASH Status - The returned value can be:FLASH_BUSY, FLASH_ERROR_PG,
 *                 FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 */
FLASH_Status FLASH_EraseAllPages(void)
{
    1b12:	1101                	addi	sp,sp,-32
    1b14:	ce06                	sw	ra,28(sp)
    1b16:	cc22                	sw	s0,24(sp)
    1b18:	1000                	addi	s0,sp,32
    FLASH_Status status = FLASH_COMPLETE;
    1b1a:	4791                	li	a5,4
    1b1c:	fef42623          	sw	a5,-20(s0)

    status = FLASH_WaitForLastOperation(EraseTimeout);
    1b20:	000b0537          	lui	a0,0xb0
    1b24:	2b49                	jal	20b6 <FLASH_WaitForLastOperation>
    1b26:	fea42623          	sw	a0,-20(s0)
    if(status == FLASH_COMPLETE)
    1b2a:	fec42703          	lw	a4,-20(s0)
    1b2e:	4791                	li	a5,4
    1b30:	02f71e63          	bne	a4,a5,1b6c <FLASH_EraseAllPages+0x5a>
    {
        FLASH->CTLR |= CR_MER_Set;
    1b34:	400227b7          	lui	a5,0x40022
    1b38:	4b98                	lw	a4,16(a5)
    1b3a:	400227b7          	lui	a5,0x40022
    1b3e:	00476713          	ori	a4,a4,4
    1b42:	cb98                	sw	a4,16(a5)
        FLASH->CTLR |= CR_STRT_Set;
    1b44:	400227b7          	lui	a5,0x40022
    1b48:	4b98                	lw	a4,16(a5)
    1b4a:	400227b7          	lui	a5,0x40022
    1b4e:	04076713          	ori	a4,a4,64
    1b52:	cb98                	sw	a4,16(a5)

        status = FLASH_WaitForLastOperation(EraseTimeout);
    1b54:	000b0537          	lui	a0,0xb0
    1b58:	2bb9                	jal	20b6 <FLASH_WaitForLastOperation>
    1b5a:	fea42623          	sw	a0,-20(s0)

        FLASH->CTLR &= CR_MER_Reset;
    1b5e:	400227b7          	lui	a5,0x40022
    1b62:	4b98                	lw	a4,16(a5)
    1b64:	400227b7          	lui	a5,0x40022
    1b68:	9b6d                	andi	a4,a4,-5
    1b6a:	cb98                	sw	a4,16(a5)
    }

    return status;
    1b6c:	fec42783          	lw	a5,-20(s0)
}
    1b70:	853e                	mv	a0,a5
    1b72:	40f2                	lw	ra,28(sp)
    1b74:	4462                	lw	s0,24(sp)
    1b76:	6105                	addi	sp,sp,32
    1b78:	8082                	ret

00001b7a <FLASH_EraseOptionBytes>:
 *
 * @return         FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *                 FLASH_ERROR_WRP, FLASH_COMPLETE or FLASH_TIMEOUT.
 */
FLASH_Status FLASH_EraseOptionBytes(void)
{
    1b7a:	1101                	addi	sp,sp,-32
    1b7c:	ce06                	sw	ra,28(sp)
    1b7e:	cc22                	sw	s0,24(sp)
    1b80:	1000                	addi	s0,sp,32
    FLASH_Status status = FLASH_COMPLETE;
    1b82:	4791                	li	a5,4
    1b84:	fef42623          	sw	a5,-20(s0)

    status = FLASH_WaitForLastOperation(EraseTimeout);
    1b88:	000b0537          	lui	a0,0xb0
    1b8c:	232d                	jal	20b6 <FLASH_WaitForLastOperation>
    1b8e:	fea42623          	sw	a0,-20(s0)
    if(status == FLASH_COMPLETE)
    1b92:	fec42703          	lw	a4,-20(s0)
    1b96:	4791                	li	a5,4
    1b98:	04f71f63          	bne	a4,a5,1bf6 <FLASH_EraseOptionBytes+0x7c>
    {
        FLASH_Unlock();
    1b9c:	3d65                	jal	1a54 <FLASH_Unlock>

        FLASH->OBKEYR = FLASH_KEY1;
    1b9e:	400227b7          	lui	a5,0x40022
    1ba2:	45670737          	lui	a4,0x45670
    1ba6:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566c123>
    1baa:	c798                	sw	a4,8(a5)
        FLASH->OBKEYR = FLASH_KEY2;
    1bac:	400227b7          	lui	a5,0x40022
    1bb0:	cdef9737          	lui	a4,0xcdef9
    1bb4:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef49ab>
    1bb8:	c798                	sw	a4,8(a5)

        FLASH->CTLR |= CR_OPTER_Set;
    1bba:	400227b7          	lui	a5,0x40022
    1bbe:	4b98                	lw	a4,16(a5)
    1bc0:	400227b7          	lui	a5,0x40022
    1bc4:	02076713          	ori	a4,a4,32
    1bc8:	cb98                	sw	a4,16(a5)
        FLASH->CTLR |= CR_STRT_Set;
    1bca:	400227b7          	lui	a5,0x40022
    1bce:	4b98                	lw	a4,16(a5)
    1bd0:	400227b7          	lui	a5,0x40022
    1bd4:	04076713          	ori	a4,a4,64
    1bd8:	cb98                	sw	a4,16(a5)
        status = FLASH_WaitForLastOperation(EraseTimeout);
    1bda:	000b0537          	lui	a0,0xb0
    1bde:	29e1                	jal	20b6 <FLASH_WaitForLastOperation>
    1be0:	fea42623          	sw	a0,-20(s0)

        FLASH->CTLR &= CR_OPTER_Reset;
    1be4:	400227b7          	lui	a5,0x40022
    1be8:	4b98                	lw	a4,16(a5)
    1bea:	400227b7          	lui	a5,0x40022
    1bee:	fdf77713          	andi	a4,a4,-33
    1bf2:	cb98                	sw	a4,16(a5)

        FLASH_Lock();
    1bf4:	3569                	jal	1a7e <FLASH_Lock>
    }
    return status;
    1bf6:	fec42783          	lw	a5,-20(s0)
}
    1bfa:	853e                	mv	a0,a5
    1bfc:	40f2                	lw	ra,28(sp)
    1bfe:	4462                	lw	s0,24(sp)
    1c00:	6105                	addi	sp,sp,32
    1c02:	8082                	ret

00001c04 <FLASH_OptionBytePR>:
 * @param     pbuf - data.
 *
 * @return    none
 */
void FLASH_OptionBytePR(u32* pbuf)
{
    1c04:	7179                	addi	sp,sp,-48
    1c06:	d606                	sw	ra,44(sp)
    1c08:	d422                	sw	s0,40(sp)
    1c0a:	1800                	addi	s0,sp,48
    1c0c:	fca42e23          	sw	a0,-36(s0)
    uint8_t i;

    FLASH_EraseOptionBytes();
    1c10:	37ad                	jal	1b7a <FLASH_EraseOptionBytes>
    FLASH_Unlock_Fast();
    1c12:	23b1                	jal	215e <FLASH_Unlock_Fast>
    FLASH_BufReset();
    1c14:	237d                	jal	21c2 <FLASH_BufReset>

    for(i=0; i<4; i++)
    1c16:	fe0407a3          	sb	zero,-17(s0)
    1c1a:	a815                	j	1c4e <FLASH_OptionBytePR+0x4a>
    {
        FLASH_BufLoad((OB_BASE + 4*i), *pbuf++);
    1c1c:	fef44783          	lbu	a5,-17(s0)
    1c20:	078a                	slli	a5,a5,0x2
    1c22:	873e                	mv	a4,a5
    1c24:	200007b7          	lui	a5,0x20000
    1c28:	80078793          	addi	a5,a5,-2048 # 1ffff800 <_data_lma+0x1fff05f4>
    1c2c:	00f706b3          	add	a3,a4,a5
    1c30:	fdc42783          	lw	a5,-36(s0)
    1c34:	00478713          	addi	a4,a5,4
    1c38:	fce42e23          	sw	a4,-36(s0)
    1c3c:	439c                	lw	a5,0(a5)
    1c3e:	85be                	mv	a1,a5
    1c40:	8536                	mv	a0,a3
    1c42:	23f9                	jal	2210 <FLASH_BufLoad>
    for(i=0; i<4; i++)
    1c44:	fef44783          	lbu	a5,-17(s0)
    1c48:	0785                	addi	a5,a5,1
    1c4a:	fef407a3          	sb	a5,-17(s0)
    1c4e:	fef44703          	lbu	a4,-17(s0)
    1c52:	478d                	li	a5,3
    1c54:	fce7f4e3          	bgeu	a5,a4,1c1c <FLASH_OptionBytePR+0x18>
    }

    FLASH_ProgramPage_Fast(OB_BASE);
    1c58:	200007b7          	lui	a5,0x20000
    1c5c:	80078513          	addi	a0,a5,-2048 # 1ffff800 <_data_lma+0x1fff05f4>
    1c60:	2dd9                	jal	2336 <FLASH_ProgramPage_Fast>
    FLASH_Lock_Fast();
    1c62:	2389                	jal	21a4 <FLASH_Lock_Fast>
}
    1c64:	0001                	nop
    1c66:	50b2                	lw	ra,44(sp)
    1c68:	5422                	lw	s0,40(sp)
    1c6a:	6145                	addi	sp,sp,48
    1c6c:	8082                	ret

00001c6e <FLASH_EnableWriteProtection>:
 *
 * @return  FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *        FLASH_ERROR_WRP, FLASH_COMPLETE , FLASH_TIMEOUT or FLASH_RDP.
 */
FLASH_Status FLASH_EnableWriteProtection(uint32_t FLASH_Pages)
{
    1c6e:	7139                	addi	sp,sp,-64
    1c70:	de06                	sw	ra,60(sp)
    1c72:	dc22                	sw	s0,56(sp)
    1c74:	0080                	addi	s0,sp,64
    1c76:	fca42623          	sw	a0,-52(s0)
    uint8_t     WRP0_Data = 0xFF, WRP1_Data = 0xFF, WRP2_Data = 0xFF, WRP3_Data = 0xFF;
    1c7a:	57fd                	li	a5,-1
    1c7c:	fef403a3          	sb	a5,-25(s0)
    1c80:	57fd                	li	a5,-1
    1c82:	fef40323          	sb	a5,-26(s0)
    1c86:	57fd                	li	a5,-1
    1c88:	fef402a3          	sb	a5,-27(s0)
    1c8c:	57fd                	li	a5,-1
    1c8e:	fef40223          	sb	a5,-28(s0)
    uint32_t buf[4];
    uint8_t i;
    FLASH_Status status = FLASH_COMPLETE;
    1c92:	4791                	li	a5,4
    1c94:	fef42423          	sw	a5,-24(s0)

    if((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
    1c98:	400227b7          	lui	a5,0x40022
    1c9c:	4fdc                	lw	a5,28(a5)
    1c9e:	8b89                	andi	a5,a5,2
    1ca0:	c789                	beqz	a5,1caa <FLASH_EnableWriteProtection+0x3c>
    {
        status = FLASH_RDP;
    1ca2:	4799                	li	a5,6
    1ca4:	fef42423          	sw	a5,-24(s0)
    1ca8:	a0fd                	j	1d96 <FLASH_EnableWriteProtection+0x128>
    }
    else{
        FLASH_Pages = (uint32_t)(~FLASH_Pages);
    1caa:	fcc42783          	lw	a5,-52(s0)
    1cae:	fff7c793          	not	a5,a5
    1cb2:	fcf42623          	sw	a5,-52(s0)
        WRP0_Data = (uint8_t)(FLASH_Pages & WRP0_Mask);
    1cb6:	fcc42783          	lw	a5,-52(s0)
    1cba:	fef403a3          	sb	a5,-25(s0)
        WRP1_Data = (uint8_t)((FLASH_Pages & WRP1_Mask) >> 8);
    1cbe:	fcc42783          	lw	a5,-52(s0)
    1cc2:	83a1                	srli	a5,a5,0x8
    1cc4:	fef40323          	sb	a5,-26(s0)
        WRP2_Data = (uint8_t)((FLASH_Pages & WRP2_Mask) >> 16);
    1cc8:	fcc42783          	lw	a5,-52(s0)
    1ccc:	83c1                	srli	a5,a5,0x10
    1cce:	fef402a3          	sb	a5,-27(s0)
        WRP3_Data = (uint8_t)((FLASH_Pages & WRP3_Mask) >> 24);
    1cd2:	fcc42783          	lw	a5,-52(s0)
    1cd6:	83e1                	srli	a5,a5,0x18
    1cd8:	fef40223          	sb	a5,-28(s0)

        status = FLASH_WaitForLastOperation(ProgramTimeout);
    1cdc:	6515                	lui	a0,0x5
    1cde:	2ee1                	jal	20b6 <FLASH_WaitForLastOperation>
    1ce0:	fea42423          	sw	a0,-24(s0)

        if(status == FLASH_COMPLETE)
    1ce4:	fe842703          	lw	a4,-24(s0)
    1ce8:	4791                	li	a5,4
    1cea:	0af71663          	bne	a4,a5,1d96 <FLASH_EnableWriteProtection+0x128>
        {
            for(i=0; i<4; i++){
    1cee:	fe0407a3          	sb	zero,-17(s0)
    1cf2:	a80d                	j	1d24 <FLASH_EnableWriteProtection+0xb6>
                buf[i] = *(uint32_t*)(OB_BASE + 4*i);
    1cf4:	fef44783          	lbu	a5,-17(s0)
    1cf8:	078a                	slli	a5,a5,0x2
    1cfa:	873e                	mv	a4,a5
    1cfc:	200007b7          	lui	a5,0x20000
    1d00:	80078793          	addi	a5,a5,-2048 # 1ffff800 <_data_lma+0x1fff05f4>
    1d04:	97ba                	add	a5,a5,a4
    1d06:	873e                	mv	a4,a5
    1d08:	fef44783          	lbu	a5,-17(s0)
    1d0c:	4318                	lw	a4,0(a4)
    1d0e:	078a                	slli	a5,a5,0x2
    1d10:	ff040693          	addi	a3,s0,-16
    1d14:	97b6                	add	a5,a5,a3
    1d16:	fee7a223          	sw	a4,-28(a5)
            for(i=0; i<4; i++){
    1d1a:	fef44783          	lbu	a5,-17(s0)
    1d1e:	0785                	addi	a5,a5,1
    1d20:	fef407a3          	sb	a5,-17(s0)
    1d24:	fef44703          	lbu	a4,-17(s0)
    1d28:	478d                	li	a5,3
    1d2a:	fce7f5e3          	bgeu	a5,a4,1cf4 <FLASH_EnableWriteProtection+0x86>
            }

            buf[2] = ((uint32_t)(((uint32_t)(WRP0_Data) & 0x00FF) + (((uint32_t)(~WRP0_Data) & 0x00FF) << 8) \
    1d2e:	fe744703          	lbu	a4,-25(s0)
    1d32:	fe744783          	lbu	a5,-25(s0)
    1d36:	fff7c793          	not	a5,a5
    1d3a:	00879693          	slli	a3,a5,0x8
    1d3e:	67c1                	lui	a5,0x10
    1d40:	17fd                	addi	a5,a5,-1
    1d42:	8ff5                	and	a5,a5,a3
    1d44:	973e                	add	a4,a4,a5
                   + (((uint32_t)(WRP1_Data) & 0x00FF) << 16) + (((uint32_t)(~WRP1_Data) & 0x00FF) << 24)));
    1d46:	fe644783          	lbu	a5,-26(s0)
    1d4a:	07c2                	slli	a5,a5,0x10
    1d4c:	973e                	add	a4,a4,a5
    1d4e:	fe644783          	lbu	a5,-26(s0)
    1d52:	fff7c793          	not	a5,a5
    1d56:	07e2                	slli	a5,a5,0x18
            buf[2] = ((uint32_t)(((uint32_t)(WRP0_Data) & 0x00FF) + (((uint32_t)(~WRP0_Data) & 0x00FF) << 8) \
    1d58:	97ba                	add	a5,a5,a4
    1d5a:	fcf42e23          	sw	a5,-36(s0)
            buf[3] = ((uint32_t)(((uint32_t)(WRP2_Data) & 0x00FF) + (((uint32_t)(~WRP2_Data) & 0x00FF) << 8) \
    1d5e:	fe544703          	lbu	a4,-27(s0)
    1d62:	fe544783          	lbu	a5,-27(s0)
    1d66:	fff7c793          	not	a5,a5
    1d6a:	00879693          	slli	a3,a5,0x8
    1d6e:	67c1                	lui	a5,0x10
    1d70:	17fd                	addi	a5,a5,-1
    1d72:	8ff5                	and	a5,a5,a3
    1d74:	973e                	add	a4,a4,a5
                   + (((uint32_t)(WRP3_Data) & 0x00FF) << 16) + (((uint32_t)(~WRP3_Data) & 0x00FF) << 24)));
    1d76:	fe444783          	lbu	a5,-28(s0)
    1d7a:	07c2                	slli	a5,a5,0x10
    1d7c:	973e                	add	a4,a4,a5
    1d7e:	fe444783          	lbu	a5,-28(s0)
    1d82:	fff7c793          	not	a5,a5
    1d86:	07e2                	slli	a5,a5,0x18
            buf[3] = ((uint32_t)(((uint32_t)(WRP2_Data) & 0x00FF) + (((uint32_t)(~WRP2_Data) & 0x00FF) << 8) \
    1d88:	97ba                	add	a5,a5,a4
    1d8a:	fef42023          	sw	a5,-32(s0)

            FLASH_OptionBytePR(buf);
    1d8e:	fd440793          	addi	a5,s0,-44
    1d92:	853e                	mv	a0,a5
    1d94:	3d85                	jal	1c04 <FLASH_OptionBytePR>
        }
    }

    return status;
    1d96:	fe842783          	lw	a5,-24(s0)
}
    1d9a:	853e                	mv	a0,a5
    1d9c:	50f2                	lw	ra,60(sp)
    1d9e:	5462                	lw	s0,56(sp)
    1da0:	6121                	addi	sp,sp,64
    1da2:	8082                	ret

00001da4 <FLASH_EnableReadOutProtection>:
 *
 * @return  FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *        FLASH_ERROR_WRP, FLASH_COMPLETE, FLASH_TIMEOUT or FLASH_RDP.
 */
FLASH_Status FLASH_EnableReadOutProtection(void)
{
    1da4:	7179                	addi	sp,sp,-48
    1da6:	d606                	sw	ra,44(sp)
    1da8:	d422                	sw	s0,40(sp)
    1daa:	1800                	addi	s0,sp,48
    FLASH_Status status = FLASH_COMPLETE;
    1dac:	4791                	li	a5,4
    1dae:	fef42623          	sw	a5,-20(s0)
    uint32_t buf[4];
    uint8_t i;

    if((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
    1db2:	400227b7          	lui	a5,0x40022
    1db6:	4fdc                	lw	a5,28(a5)
    1db8:	8b89                	andi	a5,a5,2
    1dba:	c789                	beqz	a5,1dc4 <FLASH_EnableReadOutProtection+0x20>
    {
        status = FLASH_RDP;
    1dbc:	4799                	li	a5,6
    1dbe:	fef42623          	sw	a5,-20(s0)
    1dc2:	a0bd                	j	1e30 <FLASH_EnableReadOutProtection+0x8c>
    }
    else{
        status = FLASH_WaitForLastOperation(EraseTimeout);
    1dc4:	000b0537          	lui	a0,0xb0
    1dc8:	24fd                	jal	20b6 <FLASH_WaitForLastOperation>
    1dca:	fea42623          	sw	a0,-20(s0)
        if(status == FLASH_COMPLETE)
    1dce:	fec42703          	lw	a4,-20(s0)
    1dd2:	4791                	li	a5,4
    1dd4:	04f71e63          	bne	a4,a5,1e30 <FLASH_EnableReadOutProtection+0x8c>
        {
            for(i=0; i<4; i++){
    1dd8:	fe0405a3          	sb	zero,-21(s0)
    1ddc:	a80d                	j	1e0e <FLASH_EnableReadOutProtection+0x6a>
                buf[i] = *(uint32_t*)(OB_BASE + 4*i);
    1dde:	feb44783          	lbu	a5,-21(s0)
    1de2:	078a                	slli	a5,a5,0x2
    1de4:	873e                	mv	a4,a5
    1de6:	200007b7          	lui	a5,0x20000
    1dea:	80078793          	addi	a5,a5,-2048 # 1ffff800 <_data_lma+0x1fff05f4>
    1dee:	97ba                	add	a5,a5,a4
    1df0:	873e                	mv	a4,a5
    1df2:	feb44783          	lbu	a5,-21(s0)
    1df6:	4318                	lw	a4,0(a4)
    1df8:	078a                	slli	a5,a5,0x2
    1dfa:	ff040693          	addi	a3,s0,-16
    1dfe:	97b6                	add	a5,a5,a3
    1e00:	fee7a423          	sw	a4,-24(a5)
            for(i=0; i<4; i++){
    1e04:	feb44783          	lbu	a5,-21(s0)
    1e08:	0785                	addi	a5,a5,1
    1e0a:	fef405a3          	sb	a5,-21(s0)
    1e0e:	feb44703          	lbu	a4,-21(s0)
    1e12:	478d                	li	a5,3
    1e14:	fce7f5e3          	bgeu	a5,a4,1dde <FLASH_EnableReadOutProtection+0x3a>
            }

            buf[0] = 0x000000FF + (buf[0] & 0xFFFF0000);
    1e18:	fd842703          	lw	a4,-40(s0)
    1e1c:	77c1                	lui	a5,0xffff0
    1e1e:	8ff9                	and	a5,a5,a4
    1e20:	0ff78793          	addi	a5,a5,255 # ffff00ff <_eusrstack+0xdffec0ff>
    1e24:	fcf42c23          	sw	a5,-40(s0)
            FLASH_OptionBytePR(buf);
    1e28:	fd840793          	addi	a5,s0,-40
    1e2c:	853e                	mv	a0,a5
    1e2e:	3bd9                	jal	1c04 <FLASH_OptionBytePR>
        }
    }

    return status;
    1e30:	fec42783          	lw	a5,-20(s0)
}
    1e34:	853e                	mv	a0,a5
    1e36:	50b2                	lw	ra,44(sp)
    1e38:	5422                	lw	s0,40(sp)
    1e3a:	6145                	addi	sp,sp,48
    1e3c:	8082                	ret

00001e3e <FLASH_UserOptionByteConfig>:
 *
 * @return  FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *        FLASH_ERROR_WRP, FLASH_COMPLETE , FLASH_TIMEOUT or FLASH_RDP.
 */
FLASH_Status FLASH_UserOptionByteConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY, uint8_t OB_RST)
{
    1e3e:	7139                	addi	sp,sp,-64
    1e40:	de06                	sw	ra,60(sp)
    1e42:	dc22                	sw	s0,56(sp)
    1e44:	0080                	addi	s0,sp,64
    1e46:	87aa                	mv	a5,a0
    1e48:	8736                	mv	a4,a3
    1e4a:	fcf407a3          	sb	a5,-49(s0)
    1e4e:	87ae                	mv	a5,a1
    1e50:	fcf40723          	sb	a5,-50(s0)
    1e54:	87b2                	mv	a5,a2
    1e56:	fcf406a3          	sb	a5,-51(s0)
    1e5a:	87ba                	mv	a5,a4
    1e5c:	fcf40623          	sb	a5,-52(s0)
    FLASH_Status status = FLASH_COMPLETE;
    1e60:	4791                	li	a5,4
    1e62:	fef42623          	sw	a5,-20(s0)
    uint8_t UserByte;
    uint32_t buf[4];
    uint8_t i;

    if((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
    1e66:	400227b7          	lui	a5,0x40022
    1e6a:	4fdc                	lw	a5,28(a5)
    1e6c:	8b89                	andi	a5,a5,2
    1e6e:	c789                	beqz	a5,1e78 <FLASH_UserOptionByteConfig+0x3a>
    {
        status = FLASH_RDP;
    1e70:	4799                	li	a5,6
    1e72:	fef42623          	sw	a5,-20(s0)
    1e76:	a851                	j	1f0a <FLASH_UserOptionByteConfig+0xcc>
    }
    else{
        UserByte = OB_IWDG | (uint8_t)(OB_STOP | (uint8_t)(OB_STDBY | (uint8_t)(OB_RST | (uint8_t)0xE0)));
    1e78:	fcc44703          	lbu	a4,-52(s0)
    1e7c:	fcd44783          	lbu	a5,-51(s0)
    1e80:	8fd9                	or	a5,a5,a4
    1e82:	0ff7f713          	andi	a4,a5,255
    1e86:	fce44783          	lbu	a5,-50(s0)
    1e8a:	8fd9                	or	a5,a5,a4
    1e8c:	0ff7f713          	andi	a4,a5,255
    1e90:	fcf44783          	lbu	a5,-49(s0)
    1e94:	8fd9                	or	a5,a5,a4
    1e96:	0ff7f793          	andi	a5,a5,255
    1e9a:	fe07e793          	ori	a5,a5,-32
    1e9e:	fef40523          	sb	a5,-22(s0)

        for(i=0; i<4; i++){
    1ea2:	fe0405a3          	sb	zero,-21(s0)
    1ea6:	a80d                	j	1ed8 <FLASH_UserOptionByteConfig+0x9a>
            buf[i] = *(uint32_t*)(OB_BASE + 4*i);
    1ea8:	feb44783          	lbu	a5,-21(s0)
    1eac:	078a                	slli	a5,a5,0x2
    1eae:	873e                	mv	a4,a5
    1eb0:	200007b7          	lui	a5,0x20000
    1eb4:	80078793          	addi	a5,a5,-2048 # 1ffff800 <_data_lma+0x1fff05f4>
    1eb8:	97ba                	add	a5,a5,a4
    1eba:	873e                	mv	a4,a5
    1ebc:	feb44783          	lbu	a5,-21(s0)
    1ec0:	4318                	lw	a4,0(a4)
    1ec2:	078a                	slli	a5,a5,0x2
    1ec4:	ff040693          	addi	a3,s0,-16
    1ec8:	97b6                	add	a5,a5,a3
    1eca:	fee7a423          	sw	a4,-24(a5)
        for(i=0; i<4; i++){
    1ece:	feb44783          	lbu	a5,-21(s0)
    1ed2:	0785                	addi	a5,a5,1
    1ed4:	fef405a3          	sb	a5,-21(s0)
    1ed8:	feb44703          	lbu	a4,-21(s0)
    1edc:	478d                	li	a5,3
    1ede:	fce7f5e3          	bgeu	a5,a4,1ea8 <FLASH_UserOptionByteConfig+0x6a>
        }
        buf[0] = ((uint32_t)((((uint32_t)(UserByte) & 0x00FF) << 16) + (((uint32_t)(~UserByte) & 0x00FF) << 24))) + 0x00005AA5;
    1ee2:	fea44783          	lbu	a5,-22(s0)
    1ee6:	01079713          	slli	a4,a5,0x10
    1eea:	fea44783          	lbu	a5,-22(s0)
    1eee:	fff7c793          	not	a5,a5
    1ef2:	07e2                	slli	a5,a5,0x18
    1ef4:	973e                	add	a4,a4,a5
    1ef6:	6799                	lui	a5,0x6
    1ef8:	aa578793          	addi	a5,a5,-1371 # 5aa5 <TIM_OC4Init+0xbb>
    1efc:	97ba                	add	a5,a5,a4
    1efe:	fcf42c23          	sw	a5,-40(s0)

        FLASH_OptionBytePR(buf);
    1f02:	fd840793          	addi	a5,s0,-40
    1f06:	853e                	mv	a0,a5
    1f08:	39f5                	jal	1c04 <FLASH_OptionBytePR>
    }

    return status;
    1f0a:	fec42783          	lw	a5,-20(s0)
}
    1f0e:	853e                	mv	a0,a5
    1f10:	50f2                	lw	ra,60(sp)
    1f12:	5462                	lw	s0,56(sp)
    1f14:	6121                	addi	sp,sp,64
    1f16:	8082                	ret

00001f18 <FLASH_GetUserOptionByte>:
 * @return  The FLASH User Option Bytes values:IWDG_SW(Bit0), RST_STOP(Bit1),
 *          RST_STDBY(Bit2) ,RST_MOD(bit[4:3]) ,DATA0(bit[17:10]) and
 *          DATA1(bit[25:18]).
 */
uint32_t FLASH_GetUserOptionByte(void)
{
    1f18:	1141                	addi	sp,sp,-16
    1f1a:	c622                	sw	s0,12(sp)
    1f1c:	0800                	addi	s0,sp,16
    return (uint32_t)(FLASH->OBR >> 2);
    1f1e:	400227b7          	lui	a5,0x40022
    1f22:	4fdc                	lw	a5,28(a5)
    1f24:	8389                	srli	a5,a5,0x2
}
    1f26:	853e                	mv	a0,a5
    1f28:	4432                	lw	s0,12(sp)
    1f2a:	0141                	addi	sp,sp,16
    1f2c:	8082                	ret

00001f2e <FLASH_GetWriteProtectionOptionByte>:
 * @brief   Returns the FLASH Write Protection Option Bytes Register value.
 *
 * @return  The FLASH Write Protection Option Bytes Register value.
 */
uint32_t FLASH_GetWriteProtectionOptionByte(void)
{
    1f2e:	1141                	addi	sp,sp,-16
    1f30:	c622                	sw	s0,12(sp)
    1f32:	0800                	addi	s0,sp,16
    return (uint32_t)(FLASH->WPR);
    1f34:	400227b7          	lui	a5,0x40022
    1f38:	539c                	lw	a5,32(a5)
}
    1f3a:	853e                	mv	a0,a5
    1f3c:	4432                	lw	s0,12(sp)
    1f3e:	0141                	addi	sp,sp,16
    1f40:	8082                	ret

00001f42 <FLASH_GetReadOutProtectionStatus>:
 * @brief   Checks whether the FLASH Read Out Protection Status is set or not.
 *
 * @return  FLASH ReadOut Protection Status(SET or RESET)
 */
FlagStatus FLASH_GetReadOutProtectionStatus(void)
{
    1f42:	1101                	addi	sp,sp,-32
    1f44:	ce22                	sw	s0,28(sp)
    1f46:	1000                	addi	s0,sp,32
    FlagStatus readoutstatus = RESET;
    1f48:	fe042623          	sw	zero,-20(s0)
    if((FLASH->OBR & RDPRT_Mask) != (uint32_t)RESET)
    1f4c:	400227b7          	lui	a5,0x40022
    1f50:	4fdc                	lw	a5,28(a5)
    1f52:	8b89                	andi	a5,a5,2
    1f54:	c789                	beqz	a5,1f5e <FLASH_GetReadOutProtectionStatus+0x1c>
    {
        readoutstatus = SET;
    1f56:	4785                	li	a5,1
    1f58:	fef42623          	sw	a5,-20(s0)
    1f5c:	a019                	j	1f62 <FLASH_GetReadOutProtectionStatus+0x20>
    }
    else
    {
        readoutstatus = RESET;
    1f5e:	fe042623          	sw	zero,-20(s0)
    }
    return readoutstatus;
    1f62:	fec42783          	lw	a5,-20(s0)
}
    1f66:	853e                	mv	a0,a5
    1f68:	4472                	lw	s0,28(sp)
    1f6a:	6105                	addi	sp,sp,32
    1f6c:	8082                	ret

00001f6e <FLASH_ITConfig>:
 *          NewState - new state of the specified Flash interrupts(ENABLE or DISABLE).
 *
 * @return  FLASH Prefetch Buffer Status (SET or RESET).
 */
void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
{
    1f6e:	1101                	addi	sp,sp,-32
    1f70:	ce22                	sw	s0,28(sp)
    1f72:	1000                	addi	s0,sp,32
    1f74:	fea42623          	sw	a0,-20(s0)
    1f78:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    1f7c:	fe842783          	lw	a5,-24(s0)
    1f80:	cb99                	beqz	a5,1f96 <FLASH_ITConfig+0x28>
    {
        FLASH->CTLR |= FLASH_IT;
    1f82:	400227b7          	lui	a5,0x40022
    1f86:	4b94                	lw	a3,16(a5)
    1f88:	400227b7          	lui	a5,0x40022
    1f8c:	fec42703          	lw	a4,-20(s0)
    1f90:	8f55                	or	a4,a4,a3
    1f92:	cb98                	sw	a4,16(a5)
    }
    else
    {
        FLASH->CTLR &= ~(uint32_t)FLASH_IT;
    }
}
    1f94:	a821                	j	1fac <FLASH_ITConfig+0x3e>
        FLASH->CTLR &= ~(uint32_t)FLASH_IT;
    1f96:	400227b7          	lui	a5,0x40022
    1f9a:	4b94                	lw	a3,16(a5)
    1f9c:	fec42783          	lw	a5,-20(s0)
    1fa0:	fff7c713          	not	a4,a5
    1fa4:	400227b7          	lui	a5,0x40022
    1fa8:	8f75                	and	a4,a4,a3
    1faa:	cb98                	sw	a4,16(a5)
}
    1fac:	0001                	nop
    1fae:	4472                	lw	s0,28(sp)
    1fb0:	6105                	addi	sp,sp,32
    1fb2:	8082                	ret

00001fb4 <FLASH_GetFlagStatus>:
 *            FLASH_FLAG_OPTERR - FLASH Option Byte error flag
 *
 * @return  The new state of FLASH_FLAG (SET or RESET).
 */
FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
{
    1fb4:	7179                	addi	sp,sp,-48
    1fb6:	d622                	sw	s0,44(sp)
    1fb8:	1800                	addi	s0,sp,48
    1fba:	fca42e23          	sw	a0,-36(s0)
    FlagStatus bitstatus = RESET;
    1fbe:	fe042623          	sw	zero,-20(s0)

    if(FLASH_FLAG == FLASH_FLAG_OPTERR)
    1fc2:	fdc42703          	lw	a4,-36(s0)
    1fc6:	4785                	li	a5,1
    1fc8:	00f71e63          	bne	a4,a5,1fe4 <FLASH_GetFlagStatus+0x30>
    {
        if((FLASH->OBR & FLASH_FLAG_OPTERR) != (uint32_t)RESET)
    1fcc:	400227b7          	lui	a5,0x40022
    1fd0:	4fdc                	lw	a5,28(a5)
    1fd2:	8b85                	andi	a5,a5,1
    1fd4:	c789                	beqz	a5,1fde <FLASH_GetFlagStatus+0x2a>
        {
            bitstatus = SET;
    1fd6:	4785                	li	a5,1
    1fd8:	fef42623          	sw	a5,-20(s0)
    1fdc:	a00d                	j	1ffe <FLASH_GetFlagStatus+0x4a>
        }
        else
        {
            bitstatus = RESET;
    1fde:	fe042623          	sw	zero,-20(s0)
    1fe2:	a831                	j	1ffe <FLASH_GetFlagStatus+0x4a>
        }
    }
    else
    {
        if((FLASH->STATR & FLASH_FLAG) != (uint32_t)RESET)
    1fe4:	400227b7          	lui	a5,0x40022
    1fe8:	47d8                	lw	a4,12(a5)
    1fea:	fdc42783          	lw	a5,-36(s0)
    1fee:	8ff9                	and	a5,a5,a4
    1ff0:	c789                	beqz	a5,1ffa <FLASH_GetFlagStatus+0x46>
        {
            bitstatus = SET;
    1ff2:	4785                	li	a5,1
    1ff4:	fef42623          	sw	a5,-20(s0)
    1ff8:	a019                	j	1ffe <FLASH_GetFlagStatus+0x4a>
        }
        else
        {
            bitstatus = RESET;
    1ffa:	fe042623          	sw	zero,-20(s0)
        }
    }
    return bitstatus;
    1ffe:	fec42783          	lw	a5,-20(s0)
}
    2002:	853e                	mv	a0,a5
    2004:	5432                	lw	s0,44(sp)
    2006:	6145                	addi	sp,sp,48
    2008:	8082                	ret

0000200a <FLASH_ClearFlag>:
 *            FLASH_FLAG_EOP - FLASH End of Operation flag
 *
 * @return  none
 */
void FLASH_ClearFlag(uint32_t FLASH_FLAG)
{
    200a:	1101                	addi	sp,sp,-32
    200c:	ce22                	sw	s0,28(sp)
    200e:	1000                	addi	s0,sp,32
    2010:	fea42623          	sw	a0,-20(s0)
    FLASH->STATR = FLASH_FLAG;
    2014:	400227b7          	lui	a5,0x40022
    2018:	fec42703          	lw	a4,-20(s0)
    201c:	c7d8                	sw	a4,12(a5)
}
    201e:	0001                	nop
    2020:	4472                	lw	s0,28(sp)
    2022:	6105                	addi	sp,sp,32
    2024:	8082                	ret

00002026 <FLASH_GetStatus>:
 *
 * @return  FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *        FLASH_ERROR_WRP or FLASH_COMPLETE.
 */
FLASH_Status FLASH_GetStatus(void)
{
    2026:	1101                	addi	sp,sp,-32
    2028:	ce22                	sw	s0,28(sp)
    202a:	1000                	addi	s0,sp,32
    FLASH_Status flashstatus = FLASH_COMPLETE;
    202c:	4791                	li	a5,4
    202e:	fef42623          	sw	a5,-20(s0)

    if((FLASH->STATR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY)
    2032:	400227b7          	lui	a5,0x40022
    2036:	47dc                	lw	a5,12(a5)
    2038:	0017f713          	andi	a4,a5,1
    203c:	4785                	li	a5,1
    203e:	00f71663          	bne	a4,a5,204a <FLASH_GetStatus+0x24>
    {
        flashstatus = FLASH_BUSY;
    2042:	4785                	li	a5,1
    2044:	fef42623          	sw	a5,-20(s0)
    2048:	a829                	j	2062 <FLASH_GetStatus+0x3c>
    }
    else
    {
        if((FLASH->STATR & FLASH_FLAG_WRPRTERR) != 0)
    204a:	400227b7          	lui	a5,0x40022
    204e:	47dc                	lw	a5,12(a5)
    2050:	8bc1                	andi	a5,a5,16
    2052:	c789                	beqz	a5,205c <FLASH_GetStatus+0x36>
        {
            flashstatus = FLASH_ERROR_WRP;
    2054:	478d                	li	a5,3
    2056:	fef42623          	sw	a5,-20(s0)
    205a:	a021                	j	2062 <FLASH_GetStatus+0x3c>
        }
        else
        {
            flashstatus = FLASH_COMPLETE;
    205c:	4791                	li	a5,4
    205e:	fef42623          	sw	a5,-20(s0)
        }
    }
    return flashstatus;
    2062:	fec42783          	lw	a5,-20(s0)
}
    2066:	853e                	mv	a0,a5
    2068:	4472                	lw	s0,28(sp)
    206a:	6105                	addi	sp,sp,32
    206c:	8082                	ret

0000206e <FLASH_GetBank1Status>:
 *
 * @return  FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *        FLASH_ERROR_WRP or FLASH_COMPLETE.
 */
FLASH_Status FLASH_GetBank1Status(void)
{
    206e:	1101                	addi	sp,sp,-32
    2070:	ce22                	sw	s0,28(sp)
    2072:	1000                	addi	s0,sp,32
    FLASH_Status flashstatus = FLASH_COMPLETE;
    2074:	4791                	li	a5,4
    2076:	fef42623          	sw	a5,-20(s0)

    if((FLASH->STATR & FLASH_FLAG_BANK1_BSY) == FLASH_FLAG_BSY)
    207a:	400227b7          	lui	a5,0x40022
    207e:	47dc                	lw	a5,12(a5)
    2080:	0017f713          	andi	a4,a5,1
    2084:	4785                	li	a5,1
    2086:	00f71663          	bne	a4,a5,2092 <FLASH_GetBank1Status+0x24>
    {
        flashstatus = FLASH_BUSY;
    208a:	4785                	li	a5,1
    208c:	fef42623          	sw	a5,-20(s0)
    2090:	a829                	j	20aa <FLASH_GetBank1Status+0x3c>
    }
    else
    {
        if((FLASH->STATR & FLASH_FLAG_BANK1_WRPRTERR) != 0)
    2092:	400227b7          	lui	a5,0x40022
    2096:	47dc                	lw	a5,12(a5)
    2098:	8bc1                	andi	a5,a5,16
    209a:	c789                	beqz	a5,20a4 <FLASH_GetBank1Status+0x36>
        {
            flashstatus = FLASH_ERROR_WRP;
    209c:	478d                	li	a5,3
    209e:	fef42623          	sw	a5,-20(s0)
    20a2:	a021                	j	20aa <FLASH_GetBank1Status+0x3c>
        }
        else
        {
            flashstatus = FLASH_COMPLETE;
    20a4:	4791                	li	a5,4
    20a6:	fef42623          	sw	a5,-20(s0)
        }
    }
    return flashstatus;
    20aa:	fec42783          	lw	a5,-20(s0)
}
    20ae:	853e                	mv	a0,a5
    20b0:	4472                	lw	s0,28(sp)
    20b2:	6105                	addi	sp,sp,32
    20b4:	8082                	ret

000020b6 <FLASH_WaitForLastOperation>:
 *
 * @return  FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *        FLASH_ERROR_WRP or FLASH_COMPLETE.
 */
FLASH_Status FLASH_WaitForLastOperation(uint32_t Timeout)
{
    20b6:	7179                	addi	sp,sp,-48
    20b8:	d606                	sw	ra,44(sp)
    20ba:	d422                	sw	s0,40(sp)
    20bc:	1800                	addi	s0,sp,48
    20be:	fca42e23          	sw	a0,-36(s0)
    FLASH_Status status = FLASH_COMPLETE;
    20c2:	4791                	li	a5,4
    20c4:	fef42623          	sw	a5,-20(s0)

    status = FLASH_GetBank1Status();
    20c8:	375d                	jal	206e <FLASH_GetBank1Status>
    20ca:	fea42623          	sw	a0,-20(s0)
    while((status == FLASH_BUSY) && (Timeout != 0x00))
    20ce:	a809                	j	20e0 <FLASH_WaitForLastOperation+0x2a>
    {
        status = FLASH_GetBank1Status();
    20d0:	3f79                	jal	206e <FLASH_GetBank1Status>
    20d2:	fea42623          	sw	a0,-20(s0)
        Timeout--;
    20d6:	fdc42783          	lw	a5,-36(s0)
    20da:	17fd                	addi	a5,a5,-1
    20dc:	fcf42e23          	sw	a5,-36(s0)
    while((status == FLASH_BUSY) && (Timeout != 0x00))
    20e0:	fec42703          	lw	a4,-20(s0)
    20e4:	4785                	li	a5,1
    20e6:	00f71563          	bne	a4,a5,20f0 <FLASH_WaitForLastOperation+0x3a>
    20ea:	fdc42783          	lw	a5,-36(s0)
    20ee:	f3ed                	bnez	a5,20d0 <FLASH_WaitForLastOperation+0x1a>
    }
    if(Timeout == 0x00)
    20f0:	fdc42783          	lw	a5,-36(s0)
    20f4:	e781                	bnez	a5,20fc <FLASH_WaitForLastOperation+0x46>
    {
        status = FLASH_TIMEOUT;
    20f6:	4795                	li	a5,5
    20f8:	fef42623          	sw	a5,-20(s0)
    }
    return status;
    20fc:	fec42783          	lw	a5,-20(s0)
}
    2100:	853e                	mv	a0,a5
    2102:	50b2                	lw	ra,44(sp)
    2104:	5422                	lw	s0,40(sp)
    2106:	6145                	addi	sp,sp,48
    2108:	8082                	ret

0000210a <FLASH_WaitForLastBank1Operation>:
 *
 * @return  FLASH Status - The returned value can be: FLASH_BUSY, FLASH_ERROR_PG,
 *        FLASH_ERROR_WRP or FLASH_COMPLETE.
 */
FLASH_Status FLASH_WaitForLastBank1Operation(uint32_t Timeout)
{
    210a:	7179                	addi	sp,sp,-48
    210c:	d606                	sw	ra,44(sp)
    210e:	d422                	sw	s0,40(sp)
    2110:	1800                	addi	s0,sp,48
    2112:	fca42e23          	sw	a0,-36(s0)
    FLASH_Status status = FLASH_COMPLETE;
    2116:	4791                	li	a5,4
    2118:	fef42623          	sw	a5,-20(s0)

    status = FLASH_GetBank1Status();
    211c:	3f89                	jal	206e <FLASH_GetBank1Status>
    211e:	fea42623          	sw	a0,-20(s0)
    while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
    2122:	a809                	j	2134 <FLASH_WaitForLastBank1Operation+0x2a>
    {
        status = FLASH_GetBank1Status();
    2124:	37a9                	jal	206e <FLASH_GetBank1Status>
    2126:	fea42623          	sw	a0,-20(s0)
        Timeout--;
    212a:	fdc42783          	lw	a5,-36(s0)
    212e:	17fd                	addi	a5,a5,-1
    2130:	fcf42e23          	sw	a5,-36(s0)
    while((status == FLASH_FLAG_BANK1_BSY) && (Timeout != 0x00))
    2134:	fec42703          	lw	a4,-20(s0)
    2138:	4785                	li	a5,1
    213a:	00f71563          	bne	a4,a5,2144 <FLASH_WaitForLastBank1Operation+0x3a>
    213e:	fdc42783          	lw	a5,-36(s0)
    2142:	f3ed                	bnez	a5,2124 <FLASH_WaitForLastBank1Operation+0x1a>
    }
    if(Timeout == 0x00)
    2144:	fdc42783          	lw	a5,-36(s0)
    2148:	e781                	bnez	a5,2150 <FLASH_WaitForLastBank1Operation+0x46>
    {
        status = FLASH_TIMEOUT;
    214a:	4795                	li	a5,5
    214c:	fef42623          	sw	a5,-20(s0)
    }
    return status;
    2150:	fec42783          	lw	a5,-20(s0)
}
    2154:	853e                	mv	a0,a5
    2156:	50b2                	lw	ra,44(sp)
    2158:	5422                	lw	s0,40(sp)
    215a:	6145                	addi	sp,sp,48
    215c:	8082                	ret

0000215e <FLASH_Unlock_Fast>:
 * @brief   Unlocks the Fast Program Erase Mode.
 *
 * @return  none
 */
void FLASH_Unlock_Fast(void)
{
    215e:	1141                	addi	sp,sp,-16
    2160:	c622                	sw	s0,12(sp)
    2162:	0800                	addi	s0,sp,16
    /* Authorize the FPEC of Bank1 Access */
    FLASH->KEYR = FLASH_KEY1;
    2164:	400227b7          	lui	a5,0x40022
    2168:	45670737          	lui	a4,0x45670
    216c:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566c123>
    2170:	c3d8                	sw	a4,4(a5)
    FLASH->KEYR = FLASH_KEY2;
    2172:	400227b7          	lui	a5,0x40022
    2176:	cdef9737          	lui	a4,0xcdef9
    217a:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef49ab>
    217e:	c3d8                	sw	a4,4(a5)

    /* Fast program mode unlock */
    FLASH->MODEKEYR = FLASH_KEY1;
    2180:	400227b7          	lui	a5,0x40022
    2184:	45670737          	lui	a4,0x45670
    2188:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566c123>
    218c:	d3d8                	sw	a4,36(a5)
    FLASH->MODEKEYR = FLASH_KEY2;
    218e:	400227b7          	lui	a5,0x40022
    2192:	cdef9737          	lui	a4,0xcdef9
    2196:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef49ab>
    219a:	d3d8                	sw	a4,36(a5)
}
    219c:	0001                	nop
    219e:	4432                	lw	s0,12(sp)
    21a0:	0141                	addi	sp,sp,16
    21a2:	8082                	ret

000021a4 <FLASH_Lock_Fast>:
 * @brief   Locks the Fast Program Erase Mode.
 *
 * @return  none
 */
void FLASH_Lock_Fast(void)
{
    21a4:	1141                	addi	sp,sp,-16
    21a6:	c622                	sw	s0,12(sp)
    21a8:	0800                	addi	s0,sp,16
    FLASH->CTLR |= CR_FLOCK_Set;
    21aa:	400227b7          	lui	a5,0x40022
    21ae:	4b94                	lw	a3,16(a5)
    21b0:	400227b7          	lui	a5,0x40022
    21b4:	6721                	lui	a4,0x8
    21b6:	8f55                	or	a4,a4,a3
    21b8:	cb98                	sw	a4,16(a5)
}
    21ba:	0001                	nop
    21bc:	4432                	lw	s0,12(sp)
    21be:	0141                	addi	sp,sp,16
    21c0:	8082                	ret

000021c2 <FLASH_BufReset>:
 * @brief   Flash Buffer reset.
 *
 * @return  none
 */
void FLASH_BufReset(void)
{
    21c2:	1141                	addi	sp,sp,-16
    21c4:	c622                	sw	s0,12(sp)
    21c6:	0800                	addi	s0,sp,16
    FLASH->CTLR |= CR_PAGE_PG;
    21c8:	400227b7          	lui	a5,0x40022
    21cc:	4b94                	lw	a3,16(a5)
    21ce:	400227b7          	lui	a5,0x40022
    21d2:	6741                	lui	a4,0x10
    21d4:	8f55                	or	a4,a4,a3
    21d6:	cb98                	sw	a4,16(a5)
    FLASH->CTLR |= CR_BUF_RST;
    21d8:	400227b7          	lui	a5,0x40022
    21dc:	4b94                	lw	a3,16(a5)
    21de:	400227b7          	lui	a5,0x40022
    21e2:	00080737          	lui	a4,0x80
    21e6:	8f55                	or	a4,a4,a3
    21e8:	cb98                	sw	a4,16(a5)
    while(FLASH->STATR & SR_BSY)
    21ea:	0001                	nop
    21ec:	400227b7          	lui	a5,0x40022
    21f0:	47dc                	lw	a5,12(a5)
    21f2:	8b85                	andi	a5,a5,1
    21f4:	ffe5                	bnez	a5,21ec <FLASH_BufReset+0x2a>
        ;
    FLASH->CTLR &= ~CR_PAGE_PG;
    21f6:	400227b7          	lui	a5,0x40022
    21fa:	4b94                	lw	a3,16(a5)
    21fc:	400227b7          	lui	a5,0x40022
    2200:	7741                	lui	a4,0xffff0
    2202:	177d                	addi	a4,a4,-1
    2204:	8f75                	and	a4,a4,a3
    2206:	cb98                	sw	a4,16(a5)
}
    2208:	0001                	nop
    220a:	4432                	lw	s0,12(sp)
    220c:	0141                	addi	sp,sp,16
    220e:	8082                	ret

00002210 <FLASH_BufLoad>:
 *          Data0 - specifies the data0 to be programmed.
 *
 * @return  none
 */
void FLASH_BufLoad(uint32_t Address, uint32_t Data0)
{
    2210:	1101                	addi	sp,sp,-32
    2212:	ce22                	sw	s0,28(sp)
    2214:	1000                	addi	s0,sp,32
    2216:	fea42623          	sw	a0,-20(s0)
    221a:	feb42423          	sw	a1,-24(s0)
    FLASH->CTLR |= CR_PAGE_PG;
    221e:	400227b7          	lui	a5,0x40022
    2222:	4b94                	lw	a3,16(a5)
    2224:	400227b7          	lui	a5,0x40022
    2228:	6741                	lui	a4,0x10
    222a:	8f55                	or	a4,a4,a3
    222c:	cb98                	sw	a4,16(a5)
    *(__IO uint32_t *)(Address) = Data0;
    222e:	fec42783          	lw	a5,-20(s0)
    2232:	fe842703          	lw	a4,-24(s0)
    2236:	c398                	sw	a4,0(a5)
    FLASH->CTLR |= CR_BUF_LOAD;
    2238:	400227b7          	lui	a5,0x40022
    223c:	4b94                	lw	a3,16(a5)
    223e:	400227b7          	lui	a5,0x40022
    2242:	00040737          	lui	a4,0x40
    2246:	8f55                	or	a4,a4,a3
    2248:	cb98                	sw	a4,16(a5)
    while(FLASH->STATR & SR_BSY)
    224a:	0001                	nop
    224c:	400227b7          	lui	a5,0x40022
    2250:	47dc                	lw	a5,12(a5)
    2252:	8b85                	andi	a5,a5,1
    2254:	ffe5                	bnez	a5,224c <FLASH_BufLoad+0x3c>
        ;
    FLASH->CTLR &= ~CR_PAGE_PG;
    2256:	400227b7          	lui	a5,0x40022
    225a:	4b94                	lw	a3,16(a5)
    225c:	400227b7          	lui	a5,0x40022
    2260:	7741                	lui	a4,0xffff0
    2262:	177d                	addi	a4,a4,-1
    2264:	8f75                	and	a4,a4,a3
    2266:	cb98                	sw	a4,16(a5)
}
    2268:	0001                	nop
    226a:	4472                	lw	s0,28(sp)
    226c:	6105                	addi	sp,sp,32
    226e:	8082                	ret

00002270 <FLASH_ErasePage_Fast>:
 * @param   Page_Address - The page address to be erased.
 *
 * @return  none
 */
void FLASH_ErasePage_Fast(uint32_t Page_Address)
{
    2270:	1101                	addi	sp,sp,-32
    2272:	ce22                	sw	s0,28(sp)
    2274:	1000                	addi	s0,sp,32
    2276:	fea42623          	sw	a0,-20(s0)
    FLASH->CTLR |= CR_PAGE_ER;
    227a:	400227b7          	lui	a5,0x40022
    227e:	4b94                	lw	a3,16(a5)
    2280:	400227b7          	lui	a5,0x40022
    2284:	00020737          	lui	a4,0x20
    2288:	8f55                	or	a4,a4,a3
    228a:	cb98                	sw	a4,16(a5)
    FLASH->ADDR = Page_Address;
    228c:	400227b7          	lui	a5,0x40022
    2290:	fec42703          	lw	a4,-20(s0)
    2294:	cbd8                	sw	a4,20(a5)
    FLASH->CTLR |= CR_STRT_Set;
    2296:	400227b7          	lui	a5,0x40022
    229a:	4b98                	lw	a4,16(a5)
    229c:	400227b7          	lui	a5,0x40022
    22a0:	04076713          	ori	a4,a4,64
    22a4:	cb98                	sw	a4,16(a5)
    while(FLASH->STATR & SR_BSY)
    22a6:	0001                	nop
    22a8:	400227b7          	lui	a5,0x40022
    22ac:	47dc                	lw	a5,12(a5)
    22ae:	8b85                	andi	a5,a5,1
    22b0:	ffe5                	bnez	a5,22a8 <FLASH_ErasePage_Fast+0x38>
        ;
    FLASH->CTLR &= ~CR_PAGE_ER;
    22b2:	400227b7          	lui	a5,0x40022
    22b6:	4b94                	lw	a3,16(a5)
    22b8:	400227b7          	lui	a5,0x40022
    22bc:	7701                	lui	a4,0xfffe0
    22be:	177d                	addi	a4,a4,-1
    22c0:	8f75                	and	a4,a4,a3
    22c2:	cb98                	sw	a4,16(a5)
}
    22c4:	0001                	nop
    22c6:	4472                	lw	s0,28(sp)
    22c8:	6105                	addi	sp,sp,32
    22ca:	8082                	ret

000022cc <FLASH_EraseBlock_32K_Fast>:
 * @param   Block_Address - The block address to be erased.
 *
 * @return  none
 */
void FLASH_EraseBlock_32K_Fast(uint32_t Block_Address)
{
    22cc:	1101                	addi	sp,sp,-32
    22ce:	ce22                	sw	s0,28(sp)
    22d0:	1000                	addi	s0,sp,32
    22d2:	fea42623          	sw	a0,-20(s0)
    Block_Address &= 0xFFFF8000;
    22d6:	fec42703          	lw	a4,-20(s0)
    22da:	77e1                	lui	a5,0xffff8
    22dc:	8ff9                	and	a5,a5,a4
    22de:	fef42623          	sw	a5,-20(s0)

    FLASH->CTLR |= CR_BER32;
    22e2:	400227b7          	lui	a5,0x40022
    22e6:	4b94                	lw	a3,16(a5)
    22e8:	400227b7          	lui	a5,0x40022
    22ec:	00800737          	lui	a4,0x800
    22f0:	8f55                	or	a4,a4,a3
    22f2:	cb98                	sw	a4,16(a5)
    FLASH->ADDR = Block_Address;
    22f4:	400227b7          	lui	a5,0x40022
    22f8:	fec42703          	lw	a4,-20(s0)
    22fc:	cbd8                	sw	a4,20(a5)
    FLASH->CTLR |= CR_STRT_Set;
    22fe:	400227b7          	lui	a5,0x40022
    2302:	4b98                	lw	a4,16(a5)
    2304:	400227b7          	lui	a5,0x40022
    2308:	04076713          	ori	a4,a4,64
    230c:	cb98                	sw	a4,16(a5)
    while(FLASH->STATR & SR_BSY)
    230e:	0001                	nop
    2310:	400227b7          	lui	a5,0x40022
    2314:	47dc                	lw	a5,12(a5)
    2316:	8b85                	andi	a5,a5,1
    2318:	ffe5                	bnez	a5,2310 <FLASH_EraseBlock_32K_Fast+0x44>
        ;
    FLASH->CTLR &= ~CR_BER32;
    231a:	400227b7          	lui	a5,0x40022
    231e:	4b94                	lw	a3,16(a5)
    2320:	400227b7          	lui	a5,0x40022
    2324:	ff800737          	lui	a4,0xff800
    2328:	177d                	addi	a4,a4,-1
    232a:	8f75                	and	a4,a4,a3
    232c:	cb98                	sw	a4,16(a5)
}
    232e:	0001                	nop
    2330:	4472                	lw	s0,28(sp)
    2332:	6105                	addi	sp,sp,32
    2334:	8082                	ret

00002336 <FLASH_ProgramPage_Fast>:
 * @param   Page_Address - The page address to be programed.
 *
 * @return  none
 */
void FLASH_ProgramPage_Fast(uint32_t Page_Address)
{
    2336:	1101                	addi	sp,sp,-32
    2338:	ce22                	sw	s0,28(sp)
    233a:	1000                	addi	s0,sp,32
    233c:	fea42623          	sw	a0,-20(s0)
    FLASH->CTLR |= CR_PAGE_PG;
    2340:	400227b7          	lui	a5,0x40022
    2344:	4b94                	lw	a3,16(a5)
    2346:	400227b7          	lui	a5,0x40022
    234a:	6741                	lui	a4,0x10
    234c:	8f55                	or	a4,a4,a3
    234e:	cb98                	sw	a4,16(a5)
    FLASH->ADDR = Page_Address;
    2350:	400227b7          	lui	a5,0x40022
    2354:	fec42703          	lw	a4,-20(s0)
    2358:	cbd8                	sw	a4,20(a5)
    FLASH->CTLR |= CR_STRT_Set;
    235a:	400227b7          	lui	a5,0x40022
    235e:	4b98                	lw	a4,16(a5)
    2360:	400227b7          	lui	a5,0x40022
    2364:	04076713          	ori	a4,a4,64
    2368:	cb98                	sw	a4,16(a5)
    while(FLASH->STATR & SR_BSY)
    236a:	0001                	nop
    236c:	400227b7          	lui	a5,0x40022
    2370:	47dc                	lw	a5,12(a5)
    2372:	8b85                	andi	a5,a5,1
    2374:	ffe5                	bnez	a5,236c <FLASH_ProgramPage_Fast+0x36>
        ;
    FLASH->CTLR &= ~CR_PAGE_PG;
    2376:	400227b7          	lui	a5,0x40022
    237a:	4b94                	lw	a3,16(a5)
    237c:	400227b7          	lui	a5,0x40022
    2380:	7741                	lui	a4,0xffff0
    2382:	177d                	addi	a4,a4,-1
    2384:	8f75                	and	a4,a4,a3
    2386:	cb98                	sw	a4,16(a5)
}
    2388:	0001                	nop
    238a:	4472                	lw	s0,28(sp)
    238c:	6105                	addi	sp,sp,32
    238e:	8082                	ret

00002390 <SystemReset_StartMode>:
 *            Start_Mode_USER - USER start after system reset
 *            Start_Mode_BOOT - Boot start after system reset
 * @return  none
 */
void SystemReset_StartMode(uint32_t Mode)
{
    2390:	1101                	addi	sp,sp,-32
    2392:	ce06                	sw	ra,28(sp)
    2394:	cc22                	sw	s0,24(sp)
    2396:	1000                	addi	s0,sp,32
    2398:	fea42623          	sw	a0,-20(s0)
    FLASH_Unlock();
    239c:	eb8ff0ef          	jal	ra,1a54 <FLASH_Unlock>

    FLASH->BOOT_MODEKEYR = FLASH_KEY1;
    23a0:	400227b7          	lui	a5,0x40022
    23a4:	45670737          	lui	a4,0x45670
    23a8:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566c123>
    23ac:	d798                	sw	a4,40(a5)
    FLASH->BOOT_MODEKEYR = FLASH_KEY2;
    23ae:	400227b7          	lui	a5,0x40022
    23b2:	cdef9737          	lui	a4,0xcdef9
    23b6:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef49ab>
    23ba:	d798                	sw	a4,40(a5)

    FLASH->STATR &= ~(1<<14);
    23bc:	400227b7          	lui	a5,0x40022
    23c0:	47d4                	lw	a3,12(a5)
    23c2:	400227b7          	lui	a5,0x40022
    23c6:	7771                	lui	a4,0xffffc
    23c8:	177d                	addi	a4,a4,-1
    23ca:	8f75                	and	a4,a4,a3
    23cc:	c7d8                	sw	a4,12(a5)
    if(Mode == Start_Mode_BOOT){
    23ce:	fec42703          	lw	a4,-20(s0)
    23d2:	6791                	lui	a5,0x4
    23d4:	00f71a63          	bne	a4,a5,23e8 <SystemReset_StartMode+0x58>
        FLASH->STATR |= (1<<14);
    23d8:	400227b7          	lui	a5,0x40022
    23dc:	47d4                	lw	a3,12(a5)
    23de:	400227b7          	lui	a5,0x40022
    23e2:	6711                	lui	a4,0x4
    23e4:	8f55                	or	a4,a4,a3
    23e6:	c7d8                	sw	a4,12(a5)
    }

    FLASH_Lock();
    23e8:	e96ff0ef          	jal	ra,1a7e <FLASH_Lock>
}
    23ec:	0001                	nop
    23ee:	40f2                	lw	ra,28(sp)
    23f0:	4462                	lw	s0,24(sp)
    23f2:	6105                	addi	sp,sp,32
    23f4:	8082                	ret

000023f6 <GPIO_DeInit>:
 * @param   GPIOx - where x can be (A..C) to select the GPIO peripheral.
 *
 * @return  none
 */
void GPIO_DeInit(GPIO_TypeDef *GPIOx)
{
    23f6:	1101                	addi	sp,sp,-32
    23f8:	ce06                	sw	ra,28(sp)
    23fa:	cc22                	sw	s0,24(sp)
    23fc:	1000                	addi	s0,sp,32
    23fe:	fea42623          	sw	a0,-20(s0)
    if(GPIOx == GPIOA)
    2402:	fec42703          	lw	a4,-20(s0)
    2406:	400117b7          	lui	a5,0x40011
    240a:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    240e:	00f71b63          	bne	a4,a5,2424 <GPIO_DeInit+0x2e>
    {
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, ENABLE);
    2412:	4585                	li	a1,1
    2414:	4511                	li	a0,4
    2416:	774020ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOA, DISABLE);
    241a:	4581                	li	a1,0
    241c:	4511                	li	a0,4
    241e:	76c020ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
    else if(GPIOx == GPIOC)
    {
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    }
}
    2422:	a081                	j	2462 <GPIO_DeInit+0x6c>
    else if(GPIOx == GPIOB)
    2424:	fec42703          	lw	a4,-20(s0)
    2428:	400117b7          	lui	a5,0x40011
    242c:	c0078793          	addi	a5,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    2430:	00f71b63          	bne	a4,a5,2446 <GPIO_DeInit+0x50>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, ENABLE);
    2434:	4585                	li	a1,1
    2436:	4521                	li	a0,8
    2438:	752020ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOB, DISABLE);
    243c:	4581                	li	a1,0
    243e:	4521                	li	a0,8
    2440:	74a020ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
}
    2444:	a839                	j	2462 <GPIO_DeInit+0x6c>
    else if(GPIOx == GPIOC)
    2446:	fec42703          	lw	a4,-20(s0)
    244a:	400117b7          	lui	a5,0x40011
    244e:	00f71a63          	bne	a4,a5,2462 <GPIO_DeInit+0x6c>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, ENABLE);
    2452:	4585                	li	a1,1
    2454:	4541                	li	a0,16
    2456:	734020ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_GPIOC, DISABLE);
    245a:	4581                	li	a1,0
    245c:	4541                	li	a0,16
    245e:	72c020ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
}
    2462:	0001                	nop
    2464:	40f2                	lw	ra,28(sp)
    2466:	4462                	lw	s0,24(sp)
    2468:	6105                	addi	sp,sp,32
    246a:	8082                	ret

0000246c <GPIO_AFIODeInit>:
 *        and EXTI configuration) registers to their default reset values.
 *
 * @return  none
 */
void GPIO_AFIODeInit(void)
{
    246c:	1141                	addi	sp,sp,-16
    246e:	c606                	sw	ra,12(sp)
    2470:	c422                	sw	s0,8(sp)
    2472:	0800                	addi	s0,sp,16
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, ENABLE);
    2474:	4585                	li	a1,1
    2476:	4505                	li	a0,1
    2478:	712020ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_AFIO, DISABLE);
    247c:	4581                	li	a1,0
    247e:	4505                	li	a0,1
    2480:	70a020ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
}
    2484:	0001                	nop
    2486:	40b2                	lw	ra,12(sp)
    2488:	4422                	lw	s0,8(sp)
    248a:	0141                	addi	sp,sp,16
    248c:	8082                	ret

0000248e <GPIO_Init>:
 *        contains the configuration information for the specified GPIO peripheral.
 *
 * @return  none
 */
void GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_InitStruct)
{
    248e:	7139                	addi	sp,sp,-64
    2490:	de22                	sw	s0,60(sp)
    2492:	0080                	addi	s0,sp,64
    2494:	fca42623          	sw	a0,-52(s0)
    2498:	fcb42423          	sw	a1,-56(s0)
    uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
    249c:	fe042623          	sw	zero,-20(s0)
    24a0:	fe042023          	sw	zero,-32(s0)
    24a4:	fe042423          	sw	zero,-24(s0)
    24a8:	fc042e23          	sw	zero,-36(s0)
    uint32_t tmpreg = 0x00, pinmask = 0x00;
    24ac:	fe042223          	sw	zero,-28(s0)
    24b0:	fc042c23          	sw	zero,-40(s0)

    currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
    24b4:	fc842783          	lw	a5,-56(s0)
    24b8:	479c                	lw	a5,8(a5)
    24ba:	8bbd                	andi	a5,a5,15
    24bc:	fef42623          	sw	a5,-20(s0)

    if((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
    24c0:	fc842783          	lw	a5,-56(s0)
    24c4:	479c                	lw	a5,8(a5)
    24c6:	8bc1                	andi	a5,a5,16
    24c8:	cb89                	beqz	a5,24da <GPIO_Init+0x4c>
    {
        currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
    24ca:	fc842783          	lw	a5,-56(s0)
    24ce:	43dc                	lw	a5,4(a5)
    24d0:	fec42703          	lw	a4,-20(s0)
    24d4:	8fd9                	or	a5,a5,a4
    24d6:	fef42623          	sw	a5,-20(s0)
    }

    if(((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x0000FF)) != 0x00)
    24da:	fc842783          	lw	a5,-56(s0)
    24de:	439c                	lw	a5,0(a5)
    24e0:	0ff7f793          	andi	a5,a5,255
    24e4:	cfe1                	beqz	a5,25bc <GPIO_Init+0x12e>
    {
        tmpreg = GPIOx->CFGLR;
    24e6:	fcc42783          	lw	a5,-52(s0)
    24ea:	439c                	lw	a5,0(a5)
    24ec:	fef42223          	sw	a5,-28(s0)

        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
    24f0:	fe042423          	sw	zero,-24(s0)
    24f4:	a855                	j	25a8 <GPIO_Init+0x11a>
        {
            pos = ((uint32_t)0x01) << pinpos;
    24f6:	fe842783          	lw	a5,-24(s0)
    24fa:	4705                	li	a4,1
    24fc:	00f717b3          	sll	a5,a4,a5
    2500:	fcf42e23          	sw	a5,-36(s0)
            currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
    2504:	fc842783          	lw	a5,-56(s0)
    2508:	439c                	lw	a5,0(a5)
    250a:	fdc42703          	lw	a4,-36(s0)
    250e:	8ff9                	and	a5,a5,a4
    2510:	fef42023          	sw	a5,-32(s0)

            if(currentpin == pos)
    2514:	fe042703          	lw	a4,-32(s0)
    2518:	fdc42783          	lw	a5,-36(s0)
    251c:	08f71163          	bne	a4,a5,259e <GPIO_Init+0x110>
            {
                pos = pinpos << 2;
    2520:	fe842783          	lw	a5,-24(s0)
    2524:	078a                	slli	a5,a5,0x2
    2526:	fcf42e23          	sw	a5,-36(s0)
                pinmask = ((uint32_t)0x0F) << pos;
    252a:	fdc42783          	lw	a5,-36(s0)
    252e:	473d                	li	a4,15
    2530:	00f717b3          	sll	a5,a4,a5
    2534:	fcf42c23          	sw	a5,-40(s0)
                tmpreg &= ~pinmask;
    2538:	fd842783          	lw	a5,-40(s0)
    253c:	fff7c793          	not	a5,a5
    2540:	fe442703          	lw	a4,-28(s0)
    2544:	8ff9                	and	a5,a5,a4
    2546:	fef42223          	sw	a5,-28(s0)
                tmpreg |= (currentmode << pos);
    254a:	fdc42783          	lw	a5,-36(s0)
    254e:	fec42703          	lw	a4,-20(s0)
    2552:	00f717b3          	sll	a5,a4,a5
    2556:	fe442703          	lw	a4,-28(s0)
    255a:	8fd9                	or	a5,a5,a4
    255c:	fef42223          	sw	a5,-28(s0)

                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    2560:	fc842783          	lw	a5,-56(s0)
    2564:	4798                	lw	a4,8(a5)
    2566:	02800793          	li	a5,40
    256a:	00f71b63          	bne	a4,a5,2580 <GPIO_Init+0xf2>
                {
                    GPIOx->BCR = (((uint32_t)0x01) << pinpos);
    256e:	fe842783          	lw	a5,-24(s0)
    2572:	4705                	li	a4,1
    2574:	00f71733          	sll	a4,a4,a5
    2578:	fcc42783          	lw	a5,-52(s0)
    257c:	cbd8                	sw	a4,20(a5)
    257e:	a005                	j	259e <GPIO_Init+0x110>
                }
                else
                {
                    if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    2580:	fc842783          	lw	a5,-56(s0)
    2584:	4798                	lw	a4,8(a5)
    2586:	04800793          	li	a5,72
    258a:	00f71a63          	bne	a4,a5,259e <GPIO_Init+0x110>
                    {
                        GPIOx->BSHR = (((uint32_t)0x01) << pinpos);
    258e:	fe842783          	lw	a5,-24(s0)
    2592:	4705                	li	a4,1
    2594:	00f71733          	sll	a4,a4,a5
    2598:	fcc42783          	lw	a5,-52(s0)
    259c:	cb98                	sw	a4,16(a5)
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
    259e:	fe842783          	lw	a5,-24(s0)
    25a2:	0785                	addi	a5,a5,1
    25a4:	fef42423          	sw	a5,-24(s0)
    25a8:	fe842703          	lw	a4,-24(s0)
    25ac:	479d                	li	a5,7
    25ae:	f4e7f4e3          	bgeu	a5,a4,24f6 <GPIO_Init+0x68>
                    }
                }
            }
        }
        GPIOx->CFGLR = tmpreg;
    25b2:	fcc42783          	lw	a5,-52(s0)
    25b6:	fe442703          	lw	a4,-28(s0)
    25ba:	c398                	sw	a4,0(a5)
    }

    if(((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF00)) != 0x00)
    25bc:	fc842783          	lw	a5,-56(s0)
    25c0:	4398                	lw	a4,0(a5)
    25c2:	67c1                	lui	a5,0x10
    25c4:	f0078793          	addi	a5,a5,-256 # ff00 <_data_lma+0xcf4>
    25c8:	8ff9                	and	a5,a5,a4
    25ca:	16078663          	beqz	a5,2736 <GPIO_Init+0x2a8>
    {
        if(GPIOx == GPIOA)
    25ce:	fcc42703          	lw	a4,-52(s0)
    25d2:	400117b7          	lui	a5,0x40011
    25d6:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    25da:	00f71963          	bne	a4,a5,25ec <GPIO_Init+0x15e>
        {
            tmpreg = CFGHR_tmpA;
    25de:	200007b7          	lui	a5,0x20000
    25e2:	0247a783          	lw	a5,36(a5) # 20000024 <CFGHR_tmpA>
    25e6:	fef42223          	sw	a5,-28(s0)
    25ea:	a805                	j	261a <GPIO_Init+0x18c>
        }
        else if(GPIOx == GPIOB)
    25ec:	fcc42703          	lw	a4,-52(s0)
    25f0:	400117b7          	lui	a5,0x40011
    25f4:	c0078793          	addi	a5,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    25f8:	00f71763          	bne	a4,a5,2606 <GPIO_Init+0x178>
        {
            tmpreg = CFGHR_tmpB;
    25fc:	8081a783          	lw	a5,-2040(gp) # 20000028 <CFGHR_tmpB>
    2600:	fef42223          	sw	a5,-28(s0)
    2604:	a819                	j	261a <GPIO_Init+0x18c>
        }
        else if(GPIOx == GPIOC)
    2606:	fcc42703          	lw	a4,-52(s0)
    260a:	400117b7          	lui	a5,0x40011
    260e:	00f71663          	bne	a4,a5,261a <GPIO_Init+0x18c>
        {
            tmpreg = CFGHR_tmpC;
    2612:	80c1a783          	lw	a5,-2036(gp) # 2000002c <CFGHR_tmpC>
    2616:	fef42223          	sw	a5,-28(s0)
        }

        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
    261a:	fe042423          	sw	zero,-24(s0)
    261e:	a865                	j	26d6 <GPIO_Init+0x248>
        {
            pos = (((uint32_t)0x01) << (pinpos + 0x08));
    2620:	fe842783          	lw	a5,-24(s0)
    2624:	07a1                	addi	a5,a5,8
    2626:	4705                	li	a4,1
    2628:	00f717b3          	sll	a5,a4,a5
    262c:	fcf42e23          	sw	a5,-36(s0)
            currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    2630:	fc842783          	lw	a5,-56(s0)
    2634:	439c                	lw	a5,0(a5)
    2636:	fdc42703          	lw	a4,-36(s0)
    263a:	8ff9                	and	a5,a5,a4
    263c:	fef42023          	sw	a5,-32(s0)

            if(currentpin == pos)
    2640:	fe042703          	lw	a4,-32(s0)
    2644:	fdc42783          	lw	a5,-36(s0)
    2648:	08f71263          	bne	a4,a5,26cc <GPIO_Init+0x23e>
            {
                pos = pinpos << 2;
    264c:	fe842783          	lw	a5,-24(s0)
    2650:	078a                	slli	a5,a5,0x2
    2652:	fcf42e23          	sw	a5,-36(s0)
                pinmask = ((uint32_t)0x0F) << pos;
    2656:	fdc42783          	lw	a5,-36(s0)
    265a:	473d                	li	a4,15
    265c:	00f717b3          	sll	a5,a4,a5
    2660:	fcf42c23          	sw	a5,-40(s0)
                tmpreg &= ~pinmask;
    2664:	fd842783          	lw	a5,-40(s0)
    2668:	fff7c793          	not	a5,a5
    266c:	fe442703          	lw	a4,-28(s0)
    2670:	8ff9                	and	a5,a5,a4
    2672:	fef42223          	sw	a5,-28(s0)
                tmpreg |= (currentmode << pos);
    2676:	fdc42783          	lw	a5,-36(s0)
    267a:	fec42703          	lw	a4,-20(s0)
    267e:	00f717b3          	sll	a5,a4,a5
    2682:	fe442703          	lw	a4,-28(s0)
    2686:	8fd9                	or	a5,a5,a4
    2688:	fef42223          	sw	a5,-28(s0)

                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    268c:	fc842783          	lw	a5,-56(s0)
    2690:	4798                	lw	a4,8(a5)
    2692:	02800793          	li	a5,40
    2696:	00f71b63          	bne	a4,a5,26ac <GPIO_Init+0x21e>
                {
                    GPIOx->BCR = (((uint32_t)0x01) << (pinpos + 0x08));
    269a:	fe842783          	lw	a5,-24(s0)
    269e:	07a1                	addi	a5,a5,8
    26a0:	4705                	li	a4,1
    26a2:	00f71733          	sll	a4,a4,a5
    26a6:	fcc42783          	lw	a5,-52(s0)
    26aa:	cbd8                	sw	a4,20(a5)
                }

                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    26ac:	fc842783          	lw	a5,-56(s0)
    26b0:	4798                	lw	a4,8(a5)
    26b2:	04800793          	li	a5,72
    26b6:	00f71b63          	bne	a4,a5,26cc <GPIO_Init+0x23e>
                {
                    GPIOx->BSHR = (((uint32_t)0x01) << (pinpos + 0x08));
    26ba:	fe842783          	lw	a5,-24(s0)
    26be:	07a1                	addi	a5,a5,8
    26c0:	4705                	li	a4,1
    26c2:	00f71733          	sll	a4,a4,a5
    26c6:	fcc42783          	lw	a5,-52(s0)
    26ca:	cb98                	sw	a4,16(a5)
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
    26cc:	fe842783          	lw	a5,-24(s0)
    26d0:	0785                	addi	a5,a5,1
    26d2:	fef42423          	sw	a5,-24(s0)
    26d6:	fe842703          	lw	a4,-24(s0)
    26da:	479d                	li	a5,7
    26dc:	f4e7f2e3          	bgeu	a5,a4,2620 <GPIO_Init+0x192>
                }
            }
        }
        GPIOx->CFGHR = tmpreg;
    26e0:	fcc42783          	lw	a5,-52(s0)
    26e4:	fe442703          	lw	a4,-28(s0)
    26e8:	c3d8                	sw	a4,4(a5)

        if(GPIOx == GPIOA)
    26ea:	fcc42703          	lw	a4,-52(s0)
    26ee:	400117b7          	lui	a5,0x40011
    26f2:	80078793          	addi	a5,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    26f6:	00f71963          	bne	a4,a5,2708 <GPIO_Init+0x27a>
        {
            CFGHR_tmpA = tmpreg;
    26fa:	200007b7          	lui	a5,0x20000
    26fe:	fe442703          	lw	a4,-28(s0)
    2702:	02e7a223          	sw	a4,36(a5) # 20000024 <CFGHR_tmpA>
    2706:	a805                	j	2736 <GPIO_Init+0x2a8>
        }
        else if(GPIOx == GPIOB)
    2708:	fcc42703          	lw	a4,-52(s0)
    270c:	400117b7          	lui	a5,0x40011
    2710:	c0078793          	addi	a5,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    2714:	00f71763          	bne	a4,a5,2722 <GPIO_Init+0x294>
        {
            CFGHR_tmpB = tmpreg;
    2718:	fe442703          	lw	a4,-28(s0)
    271c:	80e1a423          	sw	a4,-2040(gp) # 20000028 <CFGHR_tmpB>
    2720:	a819                	j	2736 <GPIO_Init+0x2a8>
        }
        else if(GPIOx == GPIOC)
    2722:	fcc42703          	lw	a4,-52(s0)
    2726:	400117b7          	lui	a5,0x40011
    272a:	00f71663          	bne	a4,a5,2736 <GPIO_Init+0x2a8>
        {
            CFGHR_tmpC = tmpreg;
    272e:	fe442703          	lw	a4,-28(s0)
    2732:	80e1a623          	sw	a4,-2036(gp) # 2000002c <CFGHR_tmpC>
        }
    }

    if(GPIO_InitStruct->GPIO_Pin > 0x00FFFF)
    2736:	fc842783          	lw	a5,-56(s0)
    273a:	4398                	lw	a4,0(a5)
    273c:	67c1                	lui	a5,0x10
    273e:	0cf76e63          	bltu	a4,a5,281a <GPIO_Init+0x38c>
    {
        tmpreg = GPIOx->CFGXR;
    2742:	fcc42783          	lw	a5,-52(s0)
    2746:	4fdc                	lw	a5,28(a5)
    2748:	fef42223          	sw	a5,-28(s0)

        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
    274c:	fe042423          	sw	zero,-24(s0)
    2750:	a85d                	j	2806 <GPIO_Init+0x378>
        {
            pos = (((uint32_t)0x01) << (pinpos + 0x10));
    2752:	fe842783          	lw	a5,-24(s0)
    2756:	07c1                	addi	a5,a5,16
    2758:	4705                	li	a4,1
    275a:	00f717b3          	sll	a5,a4,a5
    275e:	fcf42e23          	sw	a5,-36(s0)
            currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
    2762:	fc842783          	lw	a5,-56(s0)
    2766:	439c                	lw	a5,0(a5)
    2768:	fdc42703          	lw	a4,-36(s0)
    276c:	8ff9                	and	a5,a5,a4
    276e:	fef42023          	sw	a5,-32(s0)

            if(currentpin == pos)
    2772:	fe042703          	lw	a4,-32(s0)
    2776:	fdc42783          	lw	a5,-36(s0)
    277a:	08f71163          	bne	a4,a5,27fc <GPIO_Init+0x36e>
            {
                pos = pinpos << 2;
    277e:	fe842783          	lw	a5,-24(s0)
    2782:	078a                	slli	a5,a5,0x2
    2784:	fcf42e23          	sw	a5,-36(s0)
                pinmask = ((uint32_t)0x0F) << pos;
    2788:	fdc42783          	lw	a5,-36(s0)
    278c:	473d                	li	a4,15
    278e:	00f717b3          	sll	a5,a4,a5
    2792:	fcf42c23          	sw	a5,-40(s0)
                tmpreg &= ~pinmask;
    2796:	fd842783          	lw	a5,-40(s0)
    279a:	fff7c793          	not	a5,a5
    279e:	fe442703          	lw	a4,-28(s0)
    27a2:	8ff9                	and	a5,a5,a4
    27a4:	fef42223          	sw	a5,-28(s0)
                tmpreg |= (currentmode << pos);
    27a8:	fdc42783          	lw	a5,-36(s0)
    27ac:	fec42703          	lw	a4,-20(s0)
    27b0:	00f717b3          	sll	a5,a4,a5
    27b4:	fe442703          	lw	a4,-28(s0)
    27b8:	8fd9                	or	a5,a5,a4
    27ba:	fef42223          	sw	a5,-28(s0)

                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
    27be:	fc842783          	lw	a5,-56(s0)
    27c2:	4798                	lw	a4,8(a5)
    27c4:	02800793          	li	a5,40
    27c8:	00f71b63          	bne	a4,a5,27de <GPIO_Init+0x350>
                {
                    GPIOx->BCR = (((uint32_t)0x01) << (pinpos + 0x10));
    27cc:	fe842783          	lw	a5,-24(s0)
    27d0:	07c1                	addi	a5,a5,16
    27d2:	4705                	li	a4,1
    27d4:	00f71733          	sll	a4,a4,a5
    27d8:	fcc42783          	lw	a5,-52(s0)
    27dc:	cbd8                	sw	a4,20(a5)
                }

                if(GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
    27de:	fc842783          	lw	a5,-56(s0)
    27e2:	4798                	lw	a4,8(a5)
    27e4:	04800793          	li	a5,72
    27e8:	00f71a63          	bne	a4,a5,27fc <GPIO_Init+0x36e>
                {
                    GPIOx->BSXR = (((uint32_t)0x01) << (pinpos));
    27ec:	fe842783          	lw	a5,-24(s0)
    27f0:	4705                	li	a4,1
    27f2:	00f71733          	sll	a4,a4,a5
    27f6:	fcc42783          	lw	a5,-52(s0)
    27fa:	d398                	sw	a4,32(a5)
        for(pinpos = 0x00; pinpos < 0x08; pinpos++)
    27fc:	fe842783          	lw	a5,-24(s0)
    2800:	0785                	addi	a5,a5,1
    2802:	fef42423          	sw	a5,-24(s0)
    2806:	fe842703          	lw	a4,-24(s0)
    280a:	479d                	li	a5,7
    280c:	f4e7f3e3          	bgeu	a5,a4,2752 <GPIO_Init+0x2c4>
                }
            }
        }
        GPIOx->CFGXR = tmpreg;
    2810:	fcc42783          	lw	a5,-52(s0)
    2814:	fe442703          	lw	a4,-28(s0)
    2818:	cfd8                	sw	a4,28(a5)
    }
}
    281a:	0001                	nop
    281c:	5472                	lw	s0,60(sp)
    281e:	6121                	addi	sp,sp,64
    2820:	8082                	ret

00002822 <GPIO_StructInit>:
 *      which will be initialized.
 *
 * @return  none
 */
void GPIO_StructInit(GPIO_InitTypeDef *GPIO_InitStruct)
{
    2822:	1101                	addi	sp,sp,-32
    2824:	ce22                	sw	s0,28(sp)
    2826:	1000                	addi	s0,sp,32
    2828:	fea42623          	sw	a0,-20(s0)
    GPIO_InitStruct->GPIO_Pin = GPIO_Pin_All;
    282c:	fec42783          	lw	a5,-20(s0)
    2830:	01000737          	lui	a4,0x1000
    2834:	177d                	addi	a4,a4,-1
    2836:	c398                	sw	a4,0(a5)
    GPIO_InitStruct->GPIO_Speed = GPIO_Speed_50MHz;
    2838:	fec42783          	lw	a5,-20(s0)
    283c:	4705                	li	a4,1
    283e:	c3d8                	sw	a4,4(a5)
    GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN_FLOATING;
    2840:	fec42783          	lw	a5,-20(s0)
    2844:	4711                	li	a4,4
    2846:	c798                	sw	a4,8(a5)
}
    2848:	0001                	nop
    284a:	4472                	lw	s0,28(sp)
    284c:	6105                	addi	sp,sp,32
    284e:	8082                	ret

00002850 <GPIO_ReadInputDataBit>:
 *             This parameter can be GPIO_Pin_x where x can be (0..23).
 *
 * @return  The input port pin value.
 */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
    2850:	7179                	addi	sp,sp,-48
    2852:	d622                	sw	s0,44(sp)
    2854:	1800                	addi	s0,sp,48
    2856:	fca42e23          	sw	a0,-36(s0)
    285a:	fcb42c23          	sw	a1,-40(s0)
    uint8_t bitstatus = 0x00;
    285e:	fe0407a3          	sb	zero,-17(s0)

    if((GPIOx->INDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    2862:	fdc42783          	lw	a5,-36(s0)
    2866:	4798                	lw	a4,8(a5)
    2868:	fd842783          	lw	a5,-40(s0)
    286c:	8ff9                	and	a5,a5,a4
    286e:	c789                	beqz	a5,2878 <GPIO_ReadInputDataBit+0x28>
    {
        bitstatus = (uint8_t)Bit_SET;
    2870:	4785                	li	a5,1
    2872:	fef407a3          	sb	a5,-17(s0)
    2876:	a019                	j	287c <GPIO_ReadInputDataBit+0x2c>
    }
    else
    {
        bitstatus = (uint8_t)Bit_RESET;
    2878:	fe0407a3          	sb	zero,-17(s0)
    }

    return bitstatus;
    287c:	fef44783          	lbu	a5,-17(s0)
}
    2880:	853e                	mv	a0,a5
    2882:	5432                	lw	s0,44(sp)
    2884:	6145                	addi	sp,sp,48
    2886:	8082                	ret

00002888 <GPIO_ReadInputData>:
 * @param   GPIOx - where x can be (A..C) to select the GPIO peripheral.
 *
 * @return  The output port pin value.
 */
uint32_t GPIO_ReadInputData(GPIO_TypeDef *GPIOx)
{
    2888:	7179                	addi	sp,sp,-48
    288a:	d622                	sw	s0,44(sp)
    288c:	1800                	addi	s0,sp,48
    288e:	fca42e23          	sw	a0,-36(s0)
    uint32_t val;

    val = ( uint32_t )GPIOx->INDR;
    2892:	fdc42783          	lw	a5,-36(s0)
    2896:	479c                	lw	a5,8(a5)
    2898:	fef42623          	sw	a5,-20(s0)

    return ( val );
    289c:	fec42783          	lw	a5,-20(s0)
}
    28a0:	853e                	mv	a0,a5
    28a2:	5432                	lw	s0,44(sp)
    28a4:	6145                	addi	sp,sp,48
    28a6:	8082                	ret

000028a8 <GPIO_ReadOutputDataBit>:
 *            This parameter can be GPIO_Pin_x where x can be (0..23).
 *
 * @return  none
 */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
    28a8:	7179                	addi	sp,sp,-48
    28aa:	d622                	sw	s0,44(sp)
    28ac:	1800                	addi	s0,sp,48
    28ae:	fca42e23          	sw	a0,-36(s0)
    28b2:	fcb42c23          	sw	a1,-40(s0)
    uint8_t bitstatus = 0x00;
    28b6:	fe0407a3          	sb	zero,-17(s0)

    if((GPIOx->OUTDR & GPIO_Pin) != (uint32_t)Bit_RESET)
    28ba:	fdc42783          	lw	a5,-36(s0)
    28be:	47d8                	lw	a4,12(a5)
    28c0:	fd842783          	lw	a5,-40(s0)
    28c4:	8ff9                	and	a5,a5,a4
    28c6:	c789                	beqz	a5,28d0 <GPIO_ReadOutputDataBit+0x28>
    {
        bitstatus = (uint8_t)Bit_SET;
    28c8:	4785                	li	a5,1
    28ca:	fef407a3          	sb	a5,-17(s0)
    28ce:	a019                	j	28d4 <GPIO_ReadOutputDataBit+0x2c>
    }
    else
    {
        bitstatus = (uint8_t)Bit_RESET;
    28d0:	fe0407a3          	sb	zero,-17(s0)
    }

    return bitstatus;
    28d4:	fef44783          	lbu	a5,-17(s0)
}
    28d8:	853e                	mv	a0,a5
    28da:	5432                	lw	s0,44(sp)
    28dc:	6145                	addi	sp,sp,48
    28de:	8082                	ret

000028e0 <GPIO_ReadOutputData>:
 * @param   GPIOx - where x can be (A..C) to select the GPIO peripheral.
 *
 * @return  GPIO output port pin value.
 */
uint32_t GPIO_ReadOutputData(GPIO_TypeDef *GPIOx)
{
    28e0:	7179                	addi	sp,sp,-48
    28e2:	d622                	sw	s0,44(sp)
    28e4:	1800                	addi	s0,sp,48
    28e6:	fca42e23          	sw	a0,-36(s0)
    uint32_t val;

    val = ( uint32_t )GPIOx->OUTDR;
    28ea:	fdc42783          	lw	a5,-36(s0)
    28ee:	47dc                	lw	a5,12(a5)
    28f0:	fef42623          	sw	a5,-20(s0)

    return ( val );
    28f4:	fec42783          	lw	a5,-20(s0)
}
    28f8:	853e                	mv	a0,a5
    28fa:	5432                	lw	s0,44(sp)
    28fc:	6145                	addi	sp,sp,48
    28fe:	8082                	ret

00002900 <GPIO_SetBits>:
 *            This parameter can be any combination of GPIO_Pin_x where x can be (0..23).
 *
 * @return  none
 */
void GPIO_SetBits(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
    2900:	1101                	addi	sp,sp,-32
    2902:	ce22                	sw	s0,28(sp)
    2904:	1000                	addi	s0,sp,32
    2906:	fea42623          	sw	a0,-20(s0)
    290a:	feb42423          	sw	a1,-24(s0)
    if((GPIO_Pin & ((uint32_t)0x00FFFF)) != 0x00)
    290e:	fe842703          	lw	a4,-24(s0)
    2912:	67c1                	lui	a5,0x10
    2914:	17fd                	addi	a5,a5,-1
    2916:	8ff9                	and	a5,a5,a4
    2918:	c791                	beqz	a5,2924 <GPIO_SetBits+0x24>
    {
        GPIOx->BSHR = GPIO_Pin;
    291a:	fec42783          	lw	a5,-20(s0)
    291e:	fe842703          	lw	a4,-24(s0)
    2922:	cb98                	sw	a4,16(a5)
    }

    if(GPIO_Pin > 0x00FFFF)
    2924:	fe842703          	lw	a4,-24(s0)
    2928:	67c1                	lui	a5,0x10
    292a:	00f76963          	bltu	a4,a5,293c <GPIO_SetBits+0x3c>
    {
        GPIOx->BSXR = (GPIO_Pin>>0x10);
    292e:	fe842783          	lw	a5,-24(s0)
    2932:	0107d713          	srli	a4,a5,0x10
    2936:	fec42783          	lw	a5,-20(s0)
    293a:	d398                	sw	a4,32(a5)
    }
}
    293c:	0001                	nop
    293e:	4472                	lw	s0,28(sp)
    2940:	6105                	addi	sp,sp,32
    2942:	8082                	ret

00002944 <GPIO_ResetBits>:
 *            This parameter can be any combination of GPIO_Pin_x where x can be (0..23).
 *
 * @return  none
 */
void GPIO_ResetBits(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
    2944:	1101                	addi	sp,sp,-32
    2946:	ce22                	sw	s0,28(sp)
    2948:	1000                	addi	s0,sp,32
    294a:	fea42623          	sw	a0,-20(s0)
    294e:	feb42423          	sw	a1,-24(s0)
    GPIOx->BCR = GPIO_Pin;
    2952:	fec42783          	lw	a5,-20(s0)
    2956:	fe842703          	lw	a4,-24(s0)
    295a:	cbd8                	sw	a4,20(a5)
}
    295c:	0001                	nop
    295e:	4472                	lw	s0,28(sp)
    2960:	6105                	addi	sp,sp,32
    2962:	8082                	ret

00002964 <GPIO_WriteBit>:
 *            Bit_SET - to set the port pin.
 *
 * @return  none
 */
void GPIO_WriteBit(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin, BitAction BitVal)
{
    2964:	1101                	addi	sp,sp,-32
    2966:	ce22                	sw	s0,28(sp)
    2968:	1000                	addi	s0,sp,32
    296a:	fea42623          	sw	a0,-20(s0)
    296e:	feb42423          	sw	a1,-24(s0)
    2972:	fec42223          	sw	a2,-28(s0)
    if(BitVal != Bit_RESET)
    2976:	fe442783          	lw	a5,-28(s0)
    297a:	cb8d                	beqz	a5,29ac <GPIO_WriteBit+0x48>
    {
        if((GPIO_Pin & ((uint32_t)0x00FFFF)) != 0x00)
    297c:	fe842703          	lw	a4,-24(s0)
    2980:	67c1                	lui	a5,0x10
    2982:	17fd                	addi	a5,a5,-1
    2984:	8ff9                	and	a5,a5,a4
    2986:	c791                	beqz	a5,2992 <GPIO_WriteBit+0x2e>
        {
            GPIOx->BSHR = GPIO_Pin;
    2988:	fec42783          	lw	a5,-20(s0)
    298c:	fe842703          	lw	a4,-24(s0)
    2990:	cb98                	sw	a4,16(a5)
        }

        if(GPIO_Pin > 0x00FFFF)
    2992:	fe842703          	lw	a4,-24(s0)
    2996:	67c1                	lui	a5,0x10
    2998:	00f76f63          	bltu	a4,a5,29b6 <GPIO_WriteBit+0x52>
        {
            GPIOx->BSXR = (GPIO_Pin>>0x10);
    299c:	fe842783          	lw	a5,-24(s0)
    29a0:	0107d713          	srli	a4,a5,0x10
    29a4:	fec42783          	lw	a5,-20(s0)
    29a8:	d398                	sw	a4,32(a5)
    }
    else
    {
        GPIOx->BCR = GPIO_Pin;
    }
}
    29aa:	a031                	j	29b6 <GPIO_WriteBit+0x52>
        GPIOx->BCR = GPIO_Pin;
    29ac:	fec42783          	lw	a5,-20(s0)
    29b0:	fe842703          	lw	a4,-24(s0)
    29b4:	cbd8                	sw	a4,20(a5)
}
    29b6:	0001                	nop
    29b8:	4472                	lw	s0,28(sp)
    29ba:	6105                	addi	sp,sp,32
    29bc:	8082                	ret

000029be <GPIO_Write>:
 *          PortVal - specifies the value to be written to the port output data register.
 *
 * @return  none
 */
void GPIO_Write(GPIO_TypeDef *GPIOx, uint32_t PortVal)
{
    29be:	1101                	addi	sp,sp,-32
    29c0:	ce22                	sw	s0,28(sp)
    29c2:	1000                	addi	s0,sp,32
    29c4:	fea42623          	sw	a0,-20(s0)
    29c8:	feb42423          	sw	a1,-24(s0)
    GPIOx->OUTDR = PortVal;
    29cc:	fec42783          	lw	a5,-20(s0)
    29d0:	fe842703          	lw	a4,-24(s0)
    29d4:	c7d8                	sw	a4,12(a5)
}
    29d6:	0001                	nop
    29d8:	4472                	lw	s0,28(sp)
    29da:	6105                	addi	sp,sp,32
    29dc:	8082                	ret

000029de <GPIO_PinLockConfig>:
 *            This parameter can be any combination of GPIO_Pin_x where x can be (0..23).
 *
 * @return  none
 */
void GPIO_PinLockConfig(GPIO_TypeDef *GPIOx, uint32_t GPIO_Pin)
{
    29de:	7179                	addi	sp,sp,-48
    29e0:	d622                	sw	s0,44(sp)
    29e2:	1800                	addi	s0,sp,48
    29e4:	fca42e23          	sw	a0,-36(s0)
    29e8:	fcb42c23          	sw	a1,-40(s0)
    uint32_t tmp = 0x01000000;
    29ec:	010007b7          	lui	a5,0x1000
    29f0:	fef42623          	sw	a5,-20(s0)

    tmp |= GPIO_Pin;
    29f4:	fec42703          	lw	a4,-20(s0)
    29f8:	fd842783          	lw	a5,-40(s0)
    29fc:	8fd9                	or	a5,a5,a4
    29fe:	fef42623          	sw	a5,-20(s0)
    GPIOx->LCKR = tmp;
    2a02:	fdc42783          	lw	a5,-36(s0)
    2a06:	fec42703          	lw	a4,-20(s0)
    2a0a:	cf98                	sw	a4,24(a5)
    GPIOx->LCKR = GPIO_Pin;
    2a0c:	fdc42783          	lw	a5,-36(s0)
    2a10:	fd842703          	lw	a4,-40(s0)
    2a14:	cf98                	sw	a4,24(a5)
    GPIOx->LCKR = tmp;
    2a16:	fdc42783          	lw	a5,-36(s0)
    2a1a:	fec42703          	lw	a4,-20(s0)
    2a1e:	cf98                	sw	a4,24(a5)
    tmp = GPIOx->LCKR;
    2a20:	fdc42783          	lw	a5,-36(s0)
    2a24:	4f9c                	lw	a5,24(a5)
    2a26:	fef42623          	sw	a5,-20(s0)
    tmp = GPIOx->LCKR;
    2a2a:	fdc42783          	lw	a5,-36(s0)
    2a2e:	4f9c                	lw	a5,24(a5)
    2a30:	fef42623          	sw	a5,-20(s0)
}
    2a34:	0001                	nop
    2a36:	5432                	lw	s0,44(sp)
    2a38:	6145                	addi	sp,sp,48
    2a3a:	8082                	ret

00002a3c <GPIO_PinRemapConfig>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
    2a3c:	7179                	addi	sp,sp,-48
    2a3e:	d622                	sw	s0,44(sp)
    2a40:	1800                	addi	s0,sp,48
    2a42:	fca42e23          	sw	a0,-36(s0)
    2a46:	fcb42c23          	sw	a1,-40(s0)
    uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
    2a4a:	fe042423          	sw	zero,-24(s0)
    2a4e:	fe042223          	sw	zero,-28(s0)
    2a52:	fe042623          	sw	zero,-20(s0)
    2a56:	fe042023          	sw	zero,-32(s0)

    tmpreg = AFIO->PCFR1;
    2a5a:	400107b7          	lui	a5,0x40010
    2a5e:	43dc                	lw	a5,4(a5)
    2a60:	fef42623          	sw	a5,-20(s0)

    tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
    2a64:	fdc42783          	lw	a5,-36(s0)
    2a68:	83c1                	srli	a5,a5,0x10
    2a6a:	8bbd                	andi	a5,a5,15
    2a6c:	fef42023          	sw	a5,-32(s0)
    tmp = GPIO_Remap & LSB_MASK;
    2a70:	fdc42703          	lw	a4,-36(s0)
    2a74:	67c1                	lui	a5,0x10
    2a76:	17fd                	addi	a5,a5,-1
    2a78:	8ff9                	and	a5,a5,a4
    2a7a:	fef42423          	sw	a5,-24(s0)

    /* Clear bit */
    if((GPIO_Remap & 0x08000000) == 0x08000000) /* 3bit */
    2a7e:	fdc42703          	lw	a4,-36(s0)
    2a82:	080007b7          	lui	a5,0x8000
    2a86:	8ff9                	and	a5,a5,a4
    2a88:	cfe9                	beqz	a5,2b62 <GPIO_PinRemapConfig+0x126>
    {
        if((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) /* [26:24] SDI */
    2a8a:	fdc42703          	lw	a4,-36(s0)
    2a8e:	003007b7          	lui	a5,0x300
    2a92:	8f7d                	and	a4,a4,a5
    2a94:	003007b7          	lui	a5,0x300
    2a98:	02f71563          	bne	a4,a5,2ac2 <GPIO_PinRemapConfig+0x86>
        {
            tmpreg &= DBGAFR_SWJCFG_MASK;
    2a9c:	fec42703          	lw	a4,-20(s0)
    2aa0:	f10007b7          	lui	a5,0xf1000
    2aa4:	17fd                	addi	a5,a5,-1
    2aa6:	8ff9                	and	a5,a5,a4
    2aa8:	fef42623          	sw	a5,-20(s0)
            AFIO->PCFR1 &= DBGAFR_SWJCFG_MASK;
    2aac:	400107b7          	lui	a5,0x40010
    2ab0:	43d4                	lw	a3,4(a5)
    2ab2:	400107b7          	lui	a5,0x40010
    2ab6:	f1000737          	lui	a4,0xf1000
    2aba:	177d                	addi	a4,a4,-1
    2abc:	8f75                	and	a4,a4,a3
    2abe:	c3d8                	sw	a4,4(a5)
    2ac0:	a21d                	j	2be6 <GPIO_PinRemapConfig+0x1aa>
        }
        else if((GPIO_Remap & DBGAFR_TIM1RP_MASK) == DBGAFR_TIM1RP_MASK) /* [31:16] 3bit */
    2ac2:	fdc42703          	lw	a4,-36(s0)
    2ac6:	004007b7          	lui	a5,0x400
    2aca:	8ff9                	and	a5,a5,a4
    2acc:	cf9d                	beqz	a5,2b0a <GPIO_PinRemapConfig+0xce>
        {
            tmp1 = ((uint32_t)0x07) << 15;
    2ace:	000387b7          	lui	a5,0x38
    2ad2:	fef42223          	sw	a5,-28(s0)
            tmpreg &= ~tmp1;
    2ad6:	fe442783          	lw	a5,-28(s0)
    2ada:	fff7c793          	not	a5,a5
    2ade:	fec42703          	lw	a4,-20(s0)
    2ae2:	8ff9                	and	a5,a5,a4
    2ae4:	fef42623          	sw	a5,-20(s0)

            if(NewState != DISABLE)
    2ae8:	fd842783          	lw	a5,-40(s0)
    2aec:	cb89                	beqz	a5,2afe <GPIO_PinRemapConfig+0xc2>
            {
                tmpreg |= (tmp << 15);
    2aee:	fe842783          	lw	a5,-24(s0)
    2af2:	07be                	slli	a5,a5,0xf
    2af4:	fec42703          	lw	a4,-20(s0)
    2af8:	8fd9                	or	a5,a5,a4
    2afa:	fef42623          	sw	a5,-20(s0)
            }

            AFIO->PCFR1 = tmpreg;
    2afe:	400107b7          	lui	a5,0x40010
    2b02:	fec42703          	lw	a4,-20(s0)
    2b06:	c3d8                	sw	a4,4(a5)
            return;
    2b08:	a229                	j	2c12 <GPIO_PinRemapConfig+0x1d6>
        }
        else if((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == DBGAFR_LOCATION_MASK) /* [31:16] 3bit */
    2b0a:	fdc42703          	lw	a4,-36(s0)
    2b0e:	003007b7          	lui	a5,0x300
    2b12:	8f7d                	and	a4,a4,a5
    2b14:	002007b7          	lui	a5,0x200
    2b18:	02f71463          	bne	a4,a5,2b40 <GPIO_PinRemapConfig+0x104>
        {
            tmp1 = ((uint32_t)0x07) << (tmpmask + 0x10);
    2b1c:	fe042783          	lw	a5,-32(s0)
    2b20:	07c1                	addi	a5,a5,16
    2b22:	471d                	li	a4,7
    2b24:	00f717b3          	sll	a5,a4,a5
    2b28:	fef42223          	sw	a5,-28(s0)
            tmpreg &= ~tmp1;
    2b2c:	fe442783          	lw	a5,-28(s0)
    2b30:	fff7c793          	not	a5,a5
    2b34:	fec42703          	lw	a4,-20(s0)
    2b38:	8ff9                	and	a5,a5,a4
    2b3a:	fef42623          	sw	a5,-20(s0)
    2b3e:	a065                	j	2be6 <GPIO_PinRemapConfig+0x1aa>
        }
        else /* [15:0] 3bit */
        {
            tmp1 = ((uint32_t)0x07) << tmpmask;
    2b40:	fe042783          	lw	a5,-32(s0)
    2b44:	471d                	li	a4,7
    2b46:	00f717b3          	sll	a5,a4,a5
    2b4a:	fef42223          	sw	a5,-28(s0)
            tmpreg &= ~tmp1;
    2b4e:	fe442783          	lw	a5,-28(s0)
    2b52:	fff7c793          	not	a5,a5
    2b56:	fec42703          	lw	a4,-20(s0)
    2b5a:	8ff9                	and	a5,a5,a4
    2b5c:	fef42623          	sw	a5,-20(s0)
    2b60:	a059                	j	2be6 <GPIO_PinRemapConfig+0x1aa>
        }
    }
    else
    {
        if((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) /* [31:16] 2bit */
    2b62:	fdc42703          	lw	a4,-36(s0)
    2b66:	003007b7          	lui	a5,0x300
    2b6a:	8f7d                	and	a4,a4,a5
    2b6c:	003007b7          	lui	a5,0x300
    2b70:	02f71463          	bne	a4,a5,2b98 <GPIO_PinRemapConfig+0x15c>
        {
            tmp1 = ((uint32_t)0x03) << (tmpmask + 0x10);
    2b74:	fe042783          	lw	a5,-32(s0)
    2b78:	07c1                	addi	a5,a5,16
    2b7a:	470d                	li	a4,3
    2b7c:	00f717b3          	sll	a5,a4,a5
    2b80:	fef42223          	sw	a5,-28(s0)
            tmpreg &= ~tmp1;
    2b84:	fe442783          	lw	a5,-28(s0)
    2b88:	fff7c793          	not	a5,a5
    2b8c:	fec42703          	lw	a4,-20(s0)
    2b90:	8ff9                	and	a5,a5,a4
    2b92:	fef42623          	sw	a5,-20(s0)
    2b96:	a881                	j	2be6 <GPIO_PinRemapConfig+0x1aa>
        }
        else if((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK) /* [15:0] 2bit */
    2b98:	fdc42703          	lw	a4,-36(s0)
    2b9c:	001007b7          	lui	a5,0x100
    2ba0:	8ff9                	and	a5,a5,a4
    2ba2:	c395                	beqz	a5,2bc6 <GPIO_PinRemapConfig+0x18a>
        {
            tmp1 = ((uint32_t)0x03) << tmpmask;
    2ba4:	fe042783          	lw	a5,-32(s0)
    2ba8:	470d                	li	a4,3
    2baa:	00f717b3          	sll	a5,a4,a5
    2bae:	fef42223          	sw	a5,-28(s0)
            tmpreg &= ~tmp1;
    2bb2:	fe442783          	lw	a5,-28(s0)
    2bb6:	fff7c793          	not	a5,a5
    2bba:	fec42703          	lw	a4,-20(s0)
    2bbe:	8ff9                	and	a5,a5,a4
    2bc0:	fef42623          	sw	a5,-20(s0)
    2bc4:	a00d                	j	2be6 <GPIO_PinRemapConfig+0x1aa>
        }
        else /* [31:0] 1bit */
        {
            tmpreg &= ~(tmp << (((GPIO_Remap & 0x00FFFFFF ) >> 0x15) * 0x10));
    2bc6:	fdc42783          	lw	a5,-36(s0)
    2bca:	83d5                	srli	a5,a5,0x15
    2bcc:	8b9d                	andi	a5,a5,7
    2bce:	0792                	slli	a5,a5,0x4
    2bd0:	fe842703          	lw	a4,-24(s0)
    2bd4:	00f717b3          	sll	a5,a4,a5
    2bd8:	fff7c793          	not	a5,a5
    2bdc:	fec42703          	lw	a4,-20(s0)
    2be0:	8ff9                	and	a5,a5,a4
    2be2:	fef42623          	sw	a5,-20(s0)
        }
    }

    /* Set bit */
    if(NewState != DISABLE)
    2be6:	fd842783          	lw	a5,-40(s0)
    2bea:	cf99                	beqz	a5,2c08 <GPIO_PinRemapConfig+0x1cc>
    {
        tmpreg |= (tmp << (((GPIO_Remap & 0x00FFFFFF )>> 0x15) * 0x10));
    2bec:	fdc42783          	lw	a5,-36(s0)
    2bf0:	83d5                	srli	a5,a5,0x15
    2bf2:	8b9d                	andi	a5,a5,7
    2bf4:	0792                	slli	a5,a5,0x4
    2bf6:	fe842703          	lw	a4,-24(s0)
    2bfa:	00f717b3          	sll	a5,a4,a5
    2bfe:	fec42703          	lw	a4,-20(s0)
    2c02:	8fd9                	or	a5,a5,a4
    2c04:	fef42623          	sw	a5,-20(s0)
    }

    AFIO->PCFR1 = tmpreg;
    2c08:	400107b7          	lui	a5,0x40010
    2c0c:	fec42703          	lw	a4,-20(s0)
    2c10:	c3d8                	sw	a4,4(a5)
}
    2c12:	5432                	lw	s0,44(sp)
    2c14:	6145                	addi	sp,sp,48
    2c16:	8082                	ret

00002c18 <GPIO_EXTILineConfig>:
 *            This parameter can be GPIO_PinSourcex where x can be (0..23).
 *
 * @return  none
 */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint16_t GPIO_PinSource)
{
    2c18:	7179                	addi	sp,sp,-48
    2c1a:	d622                	sw	s0,44(sp)
    2c1c:	1800                	addi	s0,sp,48
    2c1e:	87aa                	mv	a5,a0
    2c20:	872e                	mv	a4,a1
    2c22:	fcf40fa3          	sb	a5,-33(s0)
    2c26:	87ba                	mv	a5,a4
    2c28:	fcf41e23          	sh	a5,-36(s0)
    uint32_t tmp = 0x00;
    2c2c:	fe042623          	sw	zero,-20(s0)

    tmp = ((uint32_t)0x03) << (0x02 * (GPIO_PinSource & (uint8_t)0x0F));
    2c30:	fdc45783          	lhu	a5,-36(s0)
    2c34:	8bbd                	andi	a5,a5,15
    2c36:	0786                	slli	a5,a5,0x1
    2c38:	470d                	li	a4,3
    2c3a:	00f717b3          	sll	a5,a4,a5
    2c3e:	fef42623          	sw	a5,-20(s0)
    AFIO->EXTICR[GPIO_PinSource >> 0x04] &= ~tmp;
    2c42:	40010737          	lui	a4,0x40010
    2c46:	fdc45783          	lhu	a5,-36(s0)
    2c4a:	8391                	srli	a5,a5,0x4
    2c4c:	07c2                	slli	a5,a5,0x10
    2c4e:	83c1                	srli	a5,a5,0x10
    2c50:	078a                	slli	a5,a5,0x2
    2c52:	97ba                	add	a5,a5,a4
    2c54:	4798                	lw	a4,8(a5)
    2c56:	fec42783          	lw	a5,-20(s0)
    2c5a:	fff7c793          	not	a5,a5
    2c5e:	400106b7          	lui	a3,0x40010
    2c62:	fdc45603          	lhu	a2,-36(s0)
    2c66:	8211                	srli	a2,a2,0x4
    2c68:	0642                	slli	a2,a2,0x10
    2c6a:	8241                	srli	a2,a2,0x10
    2c6c:	8f7d                	and	a4,a4,a5
    2c6e:	00261793          	slli	a5,a2,0x2
    2c72:	97b6                	add	a5,a5,a3
    2c74:	c798                	sw	a4,8(a5)
    AFIO->EXTICR[GPIO_PinSource >> 0x04] |= (((uint32_t)GPIO_PortSource) << (0x02 * (GPIO_PinSource & (uint8_t)0x0F)));
    2c76:	40010737          	lui	a4,0x40010
    2c7a:	fdc45783          	lhu	a5,-36(s0)
    2c7e:	8391                	srli	a5,a5,0x4
    2c80:	07c2                	slli	a5,a5,0x10
    2c82:	83c1                	srli	a5,a5,0x10
    2c84:	078a                	slli	a5,a5,0x2
    2c86:	97ba                	add	a5,a5,a4
    2c88:	4798                	lw	a4,8(a5)
    2c8a:	fdf44683          	lbu	a3,-33(s0)
    2c8e:	fdc45783          	lhu	a5,-36(s0)
    2c92:	8bbd                	andi	a5,a5,15
    2c94:	0786                	slli	a5,a5,0x1
    2c96:	00f697b3          	sll	a5,a3,a5
    2c9a:	400106b7          	lui	a3,0x40010
    2c9e:	fdc45603          	lhu	a2,-36(s0)
    2ca2:	8211                	srli	a2,a2,0x4
    2ca4:	0642                	slli	a2,a2,0x10
    2ca6:	8241                	srli	a2,a2,0x10
    2ca8:	8f5d                	or	a4,a4,a5
    2caa:	00261793          	slli	a5,a2,0x2
    2cae:	97b6                	add	a5,a5,a3
    2cb0:	c798                	sw	a4,8(a5)
}
    2cb2:	0001                	nop
    2cb4:	5432                	lw	s0,44(sp)
    2cb6:	6145                	addi	sp,sp,48
    2cb8:	8082                	ret

00002cba <GPIO_IPD_Unused>:
 * @param   none
 *
 * @return  none
 */
void GPIO_IPD_Unused(void)
{
    2cba:	1101                	addi	sp,sp,-32
    2cbc:	ce06                	sw	ra,28(sp)
    2cbe:	cc22                	sw	s0,24(sp)
    2cc0:	1000                	addi	s0,sp,32
    GPIO_InitTypeDef GPIO_InitStructure = {0};
    2cc2:	fe042023          	sw	zero,-32(s0)
    2cc6:	fe042223          	sw	zero,-28(s0)
    2cca:	fe042423          	sw	zero,-24(s0)
    uint32_t chip = 0;
    2cce:	fe042623          	sw	zero,-20(s0)
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC, ENABLE);
    2cd2:	4585                	li	a1,1
    2cd4:	4571                	li	a0,28
    2cd6:	5e3010ef          	jal	ra,4ab8 <RCC_APB2PeriphClockCmd>
    chip =  *( uint32_t * )0x1FFFF704 & (~0x00000011);
    2cda:	1ffff7b7          	lui	a5,0x1ffff
    2cde:	70478793          	addi	a5,a5,1796 # 1ffff704 <_data_lma+0x1fff04f8>
    2ce2:	439c                	lw	a5,0(a5)
    2ce4:	9bb9                	andi	a5,a5,-18
    2ce6:	fef42623          	sw	a5,-20(s0)
    2cea:	fec42703          	lw	a4,-20(s0)
    2cee:	035607b7          	lui	a5,0x3560
    2cf2:	60078793          	addi	a5,a5,1536 # 3560600 <_data_lma+0x35513f4>
    2cf6:	0af70363          	beq	a4,a5,2d9c <GPIO_IPD_Unused+0xe2>
    2cfa:	fec42703          	lw	a4,-20(s0)
    2cfe:	035607b7          	lui	a5,0x3560
    2d02:	60078793          	addi	a5,a5,1536 # 3560600 <_data_lma+0x35513f4>
    2d06:	02e7e163          	bltu	a5,a4,2d28 <GPIO_IPD_Unused+0x6e>
    2d0a:	fec42703          	lw	a4,-20(s0)
    2d0e:	031177b7          	lui	a5,0x3117
    2d12:	22f70a63          	beq	a4,a5,2f46 <GPIO_IPD_Unused+0x28c>
    2d16:	fec42703          	lw	a4,-20(s0)
    2d1a:	035107b7          	lui	a5,0x3510
    2d1e:	60078793          	addi	a5,a5,1536 # 3510600 <_data_lma+0x35013f4>
    2d22:	02f70c63          	beq	a4,a5,2d5a <GPIO_IPD_Unused+0xa0>
            GPIO_Init(GPIOC, &GPIO_InitStructure);
            break;
        }
        default:
        {
            break;
    2d26:	ac41                	j	2fb6 <GPIO_IPD_Unused+0x2fc>
    2d28:	fec42703          	lw	a4,-20(s0)
    2d2c:	035b07b7          	lui	a5,0x35b0
    2d30:	60078793          	addi	a5,a5,1536 # 35b0600 <_data_lma+0x35a13f4>
    2d34:	0cf70963          	beq	a4,a5,2e06 <GPIO_IPD_Unused+0x14c>
    2d38:	fec42703          	lw	a4,-20(s0)
    2d3c:	035e07b7          	lui	a5,0x35e0
    2d40:	60078793          	addi	a5,a5,1536 # 35e0600 <_data_lma+0x35d13f4>
    2d44:	12f70663          	beq	a4,a5,2e70 <GPIO_IPD_Unused+0x1b6>
    2d48:	fec42703          	lw	a4,-20(s0)
    2d4c:	035707b7          	lui	a5,0x3570
    2d50:	60078793          	addi	a5,a5,1536 # 3570600 <_data_lma+0x35613f4>
    2d54:	18f70463          	beq	a4,a5,2edc <GPIO_IPD_Unused+0x222>
    2d58:	acb9                	j	2fb6 <GPIO_IPD_Unused+0x2fc>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14|GPIO_Pin_15\
    2d5a:	003fc7b7          	lui	a5,0x3fc
    2d5e:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2d62:	04800793          	li	a5,72
    2d66:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOB, &GPIO_InitStructure);
    2d6a:	fe040793          	addi	a5,s0,-32
    2d6e:	85be                	mv	a1,a5
    2d70:	400117b7          	lui	a5,0x40011
    2d74:	c0078513          	addi	a0,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    2d78:	f16ff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1\
    2d7c:	03f00793          	li	a5,63
    2d80:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2d84:	04800793          	li	a5,72
    2d88:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOC, &GPIO_InitStructure);
    2d8c:	fe040793          	addi	a5,s0,-32
    2d90:	85be                	mv	a1,a5
    2d92:	40011537          	lui	a0,0x40011
    2d96:	ef8ff0ef          	jal	ra,248e <GPIO_Init>
            break;
    2d9a:	ac31                	j	2fb6 <GPIO_IPD_Unused+0x2fc>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_16|GPIO_Pin_15\
    2d9c:	010007b7          	lui	a5,0x1000
    2da0:	f0078793          	addi	a5,a5,-256 # ffff00 <_data_lma+0xff0cf4>
    2da4:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2da8:	04800793          	li	a5,72
    2dac:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOA, &GPIO_InitStructure);
    2db0:	fe040793          	addi	a5,s0,-32
    2db4:	85be                	mv	a1,a5
    2db6:	400117b7          	lui	a5,0x40011
    2dba:	80078513          	addi	a0,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    2dbe:	ed0ff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_13\
    2dc2:	003fe7b7          	lui	a5,0x3fe
    2dc6:	0791                	addi	a5,a5,4
    2dc8:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2dcc:	04800793          	li	a5,72
    2dd0:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOB, &GPIO_InitStructure);
    2dd4:	fe040793          	addi	a5,s0,-32
    2dd8:	85be                	mv	a1,a5
    2dda:	400117b7          	lui	a5,0x40011
    2dde:	c0078513          	addi	a0,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    2de2:	eacff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1|GPIO_Pin_2\
    2de6:	0f600793          	li	a5,246
    2dea:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2dee:	04800793          	li	a5,72
    2df2:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOC, &GPIO_InitStructure);
    2df6:	fe040793          	addi	a5,s0,-32
    2dfa:	85be                	mv	a1,a5
    2dfc:	40011537          	lui	a0,0x40011
    2e00:	e8eff0ef          	jal	ra,248e <GPIO_Init>
            break;
    2e04:	aa4d                	j	2fb6 <GPIO_IPD_Unused+0x2fc>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_16|GPIO_Pin_15\
    2e06:	00ffd7b7          	lui	a5,0xffd
    2e0a:	f0078793          	addi	a5,a5,-256 # ffcf00 <_data_lma+0xfedcf4>
    2e0e:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2e12:	04800793          	li	a5,72
    2e16:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOA, &GPIO_InitStructure);
    2e1a:	fe040793          	addi	a5,s0,-32
    2e1e:	85be                	mv	a1,a5
    2e20:	400117b7          	lui	a5,0x40011
    2e24:	80078513          	addi	a0,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    2e28:	e66ff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_13\
    2e2c:	003fe7b7          	lui	a5,0x3fe
    2e30:	0791                	addi	a5,a5,4
    2e32:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2e36:	04800793          	li	a5,72
    2e3a:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOB, &GPIO_InitStructure);
    2e3e:	fe040793          	addi	a5,s0,-32
    2e42:	85be                	mv	a1,a5
    2e44:	400117b7          	lui	a5,0x40011
    2e48:	c0078513          	addi	a0,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    2e4c:	e42ff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2|GPIO_Pin_4|GPIO_Pin_5\
    2e50:	0f700793          	li	a5,247
    2e54:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2e58:	04800793          	li	a5,72
    2e5c:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOC, &GPIO_InitStructure);
    2e60:	fe040793          	addi	a5,s0,-32
    2e64:	85be                	mv	a1,a5
    2e66:	40011537          	lui	a0,0x40011
    2e6a:	e24ff0ef          	jal	ra,248e <GPIO_Init>
            break;
    2e6e:	a2a1                	j	2fb6 <GPIO_IPD_Unused+0x2fc>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_16|GPIO_Pin_15\
    2e70:	010007b7          	lui	a5,0x1000
    2e74:	f0078793          	addi	a5,a5,-256 # ffff00 <_data_lma+0xff0cf4>
    2e78:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2e7c:	04800793          	li	a5,72
    2e80:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOA, &GPIO_InitStructure);
    2e84:	fe040793          	addi	a5,s0,-32
    2e88:	85be                	mv	a1,a5
    2e8a:	400117b7          	lui	a5,0x40011
    2e8e:	80078513          	addi	a0,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    2e92:	dfcff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_9\
    2e96:	003fe7b7          	lui	a5,0x3fe
    2e9a:	7f478793          	addi	a5,a5,2036 # 3fe7f4 <_data_lma+0x3ef5e8>
    2e9e:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2ea2:	04800793          	li	a5,72
    2ea6:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOB, &GPIO_InitStructure);
    2eaa:	fe040793          	addi	a5,s0,-32
    2eae:	85be                	mv	a1,a5
    2eb0:	400117b7          	lui	a5,0x40011
    2eb4:	c0078513          	addi	a0,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    2eb8:	dd6ff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1\
    2ebc:	0ff00793          	li	a5,255
    2ec0:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2ec4:	04800793          	li	a5,72
    2ec8:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOC, &GPIO_InitStructure);
    2ecc:	fe040793          	addi	a5,s0,-32
    2ed0:	85be                	mv	a1,a5
    2ed2:	40011537          	lui	a0,0x40011
    2ed6:	db8ff0ef          	jal	ra,248e <GPIO_Init>
            break;
    2eda:	a8f1                	j	2fb6 <GPIO_IPD_Unused+0x2fc>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9\
    2edc:	010007b7          	lui	a5,0x1000
    2ee0:	f0078793          	addi	a5,a5,-256 # ffff00 <_data_lma+0xff0cf4>
    2ee4:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2ee8:	04800793          	li	a5,72
    2eec:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOA, &GPIO_InitStructure);
    2ef0:	fe040793          	addi	a5,s0,-32
    2ef4:	85be                	mv	a1,a5
    2ef6:	400117b7          	lui	a5,0x40011
    2efa:	80078513          	addi	a0,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    2efe:	d90ff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_2\
    2f02:	003ff7b7          	lui	a5,0x3ff
    2f06:	17f5                	addi	a5,a5,-3
    2f08:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2f0c:	04800793          	li	a5,72
    2f10:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOB, &GPIO_InitStructure);
    2f14:	fe040793          	addi	a5,s0,-32
    2f18:	85be                	mv	a1,a5
    2f1a:	400117b7          	lui	a5,0x40011
    2f1e:	c0078513          	addi	a0,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    2f22:	d6cff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0\
    2f26:	0fd00793          	li	a5,253
    2f2a:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2f2e:	04800793          	li	a5,72
    2f32:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOC, &GPIO_InitStructure);
    2f36:	fe040793          	addi	a5,s0,-32
    2f3a:	85be                	mv	a1,a5
    2f3c:	40011537          	lui	a0,0x40011
    2f40:	d4eff0ef          	jal	ra,248e <GPIO_Init>
            break;
    2f44:	a88d                	j	2fb6 <GPIO_IPD_Unused+0x2fc>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_16|GPIO_Pin_15\
    2f46:	00fff7b7          	lui	a5,0xfff
    2f4a:	10078793          	addi	a5,a5,256 # fff100 <_data_lma+0xfefef4>
    2f4e:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2f52:	04800793          	li	a5,72
    2f56:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOA, &GPIO_InitStructure);
    2f5a:	fe040793          	addi	a5,s0,-32
    2f5e:	85be                	mv	a1,a5
    2f60:	400117b7          	lui	a5,0x40011
    2f64:	80078513          	addi	a0,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    2f68:	d26ff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_3\
    2f6c:	010007b7          	lui	a5,0x1000
    2f70:	f7c78793          	addi	a5,a5,-132 # ffff7c <_data_lma+0xff0d70>
    2f74:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2f78:	04800793          	li	a5,72
    2f7c:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOB, &GPIO_InitStructure);
    2f80:	fe040793          	addi	a5,s0,-32
    2f84:	85be                	mv	a1,a5
    2f86:	400117b7          	lui	a5,0x40011
    2f8a:	c0078513          	addi	a0,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    2f8e:	d00ff0ef          	jal	ra,248e <GPIO_Init>
            GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_1|GPIO_Pin_2\
    2f92:	00f0f7b7          	lui	a5,0xf0f
    2f96:	3f778793          	addi	a5,a5,1015 # f0f3f7 <_data_lma+0xf001eb>
    2f9a:	fef42023          	sw	a5,-32(s0)
            GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
    2f9e:	04800793          	li	a5,72
    2fa2:	fef42423          	sw	a5,-24(s0)
            GPIO_Init(GPIOC, &GPIO_InitStructure);
    2fa6:	fe040793          	addi	a5,s0,-32
    2faa:	85be                	mv	a1,a5
    2fac:	40011537          	lui	a0,0x40011
    2fb0:	cdeff0ef          	jal	ra,248e <GPIO_Init>
            break;
    2fb4:	0001                	nop
        }

    }

}
    2fb6:	0001                	nop
    2fb8:	40f2                	lw	ra,28(sp)
    2fba:	4462                	lw	s0,24(sp)
    2fbc:	6105                	addi	sp,sp,32
    2fbe:	8082                	ret

00002fc0 <I2C_DeInit>:
 * @param   I2Cx - where x can be 1 to select the I2C peripheral.
 *
 * @return  none
 */
void I2C_DeInit(I2C_TypeDef *I2Cx)
{
    2fc0:	1101                	addi	sp,sp,-32
    2fc2:	ce06                	sw	ra,28(sp)
    2fc4:	cc22                	sw	s0,24(sp)
    2fc6:	1000                	addi	s0,sp,32
    2fc8:	fea42623          	sw	a0,-20(s0)
    if(I2Cx == I2C1)
    2fcc:	fec42703          	lw	a4,-20(s0)
    2fd0:	400057b7          	lui	a5,0x40005
    2fd4:	40078793          	addi	a5,a5,1024 # 40005400 <_eusrstack+0x20001400>
    2fd8:	00f71c63          	bne	a4,a5,2ff0 <I2C_DeInit+0x30>
    {
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, ENABLE);
    2fdc:	4585                	li	a1,1
    2fde:	00200537          	lui	a0,0x200
    2fe2:	3ef010ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_I2C1, DISABLE);
    2fe6:	4581                	li	a1,0
    2fe8:	00200537          	lui	a0,0x200
    2fec:	3e5010ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
    }
}
    2ff0:	0001                	nop
    2ff2:	40f2                	lw	ra,28(sp)
    2ff4:	4462                	lw	s0,24(sp)
    2ff6:	6105                	addi	sp,sp,32
    2ff8:	8082                	ret

00002ffa <I2C_Init>:
 *        contains the configuration information for the specified I2C peripheral.
 *
 * @return  none
 */
void I2C_Init(I2C_TypeDef *I2Cx, I2C_InitTypeDef *I2C_InitStruct)
{
    2ffa:	7139                	addi	sp,sp,-64
    2ffc:	de06                	sw	ra,60(sp)
    2ffe:	dc22                	sw	s0,56(sp)
    3000:	0080                	addi	s0,sp,64
    3002:	fca42623          	sw	a0,-52(s0)
    3006:	fcb42423          	sw	a1,-56(s0)
    uint16_t tmpreg = 0, freqrange = 0;
    300a:	fe041723          	sh	zero,-18(s0)
    300e:	fe041523          	sh	zero,-22(s0)
    uint16_t result = 0x04;
    3012:	4791                	li	a5,4
    3014:	fef41623          	sh	a5,-20(s0)
    uint32_t pclk1 = 8000000;
    3018:	007a17b7          	lui	a5,0x7a1
    301c:	20078793          	addi	a5,a5,512 # 7a1200 <_data_lma+0x791ff4>
    3020:	fef42223          	sw	a5,-28(s0)

    RCC_ClocksTypeDef rcc_clocks;

    tmpreg = I2Cx->CTLR2;
    3024:	fcc42783          	lw	a5,-52(s0)
    3028:	0047d783          	lhu	a5,4(a5)
    302c:	fef41723          	sh	a5,-18(s0)
    tmpreg &= CTLR2_FREQ_Reset;
    3030:	fee45783          	lhu	a5,-18(s0)
    3034:	fc07f793          	andi	a5,a5,-64
    3038:	fef41723          	sh	a5,-18(s0)
    RCC_GetClocksFreq(&rcc_clocks);
    303c:	fd440793          	addi	a5,s0,-44
    3040:	853e                	mv	a0,a5
    3042:	189010ef          	jal	ra,49ca <RCC_GetClocksFreq>
    pclk1 = rcc_clocks.PCLK1_Frequency;
    3046:	fdc42783          	lw	a5,-36(s0)
    304a:	fef42223          	sw	a5,-28(s0)
    freqrange = (uint16_t)(pclk1 / 1000000);
    304e:	fe442703          	lw	a4,-28(s0)
    3052:	000f47b7          	lui	a5,0xf4
    3056:	24078793          	addi	a5,a5,576 # f4240 <_data_lma+0xe5034>
    305a:	02f757b3          	divu	a5,a4,a5
    305e:	fef41523          	sh	a5,-22(s0)
    tmpreg |= freqrange;
    3062:	fee45703          	lhu	a4,-18(s0)
    3066:	fea45783          	lhu	a5,-22(s0)
    306a:	8fd9                	or	a5,a5,a4
    306c:	fef41723          	sh	a5,-18(s0)
    I2Cx->CTLR2 = tmpreg;
    3070:	fcc42783          	lw	a5,-52(s0)
    3074:	fee45703          	lhu	a4,-18(s0)
    3078:	00e79223          	sh	a4,4(a5)

    I2Cx->CTLR1 &= CTLR1_PE_Reset;
    307c:	fcc42783          	lw	a5,-52(s0)
    3080:	0007d783          	lhu	a5,0(a5)
    3084:	07c2                	slli	a5,a5,0x10
    3086:	83c1                	srli	a5,a5,0x10
    3088:	9bf9                	andi	a5,a5,-2
    308a:	01079713          	slli	a4,a5,0x10
    308e:	8341                	srli	a4,a4,0x10
    3090:	fcc42783          	lw	a5,-52(s0)
    3094:	00e79023          	sh	a4,0(a5)
    tmpreg = 0;
    3098:	fe041723          	sh	zero,-18(s0)

    if(I2C_InitStruct->I2C_ClockSpeed <= 100000)
    309c:	fc842783          	lw	a5,-56(s0)
    30a0:	4398                	lw	a4,0(a5)
    30a2:	67e1                	lui	a5,0x18
    30a4:	6a078793          	addi	a5,a5,1696 # 186a0 <_data_lma+0x9494>
    30a8:	02e7ec63          	bltu	a5,a4,30e0 <I2C_Init+0xe6>
    {
        result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
    30ac:	fc842783          	lw	a5,-56(s0)
    30b0:	439c                	lw	a5,0(a5)
    30b2:	0786                	slli	a5,a5,0x1
    30b4:	fe442703          	lw	a4,-28(s0)
    30b8:	02f757b3          	divu	a5,a4,a5
    30bc:	fef41623          	sh	a5,-20(s0)

        if(result < 0x04)
    30c0:	fec45703          	lhu	a4,-20(s0)
    30c4:	478d                	li	a5,3
    30c6:	00e7e563          	bltu	a5,a4,30d0 <I2C_Init+0xd6>
        {
            result = 0x04;
    30ca:	4791                	li	a5,4
    30cc:	fef41623          	sh	a5,-20(s0)
        }

        tmpreg |= result;
    30d0:	fee45703          	lhu	a4,-18(s0)
    30d4:	fec45783          	lhu	a5,-20(s0)
    30d8:	8fd9                	or	a5,a5,a4
    30da:	fef41723          	sh	a5,-18(s0)
    30de:	a051                	j	3162 <I2C_Init+0x168>
    }
    else
    {
        if(I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
    30e0:	fc842783          	lw	a5,-56(s0)
    30e4:	0067d703          	lhu	a4,6(a5)
    30e8:	67b1                	lui	a5,0xc
    30ea:	17fd                	addi	a5,a5,-1
    30ec:	00f71f63          	bne	a4,a5,310a <I2C_Init+0x110>
        {
            result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
    30f0:	fc842783          	lw	a5,-56(s0)
    30f4:	4398                	lw	a4,0(a5)
    30f6:	87ba                	mv	a5,a4
    30f8:	0786                	slli	a5,a5,0x1
    30fa:	97ba                	add	a5,a5,a4
    30fc:	fe442703          	lw	a4,-28(s0)
    3100:	02f757b3          	divu	a5,a4,a5
    3104:	fef41623          	sh	a5,-20(s0)
    3108:	a02d                	j	3132 <I2C_Init+0x138>
        }
        else
        {
            result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
    310a:	fc842783          	lw	a5,-56(s0)
    310e:	4398                	lw	a4,0(a5)
    3110:	87ba                	mv	a5,a4
    3112:	0786                	slli	a5,a5,0x1
    3114:	97ba                	add	a5,a5,a4
    3116:	078e                	slli	a5,a5,0x3
    3118:	97ba                	add	a5,a5,a4
    311a:	fe442703          	lw	a4,-28(s0)
    311e:	02f757b3          	divu	a5,a4,a5
    3122:	fef41623          	sh	a5,-20(s0)
            result |= I2C_DutyCycle_16_9;
    3126:	fec45703          	lhu	a4,-20(s0)
    312a:	6791                	lui	a5,0x4
    312c:	8fd9                	or	a5,a5,a4
    312e:	fef41623          	sh	a5,-20(s0)
        }

        if((result & CKCFGR_CCR_Set) == 0)
    3132:	fec45703          	lhu	a4,-20(s0)
    3136:	6785                	lui	a5,0x1
    3138:	17fd                	addi	a5,a5,-1
    313a:	8ff9                	and	a5,a5,a4
    313c:	e799                	bnez	a5,314a <I2C_Init+0x150>
        {
            result |= (uint16_t)0x0001;
    313e:	fec45783          	lhu	a5,-20(s0)
    3142:	0017e793          	ori	a5,a5,1
    3146:	fef41623          	sh	a5,-20(s0)
        }

        tmpreg |= (uint16_t)(result | CKCFGR_FS_Set);
    314a:	fec45703          	lhu	a4,-20(s0)
    314e:	fee45783          	lhu	a5,-18(s0)
    3152:	8fd9                	or	a5,a5,a4
    3154:	01079713          	slli	a4,a5,0x10
    3158:	8341                	srli	a4,a4,0x10
    315a:	77e1                	lui	a5,0xffff8
    315c:	8fd9                	or	a5,a5,a4
    315e:	fef41723          	sh	a5,-18(s0)
    }

    I2Cx->CKCFGR = tmpreg;
    3162:	fcc42783          	lw	a5,-52(s0)
    3166:	fee45703          	lhu	a4,-18(s0)
    316a:	00e79e23          	sh	a4,28(a5) # ffff801c <_eusrstack+0xdfff401c>
    I2Cx->CTLR1 |= CTLR1_PE_Set;
    316e:	fcc42783          	lw	a5,-52(s0)
    3172:	0007d783          	lhu	a5,0(a5)
    3176:	07c2                	slli	a5,a5,0x10
    3178:	83c1                	srli	a5,a5,0x10
    317a:	0017e793          	ori	a5,a5,1
    317e:	01079713          	slli	a4,a5,0x10
    3182:	8341                	srli	a4,a4,0x10
    3184:	fcc42783          	lw	a5,-52(s0)
    3188:	00e79023          	sh	a4,0(a5)

    tmpreg = I2Cx->CTLR1;
    318c:	fcc42783          	lw	a5,-52(s0)
    3190:	0007d783          	lhu	a5,0(a5)
    3194:	fef41723          	sh	a5,-18(s0)
    tmpreg &= CTLR1_CLEAR_Mask;
    3198:	fee45783          	lhu	a5,-18(s0)
    319c:	bf57f793          	andi	a5,a5,-1035
    31a0:	fef41723          	sh	a5,-18(s0)
    tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
    31a4:	fc842783          	lw	a5,-56(s0)
    31a8:	0047d703          	lhu	a4,4(a5)
    31ac:	fc842783          	lw	a5,-56(s0)
    31b0:	00a7d783          	lhu	a5,10(a5)
    31b4:	8fd9                	or	a5,a5,a4
    31b6:	01079713          	slli	a4,a5,0x10
    31ba:	8341                	srli	a4,a4,0x10
    31bc:	fee45783          	lhu	a5,-18(s0)
    31c0:	8fd9                	or	a5,a5,a4
    31c2:	fef41723          	sh	a5,-18(s0)
    I2Cx->CTLR1 = tmpreg;
    31c6:	fcc42783          	lw	a5,-52(s0)
    31ca:	fee45703          	lhu	a4,-18(s0)
    31ce:	00e79023          	sh	a4,0(a5)

    I2Cx->OADDR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
    31d2:	fc842783          	lw	a5,-56(s0)
    31d6:	00c7d703          	lhu	a4,12(a5)
    31da:	fc842783          	lw	a5,-56(s0)
    31de:	0087d783          	lhu	a5,8(a5)
    31e2:	8fd9                	or	a5,a5,a4
    31e4:	01079713          	slli	a4,a5,0x10
    31e8:	8341                	srli	a4,a4,0x10
    31ea:	fcc42783          	lw	a5,-52(s0)
    31ee:	00e79423          	sh	a4,8(a5)
}
    31f2:	0001                	nop
    31f4:	50f2                	lw	ra,60(sp)
    31f6:	5462                	lw	s0,56(sp)
    31f8:	6121                	addi	sp,sp,64
    31fa:	8082                	ret

000031fc <I2C_StructInit>:
 *        will be initialized.
 *
 * @return  none
 */
void I2C_StructInit(I2C_InitTypeDef *I2C_InitStruct)
{
    31fc:	1101                	addi	sp,sp,-32
    31fe:	ce22                	sw	s0,28(sp)
    3200:	1000                	addi	s0,sp,32
    3202:	fea42623          	sw	a0,-20(s0)
    I2C_InitStruct->I2C_ClockSpeed = 5000;
    3206:	fec42783          	lw	a5,-20(s0)
    320a:	6705                	lui	a4,0x1
    320c:	38870713          	addi	a4,a4,904 # 1388 <DMA_DeInit+0x4e>
    3210:	c398                	sw	a4,0(a5)
    I2C_InitStruct->I2C_Mode = I2C_Mode_I2C;
    3212:	fec42783          	lw	a5,-20(s0)
    3216:	00079223          	sh	zero,4(a5)
    I2C_InitStruct->I2C_DutyCycle = I2C_DutyCycle_2;
    321a:	fec42783          	lw	a5,-20(s0)
    321e:	7771                	lui	a4,0xffffc
    3220:	177d                	addi	a4,a4,-1
    3222:	00e79323          	sh	a4,6(a5)
    I2C_InitStruct->I2C_OwnAddress1 = 0;
    3226:	fec42783          	lw	a5,-20(s0)
    322a:	00079423          	sh	zero,8(a5)
    I2C_InitStruct->I2C_Ack = I2C_Ack_Disable;
    322e:	fec42783          	lw	a5,-20(s0)
    3232:	00079523          	sh	zero,10(a5)
    I2C_InitStruct->I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
    3236:	fec42783          	lw	a5,-20(s0)
    323a:	6711                	lui	a4,0x4
    323c:	00e79623          	sh	a4,12(a5)
}
    3240:	0001                	nop
    3242:	4472                	lw	s0,28(sp)
    3244:	6105                	addi	sp,sp,32
    3246:	8082                	ret

00003248 <I2C_Cmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_Cmd(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    3248:	1101                	addi	sp,sp,-32
    324a:	ce22                	sw	s0,28(sp)
    324c:	1000                	addi	s0,sp,32
    324e:	fea42623          	sw	a0,-20(s0)
    3252:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    3256:	fe842783          	lw	a5,-24(s0)
    325a:	c38d                	beqz	a5,327c <I2C_Cmd+0x34>
    {
        I2Cx->CTLR1 |= CTLR1_PE_Set;
    325c:	fec42783          	lw	a5,-20(s0)
    3260:	0007d783          	lhu	a5,0(a5)
    3264:	07c2                	slli	a5,a5,0x10
    3266:	83c1                	srli	a5,a5,0x10
    3268:	0017e793          	ori	a5,a5,1
    326c:	01079713          	slli	a4,a5,0x10
    3270:	8341                	srli	a4,a4,0x10
    3272:	fec42783          	lw	a5,-20(s0)
    3276:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_PE_Reset;
    }
}
    327a:	a839                	j	3298 <I2C_Cmd+0x50>
        I2Cx->CTLR1 &= CTLR1_PE_Reset;
    327c:	fec42783          	lw	a5,-20(s0)
    3280:	0007d783          	lhu	a5,0(a5)
    3284:	07c2                	slli	a5,a5,0x10
    3286:	83c1                	srli	a5,a5,0x10
    3288:	9bf9                	andi	a5,a5,-2
    328a:	01079713          	slli	a4,a5,0x10
    328e:	8341                	srli	a4,a4,0x10
    3290:	fec42783          	lw	a5,-20(s0)
    3294:	00e79023          	sh	a4,0(a5)
}
    3298:	0001                	nop
    329a:	4472                	lw	s0,28(sp)
    329c:	6105                	addi	sp,sp,32
    329e:	8082                	ret

000032a0 <I2C_DMACmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_DMACmd(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    32a0:	1101                	addi	sp,sp,-32
    32a2:	ce22                	sw	s0,28(sp)
    32a4:	1000                	addi	s0,sp,32
    32a6:	fea42623          	sw	a0,-20(s0)
    32aa:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    32ae:	fe842783          	lw	a5,-24(s0)
    32b2:	c785                	beqz	a5,32da <I2C_DMACmd+0x3a>
    {
        I2Cx->CTLR2 |= CTLR2_DMAEN_Set;
    32b4:	fec42783          	lw	a5,-20(s0)
    32b8:	0047d783          	lhu	a5,4(a5)
    32bc:	01079713          	slli	a4,a5,0x10
    32c0:	8341                	srli	a4,a4,0x10
    32c2:	6785                	lui	a5,0x1
    32c4:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
    32c8:	8fd9                	or	a5,a5,a4
    32ca:	01079713          	slli	a4,a5,0x10
    32ce:	8341                	srli	a4,a4,0x10
    32d0:	fec42783          	lw	a5,-20(s0)
    32d4:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        I2Cx->CTLR2 &= CTLR2_DMAEN_Reset;
    }
}
    32d8:	a01d                	j	32fe <I2C_DMACmd+0x5e>
        I2Cx->CTLR2 &= CTLR2_DMAEN_Reset;
    32da:	fec42783          	lw	a5,-20(s0)
    32de:	0047d783          	lhu	a5,4(a5)
    32e2:	01079713          	slli	a4,a5,0x10
    32e6:	8341                	srli	a4,a4,0x10
    32e8:	77fd                	lui	a5,0xfffff
    32ea:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    32ee:	8ff9                	and	a5,a5,a4
    32f0:	01079713          	slli	a4,a5,0x10
    32f4:	8341                	srli	a4,a4,0x10
    32f6:	fec42783          	lw	a5,-20(s0)
    32fa:	00e79223          	sh	a4,4(a5)
}
    32fe:	0001                	nop
    3300:	4472                	lw	s0,28(sp)
    3302:	6105                	addi	sp,sp,32
    3304:	8082                	ret

00003306 <I2C_DMALastTransferCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_DMALastTransferCmd(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    3306:	1101                	addi	sp,sp,-32
    3308:	ce22                	sw	s0,28(sp)
    330a:	1000                	addi	s0,sp,32
    330c:	fea42623          	sw	a0,-20(s0)
    3310:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    3314:	fe842783          	lw	a5,-24(s0)
    3318:	c395                	beqz	a5,333c <I2C_DMALastTransferCmd+0x36>
    {
        I2Cx->CTLR2 |= CTLR2_LAST_Set;
    331a:	fec42783          	lw	a5,-20(s0)
    331e:	0047d783          	lhu	a5,4(a5)
    3322:	01079713          	slli	a4,a5,0x10
    3326:	8341                	srli	a4,a4,0x10
    3328:	6785                	lui	a5,0x1
    332a:	8fd9                	or	a5,a5,a4
    332c:	01079713          	slli	a4,a5,0x10
    3330:	8341                	srli	a4,a4,0x10
    3332:	fec42783          	lw	a5,-20(s0)
    3336:	00e79223          	sh	a4,4(a5) # 1004 <ADC_GetFlagStatus+0x36>
    }
    else
    {
        I2Cx->CTLR2 &= CTLR2_LAST_Reset;
    }
}
    333a:	a015                	j	335e <I2C_DMALastTransferCmd+0x58>
        I2Cx->CTLR2 &= CTLR2_LAST_Reset;
    333c:	fec42783          	lw	a5,-20(s0)
    3340:	0047d783          	lhu	a5,4(a5)
    3344:	01079713          	slli	a4,a5,0x10
    3348:	8341                	srli	a4,a4,0x10
    334a:	77fd                	lui	a5,0xfffff
    334c:	17fd                	addi	a5,a5,-1
    334e:	8ff9                	and	a5,a5,a4
    3350:	01079713          	slli	a4,a5,0x10
    3354:	8341                	srli	a4,a4,0x10
    3356:	fec42783          	lw	a5,-20(s0)
    335a:	00e79223          	sh	a4,4(a5) # fffff004 <_eusrstack+0xdfffb004>
}
    335e:	0001                	nop
    3360:	4472                	lw	s0,28(sp)
    3362:	6105                	addi	sp,sp,32
    3364:	8082                	ret

00003366 <I2C_GenerateSTART>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_GenerateSTART(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    3366:	1101                	addi	sp,sp,-32
    3368:	ce22                	sw	s0,28(sp)
    336a:	1000                	addi	s0,sp,32
    336c:	fea42623          	sw	a0,-20(s0)
    3370:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    3374:	fe842783          	lw	a5,-24(s0)
    3378:	c38d                	beqz	a5,339a <I2C_GenerateSTART+0x34>
    {
        I2Cx->CTLR1 |= CTLR1_START_Set;
    337a:	fec42783          	lw	a5,-20(s0)
    337e:	0007d783          	lhu	a5,0(a5)
    3382:	07c2                	slli	a5,a5,0x10
    3384:	83c1                	srli	a5,a5,0x10
    3386:	1007e793          	ori	a5,a5,256
    338a:	01079713          	slli	a4,a5,0x10
    338e:	8341                	srli	a4,a4,0x10
    3390:	fec42783          	lw	a5,-20(s0)
    3394:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_START_Reset;
    }
}
    3398:	a005                	j	33b8 <I2C_GenerateSTART+0x52>
        I2Cx->CTLR1 &= CTLR1_START_Reset;
    339a:	fec42783          	lw	a5,-20(s0)
    339e:	0007d783          	lhu	a5,0(a5)
    33a2:	07c2                	slli	a5,a5,0x10
    33a4:	83c1                	srli	a5,a5,0x10
    33a6:	eff7f793          	andi	a5,a5,-257
    33aa:	01079713          	slli	a4,a5,0x10
    33ae:	8341                	srli	a4,a4,0x10
    33b0:	fec42783          	lw	a5,-20(s0)
    33b4:	00e79023          	sh	a4,0(a5)
}
    33b8:	0001                	nop
    33ba:	4472                	lw	s0,28(sp)
    33bc:	6105                	addi	sp,sp,32
    33be:	8082                	ret

000033c0 <I2C_GenerateSTOP>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_GenerateSTOP(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    33c0:	1101                	addi	sp,sp,-32
    33c2:	ce22                	sw	s0,28(sp)
    33c4:	1000                	addi	s0,sp,32
    33c6:	fea42623          	sw	a0,-20(s0)
    33ca:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    33ce:	fe842783          	lw	a5,-24(s0)
    33d2:	c38d                	beqz	a5,33f4 <I2C_GenerateSTOP+0x34>
    {
        I2Cx->CTLR1 |= CTLR1_STOP_Set;
    33d4:	fec42783          	lw	a5,-20(s0)
    33d8:	0007d783          	lhu	a5,0(a5)
    33dc:	07c2                	slli	a5,a5,0x10
    33de:	83c1                	srli	a5,a5,0x10
    33e0:	2007e793          	ori	a5,a5,512
    33e4:	01079713          	slli	a4,a5,0x10
    33e8:	8341                	srli	a4,a4,0x10
    33ea:	fec42783          	lw	a5,-20(s0)
    33ee:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_STOP_Reset;
    }
}
    33f2:	a005                	j	3412 <I2C_GenerateSTOP+0x52>
        I2Cx->CTLR1 &= CTLR1_STOP_Reset;
    33f4:	fec42783          	lw	a5,-20(s0)
    33f8:	0007d783          	lhu	a5,0(a5)
    33fc:	07c2                	slli	a5,a5,0x10
    33fe:	83c1                	srli	a5,a5,0x10
    3400:	dff7f793          	andi	a5,a5,-513
    3404:	01079713          	slli	a4,a5,0x10
    3408:	8341                	srli	a4,a4,0x10
    340a:	fec42783          	lw	a5,-20(s0)
    340e:	00e79023          	sh	a4,0(a5)
}
    3412:	0001                	nop
    3414:	4472                	lw	s0,28(sp)
    3416:	6105                	addi	sp,sp,32
    3418:	8082                	ret

0000341a <I2C_AcknowledgeConfig>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_AcknowledgeConfig(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    341a:	1101                	addi	sp,sp,-32
    341c:	ce22                	sw	s0,28(sp)
    341e:	1000                	addi	s0,sp,32
    3420:	fea42623          	sw	a0,-20(s0)
    3424:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    3428:	fe842783          	lw	a5,-24(s0)
    342c:	c38d                	beqz	a5,344e <I2C_AcknowledgeConfig+0x34>
    {
        I2Cx->CTLR1 |= CTLR1_ACK_Set;
    342e:	fec42783          	lw	a5,-20(s0)
    3432:	0007d783          	lhu	a5,0(a5)
    3436:	07c2                	slli	a5,a5,0x10
    3438:	83c1                	srli	a5,a5,0x10
    343a:	4007e793          	ori	a5,a5,1024
    343e:	01079713          	slli	a4,a5,0x10
    3442:	8341                	srli	a4,a4,0x10
    3444:	fec42783          	lw	a5,-20(s0)
    3448:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_ACK_Reset;
    }
}
    344c:	a005                	j	346c <I2C_AcknowledgeConfig+0x52>
        I2Cx->CTLR1 &= CTLR1_ACK_Reset;
    344e:	fec42783          	lw	a5,-20(s0)
    3452:	0007d783          	lhu	a5,0(a5)
    3456:	07c2                	slli	a5,a5,0x10
    3458:	83c1                	srli	a5,a5,0x10
    345a:	bff7f793          	andi	a5,a5,-1025
    345e:	01079713          	slli	a4,a5,0x10
    3462:	8341                	srli	a4,a4,0x10
    3464:	fec42783          	lw	a5,-20(s0)
    3468:	00e79023          	sh	a4,0(a5)
}
    346c:	0001                	nop
    346e:	4472                	lw	s0,28(sp)
    3470:	6105                	addi	sp,sp,32
    3472:	8082                	ret

00003474 <I2C_OwnAddress2Config>:
 *          Address - specifies the 7bit I2C own address2.
 *
 * @return  none
 */
void I2C_OwnAddress2Config(I2C_TypeDef *I2Cx, uint8_t Address)
{
    3474:	7179                	addi	sp,sp,-48
    3476:	d622                	sw	s0,44(sp)
    3478:	1800                	addi	s0,sp,48
    347a:	fca42e23          	sw	a0,-36(s0)
    347e:	87ae                	mv	a5,a1
    3480:	fcf40da3          	sb	a5,-37(s0)
    uint16_t tmpreg = 0;
    3484:	fe041723          	sh	zero,-18(s0)

    tmpreg = I2Cx->OADDR2;
    3488:	fdc42783          	lw	a5,-36(s0)
    348c:	00c7d783          	lhu	a5,12(a5)
    3490:	fef41723          	sh	a5,-18(s0)
    tmpreg &= OADDR2_ADD2_Reset;
    3494:	fee45783          	lhu	a5,-18(s0)
    3498:	f017f793          	andi	a5,a5,-255
    349c:	fef41723          	sh	a5,-18(s0)
    tmpreg |= (uint16_t)((uint16_t)Address & (uint16_t)0x00FE);
    34a0:	fdb44783          	lbu	a5,-37(s0)
    34a4:	07c2                	slli	a5,a5,0x10
    34a6:	87c1                	srai	a5,a5,0x10
    34a8:	0fe7f793          	andi	a5,a5,254
    34ac:	01079713          	slli	a4,a5,0x10
    34b0:	8741                	srai	a4,a4,0x10
    34b2:	fee41783          	lh	a5,-18(s0)
    34b6:	8fd9                	or	a5,a5,a4
    34b8:	07c2                	slli	a5,a5,0x10
    34ba:	87c1                	srai	a5,a5,0x10
    34bc:	fef41723          	sh	a5,-18(s0)
    I2Cx->OADDR2 = tmpreg;
    34c0:	fdc42783          	lw	a5,-36(s0)
    34c4:	fee45703          	lhu	a4,-18(s0)
    34c8:	00e79623          	sh	a4,12(a5)
}
    34cc:	0001                	nop
    34ce:	5432                	lw	s0,44(sp)
    34d0:	6145                	addi	sp,sp,48
    34d2:	8082                	ret

000034d4 <I2C_DualAddressCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_DualAddressCmd(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    34d4:	1101                	addi	sp,sp,-32
    34d6:	ce22                	sw	s0,28(sp)
    34d8:	1000                	addi	s0,sp,32
    34da:	fea42623          	sw	a0,-20(s0)
    34de:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    34e2:	fe842783          	lw	a5,-24(s0)
    34e6:	c38d                	beqz	a5,3508 <I2C_DualAddressCmd+0x34>
    {
        I2Cx->OADDR2 |= OADDR2_ENDUAL_Set;
    34e8:	fec42783          	lw	a5,-20(s0)
    34ec:	00c7d783          	lhu	a5,12(a5)
    34f0:	07c2                	slli	a5,a5,0x10
    34f2:	83c1                	srli	a5,a5,0x10
    34f4:	0017e793          	ori	a5,a5,1
    34f8:	01079713          	slli	a4,a5,0x10
    34fc:	8341                	srli	a4,a4,0x10
    34fe:	fec42783          	lw	a5,-20(s0)
    3502:	00e79623          	sh	a4,12(a5)
    }
    else
    {
        I2Cx->OADDR2 &= OADDR2_ENDUAL_Reset;
    }
}
    3506:	a839                	j	3524 <I2C_DualAddressCmd+0x50>
        I2Cx->OADDR2 &= OADDR2_ENDUAL_Reset;
    3508:	fec42783          	lw	a5,-20(s0)
    350c:	00c7d783          	lhu	a5,12(a5)
    3510:	07c2                	slli	a5,a5,0x10
    3512:	83c1                	srli	a5,a5,0x10
    3514:	9bf9                	andi	a5,a5,-2
    3516:	01079713          	slli	a4,a5,0x10
    351a:	8341                	srli	a4,a4,0x10
    351c:	fec42783          	lw	a5,-20(s0)
    3520:	00e79623          	sh	a4,12(a5)
}
    3524:	0001                	nop
    3526:	4472                	lw	s0,28(sp)
    3528:	6105                	addi	sp,sp,32
    352a:	8082                	ret

0000352c <I2C_GeneralCallCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_GeneralCallCmd(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    352c:	1101                	addi	sp,sp,-32
    352e:	ce22                	sw	s0,28(sp)
    3530:	1000                	addi	s0,sp,32
    3532:	fea42623          	sw	a0,-20(s0)
    3536:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    353a:	fe842783          	lw	a5,-24(s0)
    353e:	c38d                	beqz	a5,3560 <I2C_GeneralCallCmd+0x34>
    {
        I2Cx->CTLR1 |= CTLR1_ENGC_Set;
    3540:	fec42783          	lw	a5,-20(s0)
    3544:	0007d783          	lhu	a5,0(a5)
    3548:	07c2                	slli	a5,a5,0x10
    354a:	83c1                	srli	a5,a5,0x10
    354c:	0407e793          	ori	a5,a5,64
    3550:	01079713          	slli	a4,a5,0x10
    3554:	8341                	srli	a4,a4,0x10
    3556:	fec42783          	lw	a5,-20(s0)
    355a:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_ENGC_Reset;
    }
}
    355e:	a005                	j	357e <I2C_GeneralCallCmd+0x52>
        I2Cx->CTLR1 &= CTLR1_ENGC_Reset;
    3560:	fec42783          	lw	a5,-20(s0)
    3564:	0007d783          	lhu	a5,0(a5)
    3568:	07c2                	slli	a5,a5,0x10
    356a:	83c1                	srli	a5,a5,0x10
    356c:	fbf7f793          	andi	a5,a5,-65
    3570:	01079713          	slli	a4,a5,0x10
    3574:	8341                	srli	a4,a4,0x10
    3576:	fec42783          	lw	a5,-20(s0)
    357a:	00e79023          	sh	a4,0(a5)
}
    357e:	0001                	nop
    3580:	4472                	lw	s0,28(sp)
    3582:	6105                	addi	sp,sp,32
    3584:	8082                	ret

00003586 <I2C_ITConfig>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_ITConfig(I2C_TypeDef *I2Cx, uint16_t I2C_IT, FunctionalState NewState)
{
    3586:	1101                	addi	sp,sp,-32
    3588:	ce22                	sw	s0,28(sp)
    358a:	1000                	addi	s0,sp,32
    358c:	fea42623          	sw	a0,-20(s0)
    3590:	87ae                	mv	a5,a1
    3592:	fec42223          	sw	a2,-28(s0)
    3596:	fef41523          	sh	a5,-22(s0)
    if(NewState != DISABLE)
    359a:	fe442783          	lw	a5,-28(s0)
    359e:	c39d                	beqz	a5,35c4 <I2C_ITConfig+0x3e>
    {
        I2Cx->CTLR2 |= I2C_IT;
    35a0:	fec42783          	lw	a5,-20(s0)
    35a4:	0047d783          	lhu	a5,4(a5)
    35a8:	01079713          	slli	a4,a5,0x10
    35ac:	8341                	srli	a4,a4,0x10
    35ae:	fea45783          	lhu	a5,-22(s0)
    35b2:	8fd9                	or	a5,a5,a4
    35b4:	01079713          	slli	a4,a5,0x10
    35b8:	8341                	srli	a4,a4,0x10
    35ba:	fec42783          	lw	a5,-20(s0)
    35be:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        I2Cx->CTLR2 &= (uint16_t)~I2C_IT;
    }
}
    35c2:	a035                	j	35ee <I2C_ITConfig+0x68>
        I2Cx->CTLR2 &= (uint16_t)~I2C_IT;
    35c4:	fec42783          	lw	a5,-20(s0)
    35c8:	0047d783          	lhu	a5,4(a5)
    35cc:	01079713          	slli	a4,a5,0x10
    35d0:	8341                	srli	a4,a4,0x10
    35d2:	fea45783          	lhu	a5,-22(s0)
    35d6:	fff7c793          	not	a5,a5
    35da:	07c2                	slli	a5,a5,0x10
    35dc:	83c1                	srli	a5,a5,0x10
    35de:	8ff9                	and	a5,a5,a4
    35e0:	01079713          	slli	a4,a5,0x10
    35e4:	8341                	srli	a4,a4,0x10
    35e6:	fec42783          	lw	a5,-20(s0)
    35ea:	00e79223          	sh	a4,4(a5)
}
    35ee:	0001                	nop
    35f0:	4472                	lw	s0,28(sp)
    35f2:	6105                	addi	sp,sp,32
    35f4:	8082                	ret

000035f6 <I2C_SendData>:
 *          Data - Byte to be transmitted.
 *
 * @return  none
 */
void I2C_SendData(I2C_TypeDef *I2Cx, uint8_t Data)
{
    35f6:	1101                	addi	sp,sp,-32
    35f8:	ce22                	sw	s0,28(sp)
    35fa:	1000                	addi	s0,sp,32
    35fc:	fea42623          	sw	a0,-20(s0)
    3600:	87ae                	mv	a5,a1
    3602:	fef405a3          	sb	a5,-21(s0)
    I2Cx->DATAR = Data;
    3606:	feb44783          	lbu	a5,-21(s0)
    360a:	01079713          	slli	a4,a5,0x10
    360e:	8341                	srli	a4,a4,0x10
    3610:	fec42783          	lw	a5,-20(s0)
    3614:	00e79823          	sh	a4,16(a5)
}
    3618:	0001                	nop
    361a:	4472                	lw	s0,28(sp)
    361c:	6105                	addi	sp,sp,32
    361e:	8082                	ret

00003620 <I2C_ReceiveData>:
 * @param   I2Cx - where x can be 1 to select the I2C peripheral.
 *
 * @return  The value of the received data.
 */
uint8_t I2C_ReceiveData(I2C_TypeDef *I2Cx)
{
    3620:	1101                	addi	sp,sp,-32
    3622:	ce22                	sw	s0,28(sp)
    3624:	1000                	addi	s0,sp,32
    3626:	fea42623          	sw	a0,-20(s0)
    return (uint8_t)I2Cx->DATAR;
    362a:	fec42783          	lw	a5,-20(s0)
    362e:	0107d783          	lhu	a5,16(a5)
    3632:	07c2                	slli	a5,a5,0x10
    3634:	83c1                	srli	a5,a5,0x10
    3636:	0ff7f793          	andi	a5,a5,255
}
    363a:	853e                	mv	a0,a5
    363c:	4472                	lw	s0,28(sp)
    363e:	6105                	addi	sp,sp,32
    3640:	8082                	ret

00003642 <I2C_Send7bitAddress>:
 *            I2C_Direction_Receiver - Receiver mode.
 *
 * @return  none
 */
void I2C_Send7bitAddress(I2C_TypeDef *I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
    3642:	1101                	addi	sp,sp,-32
    3644:	ce22                	sw	s0,28(sp)
    3646:	1000                	addi	s0,sp,32
    3648:	fea42623          	sw	a0,-20(s0)
    364c:	87ae                	mv	a5,a1
    364e:	8732                	mv	a4,a2
    3650:	fef405a3          	sb	a5,-21(s0)
    3654:	87ba                	mv	a5,a4
    3656:	fef40523          	sb	a5,-22(s0)
    if(I2C_Direction != I2C_Direction_Transmitter)
    365a:	fea44783          	lbu	a5,-22(s0)
    365e:	cb81                	beqz	a5,366e <I2C_Send7bitAddress+0x2c>
    {
        Address |= OADDR1_ADD0_Set;
    3660:	feb44783          	lbu	a5,-21(s0)
    3664:	0017e793          	ori	a5,a5,1
    3668:	fef405a3          	sb	a5,-21(s0)
    366c:	a031                	j	3678 <I2C_Send7bitAddress+0x36>
    }
    else
    {
        Address &= OADDR1_ADD0_Reset;
    366e:	feb44783          	lbu	a5,-21(s0)
    3672:	9bf9                	andi	a5,a5,-2
    3674:	fef405a3          	sb	a5,-21(s0)
    }

    I2Cx->DATAR = Address;
    3678:	feb44783          	lbu	a5,-21(s0)
    367c:	01079713          	slli	a4,a5,0x10
    3680:	8341                	srli	a4,a4,0x10
    3682:	fec42783          	lw	a5,-20(s0)
    3686:	00e79823          	sh	a4,16(a5)
}
    368a:	0001                	nop
    368c:	4472                	lw	s0,28(sp)
    368e:	6105                	addi	sp,sp,32
    3690:	8082                	ret

00003692 <I2C_ReadRegister>:
 *            I2C_Register_RTR.
 *
 * @return  none
 */
uint16_t I2C_ReadRegister(I2C_TypeDef *I2Cx, uint8_t I2C_Register)
{
    3692:	7179                	addi	sp,sp,-48
    3694:	d622                	sw	s0,44(sp)
    3696:	1800                	addi	s0,sp,48
    3698:	fca42e23          	sw	a0,-36(s0)
    369c:	87ae                	mv	a5,a1
    369e:	fcf40da3          	sb	a5,-37(s0)
    __IO uint32_t tmp = 0;
    36a2:	fe042623          	sw	zero,-20(s0)

    tmp = (uint32_t)I2Cx;
    36a6:	fdc42783          	lw	a5,-36(s0)
    36aa:	fef42623          	sw	a5,-20(s0)
    tmp += I2C_Register;
    36ae:	fdb44703          	lbu	a4,-37(s0)
    36b2:	fec42783          	lw	a5,-20(s0)
    36b6:	97ba                	add	a5,a5,a4
    36b8:	fef42623          	sw	a5,-20(s0)

    return (*(__IO uint16_t *)tmp);
    36bc:	fec42783          	lw	a5,-20(s0)
    36c0:	0007d783          	lhu	a5,0(a5)
    36c4:	07c2                	slli	a5,a5,0x10
    36c6:	83c1                	srli	a5,a5,0x10
}
    36c8:	853e                	mv	a0,a5
    36ca:	5432                	lw	s0,44(sp)
    36cc:	6145                	addi	sp,sp,48
    36ce:	8082                	ret

000036d0 <I2C_SoftwareResetCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_SoftwareResetCmd(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    36d0:	1101                	addi	sp,sp,-32
    36d2:	ce22                	sw	s0,28(sp)
    36d4:	1000                	addi	s0,sp,32
    36d6:	fea42623          	sw	a0,-20(s0)
    36da:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    36de:	fe842783          	lw	a5,-24(s0)
    36e2:	c395                	beqz	a5,3706 <I2C_SoftwareResetCmd+0x36>
    {
        I2Cx->CTLR1 |= CTLR1_SWRST_Set;
    36e4:	fec42783          	lw	a5,-20(s0)
    36e8:	0007d783          	lhu	a5,0(a5)
    36ec:	01079713          	slli	a4,a5,0x10
    36f0:	8341                	srli	a4,a4,0x10
    36f2:	77e1                	lui	a5,0xffff8
    36f4:	8fd9                	or	a5,a5,a4
    36f6:	01079713          	slli	a4,a5,0x10
    36fa:	8341                	srli	a4,a4,0x10
    36fc:	fec42783          	lw	a5,-20(s0)
    3700:	00e79023          	sh	a4,0(a5) # ffff8000 <_eusrstack+0xdfff4000>
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_SWRST_Reset;
    }
}
    3704:	a015                	j	3728 <I2C_SoftwareResetCmd+0x58>
        I2Cx->CTLR1 &= CTLR1_SWRST_Reset;
    3706:	fec42783          	lw	a5,-20(s0)
    370a:	0007d783          	lhu	a5,0(a5)
    370e:	01079713          	slli	a4,a5,0x10
    3712:	8341                	srli	a4,a4,0x10
    3714:	67a1                	lui	a5,0x8
    3716:	17fd                	addi	a5,a5,-1
    3718:	8ff9                	and	a5,a5,a4
    371a:	01079713          	slli	a4,a5,0x10
    371e:	8341                	srli	a4,a4,0x10
    3720:	fec42783          	lw	a5,-20(s0)
    3724:	00e79023          	sh	a4,0(a5) # 8000 <USART_StructInit+0x1a>
}
    3728:	0001                	nop
    372a:	4472                	lw	s0,28(sp)
    372c:	6105                	addi	sp,sp,32
    372e:	8082                	ret

00003730 <I2C_NACKPositionConfig>:
 *          but is intended to be used in I2C mode while I2C_PECPositionConfig() 
 *          is intended to used in SMBUS mode. 
 * @return  none
 */
void I2C_NACKPositionConfig(I2C_TypeDef *I2Cx, uint16_t I2C_NACKPosition)
{
    3730:	1101                	addi	sp,sp,-32
    3732:	ce22                	sw	s0,28(sp)
    3734:	1000                	addi	s0,sp,32
    3736:	fea42623          	sw	a0,-20(s0)
    373a:	87ae                	mv	a5,a1
    373c:	fef41523          	sh	a5,-22(s0)
    if(I2C_NACKPosition == I2C_NACKPosition_Next)
    3740:	fea45783          	lhu	a5,-22(s0)
    3744:	80078793          	addi	a5,a5,-2048
    3748:	e785                	bnez	a5,3770 <I2C_NACKPositionConfig+0x40>
    {
        I2Cx->CTLR1 |= I2C_NACKPosition_Next;
    374a:	fec42783          	lw	a5,-20(s0)
    374e:	0007d783          	lhu	a5,0(a5)
    3752:	01079713          	slli	a4,a5,0x10
    3756:	8341                	srli	a4,a4,0x10
    3758:	6785                	lui	a5,0x1
    375a:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
    375e:	8fd9                	or	a5,a5,a4
    3760:	01079713          	slli	a4,a5,0x10
    3764:	8341                	srli	a4,a4,0x10
    3766:	fec42783          	lw	a5,-20(s0)
    376a:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= I2C_NACKPosition_Current;
    }
}
    376e:	a01d                	j	3794 <I2C_NACKPositionConfig+0x64>
        I2Cx->CTLR1 &= I2C_NACKPosition_Current;
    3770:	fec42783          	lw	a5,-20(s0)
    3774:	0007d783          	lhu	a5,0(a5)
    3778:	01079713          	slli	a4,a5,0x10
    377c:	8341                	srli	a4,a4,0x10
    377e:	77fd                	lui	a5,0xfffff
    3780:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    3784:	8ff9                	and	a5,a5,a4
    3786:	01079713          	slli	a4,a5,0x10
    378a:	8341                	srli	a4,a4,0x10
    378c:	fec42783          	lw	a5,-20(s0)
    3790:	00e79023          	sh	a4,0(a5)
}
    3794:	0001                	nop
    3796:	4472                	lw	s0,28(sp)
    3798:	6105                	addi	sp,sp,32
    379a:	8082                	ret

0000379c <I2C_TransmitPEC>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_TransmitPEC(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    379c:	1101                	addi	sp,sp,-32
    379e:	ce22                	sw	s0,28(sp)
    37a0:	1000                	addi	s0,sp,32
    37a2:	fea42623          	sw	a0,-20(s0)
    37a6:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    37aa:	fe842783          	lw	a5,-24(s0)
    37ae:	c395                	beqz	a5,37d2 <I2C_TransmitPEC+0x36>
    {
        I2Cx->CTLR1 |= CTLR1_PEC_Set;
    37b0:	fec42783          	lw	a5,-20(s0)
    37b4:	0007d783          	lhu	a5,0(a5)
    37b8:	01079713          	slli	a4,a5,0x10
    37bc:	8341                	srli	a4,a4,0x10
    37be:	6785                	lui	a5,0x1
    37c0:	8fd9                	or	a5,a5,a4
    37c2:	01079713          	slli	a4,a5,0x10
    37c6:	8341                	srli	a4,a4,0x10
    37c8:	fec42783          	lw	a5,-20(s0)
    37cc:	00e79023          	sh	a4,0(a5) # 1000 <ADC_GetFlagStatus+0x32>
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_PEC_Reset;
    }
}
    37d0:	a015                	j	37f4 <I2C_TransmitPEC+0x58>
        I2Cx->CTLR1 &= CTLR1_PEC_Reset;
    37d2:	fec42783          	lw	a5,-20(s0)
    37d6:	0007d783          	lhu	a5,0(a5)
    37da:	01079713          	slli	a4,a5,0x10
    37de:	8341                	srli	a4,a4,0x10
    37e0:	77fd                	lui	a5,0xfffff
    37e2:	17fd                	addi	a5,a5,-1
    37e4:	8ff9                	and	a5,a5,a4
    37e6:	01079713          	slli	a4,a5,0x10
    37ea:	8341                	srli	a4,a4,0x10
    37ec:	fec42783          	lw	a5,-20(s0)
    37f0:	00e79023          	sh	a4,0(a5) # fffff000 <_eusrstack+0xdfffb000>
}
    37f4:	0001                	nop
    37f6:	4472                	lw	s0,28(sp)
    37f8:	6105                	addi	sp,sp,32
    37fa:	8082                	ret

000037fc <I2C_PECPositionConfig>:
 *            I2C_PECPosition_Current - indicates that current byte is PEC.
 *
 * @return  none
 */
void I2C_PECPositionConfig(I2C_TypeDef *I2Cx, uint16_t I2C_PECPosition)
{
    37fc:	1101                	addi	sp,sp,-32
    37fe:	ce22                	sw	s0,28(sp)
    3800:	1000                	addi	s0,sp,32
    3802:	fea42623          	sw	a0,-20(s0)
    3806:	87ae                	mv	a5,a1
    3808:	fef41523          	sh	a5,-22(s0)
    if(I2C_PECPosition == I2C_PECPosition_Next)
    380c:	fea45783          	lhu	a5,-22(s0)
    3810:	80078793          	addi	a5,a5,-2048
    3814:	e785                	bnez	a5,383c <I2C_PECPositionConfig+0x40>
    {
        I2Cx->CTLR1 |= I2C_PECPosition_Next;
    3816:	fec42783          	lw	a5,-20(s0)
    381a:	0007d783          	lhu	a5,0(a5)
    381e:	01079713          	slli	a4,a5,0x10
    3822:	8341                	srli	a4,a4,0x10
    3824:	6785                	lui	a5,0x1
    3826:	80078793          	addi	a5,a5,-2048 # 800 <__stack_size>
    382a:	8fd9                	or	a5,a5,a4
    382c:	01079713          	slli	a4,a5,0x10
    3830:	8341                	srli	a4,a4,0x10
    3832:	fec42783          	lw	a5,-20(s0)
    3836:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= I2C_PECPosition_Current;
    }
}
    383a:	a01d                	j	3860 <I2C_PECPositionConfig+0x64>
        I2Cx->CTLR1 &= I2C_PECPosition_Current;
    383c:	fec42783          	lw	a5,-20(s0)
    3840:	0007d783          	lhu	a5,0(a5)
    3844:	01079713          	slli	a4,a5,0x10
    3848:	8341                	srli	a4,a4,0x10
    384a:	77fd                	lui	a5,0xfffff
    384c:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    3850:	8ff9                	and	a5,a5,a4
    3852:	01079713          	slli	a4,a5,0x10
    3856:	8341                	srli	a4,a4,0x10
    3858:	fec42783          	lw	a5,-20(s0)
    385c:	00e79023          	sh	a4,0(a5)
}
    3860:	0001                	nop
    3862:	4472                	lw	s0,28(sp)
    3864:	6105                	addi	sp,sp,32
    3866:	8082                	ret

00003868 <I2C_CalculatePEC>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_CalculatePEC(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    3868:	1101                	addi	sp,sp,-32
    386a:	ce22                	sw	s0,28(sp)
    386c:	1000                	addi	s0,sp,32
    386e:	fea42623          	sw	a0,-20(s0)
    3872:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    3876:	fe842783          	lw	a5,-24(s0)
    387a:	c38d                	beqz	a5,389c <I2C_CalculatePEC+0x34>
    {
        I2Cx->CTLR1 |= CTLR1_ENPEC_Set;
    387c:	fec42783          	lw	a5,-20(s0)
    3880:	0007d783          	lhu	a5,0(a5)
    3884:	07c2                	slli	a5,a5,0x10
    3886:	83c1                	srli	a5,a5,0x10
    3888:	0207e793          	ori	a5,a5,32
    388c:	01079713          	slli	a4,a5,0x10
    3890:	8341                	srli	a4,a4,0x10
    3892:	fec42783          	lw	a5,-20(s0)
    3896:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_ENPEC_Reset;
    }
}
    389a:	a005                	j	38ba <I2C_CalculatePEC+0x52>
        I2Cx->CTLR1 &= CTLR1_ENPEC_Reset;
    389c:	fec42783          	lw	a5,-20(s0)
    38a0:	0007d783          	lhu	a5,0(a5)
    38a4:	07c2                	slli	a5,a5,0x10
    38a6:	83c1                	srli	a5,a5,0x10
    38a8:	fdf7f793          	andi	a5,a5,-33
    38ac:	01079713          	slli	a4,a5,0x10
    38b0:	8341                	srli	a4,a4,0x10
    38b2:	fec42783          	lw	a5,-20(s0)
    38b6:	00e79023          	sh	a4,0(a5)
}
    38ba:	0001                	nop
    38bc:	4472                	lw	s0,28(sp)
    38be:	6105                	addi	sp,sp,32
    38c0:	8082                	ret

000038c2 <I2C_GetPEC>:
 * @param   I2Cx - where x can be 1 to select the I2C peripheral.
 *
 * @return  The PEC value.
 */
uint8_t I2C_GetPEC(I2C_TypeDef *I2Cx)
{
    38c2:	1101                	addi	sp,sp,-32
    38c4:	ce22                	sw	s0,28(sp)
    38c6:	1000                	addi	s0,sp,32
    38c8:	fea42623          	sw	a0,-20(s0)
    return ((I2Cx->STAR2) >> 8);
    38cc:	fec42783          	lw	a5,-20(s0)
    38d0:	0187d783          	lhu	a5,24(a5)
    38d4:	07c2                	slli	a5,a5,0x10
    38d6:	83c1                	srli	a5,a5,0x10
    38d8:	83a1                	srli	a5,a5,0x8
    38da:	07c2                	slli	a5,a5,0x10
    38dc:	83c1                	srli	a5,a5,0x10
    38de:	0ff7f793          	andi	a5,a5,255
}
    38e2:	853e                	mv	a0,a5
    38e4:	4472                	lw	s0,28(sp)
    38e6:	6105                	addi	sp,sp,32
    38e8:	8082                	ret

000038ea <I2C_ARPCmd>:
 *            NewState - ENABLE or DISABLE.
 *
 * @return  The PEC value.
 */
void I2C_ARPCmd(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    38ea:	1101                	addi	sp,sp,-32
    38ec:	ce22                	sw	s0,28(sp)
    38ee:	1000                	addi	s0,sp,32
    38f0:	fea42623          	sw	a0,-20(s0)
    38f4:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    38f8:	fe842783          	lw	a5,-24(s0)
    38fc:	c38d                	beqz	a5,391e <I2C_ARPCmd+0x34>
    {
        I2Cx->CTLR1 |= CTLR1_ENARP_Set;
    38fe:	fec42783          	lw	a5,-20(s0)
    3902:	0007d783          	lhu	a5,0(a5)
    3906:	07c2                	slli	a5,a5,0x10
    3908:	83c1                	srli	a5,a5,0x10
    390a:	0107e793          	ori	a5,a5,16
    390e:	01079713          	slli	a4,a5,0x10
    3912:	8341                	srli	a4,a4,0x10
    3914:	fec42783          	lw	a5,-20(s0)
    3918:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_ENARP_Reset;
    }
}
    391c:	a839                	j	393a <I2C_ARPCmd+0x50>
        I2Cx->CTLR1 &= CTLR1_ENARP_Reset;
    391e:	fec42783          	lw	a5,-20(s0)
    3922:	0007d783          	lhu	a5,0(a5)
    3926:	07c2                	slli	a5,a5,0x10
    3928:	83c1                	srli	a5,a5,0x10
    392a:	9bbd                	andi	a5,a5,-17
    392c:	01079713          	slli	a4,a5,0x10
    3930:	8341                	srli	a4,a4,0x10
    3932:	fec42783          	lw	a5,-20(s0)
    3936:	00e79023          	sh	a4,0(a5)
}
    393a:	0001                	nop
    393c:	4472                	lw	s0,28(sp)
    393e:	6105                	addi	sp,sp,32
    3940:	8082                	ret

00003942 <I2C_StretchClockCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void I2C_StretchClockCmd(I2C_TypeDef *I2Cx, FunctionalState NewState)
{
    3942:	1101                	addi	sp,sp,-32
    3944:	ce22                	sw	s0,28(sp)
    3946:	1000                	addi	s0,sp,32
    3948:	fea42623          	sw	a0,-20(s0)
    394c:	feb42423          	sw	a1,-24(s0)
    if(NewState == DISABLE)
    3950:	fe842783          	lw	a5,-24(s0)
    3954:	e38d                	bnez	a5,3976 <I2C_StretchClockCmd+0x34>
    {
        I2Cx->CTLR1 |= CTLR1_NOSTRETCH_Set;
    3956:	fec42783          	lw	a5,-20(s0)
    395a:	0007d783          	lhu	a5,0(a5)
    395e:	07c2                	slli	a5,a5,0x10
    3960:	83c1                	srli	a5,a5,0x10
    3962:	0807e793          	ori	a5,a5,128
    3966:	01079713          	slli	a4,a5,0x10
    396a:	8341                	srli	a4,a4,0x10
    396c:	fec42783          	lw	a5,-20(s0)
    3970:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        I2Cx->CTLR1 &= CTLR1_NOSTRETCH_Reset;
    }
}
    3974:	a005                	j	3994 <I2C_StretchClockCmd+0x52>
        I2Cx->CTLR1 &= CTLR1_NOSTRETCH_Reset;
    3976:	fec42783          	lw	a5,-20(s0)
    397a:	0007d783          	lhu	a5,0(a5)
    397e:	07c2                	slli	a5,a5,0x10
    3980:	83c1                	srli	a5,a5,0x10
    3982:	f7f7f793          	andi	a5,a5,-129
    3986:	01079713          	slli	a4,a5,0x10
    398a:	8341                	srli	a4,a4,0x10
    398c:	fec42783          	lw	a5,-20(s0)
    3990:	00e79023          	sh	a4,0(a5)
}
    3994:	0001                	nop
    3996:	4472                	lw	s0,28(sp)
    3998:	6105                	addi	sp,sp,32
    399a:	8082                	ret

0000399c <I2C_FastModeDutyCycleConfig>:
 *            I2C_DutyCycle_16_9 - I2C fast mode Tlow/Thigh = 16/9.
 *
 * @return  none
 */
void I2C_FastModeDutyCycleConfig(I2C_TypeDef *I2Cx, uint16_t I2C_DutyCycle)
{
    399c:	1101                	addi	sp,sp,-32
    399e:	ce22                	sw	s0,28(sp)
    39a0:	1000                	addi	s0,sp,32
    39a2:	fea42623          	sw	a0,-20(s0)
    39a6:	87ae                	mv	a5,a1
    39a8:	fef41523          	sh	a5,-22(s0)
    if(I2C_DutyCycle != I2C_DutyCycle_16_9)
    39ac:	fea45703          	lhu	a4,-22(s0)
    39b0:	6791                	lui	a5,0x4
    39b2:	02f70463          	beq	a4,a5,39da <I2C_FastModeDutyCycleConfig+0x3e>
    {
        I2Cx->CKCFGR &= I2C_DutyCycle_2;
    39b6:	fec42783          	lw	a5,-20(s0)
    39ba:	01c7d783          	lhu	a5,28(a5) # 401c <NVIC_Init+0x2cc>
    39be:	01079713          	slli	a4,a5,0x10
    39c2:	8341                	srli	a4,a4,0x10
    39c4:	77f1                	lui	a5,0xffffc
    39c6:	17fd                	addi	a5,a5,-1
    39c8:	8ff9                	and	a5,a5,a4
    39ca:	01079713          	slli	a4,a5,0x10
    39ce:	8341                	srli	a4,a4,0x10
    39d0:	fec42783          	lw	a5,-20(s0)
    39d4:	00e79e23          	sh	a4,28(a5) # ffffc01c <_eusrstack+0xdfff801c>
    }
    else
    {
        I2Cx->CKCFGR |= I2C_DutyCycle_16_9;
    }
}
    39d8:	a00d                	j	39fa <I2C_FastModeDutyCycleConfig+0x5e>
        I2Cx->CKCFGR |= I2C_DutyCycle_16_9;
    39da:	fec42783          	lw	a5,-20(s0)
    39de:	01c7d783          	lhu	a5,28(a5)
    39e2:	01079713          	slli	a4,a5,0x10
    39e6:	8341                	srli	a4,a4,0x10
    39e8:	6791                	lui	a5,0x4
    39ea:	8fd9                	or	a5,a5,a4
    39ec:	01079713          	slli	a4,a5,0x10
    39f0:	8341                	srli	a4,a4,0x10
    39f2:	fec42783          	lw	a5,-20(s0)
    39f6:	00e79e23          	sh	a4,28(a5) # 401c <NVIC_Init+0x2cc>
}
    39fa:	0001                	nop
    39fc:	4472                	lw	s0,28(sp)
    39fe:	6105                	addi	sp,sp,32
    3a00:	8082                	ret

00003a02 <I2C_CheckEvent>:
 *             I2C_EVENT_MASTER_MODE_ADDRESS10 - EVT9.
 *
 * @return  ErrorStatus - READY or NoREADY.
 */
ErrorStatus I2C_CheckEvent(I2C_TypeDef *I2Cx, uint32_t I2C_EVENT)
{
    3a02:	7179                	addi	sp,sp,-48
    3a04:	d622                	sw	s0,44(sp)
    3a06:	1800                	addi	s0,sp,48
    3a08:	fca42e23          	sw	a0,-36(s0)
    3a0c:	fcb42c23          	sw	a1,-40(s0)
    uint32_t    lastevent = 0;
    3a10:	fe042423          	sw	zero,-24(s0)
    uint32_t    flag1 = 0, flag2 = 0;
    3a14:	fe042223          	sw	zero,-28(s0)
    3a18:	fe042023          	sw	zero,-32(s0)
    ErrorStatus status = NoREADY;
    3a1c:	fe042623          	sw	zero,-20(s0)

    flag1 = I2Cx->STAR1;
    3a20:	fdc42783          	lw	a5,-36(s0)
    3a24:	0147d783          	lhu	a5,20(a5)
    3a28:	07c2                	slli	a5,a5,0x10
    3a2a:	83c1                	srli	a5,a5,0x10
    3a2c:	fef42223          	sw	a5,-28(s0)
    flag2 = I2Cx->STAR2;
    3a30:	fdc42783          	lw	a5,-36(s0)
    3a34:	0187d783          	lhu	a5,24(a5)
    3a38:	07c2                	slli	a5,a5,0x10
    3a3a:	83c1                	srli	a5,a5,0x10
    3a3c:	fef42023          	sw	a5,-32(s0)
    flag2 = flag2 << 16;
    3a40:	fe042783          	lw	a5,-32(s0)
    3a44:	07c2                	slli	a5,a5,0x10
    3a46:	fef42023          	sw	a5,-32(s0)

    lastevent = (flag1 | flag2) & FLAG_Mask;
    3a4a:	fe442703          	lw	a4,-28(s0)
    3a4e:	fe042783          	lw	a5,-32(s0)
    3a52:	8f5d                	or	a4,a4,a5
    3a54:	010007b7          	lui	a5,0x1000
    3a58:	17fd                	addi	a5,a5,-1
    3a5a:	8ff9                	and	a5,a5,a4
    3a5c:	fef42423          	sw	a5,-24(s0)

    if((lastevent & I2C_EVENT) == I2C_EVENT)
    3a60:	fe842703          	lw	a4,-24(s0)
    3a64:	fd842783          	lw	a5,-40(s0)
    3a68:	8ff9                	and	a5,a5,a4
    3a6a:	fd842703          	lw	a4,-40(s0)
    3a6e:	00f71663          	bne	a4,a5,3a7a <I2C_CheckEvent+0x78>
    {
        status = READY;
    3a72:	4785                	li	a5,1
    3a74:	fef42623          	sw	a5,-20(s0)
    3a78:	a019                	j	3a7e <I2C_CheckEvent+0x7c>
    }
    else
    {
        status = NoREADY;
    3a7a:	fe042623          	sw	zero,-20(s0)
    }

    return status;
    3a7e:	fec42783          	lw	a5,-20(s0)
}
    3a82:	853e                	mv	a0,a5
    3a84:	5432                	lw	s0,44(sp)
    3a86:	6145                	addi	sp,sp,48
    3a88:	8082                	ret

00003a8a <I2C_GetLastEvent>:
 * @param   I2Cx - where x can be 1 to select the I2C peripheral.
 *
 * @return  none
 */
uint32_t I2C_GetLastEvent(I2C_TypeDef *I2Cx)
{
    3a8a:	7179                	addi	sp,sp,-48
    3a8c:	d622                	sw	s0,44(sp)
    3a8e:	1800                	addi	s0,sp,48
    3a90:	fca42e23          	sw	a0,-36(s0)
    uint32_t lastevent = 0;
    3a94:	fe042623          	sw	zero,-20(s0)
    uint32_t flag1 = 0, flag2 = 0;
    3a98:	fe042423          	sw	zero,-24(s0)
    3a9c:	fe042223          	sw	zero,-28(s0)

    flag1 = I2Cx->STAR1;
    3aa0:	fdc42783          	lw	a5,-36(s0)
    3aa4:	0147d783          	lhu	a5,20(a5) # 1000014 <_data_lma+0xff0e08>
    3aa8:	07c2                	slli	a5,a5,0x10
    3aaa:	83c1                	srli	a5,a5,0x10
    3aac:	fef42423          	sw	a5,-24(s0)
    flag2 = I2Cx->STAR2;
    3ab0:	fdc42783          	lw	a5,-36(s0)
    3ab4:	0187d783          	lhu	a5,24(a5)
    3ab8:	07c2                	slli	a5,a5,0x10
    3aba:	83c1                	srli	a5,a5,0x10
    3abc:	fef42223          	sw	a5,-28(s0)
    flag2 = flag2 << 16;
    3ac0:	fe442783          	lw	a5,-28(s0)
    3ac4:	07c2                	slli	a5,a5,0x10
    3ac6:	fef42223          	sw	a5,-28(s0)
    lastevent = (flag1 | flag2) & FLAG_Mask;
    3aca:	fe842703          	lw	a4,-24(s0)
    3ace:	fe442783          	lw	a5,-28(s0)
    3ad2:	8f5d                	or	a4,a4,a5
    3ad4:	010007b7          	lui	a5,0x1000
    3ad8:	17fd                	addi	a5,a5,-1
    3ada:	8ff9                	and	a5,a5,a4
    3adc:	fef42623          	sw	a5,-20(s0)

    return lastevent;
    3ae0:	fec42783          	lw	a5,-20(s0)
}
    3ae4:	853e                	mv	a0,a5
    3ae6:	5432                	lw	s0,44(sp)
    3ae8:	6145                	addi	sp,sp,48
    3aea:	8082                	ret

00003aec <I2C_GetFlagStatus>:
 *            I2C_FLAG_SB - Start bit flag (Master mode).
 *
 * @return  FlagStatus - SET or RESET.
 */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG)
{
    3aec:	7179                	addi	sp,sp,-48
    3aee:	d622                	sw	s0,44(sp)
    3af0:	1800                	addi	s0,sp,48
    3af2:	fca42e23          	sw	a0,-36(s0)
    3af6:	fcb42c23          	sw	a1,-40(s0)
    FlagStatus    bitstatus = RESET;
    3afa:	fe042623          	sw	zero,-20(s0)
    __IO uint32_t i2creg = 0, i2cxbase = 0;
    3afe:	fe042423          	sw	zero,-24(s0)
    3b02:	fe042223          	sw	zero,-28(s0)

    i2cxbase = (uint32_t)I2Cx;
    3b06:	fdc42783          	lw	a5,-36(s0)
    3b0a:	fef42223          	sw	a5,-28(s0)
    i2creg = I2C_FLAG >> 28;
    3b0e:	fd842783          	lw	a5,-40(s0)
    3b12:	83f1                	srli	a5,a5,0x1c
    3b14:	fef42423          	sw	a5,-24(s0)
    I2C_FLAG &= FLAG_Mask;
    3b18:	fd842703          	lw	a4,-40(s0)
    3b1c:	010007b7          	lui	a5,0x1000
    3b20:	17fd                	addi	a5,a5,-1
    3b22:	8ff9                	and	a5,a5,a4
    3b24:	fcf42c23          	sw	a5,-40(s0)

    if(i2creg != 0)
    3b28:	fe842783          	lw	a5,-24(s0)
    3b2c:	c799                	beqz	a5,3b3a <I2C_GetFlagStatus+0x4e>
    {
        i2cxbase += 0x14;
    3b2e:	fe442783          	lw	a5,-28(s0)
    3b32:	07d1                	addi	a5,a5,20
    3b34:	fef42223          	sw	a5,-28(s0)
    3b38:	a819                	j	3b4e <I2C_GetFlagStatus+0x62>
    }
    else
    {
        I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
    3b3a:	fd842783          	lw	a5,-40(s0)
    3b3e:	83c1                	srli	a5,a5,0x10
    3b40:	fcf42c23          	sw	a5,-40(s0)
        i2cxbase += 0x18;
    3b44:	fe442783          	lw	a5,-28(s0)
    3b48:	07e1                	addi	a5,a5,24
    3b4a:	fef42223          	sw	a5,-28(s0)
    }

    if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
    3b4e:	fe442783          	lw	a5,-28(s0)
    3b52:	4398                	lw	a4,0(a5)
    3b54:	fd842783          	lw	a5,-40(s0)
    3b58:	8ff9                	and	a5,a5,a4
    3b5a:	c789                	beqz	a5,3b64 <I2C_GetFlagStatus+0x78>
    {
        bitstatus = SET;
    3b5c:	4785                	li	a5,1
    3b5e:	fef42623          	sw	a5,-20(s0)
    3b62:	a019                	j	3b68 <I2C_GetFlagStatus+0x7c>
    }
    else
    {
        bitstatus = RESET;
    3b64:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    3b68:	fec42783          	lw	a5,-20(s0)
}
    3b6c:	853e                	mv	a0,a5
    3b6e:	5432                	lw	s0,44(sp)
    3b70:	6145                	addi	sp,sp,48
    3b72:	8082                	ret

00003b74 <I2C_ClearFlag>:
 *             register (I2C_GetFlagStatus()) followed by a write operation to I2C_DATAR
 *             register  (I2C_SendData()). 
 * @return  none
 */
void I2C_ClearFlag(I2C_TypeDef *I2Cx, uint32_t I2C_FLAG)
{
    3b74:	7179                	addi	sp,sp,-48
    3b76:	d622                	sw	s0,44(sp)
    3b78:	1800                	addi	s0,sp,48
    3b7a:	fca42e23          	sw	a0,-36(s0)
    3b7e:	fcb42c23          	sw	a1,-40(s0)
    uint32_t flagpos = 0;
    3b82:	fe042623          	sw	zero,-20(s0)

    flagpos = I2C_FLAG & FLAG_Mask;
    3b86:	fd842703          	lw	a4,-40(s0)
    3b8a:	010007b7          	lui	a5,0x1000
    3b8e:	17fd                	addi	a5,a5,-1
    3b90:	8ff9                	and	a5,a5,a4
    3b92:	fef42623          	sw	a5,-20(s0)
    I2Cx->STAR1 = (uint16_t)~flagpos;
    3b96:	fec42783          	lw	a5,-20(s0)
    3b9a:	07c2                	slli	a5,a5,0x10
    3b9c:	83c1                	srli	a5,a5,0x10
    3b9e:	fff7c793          	not	a5,a5
    3ba2:	01079713          	slli	a4,a5,0x10
    3ba6:	8341                	srli	a4,a4,0x10
    3ba8:	fdc42783          	lw	a5,-36(s0)
    3bac:	00e79a23          	sh	a4,20(a5) # 1000014 <_data_lma+0xff0e08>
}
    3bb0:	0001                	nop
    3bb2:	5432                	lw	s0,44(sp)
    3bb4:	6145                	addi	sp,sp,48
    3bb6:	8082                	ret

00003bb8 <I2C_GetITStatus>:
 *            I2C_IT_SB - Start bit flag (Master mode).
 *
 * @return  none
 */
ITStatus I2C_GetITStatus(I2C_TypeDef *I2Cx, uint32_t I2C_IT)
{
    3bb8:	7179                	addi	sp,sp,-48
    3bba:	d622                	sw	s0,44(sp)
    3bbc:	1800                	addi	s0,sp,48
    3bbe:	fca42e23          	sw	a0,-36(s0)
    3bc2:	fcb42c23          	sw	a1,-40(s0)
    ITStatus bitstatus = RESET;
    3bc6:	fe042623          	sw	zero,-20(s0)
    uint32_t enablestatus = 0;
    3bca:	fe042423          	sw	zero,-24(s0)

    enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CTLR2));
    3bce:	fd842783          	lw	a5,-40(s0)
    3bd2:	83c1                	srli	a5,a5,0x10
    3bd4:	fdc42703          	lw	a4,-36(s0)
    3bd8:	00475703          	lhu	a4,4(a4) # 4004 <NVIC_Init+0x2b4>
    3bdc:	0742                	slli	a4,a4,0x10
    3bde:	8341                	srli	a4,a4,0x10
    3be0:	8ff9                	and	a5,a5,a4
    3be2:	7007f793          	andi	a5,a5,1792
    3be6:	fef42423          	sw	a5,-24(s0)
    I2C_IT &= FLAG_Mask;
    3bea:	fd842703          	lw	a4,-40(s0)
    3bee:	010007b7          	lui	a5,0x1000
    3bf2:	17fd                	addi	a5,a5,-1
    3bf4:	8ff9                	and	a5,a5,a4
    3bf6:	fcf42c23          	sw	a5,-40(s0)

    if(((I2Cx->STAR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
    3bfa:	fdc42783          	lw	a5,-36(s0)
    3bfe:	0147d783          	lhu	a5,20(a5) # 1000014 <_data_lma+0xff0e08>
    3c02:	07c2                	slli	a5,a5,0x10
    3c04:	83c1                	srli	a5,a5,0x10
    3c06:	873e                	mv	a4,a5
    3c08:	fd842783          	lw	a5,-40(s0)
    3c0c:	8ff9                	and	a5,a5,a4
    3c0e:	cb81                	beqz	a5,3c1e <I2C_GetITStatus+0x66>
    3c10:	fe842783          	lw	a5,-24(s0)
    3c14:	c789                	beqz	a5,3c1e <I2C_GetITStatus+0x66>
    {
        bitstatus = SET;
    3c16:	4785                	li	a5,1
    3c18:	fef42623          	sw	a5,-20(s0)
    3c1c:	a019                	j	3c22 <I2C_GetITStatus+0x6a>
    }
    else
    {
        bitstatus = RESET;
    3c1e:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    3c22:	fec42783          	lw	a5,-20(s0)
}
    3c26:	853e                	mv	a0,a5
    3c28:	5432                	lw	s0,44(sp)
    3c2a:	6145                	addi	sp,sp,48
    3c2c:	8082                	ret

00003c2e <I2C_ClearITPendingBit>:
 *             I2C_DATAR register (I2C_SendData()).
 *
 * @return  none
 */
void I2C_ClearITPendingBit(I2C_TypeDef *I2Cx, uint32_t I2C_IT)
{
    3c2e:	7179                	addi	sp,sp,-48
    3c30:	d622                	sw	s0,44(sp)
    3c32:	1800                	addi	s0,sp,48
    3c34:	fca42e23          	sw	a0,-36(s0)
    3c38:	fcb42c23          	sw	a1,-40(s0)
    uint32_t flagpos = 0;
    3c3c:	fe042623          	sw	zero,-20(s0)

    flagpos = I2C_IT & FLAG_Mask;
    3c40:	fd842703          	lw	a4,-40(s0)
    3c44:	010007b7          	lui	a5,0x1000
    3c48:	17fd                	addi	a5,a5,-1
    3c4a:	8ff9                	and	a5,a5,a4
    3c4c:	fef42623          	sw	a5,-20(s0)
    I2Cx->STAR1 = (uint16_t)~flagpos;
    3c50:	fec42783          	lw	a5,-20(s0)
    3c54:	07c2                	slli	a5,a5,0x10
    3c56:	83c1                	srli	a5,a5,0x10
    3c58:	fff7c793          	not	a5,a5
    3c5c:	01079713          	slli	a4,a5,0x10
    3c60:	8341                	srli	a4,a4,0x10
    3c62:	fdc42783          	lw	a5,-36(s0)
    3c66:	00e79a23          	sh	a4,20(a5) # 1000014 <_data_lma+0xff0e08>
}
    3c6a:	0001                	nop
    3c6c:	5432                	lw	s0,44(sp)
    3c6e:	6145                	addi	sp,sp,48
    3c70:	8082                	ret

00003c72 <IWDG_WriteAccessCmd>:
 *        and IWDG_RLDR registers.
 *
 * @return  none
 */
void IWDG_WriteAccessCmd(uint16_t IWDG_WriteAccess)
{
    3c72:	1101                	addi	sp,sp,-32
    3c74:	ce22                	sw	s0,28(sp)
    3c76:	1000                	addi	s0,sp,32
    3c78:	87aa                	mv	a5,a0
    3c7a:	fef41723          	sh	a5,-18(s0)
    IWDG->CTLR = IWDG_WriteAccess;
    3c7e:	400037b7          	lui	a5,0x40003
    3c82:	fee45703          	lhu	a4,-18(s0)
    3c86:	c398                	sw	a4,0(a5)
}
    3c88:	0001                	nop
    3c8a:	4472                	lw	s0,28(sp)
    3c8c:	6105                	addi	sp,sp,32
    3c8e:	8082                	ret

00003c90 <IWDG_SetPrescaler>:
 *             IWDG_Prescaler_256 - IWDG prescaler set to 256.
 *
 * @return  none
 */
void IWDG_SetPrescaler(uint8_t IWDG_Prescaler)
{
    3c90:	1101                	addi	sp,sp,-32
    3c92:	ce22                	sw	s0,28(sp)
    3c94:	1000                	addi	s0,sp,32
    3c96:	87aa                	mv	a5,a0
    3c98:	fef407a3          	sb	a5,-17(s0)
    IWDG->PSCR = IWDG_Prescaler;
    3c9c:	400037b7          	lui	a5,0x40003
    3ca0:	fef44703          	lbu	a4,-17(s0)
    3ca4:	c3d8                	sw	a4,4(a5)
}
    3ca6:	0001                	nop
    3ca8:	4472                	lw	s0,28(sp)
    3caa:	6105                	addi	sp,sp,32
    3cac:	8082                	ret

00003cae <IWDG_SetReload>:
 *            This parameter must be a number between 0 and 0x0FFF.
 *
 * @return  none
 */
void IWDG_SetReload(uint16_t Reload)
{
    3cae:	1101                	addi	sp,sp,-32
    3cb0:	ce22                	sw	s0,28(sp)
    3cb2:	1000                	addi	s0,sp,32
    3cb4:	87aa                	mv	a5,a0
    3cb6:	fef41723          	sh	a5,-18(s0)
    IWDG->RLDR = Reload;
    3cba:	400037b7          	lui	a5,0x40003
    3cbe:	fee45703          	lhu	a4,-18(s0)
    3cc2:	c798                	sw	a4,8(a5)
}
    3cc4:	0001                	nop
    3cc6:	4472                	lw	s0,28(sp)
    3cc8:	6105                	addi	sp,sp,32
    3cca:	8082                	ret

00003ccc <IWDG_ReloadCounter>:
 * @brief   Reloads IWDG counter with value defined in the reload register.
 *
 * @return  none
 */
void IWDG_ReloadCounter(void)
{
    3ccc:	1141                	addi	sp,sp,-16
    3cce:	c622                	sw	s0,12(sp)
    3cd0:	0800                	addi	s0,sp,16
    IWDG->CTLR = CTLR_KEY_Reload;
    3cd2:	400037b7          	lui	a5,0x40003
    3cd6:	672d                	lui	a4,0xb
    3cd8:	aaa70713          	addi	a4,a4,-1366 # aaaa <os_task_wait_for_msg+0x2c>
    3cdc:	c398                	sw	a4,0(a5)
}
    3cde:	0001                	nop
    3ce0:	4432                	lw	s0,12(sp)
    3ce2:	0141                	addi	sp,sp,16
    3ce4:	8082                	ret

00003ce6 <IWDG_Enable>:
 * @brief   Enables IWDG (write access to IWDG_PSCR and IWDG_RLDR registers disabled).
 *
 * @return  none
 */
void IWDG_Enable(void)
{
    3ce6:	1141                	addi	sp,sp,-16
    3ce8:	c622                	sw	s0,12(sp)
    3cea:	0800                	addi	s0,sp,16
    IWDG->CTLR = CTLR_KEY_Enable;
    3cec:	400037b7          	lui	a5,0x40003
    3cf0:	6735                	lui	a4,0xd
    3cf2:	ccc70713          	addi	a4,a4,-820 # cccc <__adddf3+0x4>
    3cf6:	c398                	sw	a4,0(a5)
}
    3cf8:	0001                	nop
    3cfa:	4432                	lw	s0,12(sp)
    3cfc:	0141                	addi	sp,sp,16
    3cfe:	8082                	ret

00003d00 <IWDG_GetFlagStatus>:
 *            IWDG_FLAG_RVU - Reload Value Update on going.
 *
 * @return  none
 */
FlagStatus IWDG_GetFlagStatus(uint16_t IWDG_FLAG)
{
    3d00:	7179                	addi	sp,sp,-48
    3d02:	d622                	sw	s0,44(sp)
    3d04:	1800                	addi	s0,sp,48
    3d06:	87aa                	mv	a5,a0
    3d08:	fcf41f23          	sh	a5,-34(s0)
    FlagStatus bitstatus = RESET;
    3d0c:	fe042623          	sw	zero,-20(s0)

    if((IWDG->STATR & IWDG_FLAG) != (uint32_t)RESET)
    3d10:	400037b7          	lui	a5,0x40003
    3d14:	47d8                	lw	a4,12(a5)
    3d16:	fde45783          	lhu	a5,-34(s0)
    3d1a:	8ff9                	and	a5,a5,a4
    3d1c:	c789                	beqz	a5,3d26 <IWDG_GetFlagStatus+0x26>
    {
        bitstatus = SET;
    3d1e:	4785                	li	a5,1
    3d20:	fef42623          	sw	a5,-20(s0)
    3d24:	a019                	j	3d2a <IWDG_GetFlagStatus+0x2a>
    }
    else
    {
        bitstatus = RESET;
    3d26:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    3d2a:	fec42783          	lw	a5,-20(s0)
}
    3d2e:	853e                	mv	a0,a5
    3d30:	5432                	lw	s0,44(sp)
    3d32:	6145                	addi	sp,sp,48
    3d34:	8082                	ret

00003d36 <NVIC_PriorityGroupConfig>:
 *                                   0 bits for subpriority
 *
 * @return  none
 */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
    3d36:	1101                	addi	sp,sp,-32
    3d38:	ce22                	sw	s0,28(sp)
    3d3a:	1000                	addi	s0,sp,32
    3d3c:	fea42623          	sw	a0,-20(s0)
    NVIC_Priority_Group = NVIC_PriorityGroup;
    3d40:	fec42703          	lw	a4,-20(s0)
    3d44:	82e1a023          	sw	a4,-2016(gp) # 20000040 <_edata>
}
    3d48:	0001                	nop
    3d4a:	4472                	lw	s0,28(sp)
    3d4c:	6105                	addi	sp,sp,32
    3d4e:	8082                	ret

00003d50 <NVIC_Init>:
 *        configuration information for the specified NVIC peripheral.
 *
 * @return  none
 */
void NVIC_Init(NVIC_InitTypeDef *NVIC_InitStruct)
{
    3d50:	7159                	addi	sp,sp,-112
    3d52:	d6a2                	sw	s0,108(sp)
    3d54:	1880                	addi	s0,sp,112
    3d56:	f8a42e23          	sw	a0,-100(s0)
    uint8_t tmppre = 0;
    3d5a:	fe0407a3          	sb	zero,-17(s0)

    if(NVIC_Priority_Group == NVIC_PriorityGroup_0)
    3d5e:	8201a783          	lw	a5,-2016(gp) # 20000040 <_edata>
    3d62:	eb9d                	bnez	a5,3d98 <NVIC_Init+0x48>
    {
        NVIC_SetPriority(NVIC_InitStruct->NVIC_IRQChannel, NVIC_InitStruct->NVIC_IRQChannelSubPriority << 4);
    3d64:	f9c42783          	lw	a5,-100(s0)
    3d68:	0007c783          	lbu	a5,0(a5) # 40003000 <_eusrstack+0x1ffff000>
    3d6c:	873e                	mv	a4,a5
    3d6e:	f9c42783          	lw	a5,-100(s0)
    3d72:	0027c783          	lbu	a5,2(a5)
    3d76:	0792                	slli	a5,a5,0x4
    3d78:	0ff7f793          	andi	a5,a5,255
    3d7c:	fee42423          	sw	a4,-24(s0)
    3d80:	fef403a3          	sb	a5,-25(s0)
 *
 * @return  none
 */
__attribute__( ( always_inline ) ) RV_STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint8_t priority)
{
  NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    3d84:	e000e737          	lui	a4,0xe000e
    3d88:	fe842783          	lw	a5,-24(s0)
    3d8c:	97ba                	add	a5,a5,a4
    3d8e:	fe744703          	lbu	a4,-25(s0)
    3d92:	40e78023          	sb	a4,1024(a5)
    3d96:	ac89                	j	3fe8 <NVIC_Init+0x298>
    }
    else if(NVIC_Priority_Group == NVIC_PriorityGroup_1)
    3d98:	8201a703          	lw	a4,-2016(gp) # 20000040 <_edata>
    3d9c:	4785                	li	a5,1
    3d9e:	08f71363          	bne	a4,a5,3e24 <NVIC_Init+0xd4>
    {
        if(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority == 1)
    3da2:	f9c42783          	lw	a5,-100(s0)
    3da6:	0017c703          	lbu	a4,1(a5)
    3daa:	4785                	li	a5,1
    3dac:	04f71263          	bne	a4,a5,3df0 <NVIC_Init+0xa0>
        {
            NVIC_SetPriority(NVIC_InitStruct->NVIC_IRQChannel, (1 << 7) | (NVIC_InitStruct->NVIC_IRQChannelSubPriority << 4));
    3db0:	f9c42783          	lw	a5,-100(s0)
    3db4:	0007c783          	lbu	a5,0(a5)
    3db8:	873e                	mv	a4,a5
    3dba:	f9c42783          	lw	a5,-100(s0)
    3dbe:	0027c783          	lbu	a5,2(a5)
    3dc2:	0792                	slli	a5,a5,0x4
    3dc4:	07e2                	slli	a5,a5,0x18
    3dc6:	87e1                	srai	a5,a5,0x18
    3dc8:	f807e793          	ori	a5,a5,-128
    3dcc:	07e2                	slli	a5,a5,0x18
    3dce:	87e1                	srai	a5,a5,0x18
    3dd0:	0ff7f793          	andi	a5,a5,255
    3dd4:	fee42023          	sw	a4,-32(s0)
    3dd8:	fcf40fa3          	sb	a5,-33(s0)
    3ddc:	e000e737          	lui	a4,0xe000e
    3de0:	fe042783          	lw	a5,-32(s0)
    3de4:	97ba                	add	a5,a5,a4
    3de6:	fdf44703          	lbu	a4,-33(s0)
    3dea:	40e78023          	sb	a4,1024(a5)
    3dee:	aaed                	j	3fe8 <NVIC_Init+0x298>
        }
        else
        {
            NVIC_SetPriority(NVIC_InitStruct->NVIC_IRQChannel, (0 << 7) | (NVIC_InitStruct->NVIC_IRQChannelSubPriority << 4));
    3df0:	f9c42783          	lw	a5,-100(s0)
    3df4:	0007c783          	lbu	a5,0(a5)
    3df8:	873e                	mv	a4,a5
    3dfa:	f9c42783          	lw	a5,-100(s0)
    3dfe:	0027c783          	lbu	a5,2(a5)
    3e02:	0792                	slli	a5,a5,0x4
    3e04:	0ff7f793          	andi	a5,a5,255
    3e08:	fce42c23          	sw	a4,-40(s0)
    3e0c:	fcf40ba3          	sb	a5,-41(s0)
    3e10:	e000e737          	lui	a4,0xe000e
    3e14:	fd842783          	lw	a5,-40(s0)
    3e18:	97ba                	add	a5,a5,a4
    3e1a:	fd744703          	lbu	a4,-41(s0)
    3e1e:	40e78023          	sb	a4,1024(a5)
    3e22:	a2d9                	j	3fe8 <NVIC_Init+0x298>
        }
    }
    else if(NVIC_Priority_Group == NVIC_PriorityGroup_2)
    3e24:	8201a703          	lw	a4,-2016(gp) # 20000040 <_edata>
    3e28:	4789                	li	a5,2
    3e2a:	0af71f63          	bne	a4,a5,3ee8 <NVIC_Init+0x198>
    {
        if(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority <= 1)
    3e2e:	f9c42783          	lw	a5,-100(s0)
    3e32:	0017c703          	lbu	a4,1(a5)
    3e36:	4785                	li	a5,1
    3e38:	04e7e863          	bltu	a5,a4,3e88 <NVIC_Init+0x138>
        {
            tmppre = NVIC_InitStruct->NVIC_IRQChannelSubPriority + (4 * NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority);
    3e3c:	f9c42783          	lw	a5,-100(s0)
    3e40:	0027c703          	lbu	a4,2(a5)
    3e44:	f9c42783          	lw	a5,-100(s0)
    3e48:	0017c783          	lbu	a5,1(a5)
    3e4c:	078a                	slli	a5,a5,0x2
    3e4e:	0ff7f793          	andi	a5,a5,255
    3e52:	97ba                	add	a5,a5,a4
    3e54:	fef407a3          	sb	a5,-17(s0)
            NVIC_SetPriority(NVIC_InitStruct->NVIC_IRQChannel, (0 << 7) | (tmppre << 4));
    3e58:	f9c42783          	lw	a5,-100(s0)
    3e5c:	0007c783          	lbu	a5,0(a5)
    3e60:	873e                	mv	a4,a5
    3e62:	fef44783          	lbu	a5,-17(s0)
    3e66:	0792                	slli	a5,a5,0x4
    3e68:	0ff7f793          	andi	a5,a5,255
    3e6c:	fce42823          	sw	a4,-48(s0)
    3e70:	fcf407a3          	sb	a5,-49(s0)
    3e74:	e000e737          	lui	a4,0xe000e
    3e78:	fd042783          	lw	a5,-48(s0)
    3e7c:	97ba                	add	a5,a5,a4
    3e7e:	fcf44703          	lbu	a4,-49(s0)
    3e82:	40e78023          	sb	a4,1024(a5)
    3e86:	a28d                	j	3fe8 <NVIC_Init+0x298>
        }
        else
        {
            tmppre = NVIC_InitStruct->NVIC_IRQChannelSubPriority + (4 * (NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority - 2));
    3e88:	f9c42783          	lw	a5,-100(s0)
    3e8c:	0027c703          	lbu	a4,2(a5)
    3e90:	f9c42783          	lw	a5,-100(s0)
    3e94:	0017c783          	lbu	a5,1(a5)
    3e98:	03e78793          	addi	a5,a5,62
    3e9c:	0ff7f793          	andi	a5,a5,255
    3ea0:	078a                	slli	a5,a5,0x2
    3ea2:	0ff7f793          	andi	a5,a5,255
    3ea6:	97ba                	add	a5,a5,a4
    3ea8:	fef407a3          	sb	a5,-17(s0)
            NVIC_SetPriority(NVIC_InitStruct->NVIC_IRQChannel, (1 << 7) | (tmppre << 4));
    3eac:	f9c42783          	lw	a5,-100(s0)
    3eb0:	0007c783          	lbu	a5,0(a5)
    3eb4:	873e                	mv	a4,a5
    3eb6:	fef44783          	lbu	a5,-17(s0)
    3eba:	0792                	slli	a5,a5,0x4
    3ebc:	07e2                	slli	a5,a5,0x18
    3ebe:	87e1                	srai	a5,a5,0x18
    3ec0:	f807e793          	ori	a5,a5,-128
    3ec4:	07e2                	slli	a5,a5,0x18
    3ec6:	87e1                	srai	a5,a5,0x18
    3ec8:	0ff7f793          	andi	a5,a5,255
    3ecc:	fce42423          	sw	a4,-56(s0)
    3ed0:	fcf403a3          	sb	a5,-57(s0)
    3ed4:	e000e737          	lui	a4,0xe000e
    3ed8:	fc842783          	lw	a5,-56(s0)
    3edc:	97ba                	add	a5,a5,a4
    3ede:	fc744703          	lbu	a4,-57(s0)
    3ee2:	40e78023          	sb	a4,1024(a5)
    3ee6:	a209                	j	3fe8 <NVIC_Init+0x298>
        }
    }
    else if(NVIC_Priority_Group == NVIC_PriorityGroup_3)
    3ee8:	8201a703          	lw	a4,-2016(gp) # 20000040 <_edata>
    3eec:	478d                	li	a5,3
    3eee:	0af71f63          	bne	a4,a5,3fac <NVIC_Init+0x25c>
    {
        if(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority <= 3)
    3ef2:	f9c42783          	lw	a5,-100(s0)
    3ef6:	0017c703          	lbu	a4,1(a5)
    3efa:	478d                	li	a5,3
    3efc:	04e7e863          	bltu	a5,a4,3f4c <NVIC_Init+0x1fc>
        {
            tmppre = NVIC_InitStruct->NVIC_IRQChannelSubPriority + (2 * NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority);
    3f00:	f9c42783          	lw	a5,-100(s0)
    3f04:	0027c703          	lbu	a4,2(a5)
    3f08:	f9c42783          	lw	a5,-100(s0)
    3f0c:	0017c783          	lbu	a5,1(a5)
    3f10:	0786                	slli	a5,a5,0x1
    3f12:	0ff7f793          	andi	a5,a5,255
    3f16:	97ba                	add	a5,a5,a4
    3f18:	fef407a3          	sb	a5,-17(s0)
            NVIC_SetPriority(NVIC_InitStruct->NVIC_IRQChannel, (0 << 7) | (tmppre << 4));
    3f1c:	f9c42783          	lw	a5,-100(s0)
    3f20:	0007c783          	lbu	a5,0(a5)
    3f24:	873e                	mv	a4,a5
    3f26:	fef44783          	lbu	a5,-17(s0)
    3f2a:	0792                	slli	a5,a5,0x4
    3f2c:	0ff7f793          	andi	a5,a5,255
    3f30:	fce42023          	sw	a4,-64(s0)
    3f34:	faf40fa3          	sb	a5,-65(s0)
    3f38:	e000e737          	lui	a4,0xe000e
    3f3c:	fc042783          	lw	a5,-64(s0)
    3f40:	97ba                	add	a5,a5,a4
    3f42:	fbf44703          	lbu	a4,-65(s0)
    3f46:	40e78023          	sb	a4,1024(a5)
    3f4a:	a879                	j	3fe8 <NVIC_Init+0x298>
        }
        else
        {
            tmppre = NVIC_InitStruct->NVIC_IRQChannelSubPriority + (2 * (NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority - 4));
    3f4c:	f9c42783          	lw	a5,-100(s0)
    3f50:	0027c703          	lbu	a4,2(a5)
    3f54:	f9c42783          	lw	a5,-100(s0)
    3f58:	0017c783          	lbu	a5,1(a5)
    3f5c:	07c78793          	addi	a5,a5,124
    3f60:	0ff7f793          	andi	a5,a5,255
    3f64:	0786                	slli	a5,a5,0x1
    3f66:	0ff7f793          	andi	a5,a5,255
    3f6a:	97ba                	add	a5,a5,a4
    3f6c:	fef407a3          	sb	a5,-17(s0)
            NVIC_SetPriority(NVIC_InitStruct->NVIC_IRQChannel, (1 << 7) | (tmppre << 4));
    3f70:	f9c42783          	lw	a5,-100(s0)
    3f74:	0007c783          	lbu	a5,0(a5)
    3f78:	873e                	mv	a4,a5
    3f7a:	fef44783          	lbu	a5,-17(s0)
    3f7e:	0792                	slli	a5,a5,0x4
    3f80:	07e2                	slli	a5,a5,0x18
    3f82:	87e1                	srai	a5,a5,0x18
    3f84:	f807e793          	ori	a5,a5,-128
    3f88:	07e2                	slli	a5,a5,0x18
    3f8a:	87e1                	srai	a5,a5,0x18
    3f8c:	0ff7f793          	andi	a5,a5,255
    3f90:	fae42c23          	sw	a4,-72(s0)
    3f94:	faf40ba3          	sb	a5,-73(s0)
    3f98:	e000e737          	lui	a4,0xe000e
    3f9c:	fb842783          	lw	a5,-72(s0)
    3fa0:	97ba                	add	a5,a5,a4
    3fa2:	fb744703          	lbu	a4,-73(s0)
    3fa6:	40e78023          	sb	a4,1024(a5)
    3faa:	a83d                	j	3fe8 <NVIC_Init+0x298>
        }
    }
    else if(NVIC_Priority_Group == NVIC_PriorityGroup_4)
    3fac:	8201a703          	lw	a4,-2016(gp) # 20000040 <_edata>
    3fb0:	4791                	li	a5,4
    3fb2:	02f71b63          	bne	a4,a5,3fe8 <NVIC_Init+0x298>
    {
        NVIC_SetPriority(NVIC_InitStruct->NVIC_IRQChannel, NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << 4);
    3fb6:	f9c42783          	lw	a5,-100(s0)
    3fba:	0007c783          	lbu	a5,0(a5)
    3fbe:	873e                	mv	a4,a5
    3fc0:	f9c42783          	lw	a5,-100(s0)
    3fc4:	0017c783          	lbu	a5,1(a5)
    3fc8:	0792                	slli	a5,a5,0x4
    3fca:	0ff7f793          	andi	a5,a5,255
    3fce:	fae42823          	sw	a4,-80(s0)
    3fd2:	faf407a3          	sb	a5,-81(s0)
    3fd6:	e000e737          	lui	a4,0xe000e
    3fda:	fb042783          	lw	a5,-80(s0)
    3fde:	97ba                	add	a5,a5,a4
    3fe0:	faf44703          	lbu	a4,-81(s0)
    3fe4:	40e78023          	sb	a4,1024(a5)
    }

    if(NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
    3fe8:	f9c42783          	lw	a5,-100(s0)
    3fec:	43dc                	lw	a5,4(a5)
    3fee:	cb85                	beqz	a5,401e <NVIC_Init+0x2ce>
    {
        NVIC_EnableIRQ(NVIC_InitStruct->NVIC_IRQChannel);
    3ff0:	f9c42783          	lw	a5,-100(s0)
    3ff4:	0007c783          	lbu	a5,0(a5)
    3ff8:	faf42423          	sw	a5,-88(s0)
  NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    3ffc:	fa842783          	lw	a5,-88(s0)
    4000:	8bfd                	andi	a5,a5,31
    4002:	4705                	li	a4,1
    4004:	00f716b3          	sll	a3,a4,a5
    4008:	e000e737          	lui	a4,0xe000e
    400c:	fa842783          	lw	a5,-88(s0)
    4010:	8395                	srli	a5,a5,0x5
    4012:	04078793          	addi	a5,a5,64
    4016:	078a                	slli	a5,a5,0x2
    4018:	97ba                	add	a5,a5,a4
    401a:	c394                	sw	a3,0(a5)
    }
    else
    {
        NVIC_DisableIRQ(NVIC_InitStruct->NVIC_IRQChannel);
    }
}
    401c:	a03d                	j	404a <NVIC_Init+0x2fa>
        NVIC_DisableIRQ(NVIC_InitStruct->NVIC_IRQChannel);
    401e:	f9c42783          	lw	a5,-100(s0)
    4022:	0007c783          	lbu	a5,0(a5)
    4026:	faf42223          	sw	a5,-92(s0)
  NVIC->IRER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    402a:	fa442783          	lw	a5,-92(s0)
    402e:	8bfd                	andi	a5,a5,31
    4030:	4705                	li	a4,1
    4032:	00f716b3          	sll	a3,a4,a5
    4036:	e000e737          	lui	a4,0xe000e
    403a:	fa442783          	lw	a5,-92(s0)
    403e:	8395                	srli	a5,a5,0x5
    4040:	06078793          	addi	a5,a5,96
    4044:	078a                	slli	a5,a5,0x2
    4046:	97ba                	add	a5,a5,a4
    4048:	c394                	sw	a3,0(a5)
}
    404a:	0001                	nop
    404c:	5436                	lw	s0,108(sp)
    404e:	6165                	addi	sp,sp,112
    4050:	8082                	ret

00004052 <OPA_Unlock>:
 * @brief          Unlocks the OPA Controller.
 *
 * @return         None
 */
void OPA_Unlock(void)
{
    4052:	1141                	addi	sp,sp,-16
    4054:	c622                	sw	s0,12(sp)
    4056:	0800                	addi	s0,sp,16
    OPA->OPAKEY = OPA_KEY1;
    4058:	400267b7          	lui	a5,0x40026
    405c:	45670737          	lui	a4,0x45670
    4060:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566c123>
    4064:	c7d8                	sw	a4,12(a5)
    OPA->OPAKEY = OPA_KEY2;
    4066:	400267b7          	lui	a5,0x40026
    406a:	cdef9737          	lui	a4,0xcdef9
    406e:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef49ab>
    4072:	c7d8                	sw	a4,12(a5)
}
    4074:	0001                	nop
    4076:	4432                	lw	s0,12(sp)
    4078:	0141                	addi	sp,sp,16
    407a:	8082                	ret

0000407c <OPA_Lock>:
 * @brief          Locks the OPA Controller.
 *
 * @return         None
 */
void OPA_Lock(void)
{
    407c:	1141                	addi	sp,sp,-16
    407e:	c622                	sw	s0,12(sp)
    4080:	0800                	addi	s0,sp,16
    OPA->CTLR1 |= (1<<31);
    4082:	400267b7          	lui	a5,0x40026
    4086:	43d4                	lw	a3,4(a5)
    4088:	400267b7          	lui	a5,0x40026
    408c:	80000737          	lui	a4,0x80000
    4090:	8f55                	or	a4,a4,a3
    4092:	c3d8                	sw	a4,4(a5)
}
    4094:	0001                	nop
    4096:	4432                	lw	s0,12(sp)
    4098:	0141                	addi	sp,sp,16
    409a:	8082                	ret

0000409c <OPA_POLL_Unlock>:
 * @brief          Unlocks the OPA POLL Controller.
 *
 * @return         None
 */
void OPA_POLL_Unlock(void)
{
    409c:	1141                	addi	sp,sp,-16
    409e:	c622                	sw	s0,12(sp)
    40a0:	0800                	addi	s0,sp,16
    OPA->POLLKEY = OPA_KEY1;
    40a2:	400267b7          	lui	a5,0x40026
    40a6:	45670737          	lui	a4,0x45670
    40aa:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566c123>
    40ae:	cbd8                	sw	a4,20(a5)
    OPA->POLLKEY = OPA_KEY2;
    40b0:	400267b7          	lui	a5,0x40026
    40b4:	cdef9737          	lui	a4,0xcdef9
    40b8:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef49ab>
    40bc:	cbd8                	sw	a4,20(a5)
}
    40be:	0001                	nop
    40c0:	4432                	lw	s0,12(sp)
    40c2:	0141                	addi	sp,sp,16
    40c4:	8082                	ret

000040c6 <OPA_POLL_Lock>:
 * @brief          Locks the OPA POLL Controller.
 *
 * @return         None
 */
void OPA_POLL_Lock(void)
{
    40c6:	1141                	addi	sp,sp,-16
    40c8:	c622                	sw	s0,12(sp)
    40ca:	0800                	addi	s0,sp,16
    OPA->CFGR1 |= (1<<7);
    40cc:	400267b7          	lui	a5,0x40026
    40d0:	0007d783          	lhu	a5,0(a5) # 40026000 <_eusrstack+0x20022000>
    40d4:	01079713          	slli	a4,a5,0x10
    40d8:	8341                	srli	a4,a4,0x10
    40da:	400267b7          	lui	a5,0x40026
    40de:	08076713          	ori	a4,a4,128
    40e2:	0742                	slli	a4,a4,0x10
    40e4:	8341                	srli	a4,a4,0x10
    40e6:	00e79023          	sh	a4,0(a5) # 40026000 <_eusrstack+0x20022000>
}
    40ea:	0001                	nop
    40ec:	4432                	lw	s0,12(sp)
    40ee:	0141                	addi	sp,sp,16
    40f0:	8082                	ret

000040f2 <OPA_CMP_Unlock>:
 * @brief          Unlocks the CMP Controller.
 *
 * @return         None
 */
void OPA_CMP_Unlock(void)
{
    40f2:	1141                	addi	sp,sp,-16
    40f4:	c622                	sw	s0,12(sp)
    40f6:	0800                	addi	s0,sp,16
    OPA->CMPKEY = OPA_KEY1;
    40f8:	400267b7          	lui	a5,0x40026
    40fc:	45670737          	lui	a4,0x45670
    4100:	12370713          	addi	a4,a4,291 # 45670123 <_eusrstack+0x2566c123>
    4104:	cb98                	sw	a4,16(a5)
    OPA->CMPKEY = OPA_KEY2;
    4106:	400267b7          	lui	a5,0x40026
    410a:	cdef9737          	lui	a4,0xcdef9
    410e:	9ab70713          	addi	a4,a4,-1621 # cdef89ab <_eusrstack+0xadef49ab>
    4112:	cb98                	sw	a4,16(a5)
}
    4114:	0001                	nop
    4116:	4432                	lw	s0,12(sp)
    4118:	0141                	addi	sp,sp,16
    411a:	8082                	ret

0000411c <OPA_CMP_Lock>:
 * @brief          Locks the CMP Controller.
 *
 * @return         None
 */
void OPA_CMP_Lock(void)
{
    411c:	1141                	addi	sp,sp,-16
    411e:	c622                	sw	s0,12(sp)
    4120:	0800                	addi	s0,sp,16
    CTLR2_tmp |= (1<<31);
    4122:	8241a703          	lw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
    4126:	800007b7          	lui	a5,0x80000
    412a:	8f5d                	or	a4,a4,a5
    412c:	82e1a223          	sw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
    OPA->CTLR2 = CTLR2_tmp;
    4130:	400267b7          	lui	a5,0x40026
    4134:	8241a703          	lw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
    4138:	c798                	sw	a4,8(a5)
    CTLR2_tmp &= ~(1<<31);
    413a:	8241a703          	lw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
    413e:	800007b7          	lui	a5,0x80000
    4142:	fff7c793          	not	a5,a5
    4146:	8f7d                	and	a4,a4,a5
    4148:	82e1a223          	sw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
}
    414c:	0001                	nop
    414e:	4432                	lw	s0,12(sp)
    4150:	0141                	addi	sp,sp,16
    4152:	8082                	ret

00004154 <OPA_Init>:
 * @param   OPA_InitStruct - pointer to a OPA_InitTypeDef structure
 *
 * @return  none
 */
void OPA_Init(OPA_InitTypeDef *OPA_InitStruct)
{
    4154:	7179                	addi	sp,sp,-48
    4156:	d622                	sw	s0,44(sp)
    4158:	1800                	addi	s0,sp,48
    415a:	fca42e23          	sw	a0,-36(s0)
    uint16_t tmp0 = 0, tmp1 = 0;
    415e:	fe041323          	sh	zero,-26(s0)
    4162:	fe041723          	sh	zero,-18(s0)
    uint32_t tmp2 = 0;
    4166:	fe042423          	sw	zero,-24(s0)

    tmp0 = OPA->CFGR1;
    416a:	400267b7          	lui	a5,0x40026
    416e:	0007d783          	lhu	a5,0(a5) # 40026000 <_eusrstack+0x20022000>
    4172:	fef41323          	sh	a5,-26(s0)
    tmp1 = OPA->CFGR2;
    4176:	400267b7          	lui	a5,0x40026
    417a:	0027d783          	lhu	a5,2(a5) # 40026002 <_eusrstack+0x20022002>
    417e:	fef41723          	sh	a5,-18(s0)
    tmp2 = OPA->CTLR1;
    4182:	400267b7          	lui	a5,0x40026
    4186:	43dc                	lw	a5,4(a5)
    4188:	fef42423          	sw	a5,-24(s0)

    if(OPA_InitStruct->OPA_NUM == OPA1)
    418c:	fdc42783          	lw	a5,-36(s0)
    4190:	43dc                	lw	a5,4(a5)
    4192:	e7b5                	bnez	a5,41fe <OPA_Init+0xaa>
    {
        tmp1 &= 0xFCFF;
    4194:	fee45783          	lhu	a5,-18(s0)
    4198:	cff7f793          	andi	a5,a5,-769
    419c:	fef41723          	sh	a5,-18(s0)
        tmp2 &= 0xFFFF0001;
    41a0:	fe842703          	lw	a4,-24(s0)
    41a4:	77c1                	lui	a5,0xffff0
    41a6:	0785                	addi	a5,a5,1
    41a8:	8ff9                	and	a5,a5,a4
    41aa:	fef42423          	sw	a5,-24(s0)

        tmp1 |= (OPA_InitStruct->POLL_NUM << 9);
    41ae:	fdc42783          	lw	a5,-36(s0)
    41b2:	5bdc                	lw	a5,52(a5)
    41b4:	07c2                	slli	a5,a5,0x10
    41b6:	83c1                	srli	a5,a5,0x10
    41b8:	07a6                	slli	a5,a5,0x9
    41ba:	01079713          	slli	a4,a5,0x10
    41be:	8341                	srli	a4,a4,0x10
    41c0:	fee45783          	lhu	a5,-18(s0)
    41c4:	8fd9                	or	a5,a5,a4
    41c6:	fef41723          	sh	a5,-18(s0)
        tmp2 |= (OPA_InitStruct->Mode << 1) | (OPA_InitStruct->PSEL << 3)
    41ca:	fdc42783          	lw	a5,-36(s0)
    41ce:	479c                	lw	a5,8(a5)
    41d0:	00179713          	slli	a4,a5,0x1
    41d4:	fdc42783          	lw	a5,-36(s0)
    41d8:	47dc                	lw	a5,12(a5)
    41da:	078e                	slli	a5,a5,0x3
    41dc:	8f5d                	or	a4,a4,a5
                | (OPA_InitStruct->FB << 5) | (OPA_InitStruct->NSEL << 6);
    41de:	fdc42783          	lw	a5,-36(s0)
    41e2:	4b9c                	lw	a5,16(a5)
    41e4:	0796                	slli	a5,a5,0x5
    41e6:	8f5d                	or	a4,a4,a5
    41e8:	fdc42783          	lw	a5,-36(s0)
    41ec:	4bdc                	lw	a5,20(a5)
    41ee:	079a                	slli	a5,a5,0x6
    41f0:	8fd9                	or	a5,a5,a4
        tmp2 |= (OPA_InitStruct->Mode << 1) | (OPA_InitStruct->PSEL << 3)
    41f2:	fe842703          	lw	a4,-24(s0)
    41f6:	8fd9                	or	a5,a5,a4
    41f8:	fef42423          	sw	a5,-24(s0)
    41fc:	a8b5                	j	4278 <OPA_Init+0x124>
    }
    else if(OPA_InitStruct->OPA_NUM == OPA2)
    41fe:	fdc42783          	lw	a5,-36(s0)
    4202:	43d8                	lw	a4,4(a5)
    4204:	4785                	li	a5,1
    4206:	06f71963          	bne	a4,a5,4278 <OPA_Init+0x124>
    {
        tmp1 &= 0xF3FF;
    420a:	fee45703          	lhu	a4,-18(s0)
    420e:	77fd                	lui	a5,0xfffff
    4210:	3ff78793          	addi	a5,a5,1023 # fffff3ff <_eusrstack+0xdfffb3ff>
    4214:	8ff9                	and	a5,a5,a4
    4216:	fef41723          	sh	a5,-18(s0)
        tmp2 &= 0x0001FFFF;
    421a:	fe842703          	lw	a4,-24(s0)
    421e:	000207b7          	lui	a5,0x20
    4222:	17fd                	addi	a5,a5,-1
    4224:	8ff9                	and	a5,a5,a4
    4226:	fef42423          	sw	a5,-24(s0)

        tmp1 |= (OPA_InitStruct->POLL_NUM << 11);
    422a:	fdc42783          	lw	a5,-36(s0)
    422e:	5bdc                	lw	a5,52(a5)
    4230:	07c2                	slli	a5,a5,0x10
    4232:	83c1                	srli	a5,a5,0x10
    4234:	07ae                	slli	a5,a5,0xb
    4236:	01079713          	slli	a4,a5,0x10
    423a:	8341                	srli	a4,a4,0x10
    423c:	fee45783          	lhu	a5,-18(s0)
    4240:	8fd9                	or	a5,a5,a4
    4242:	fef41723          	sh	a5,-18(s0)
        tmp2 |= (OPA_InitStruct->Mode << 17) | (OPA_InitStruct->PSEL << 19)
    4246:	fdc42783          	lw	a5,-36(s0)
    424a:	479c                	lw	a5,8(a5)
    424c:	01179713          	slli	a4,a5,0x11
    4250:	fdc42783          	lw	a5,-36(s0)
    4254:	47dc                	lw	a5,12(a5)
    4256:	07ce                	slli	a5,a5,0x13
    4258:	8f5d                	or	a4,a4,a5
                | (OPA_InitStruct->FB << 21) | (OPA_InitStruct->NSEL << 22);
    425a:	fdc42783          	lw	a5,-36(s0)
    425e:	4b9c                	lw	a5,16(a5)
    4260:	07d6                	slli	a5,a5,0x15
    4262:	8f5d                	or	a4,a4,a5
    4264:	fdc42783          	lw	a5,-36(s0)
    4268:	4bdc                	lw	a5,20(a5)
    426a:	07da                	slli	a5,a5,0x16
    426c:	8fd9                	or	a5,a5,a4
        tmp2 |= (OPA_InitStruct->Mode << 17) | (OPA_InitStruct->PSEL << 19)
    426e:	fe842703          	lw	a4,-24(s0)
    4272:	8fd9                	or	a5,a5,a4
    4274:	fef42423          	sw	a5,-24(s0)
    }

    tmp0 |= (OPA_InitStruct->PSEL_POLL) | (OPA_InitStruct->BKIN_EN << 2)
    4278:	fdc42783          	lw	a5,-36(s0)
    427c:	4f9c                	lw	a5,24(a5)
    427e:	01079713          	slli	a4,a5,0x10
    4282:	8341                	srli	a4,a4,0x10
    4284:	fdc42783          	lw	a5,-36(s0)
    4288:	4fdc                	lw	a5,28(a5)
    428a:	07c2                	slli	a5,a5,0x10
    428c:	83c1                	srli	a5,a5,0x10
    428e:	078a                	slli	a5,a5,0x2
    4290:	07c2                	slli	a5,a5,0x10
    4292:	83c1                	srli	a5,a5,0x10
    4294:	8fd9                	or	a5,a5,a4
    4296:	01079713          	slli	a4,a5,0x10
    429a:	8341                	srli	a4,a4,0x10
                     | (OPA_InitStruct->RST_EN << 4) | (OPA_InitStruct->BKIN_SEL << 6)
    429c:	fdc42783          	lw	a5,-36(s0)
    42a0:	539c                	lw	a5,32(a5)
    42a2:	07c2                	slli	a5,a5,0x10
    42a4:	83c1                	srli	a5,a5,0x10
    42a6:	0792                	slli	a5,a5,0x4
    42a8:	07c2                	slli	a5,a5,0x10
    42aa:	83c1                	srli	a5,a5,0x10
    42ac:	8fd9                	or	a5,a5,a4
    42ae:	01079713          	slli	a4,a5,0x10
    42b2:	8341                	srli	a4,a4,0x10
    42b4:	fdc42783          	lw	a5,-36(s0)
    42b8:	53dc                	lw	a5,36(a5)
    42ba:	07c2                	slli	a5,a5,0x10
    42bc:	83c1                	srli	a5,a5,0x10
    42be:	079a                	slli	a5,a5,0x6
    42c0:	07c2                	slli	a5,a5,0x10
    42c2:	83c1                	srli	a5,a5,0x10
    42c4:	8fd9                	or	a5,a5,a4
    42c6:	01079713          	slli	a4,a5,0x10
    42ca:	8341                	srli	a4,a4,0x10
                     | (OPA_InitStruct->OUT_IE << 8) | (OPA_InitStruct->CNT_IE << 10)
    42cc:	fdc42783          	lw	a5,-36(s0)
    42d0:	579c                	lw	a5,40(a5)
    42d2:	07c2                	slli	a5,a5,0x10
    42d4:	83c1                	srli	a5,a5,0x10
    42d6:	07a2                	slli	a5,a5,0x8
    42d8:	07c2                	slli	a5,a5,0x10
    42da:	83c1                	srli	a5,a5,0x10
    42dc:	8fd9                	or	a5,a5,a4
    42de:	01079713          	slli	a4,a5,0x10
    42e2:	8341                	srli	a4,a4,0x10
    42e4:	fdc42783          	lw	a5,-36(s0)
    42e8:	57dc                	lw	a5,44(a5)
    42ea:	07c2                	slli	a5,a5,0x10
    42ec:	83c1                	srli	a5,a5,0x10
    42ee:	07aa                	slli	a5,a5,0xa
    42f0:	07c2                	slli	a5,a5,0x10
    42f2:	83c1                	srli	a5,a5,0x10
    42f4:	8fd9                	or	a5,a5,a4
    42f6:	01079713          	slli	a4,a5,0x10
    42fa:	8341                	srli	a4,a4,0x10
                     | (OPA_InitStruct->NMI_IE << 11);
    42fc:	fdc42783          	lw	a5,-36(s0)
    4300:	5b9c                	lw	a5,48(a5)
    4302:	07c2                	slli	a5,a5,0x10
    4304:	83c1                	srli	a5,a5,0x10
    4306:	07ae                	slli	a5,a5,0xb
    4308:	07c2                	slli	a5,a5,0x10
    430a:	83c1                	srli	a5,a5,0x10
    430c:	8fd9                	or	a5,a5,a4
    430e:	01079713          	slli	a4,a5,0x10
    4312:	8341                	srli	a4,a4,0x10
    tmp0 |= (OPA_InitStruct->PSEL_POLL) | (OPA_InitStruct->BKIN_EN << 2)
    4314:	fe645783          	lhu	a5,-26(s0)
    4318:	8fd9                	or	a5,a5,a4
    431a:	fef41323          	sh	a5,-26(s0)
    tmp1 &= 0xFF00;
    431e:	fee45783          	lhu	a5,-18(s0)
    4322:	f007f793          	andi	a5,a5,-256
    4326:	fef41723          	sh	a5,-18(s0)
    tmp1 |= OPA_InitStruct->OPA_POLL_Interval;
    432a:	fdc42783          	lw	a5,-36(s0)
    432e:	0007d703          	lhu	a4,0(a5) # 20000 <_data_lma+0x10df4>
    4332:	fee45783          	lhu	a5,-18(s0)
    4336:	8fd9                	or	a5,a5,a4
    4338:	fef41723          	sh	a5,-18(s0)

    OPA->CFGR1 = tmp0;
    433c:	400267b7          	lui	a5,0x40026
    4340:	fe645703          	lhu	a4,-26(s0)
    4344:	00e79023          	sh	a4,0(a5) # 40026000 <_eusrstack+0x20022000>
    OPA->CFGR2 = tmp1;
    4348:	400267b7          	lui	a5,0x40026
    434c:	fee45703          	lhu	a4,-18(s0)
    4350:	00e79123          	sh	a4,2(a5) # 40026002 <_eusrstack+0x20022002>
    OPA->CTLR1 = tmp2;
    4354:	400267b7          	lui	a5,0x40026
    4358:	fe842703          	lw	a4,-24(s0)
    435c:	c3d8                	sw	a4,4(a5)
}
    435e:	0001                	nop
    4360:	5432                	lw	s0,44(sp)
    4362:	6145                	addi	sp,sp,48
    4364:	8082                	ret

00004366 <OPA_StructInit>:
 * @param   OPA_StructInit - pointer to a OPA_InitTypeDef structure
 *
 * @return  none
 */
void OPA_StructInit(OPA_InitTypeDef *OPA_InitStruct)
{
    4366:	1101                	addi	sp,sp,-32
    4368:	ce22                	sw	s0,28(sp)
    436a:	1000                	addi	s0,sp,32
    436c:	fea42623          	sw	a0,-20(s0)
    OPA_InitStruct->OPA_POLL_Interval = 0;
    4370:	fec42783          	lw	a5,-20(s0)
    4374:	00079023          	sh	zero,0(a5) # 40026000 <_eusrstack+0x20022000>
    OPA_InitStruct->OPA_NUM = OPA1;
    4378:	fec42783          	lw	a5,-20(s0)
    437c:	0007a223          	sw	zero,4(a5)
    OPA_InitStruct->Mode = OUT_IO_OUT0;
    4380:	fec42783          	lw	a5,-20(s0)
    4384:	0007a423          	sw	zero,8(a5)
    OPA_InitStruct->PSEL = CHP0;
    4388:	fec42783          	lw	a5,-20(s0)
    438c:	0007a623          	sw	zero,12(a5)
    OPA_InitStruct->FB = FB_OFF;
    4390:	fec42783          	lw	a5,-20(s0)
    4394:	0007a823          	sw	zero,16(a5)
    OPA_InitStruct->NSEL = CHN0;
    4398:	fec42783          	lw	a5,-20(s0)
    439c:	0007aa23          	sw	zero,20(a5)
    OPA_InitStruct->PSEL_POLL = CHP_OPA1_OFF_OPA2_OFF;
    43a0:	fec42783          	lw	a5,-20(s0)
    43a4:	0007ac23          	sw	zero,24(a5)
    OPA_InitStruct->BKIN_EN = BKIN_OPA1_OFF_OPA2_OFF;
    43a8:	fec42783          	lw	a5,-20(s0)
    43ac:	0007ae23          	sw	zero,28(a5)
    OPA_InitStruct->RST_EN = RST_OPA1_OFF_OPA2_OFF;
    43b0:	fec42783          	lw	a5,-20(s0)
    43b4:	0207a023          	sw	zero,32(a5)
    OPA_InitStruct->BKIN_SEL = BKIN_OPA1_TIM1_OPA2_TIM2;
    43b8:	fec42783          	lw	a5,-20(s0)
    43bc:	0207a223          	sw	zero,36(a5)
    OPA_InitStruct->OUT_IE = OUT_IE_OPA1_OFF_OPA2_OFF;
    43c0:	fec42783          	lw	a5,-20(s0)
    43c4:	0207a423          	sw	zero,40(a5)
    OPA_InitStruct->CNT_IE = CNT_IE_OFF;
    43c8:	fec42783          	lw	a5,-20(s0)
    43cc:	0207a623          	sw	zero,44(a5)
    OPA_InitStruct->NMI_IE = NMI_IE_OFF;
    43d0:	fec42783          	lw	a5,-20(s0)
    43d4:	0207a823          	sw	zero,48(a5)
    OPA_InitStruct->POLL_NUM = CHP_POLL_NUM_1;
    43d8:	fec42783          	lw	a5,-20(s0)
    43dc:	0207aa23          	sw	zero,52(a5)
}
    43e0:	0001                	nop
    43e2:	4472                	lw	s0,28(sp)
    43e4:	6105                	addi	sp,sp,32
    43e6:	8082                	ret

000043e8 <OPA_Cmd>:
 *            NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void OPA_Cmd(OPA_Num_TypeDef OPA_NUM, FunctionalState NewState)
{
    43e8:	1101                	addi	sp,sp,-32
    43ea:	ce22                	sw	s0,28(sp)
    43ec:	1000                	addi	s0,sp,32
    43ee:	fea42623          	sw	a0,-20(s0)
    43f2:	feb42423          	sw	a1,-24(s0)
    if(NewState == ENABLE)
    43f6:	fe842703          	lw	a4,-24(s0)
    43fa:	4785                	li	a5,1
    43fc:	02f71163          	bne	a4,a5,441e <OPA_Cmd+0x36>
    {
        OPA->CTLR1 |= (uint32_t)(1 << (OPA_NUM*16));
    4400:	400267b7          	lui	a5,0x40026
    4404:	43d8                	lw	a4,4(a5)
    4406:	fec42783          	lw	a5,-20(s0)
    440a:	0792                	slli	a5,a5,0x4
    440c:	4685                	li	a3,1
    440e:	00f697b3          	sll	a5,a3,a5
    4412:	86be                	mv	a3,a5
    4414:	400267b7          	lui	a5,0x40026
    4418:	8f55                	or	a4,a4,a3
    441a:	c3d8                	sw	a4,4(a5)
    }
    else
    {
        OPA->CTLR1 &= ~(uint32_t)(1 << (OPA_NUM*16));
    }
}
    441c:	a005                	j	443c <OPA_Cmd+0x54>
        OPA->CTLR1 &= ~(uint32_t)(1 << (OPA_NUM*16));
    441e:	400267b7          	lui	a5,0x40026
    4422:	43d4                	lw	a3,4(a5)
    4424:	fec42783          	lw	a5,-20(s0)
    4428:	0792                	slli	a5,a5,0x4
    442a:	4705                	li	a4,1
    442c:	00f717b3          	sll	a5,a4,a5
    4430:	fff7c713          	not	a4,a5
    4434:	400267b7          	lui	a5,0x40026
    4438:	8f75                	and	a4,a4,a3
    443a:	c3d8                	sw	a4,4(a5)
}
    443c:	0001                	nop
    443e:	4472                	lw	s0,28(sp)
    4440:	6105                	addi	sp,sp,32
    4442:	8082                	ret

00004444 <OPA_CMP_Init>:
 * @param   CMP_InitStruct - pointer to a CMP_InitTypeDef structure
 *
 * @return  none
 */
void OPA_CMP_Init(CMP_InitTypeDef *CMP_InitStruct)
{
    4444:	7179                	addi	sp,sp,-48
    4446:	d622                	sw	s0,44(sp)
    4448:	1800                	addi	s0,sp,48
    444a:	fca42e23          	sw	a0,-36(s0)
    uint32_t tmp1 = 0;
    444e:	fe042623          	sw	zero,-20(s0)

    tmp1 = CTLR2_tmp;
    4452:	8241a783          	lw	a5,-2012(gp) # 20000044 <CTLR2_tmp>
    4456:	fef42623          	sw	a5,-20(s0)

    if(CMP_InitStruct->CMP_NUM == CMP1)
    445a:	fdc42783          	lw	a5,-36(s0)
    445e:	439c                	lw	a5,0(a5)
    4460:	e3a1                	bnez	a5,44a0 <OPA_CMP_Init+0x5c>
    {
        tmp1 &= 0xFFFFFFE1;
    4462:	fec42783          	lw	a5,-20(s0)
    4466:	9b85                	andi	a5,a5,-31
    4468:	fef42623          	sw	a5,-20(s0)
        tmp1 |= (CMP_InitStruct->Mode << 1) | (CMP_InitStruct->NSEL << 2)
    446c:	fdc42783          	lw	a5,-36(s0)
    4470:	43dc                	lw	a5,4(a5)
    4472:	00179713          	slli	a4,a5,0x1
    4476:	fdc42783          	lw	a5,-36(s0)
    447a:	479c                	lw	a5,8(a5)
    447c:	078a                	slli	a5,a5,0x2
    447e:	8f5d                	or	a4,a4,a5
                | (CMP_InitStruct->PSEL << 3) | (CMP_InitStruct->HYEN << 4);
    4480:	fdc42783          	lw	a5,-36(s0)
    4484:	47dc                	lw	a5,12(a5)
    4486:	078e                	slli	a5,a5,0x3
    4488:	8f5d                	or	a4,a4,a5
    448a:	fdc42783          	lw	a5,-36(s0)
    448e:	4b9c                	lw	a5,16(a5)
    4490:	0792                	slli	a5,a5,0x4
    4492:	8fd9                	or	a5,a5,a4
        tmp1 |= (CMP_InitStruct->Mode << 1) | (CMP_InitStruct->NSEL << 2)
    4494:	fec42703          	lw	a4,-20(s0)
    4498:	8fd9                	or	a5,a5,a4
    449a:	fef42623          	sw	a5,-20(s0)
    449e:	a871                	j	453a <OPA_CMP_Init+0xf6>
    }
    else if(CMP_InitStruct->CMP_NUM == CMP2)
    44a0:	fdc42783          	lw	a5,-36(s0)
    44a4:	4398                	lw	a4,0(a5)
    44a6:	4785                	li	a5,1
    44a8:	04f71263          	bne	a4,a5,44ec <OPA_CMP_Init+0xa8>
    {
        tmp1 &= 0xFFFFFC3F;
    44ac:	fec42783          	lw	a5,-20(s0)
    44b0:	c3f7f793          	andi	a5,a5,-961
    44b4:	fef42623          	sw	a5,-20(s0)
        tmp1 |= (CMP_InitStruct->Mode << 6) | (CMP_InitStruct->NSEL << 7)
    44b8:	fdc42783          	lw	a5,-36(s0)
    44bc:	43dc                	lw	a5,4(a5)
    44be:	00679713          	slli	a4,a5,0x6
    44c2:	fdc42783          	lw	a5,-36(s0)
    44c6:	479c                	lw	a5,8(a5)
    44c8:	079e                	slli	a5,a5,0x7
    44ca:	8f5d                	or	a4,a4,a5
                | (CMP_InitStruct->PSEL << 8) | (CMP_InitStruct->HYEN << 9);
    44cc:	fdc42783          	lw	a5,-36(s0)
    44d0:	47dc                	lw	a5,12(a5)
    44d2:	07a2                	slli	a5,a5,0x8
    44d4:	8f5d                	or	a4,a4,a5
    44d6:	fdc42783          	lw	a5,-36(s0)
    44da:	4b9c                	lw	a5,16(a5)
    44dc:	07a6                	slli	a5,a5,0x9
    44de:	8fd9                	or	a5,a5,a4
        tmp1 |= (CMP_InitStruct->Mode << 6) | (CMP_InitStruct->NSEL << 7)
    44e0:	fec42703          	lw	a4,-20(s0)
    44e4:	8fd9                	or	a5,a5,a4
    44e6:	fef42623          	sw	a5,-20(s0)
    44ea:	a881                	j	453a <OPA_CMP_Init+0xf6>
    }
    else if(CMP_InitStruct->CMP_NUM == CMP3)
    44ec:	fdc42783          	lw	a5,-36(s0)
    44f0:	4398                	lw	a4,0(a5)
    44f2:	4789                	li	a5,2
    44f4:	04f71363          	bne	a4,a5,453a <OPA_CMP_Init+0xf6>
    {
        tmp1 &= 0xFFFF87FF;
    44f8:	fec42703          	lw	a4,-20(s0)
    44fc:	77e1                	lui	a5,0xffff8
    44fe:	7ff78793          	addi	a5,a5,2047 # ffff87ff <_eusrstack+0xdfff47ff>
    4502:	8ff9                	and	a5,a5,a4
    4504:	fef42623          	sw	a5,-20(s0)
        tmp1 |= (CMP_InitStruct->Mode << 11) | (CMP_InitStruct->NSEL << 12)
    4508:	fdc42783          	lw	a5,-36(s0)
    450c:	43dc                	lw	a5,4(a5)
    450e:	00b79713          	slli	a4,a5,0xb
    4512:	fdc42783          	lw	a5,-36(s0)
    4516:	479c                	lw	a5,8(a5)
    4518:	07b2                	slli	a5,a5,0xc
    451a:	8f5d                	or	a4,a4,a5
                | (CMP_InitStruct->PSEL << 13) | (CMP_InitStruct->HYEN << 14);
    451c:	fdc42783          	lw	a5,-36(s0)
    4520:	47dc                	lw	a5,12(a5)
    4522:	07b6                	slli	a5,a5,0xd
    4524:	8f5d                	or	a4,a4,a5
    4526:	fdc42783          	lw	a5,-36(s0)
    452a:	4b9c                	lw	a5,16(a5)
    452c:	07ba                	slli	a5,a5,0xe
    452e:	8fd9                	or	a5,a5,a4
        tmp1 |= (CMP_InitStruct->Mode << 11) | (CMP_InitStruct->NSEL << 12)
    4530:	fec42703          	lw	a4,-20(s0)
    4534:	8fd9                	or	a5,a5,a4
    4536:	fef42623          	sw	a5,-20(s0)
    }

    CTLR2_tmp = tmp1;
    453a:	fec42703          	lw	a4,-20(s0)
    453e:	82e1a223          	sw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
    OPA->CTLR2 = tmp1;
    4542:	400267b7          	lui	a5,0x40026
    4546:	fec42703          	lw	a4,-20(s0)
    454a:	c798                	sw	a4,8(a5)
}
    454c:	0001                	nop
    454e:	5432                	lw	s0,44(sp)
    4550:	6145                	addi	sp,sp,48
    4552:	8082                	ret

00004554 <OPA_CMP_StructInit>:
 * @param   CMP_StructInit - pointer to a OPA_CMP_StructInit structure
 *
 * @return  none
 */
void OPA_CMP_StructInit(CMP_InitTypeDef *CMP_InitStruct)
{
    4554:	1101                	addi	sp,sp,-32
    4556:	ce22                	sw	s0,28(sp)
    4558:	1000                	addi	s0,sp,32
    455a:	fea42623          	sw	a0,-20(s0)
    CMP_InitStruct->CMP_NUM = CMP1;
    455e:	fec42783          	lw	a5,-20(s0)
    4562:	0007a023          	sw	zero,0(a5) # 40026000 <_eusrstack+0x20022000>
    CMP_InitStruct->Mode = OUT_IO_TIM2;
    4566:	fec42783          	lw	a5,-20(s0)
    456a:	0007a223          	sw	zero,4(a5)
    CMP_InitStruct->NSEL = CMP_CHN0;
    456e:	fec42783          	lw	a5,-20(s0)
    4572:	0007a423          	sw	zero,8(a5)
    CMP_InitStruct->PSEL = CMP_CHP1;
    4576:	fec42783          	lw	a5,-20(s0)
    457a:	0007a623          	sw	zero,12(a5)
    CMP_InitStruct->HYEN = CMP_HYEN1;
    457e:	fec42783          	lw	a5,-20(s0)
    4582:	0007a823          	sw	zero,16(a5)
}
    4586:	0001                	nop
    4588:	4472                	lw	s0,28(sp)
    458a:	6105                	addi	sp,sp,32
    458c:	8082                	ret

0000458e <OPA_CMP_Cmd>:
 *            NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void OPA_CMP_Cmd(CMP_Num_TypeDef CMP_NUM, FunctionalState NewState)
{
    458e:	1101                	addi	sp,sp,-32
    4590:	ce22                	sw	s0,28(sp)
    4592:	1000                	addi	s0,sp,32
    4594:	fea42623          	sw	a0,-20(s0)
    4598:	feb42423          	sw	a1,-24(s0)
    if(NewState == ENABLE)
    459c:	fe842703          	lw	a4,-24(s0)
    45a0:	4785                	li	a5,1
    45a2:	02f71163          	bne	a4,a5,45c4 <OPA_CMP_Cmd+0x36>
    {
        CTLR2_tmp |= (uint32_t)(1 << (CMP_NUM*5));
    45a6:	fec42703          	lw	a4,-20(s0)
    45aa:	87ba                	mv	a5,a4
    45ac:	078a                	slli	a5,a5,0x2
    45ae:	97ba                	add	a5,a5,a4
    45b0:	4705                	li	a4,1
    45b2:	00f717b3          	sll	a5,a4,a5
    45b6:	873e                	mv	a4,a5
    45b8:	8241a783          	lw	a5,-2012(gp) # 20000044 <CTLR2_tmp>
    45bc:	8f5d                	or	a4,a4,a5
    45be:	82e1a223          	sw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
    45c2:	a005                	j	45e2 <OPA_CMP_Cmd+0x54>
    }
    else
    {
        CTLR2_tmp &= ~(uint32_t)(1 << (CMP_NUM*5));
    45c4:	fec42703          	lw	a4,-20(s0)
    45c8:	87ba                	mv	a5,a4
    45ca:	078a                	slli	a5,a5,0x2
    45cc:	97ba                	add	a5,a5,a4
    45ce:	4705                	li	a4,1
    45d0:	00f717b3          	sll	a5,a4,a5
    45d4:	fff7c713          	not	a4,a5
    45d8:	8241a783          	lw	a5,-2012(gp) # 20000044 <CTLR2_tmp>
    45dc:	8f7d                	and	a4,a4,a5
    45de:	82e1a223          	sw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
    }

    OPA->CTLR2 = CTLR2_tmp;
    45e2:	400267b7          	lui	a5,0x40026
    45e6:	8241a703          	lw	a4,-2012(gp) # 20000044 <CTLR2_tmp>
    45ea:	c798                	sw	a4,8(a5)
}
    45ec:	0001                	nop
    45ee:	4472                	lw	s0,28(sp)
    45f0:	6105                	addi	sp,sp,32
    45f2:	8082                	ret

000045f4 <OPA_GetFlagStatus>:
 *            OPA_FLAG_OUT_CNT - OPA out flag rising edge of sampling data
 *
 * @return  FlagStatus: SET or RESET.
 */
FlagStatus OPA_GetFlagStatus(uint16_t OPA_FLAG)
{
    45f4:	7179                	addi	sp,sp,-48
    45f6:	d622                	sw	s0,44(sp)
    45f8:	1800                	addi	s0,sp,48
    45fa:	87aa                	mv	a5,a0
    45fc:	fcf41f23          	sh	a5,-34(s0)
    FlagStatus bitstatus = RESET;
    4600:	fe042623          	sw	zero,-20(s0)

    if((OPA->CFGR1 & OPA_FLAG) != (uint16_t)RESET)
    4604:	400267b7          	lui	a5,0x40026
    4608:	0007d783          	lhu	a5,0(a5) # 40026000 <_eusrstack+0x20022000>
    460c:	01079713          	slli	a4,a5,0x10
    4610:	8341                	srli	a4,a4,0x10
    4612:	fde45783          	lhu	a5,-34(s0)
    4616:	8ff9                	and	a5,a5,a4
    4618:	07c2                	slli	a5,a5,0x10
    461a:	83c1                	srli	a5,a5,0x10
    461c:	c789                	beqz	a5,4626 <OPA_GetFlagStatus+0x32>
    {
        bitstatus = SET;
    461e:	4785                	li	a5,1
    4620:	fef42623          	sw	a5,-20(s0)
    4624:	a019                	j	462a <OPA_GetFlagStatus+0x36>
    }
    else
    {
        bitstatus = RESET;
    4626:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    462a:	fec42783          	lw	a5,-20(s0)
}
    462e:	853e                	mv	a0,a5
    4630:	5432                	lw	s0,44(sp)
    4632:	6145                	addi	sp,sp,48
    4634:	8082                	ret

00004636 <OPA_ClearFlag>:
 *            OPA_FLAG_OUT_OPA2 - OPA2 out flag
 *            OPA_FLAG_OUT_CNT - OPA out flag rising edge of sampling data
 * @return  none
 */
void OPA_ClearFlag(uint16_t OPA_FLAG)
{
    4636:	1101                	addi	sp,sp,-32
    4638:	ce22                	sw	s0,28(sp)
    463a:	1000                	addi	s0,sp,32
    463c:	87aa                	mv	a5,a0
    463e:	fef41723          	sh	a5,-18(s0)
    OPA->CFGR1 &= (uint16_t)~OPA_FLAG;
    4642:	400267b7          	lui	a5,0x40026
    4646:	0007d783          	lhu	a5,0(a5) # 40026000 <_eusrstack+0x20022000>
    464a:	01079693          	slli	a3,a5,0x10
    464e:	82c1                	srli	a3,a3,0x10
    4650:	fee45783          	lhu	a5,-18(s0)
    4654:	fff7c793          	not	a5,a5
    4658:	01079713          	slli	a4,a5,0x10
    465c:	8341                	srli	a4,a4,0x10
    465e:	400267b7          	lui	a5,0x40026
    4662:	8f75                	and	a4,a4,a3
    4664:	0742                	slli	a4,a4,0x10
    4666:	8341                	srli	a4,a4,0x10
    4668:	00e79023          	sh	a4,0(a5) # 40026000 <_eusrstack+0x20022000>
}
    466c:	0001                	nop
    466e:	4472                	lw	s0,28(sp)
    4670:	6105                	addi	sp,sp,32
    4672:	8082                	ret

00004674 <PWR_DeInit>:
 *        reset values.
 *
 * @return  none
 */
void PWR_DeInit(void)
{
    4674:	1141                	addi	sp,sp,-16
    4676:	c606                	sw	ra,12(sp)
    4678:	c422                	sw	s0,8(sp)
    467a:	0800                	addi	s0,sp,16
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, ENABLE);
    467c:	4585                	li	a1,1
    467e:	10000537          	lui	a0,0x10000
    4682:	23b9                	jal	4bd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_PWR, DISABLE);
    4684:	4581                	li	a1,0
    4686:	10000537          	lui	a0,0x10000
    468a:	2399                	jal	4bd0 <RCC_APB1PeriphResetCmd>
}
    468c:	0001                	nop
    468e:	40b2                	lw	ra,12(sp)
    4690:	4422                	lw	s0,8(sp)
    4692:	0141                	addi	sp,sp,16
    4694:	8082                	ret

00004696 <PWR_PVDLevelConfig>:
 *            PWR_PVDLevel_4V0 - PVD detection level set to 4.0V
 *
 * @return  none
 */
void PWR_PVDLevelConfig(uint32_t PWR_PVDLevel)
{
    4696:	7179                	addi	sp,sp,-48
    4698:	d622                	sw	s0,44(sp)
    469a:	1800                	addi	s0,sp,48
    469c:	fca42e23          	sw	a0,-36(s0)
    uint32_t tmpreg = 0;
    46a0:	fe042623          	sw	zero,-20(s0)
    tmpreg = PWR->CTLR;
    46a4:	400077b7          	lui	a5,0x40007
    46a8:	439c                	lw	a5,0(a5)
    46aa:	fef42623          	sw	a5,-20(s0)
    tmpreg &= CTLR_PLS_MASK;
    46ae:	fec42783          	lw	a5,-20(s0)
    46b2:	f9f7f793          	andi	a5,a5,-97
    46b6:	fef42623          	sw	a5,-20(s0)
    tmpreg |= PWR_PVDLevel;
    46ba:	fec42703          	lw	a4,-20(s0)
    46be:	fdc42783          	lw	a5,-36(s0)
    46c2:	8fd9                	or	a5,a5,a4
    46c4:	fef42623          	sw	a5,-20(s0)
    PWR->CTLR = tmpreg;
    46c8:	400077b7          	lui	a5,0x40007
    46cc:	fec42703          	lw	a4,-20(s0)
    46d0:	c398                	sw	a4,0(a5)
}
    46d2:	0001                	nop
    46d4:	5432                	lw	s0,44(sp)
    46d6:	6145                	addi	sp,sp,48
    46d8:	8082                	ret

000046da <PWR_EnterSTOPMode>:
 *            PWR_STOPEntry_WFE - enter STOP mode with WFE instruction
 *
 * @return  none
 */
void PWR_EnterSTOPMode(uint8_t PWR_STOPEntry)
{
    46da:	7179                	addi	sp,sp,-48
    46dc:	d622                	sw	s0,44(sp)
    46de:	1800                	addi	s0,sp,48
    46e0:	87aa                	mv	a5,a0
    46e2:	fcf40fa3          	sb	a5,-33(s0)
    uint32_t tmpreg = 0;
    46e6:	fe042623          	sw	zero,-20(s0)
    tmpreg = PWR->CTLR;
    46ea:	400077b7          	lui	a5,0x40007
    46ee:	439c                	lw	a5,0(a5)
    46f0:	fef42623          	sw	a5,-20(s0)
    tmpreg &= CTLR_DS_MASK;
    46f4:	fec42783          	lw	a5,-20(s0)
    46f8:	9bf5                	andi	a5,a5,-3
    46fa:	fef42623          	sw	a5,-20(s0)
    PWR->CTLR = tmpreg;
    46fe:	400077b7          	lui	a5,0x40007
    4702:	fec42703          	lw	a4,-20(s0)
    4706:	c398                	sw	a4,0(a5)

    NVIC->SCTLR |= (1 << 2);
    4708:	e000e737          	lui	a4,0xe000e
    470c:	6785                	lui	a5,0x1
    470e:	97ba                	add	a5,a5,a4
    4710:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    4714:	e000e6b7          	lui	a3,0xe000e
    4718:	0047e713          	ori	a4,a5,4
    471c:	6785                	lui	a5,0x1
    471e:	97b6                	add	a5,a5,a3
    4720:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>

    if(PWR_STOPEntry == PWR_STOPEntry_WFI)
    4724:	fdf44703          	lbu	a4,-33(s0)
    4728:	4785                	li	a5,1
    472a:	02f71363          	bne	a4,a5,4750 <PWR_EnterSTOPMode+0x76>
 *
 * @return  none
 */
__attribute__( ( always_inline ) ) RV_STATIC_INLINE void __WFI(void)
{
  NVIC->SCTLR &= ~(1<<3);	// wfi
    472e:	e000e737          	lui	a4,0xe000e
    4732:	6785                	lui	a5,0x1
    4734:	97ba                	add	a5,a5,a4
    4736:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    473a:	e000e6b7          	lui	a3,0xe000e
    473e:	ff77f713          	andi	a4,a5,-9
    4742:	6785                	lui	a5,0x1
    4744:	97b6                	add	a5,a5,a3
    4746:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
  __asm volatile ("wfi");
    474a:	10500073          	wfi
    474e:	a851                	j	47e2 <PWR_EnterSTOPMode+0x108>
 */
__attribute__( ( always_inline ) ) RV_STATIC_INLINE void _SEV(void)
{
  uint32_t t;

  t = NVIC->SCTLR;
    4750:	e000e737          	lui	a4,0xe000e
    4754:	6785                	lui	a5,0x1
    4756:	97ba                	add	a5,a5,a4
    4758:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    475c:	fef42423          	sw	a5,-24(s0)
  NVIC->SCTLR |= (1<<3)|(1<<5);
    4760:	e000e737          	lui	a4,0xe000e
    4764:	6785                	lui	a5,0x1
    4766:	97ba                	add	a5,a5,a4
    4768:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    476c:	e000e6b7          	lui	a3,0xe000e
    4770:	0287e713          	ori	a4,a5,40
    4774:	6785                	lui	a5,0x1
    4776:	97b6                	add	a5,a5,a3
    4778:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
  NVIC->SCTLR = (NVIC->SCTLR & ~(1<<5)) | ( t & (1<<5));
    477c:	e000e737          	lui	a4,0xe000e
    4780:	6785                	lui	a5,0x1
    4782:	97ba                	add	a5,a5,a4
    4784:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    4788:	fdf7f713          	andi	a4,a5,-33
    478c:	fe842783          	lw	a5,-24(s0)
    4790:	0207f793          	andi	a5,a5,32
    4794:	e000e6b7          	lui	a3,0xe000e
    4798:	8f5d                	or	a4,a4,a5
    479a:	6785                	lui	a5,0x1
    479c:	97b6                	add	a5,a5,a3
    479e:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
 *
 * @return  none
 */
__attribute__( ( always_inline ) ) RV_STATIC_INLINE void _WFE(void)
{
  NVIC->SCTLR |= (1<<3);
    47a2:	e000e737          	lui	a4,0xe000e
    47a6:	6785                	lui	a5,0x1
    47a8:	97ba                	add	a5,a5,a4
    47aa:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    47ae:	e000e6b7          	lui	a3,0xe000e
    47b2:	0087e713          	ori	a4,a5,8
    47b6:	6785                	lui	a5,0x1
    47b8:	97b6                	add	a5,a5,a3
    47ba:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
  __asm volatile ("wfi");
    47be:	10500073          	wfi
  NVIC->SCTLR |= (1<<3);
    47c2:	e000e737          	lui	a4,0xe000e
    47c6:	6785                	lui	a5,0x1
    47c8:	97ba                	add	a5,a5,a4
    47ca:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    47ce:	e000e6b7          	lui	a3,0xe000e
    47d2:	0087e713          	ori	a4,a5,8
    47d6:	6785                	lui	a5,0x1
    47d8:	97b6                	add	a5,a5,a3
    47da:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
  __asm volatile ("wfi");
    47de:	10500073          	wfi
    else
    {
        __WFE();
    }

    NVIC->SCTLR &= ~(1 << 2);
    47e2:	e000e737          	lui	a4,0xe000e
    47e6:	6785                	lui	a5,0x1
    47e8:	97ba                	add	a5,a5,a4
    47ea:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    47ee:	e000e6b7          	lui	a3,0xe000e
    47f2:	ffb7f713          	andi	a4,a5,-5
    47f6:	6785                	lui	a5,0x1
    47f8:	97b6                	add	a5,a5,a3
    47fa:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
}
    47fe:	0001                	nop
    4800:	5432                	lw	s0,44(sp)
    4802:	6145                	addi	sp,sp,48
    4804:	8082                	ret

00004806 <PWR_EnterSTANDBYMode>:
 * @brief   Enters STANDBY mode.
 *
 * @return  none
 */
void PWR_EnterSTANDBYMode(void)
{
    4806:	1141                	addi	sp,sp,-16
    4808:	c622                	sw	s0,12(sp)
    480a:	0800                	addi	s0,sp,16
    PWR->CTLR |= PWR_CTLR_PDDS;
    480c:	400077b7          	lui	a5,0x40007
    4810:	4398                	lw	a4,0(a5)
    4812:	400077b7          	lui	a5,0x40007
    4816:	00276713          	ori	a4,a4,2
    481a:	c398                	sw	a4,0(a5)
    NVIC->SCTLR |= (1 << 2);
    481c:	e000e737          	lui	a4,0xe000e
    4820:	6785                	lui	a5,0x1
    4822:	97ba                	add	a5,a5,a4
    4824:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    4828:	e000e6b7          	lui	a3,0xe000e
    482c:	0047e713          	ori	a4,a5,4
    4830:	6785                	lui	a5,0x1
    4832:	97b6                	add	a5,a5,a3
    4834:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
  NVIC->SCTLR &= ~(1<<3);	// wfi
    4838:	e000e737          	lui	a4,0xe000e
    483c:	6785                	lui	a5,0x1
    483e:	97ba                	add	a5,a5,a4
    4840:	d107a783          	lw	a5,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
    4844:	e000e6b7          	lui	a3,0xe000e
    4848:	ff77f713          	andi	a4,a5,-9
    484c:	6785                	lui	a5,0x1
    484e:	97b6                	add	a5,a5,a3
    4850:	d0e7a823          	sw	a4,-752(a5) # d10 <ADC_InjectedChannelConfig+0x14c>
  __asm volatile ("wfi");
    4854:	10500073          	wfi

    __WFI();
}
    4858:	0001                	nop
    485a:	4432                	lw	s0,12(sp)
    485c:	0141                	addi	sp,sp,16
    485e:	8082                	ret

00004860 <PWR_GetFlagStatus>:
 *            PWR_FLAG_FLASH - Flash low power flag
 *
 * @return  The new state of PWR_FLAG (SET or RESET).
 */
FlagStatus PWR_GetFlagStatus(uint32_t PWR_FLAG)
{
    4860:	7179                	addi	sp,sp,-48
    4862:	d622                	sw	s0,44(sp)
    4864:	1800                	addi	s0,sp,48
    4866:	fca42e23          	sw	a0,-36(s0)
    FlagStatus bitstatus = RESET;
    486a:	fe042623          	sw	zero,-20(s0)

    if((PWR->CSR & PWR_FLAG) != (uint32_t)RESET)
    486e:	400077b7          	lui	a5,0x40007
    4872:	43d8                	lw	a4,4(a5)
    4874:	fdc42783          	lw	a5,-36(s0)
    4878:	8ff9                	and	a5,a5,a4
    487a:	c789                	beqz	a5,4884 <PWR_GetFlagStatus+0x24>
    {
        bitstatus = SET;
    487c:	4785                	li	a5,1
    487e:	fef42623          	sw	a5,-20(s0)
    4882:	a019                	j	4888 <PWR_GetFlagStatus+0x28>
    }
    else
    {
        bitstatus = RESET;
    4884:	fe042623          	sw	zero,-20(s0)
    }
    return bitstatus;
    4888:	fec42783          	lw	a5,-20(s0)
}
    488c:	853e                	mv	a0,a5
    488e:	5432                	lw	s0,44(sp)
    4890:	6145                	addi	sp,sp,48
    4892:	8082                	ret

00004894 <PWR_VDD_SupplyVoltage>:
 * @return  PWR_VDD - VDD Supply Voltage.
 *            PWR_VDD_5V - VDD = 5V
 *            PWR_VDD_3V3 - VDD = 3.3V
 */
PWR_VDD PWR_VDD_SupplyVoltage(void)
{
    4894:	1101                	addi	sp,sp,-32
    4896:	ce22                	sw	s0,28(sp)
    4898:	1000                	addi	s0,sp,32
    PWR_VDD VDD_Voltage = PWR_VDD_5V;
    489a:	fe042623          	sw	zero,-20(s0)

    if((*((uint32_t*)0x08000014)) == 0x0057FFFF)
    489e:	080007b7          	lui	a5,0x8000
    48a2:	07d1                	addi	a5,a5,20
    48a4:	4398                	lw	a4,0(a5)
    48a6:	005807b7          	lui	a5,0x580
    48aa:	17fd                	addi	a5,a5,-1
    48ac:	00f71563          	bne	a4,a5,48b6 <PWR_VDD_SupplyVoltage+0x22>
    {
        VDD_Voltage = PWR_VDD_3V3;
    48b0:	4785                	li	a5,1
    48b2:	fef42623          	sw	a5,-20(s0)
    }

    return VDD_Voltage;
    48b6:	fec42783          	lw	a5,-20(s0)
}
    48ba:	853e                	mv	a0,a5
    48bc:	4472                	lw	s0,28(sp)
    48be:	6105                	addi	sp,sp,32
    48c0:	8082                	ret

000048c2 <RCC_DeInit>:
 *          Note-
 *          HSE can not be stopped if it is used directly or through the PLL as system clock.
 * @return  none
 */
void RCC_DeInit(void)
{
    48c2:	1141                	addi	sp,sp,-16
    48c4:	c622                	sw	s0,12(sp)
    48c6:	0800                	addi	s0,sp,16
    RCC->CTLR |= (uint32_t)0x00000001;
    48c8:	400217b7          	lui	a5,0x40021
    48cc:	4398                	lw	a4,0(a5)
    48ce:	400217b7          	lui	a5,0x40021
    48d2:	00176713          	ori	a4,a4,1
    48d6:	c398                	sw	a4,0(a5)
    RCC->CFGR0 |= (uint32_t)0x00000050;
    48d8:	400217b7          	lui	a5,0x40021
    48dc:	43d8                	lw	a4,4(a5)
    48de:	400217b7          	lui	a5,0x40021
    48e2:	05076713          	ori	a4,a4,80
    48e6:	c3d8                	sw	a4,4(a5)
    RCC->CFGR0 &= (uint32_t)0xF8FFFF5F;
    48e8:	400217b7          	lui	a5,0x40021
    48ec:	43d4                	lw	a3,4(a5)
    48ee:	400217b7          	lui	a5,0x40021
    48f2:	f9000737          	lui	a4,0xf9000
    48f6:	f5f70713          	addi	a4,a4,-161 # f8ffff5f <_eusrstack+0xd8ffbf5f>
    48fa:	8f75                	and	a4,a4,a3
    48fc:	c3d8                	sw	a4,4(a5)
}
    48fe:	0001                	nop
    4900:	4432                	lw	s0,12(sp)
    4902:	0141                	addi	sp,sp,16
    4904:	8082                	ret

00004906 <RCC_AdjustHSICalibrationValue>:
 *                    This parameter must be a number between 0 and 0x1F.
 *
 * @return  none
 */
void RCC_AdjustHSICalibrationValue(uint8_t HSICalibrationValue)
{
    4906:	7179                	addi	sp,sp,-48
    4908:	d622                	sw	s0,44(sp)
    490a:	1800                	addi	s0,sp,48
    490c:	87aa                	mv	a5,a0
    490e:	fcf40fa3          	sb	a5,-33(s0)
  uint32_t tmpreg = 0;
    4912:	fe042623          	sw	zero,-20(s0)

  tmpreg = RCC->CTLR;
    4916:	400217b7          	lui	a5,0x40021
    491a:	439c                	lw	a5,0(a5)
    491c:	fef42623          	sw	a5,-20(s0)
  tmpreg &= CTLR_HSITRIM_Mask;
    4920:	fec42783          	lw	a5,-20(s0)
    4924:	f077f793          	andi	a5,a5,-249
    4928:	fef42623          	sw	a5,-20(s0)
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
    492c:	fdf44783          	lbu	a5,-33(s0)
    4930:	078e                	slli	a5,a5,0x3
    4932:	fec42703          	lw	a4,-20(s0)
    4936:	8fd9                	or	a5,a5,a4
    4938:	fef42623          	sw	a5,-20(s0)
  RCC->CTLR = tmpreg;
    493c:	400217b7          	lui	a5,0x40021
    4940:	fec42703          	lw	a4,-20(s0)
    4944:	c398                	sw	a4,0(a5)
}
    4946:	0001                	nop
    4948:	5432                	lw	s0,44(sp)
    494a:	6145                	addi	sp,sp,48
    494c:	8082                	ret

0000494e <RCC_HSICmd>:
 * @param   NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void RCC_HSICmd(FunctionalState NewState)
{
    494e:	1101                	addi	sp,sp,-32
    4950:	ce22                	sw	s0,28(sp)
    4952:	1000                	addi	s0,sp,32
    4954:	fea42623          	sw	a0,-20(s0)
	if(NewState)
    4958:	fec42783          	lw	a5,-20(s0)
    495c:	cb91                	beqz	a5,4970 <RCC_HSICmd+0x22>
	{
		RCC->CTLR |= (1<<0);
    495e:	400217b7          	lui	a5,0x40021
    4962:	4398                	lw	a4,0(a5)
    4964:	400217b7          	lui	a5,0x40021
    4968:	00176713          	ori	a4,a4,1
    496c:	c398                	sw	a4,0(a5)
	}
	else{
		RCC->CTLR &= ~(1<<0);		
	}
}
    496e:	a801                	j	497e <RCC_HSICmd+0x30>
		RCC->CTLR &= ~(1<<0);		
    4970:	400217b7          	lui	a5,0x40021
    4974:	4398                	lw	a4,0(a5)
    4976:	400217b7          	lui	a5,0x40021
    497a:	9b79                	andi	a4,a4,-2
    497c:	c398                	sw	a4,0(a5)
}
    497e:	0001                	nop
    4980:	4472                	lw	s0,28(sp)
    4982:	6105                	addi	sp,sp,32
    4984:	8082                	ret

00004986 <RCC_HCLKConfig>:
 *            RCC_SYSCLK_Div256 - AHB clock = SYSCLK/256.
 *
 * @return  none
 */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
    4986:	7179                	addi	sp,sp,-48
    4988:	d622                	sw	s0,44(sp)
    498a:	1800                	addi	s0,sp,48
    498c:	fca42e23          	sw	a0,-36(s0)
  uint32_t tmpreg = 0;
    4990:	fe042623          	sw	zero,-20(s0)

  tmpreg = RCC->CFGR0;
    4994:	400217b7          	lui	a5,0x40021
    4998:	43dc                	lw	a5,4(a5)
    499a:	fef42623          	sw	a5,-20(s0)
  tmpreg &= CFGR0_HPRE_Reset_Mask;
    499e:	fec42783          	lw	a5,-20(s0)
    49a2:	f0f7f793          	andi	a5,a5,-241
    49a6:	fef42623          	sw	a5,-20(s0)
  tmpreg |= RCC_SYSCLK;
    49aa:	fec42703          	lw	a4,-20(s0)
    49ae:	fdc42783          	lw	a5,-36(s0)
    49b2:	8fd9                	or	a5,a5,a4
    49b4:	fef42623          	sw	a5,-20(s0)
  RCC->CFGR0 = tmpreg;
    49b8:	400217b7          	lui	a5,0x40021
    49bc:	fec42703          	lw	a4,-20(s0)
    49c0:	c3d8                	sw	a4,4(a5)
}
    49c2:	0001                	nop
    49c4:	5432                	lw	s0,44(sp)
    49c6:	6145                	addi	sp,sp,48
    49c8:	8082                	ret

000049ca <RCC_GetClocksFreq>:
 *        the clocks frequencies.
 *
 * @return  none
 */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
    49ca:	7179                	addi	sp,sp,-48
    49cc:	d622                	sw	s0,44(sp)
    49ce:	1800                	addi	s0,sp,48
    49d0:	fca42e23          	sw	a0,-36(s0)
    uint32_t tmp = 0, presc = 0;
    49d4:	fe042623          	sw	zero,-20(s0)
    49d8:	fe042423          	sw	zero,-24(s0)

    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
    49dc:	fdc42783          	lw	a5,-36(s0)
    49e0:	02dc7737          	lui	a4,0x2dc7
    49e4:	c0070713          	addi	a4,a4,-1024 # 2dc6c00 <_data_lma+0x2db79f4>
    49e8:	c398                	sw	a4,0(a5)

    tmp = RCC->CFGR0 & CFGR0_HPRE_Set_Mask;
    49ea:	400217b7          	lui	a5,0x40021
    49ee:	43dc                	lw	a5,4(a5)
    49f0:	0f07f793          	andi	a5,a5,240
    49f4:	fef42623          	sw	a5,-20(s0)
    tmp = tmp >> 4;
    49f8:	fec42783          	lw	a5,-20(s0)
    49fc:	8391                	srli	a5,a5,0x4
    49fe:	fef42623          	sw	a5,-20(s0)
    presc = APBAHBPrescTable[tmp];
    4a02:	200007b7          	lui	a5,0x20000
    4a06:	01078713          	addi	a4,a5,16 # 20000010 <APBAHBPrescTable>
    4a0a:	fec42783          	lw	a5,-20(s0)
    4a0e:	97ba                	add	a5,a5,a4
    4a10:	0007c783          	lbu	a5,0(a5)
    4a14:	0ff7f793          	andi	a5,a5,255
    4a18:	fef42423          	sw	a5,-24(s0)

    if(((RCC->CFGR0 & CFGR0_HPRE_Set_Mask) >> 4) < 8)
    4a1c:	400217b7          	lui	a5,0x40021
    4a20:	43dc                	lw	a5,4(a5)
    4a22:	0807f793          	andi	a5,a5,128
    4a26:	ef81                	bnez	a5,4a3e <RCC_GetClocksFreq+0x74>
    {
        RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency / presc;
    4a28:	fdc42783          	lw	a5,-36(s0)
    4a2c:	4398                	lw	a4,0(a5)
    4a2e:	fe842783          	lw	a5,-24(s0)
    4a32:	02f75733          	divu	a4,a4,a5
    4a36:	fdc42783          	lw	a5,-36(s0)
    4a3a:	c3d8                	sw	a4,4(a5)
    4a3c:	a819                	j	4a52 <RCC_GetClocksFreq+0x88>
    }
    else
    {
        RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
    4a3e:	fdc42783          	lw	a5,-36(s0)
    4a42:	4398                	lw	a4,0(a5)
    4a44:	fe842783          	lw	a5,-24(s0)
    4a48:	00f75733          	srl	a4,a4,a5
    4a4c:	fdc42783          	lw	a5,-36(s0)
    4a50:	c3d8                	sw	a4,4(a5)
    }

    RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency;
    4a52:	fdc42783          	lw	a5,-36(s0)
    4a56:	43d8                	lw	a4,4(a5)
    4a58:	fdc42783          	lw	a5,-36(s0)
    4a5c:	c798                	sw	a4,8(a5)
    RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency;
    4a5e:	fdc42783          	lw	a5,-36(s0)
    4a62:	43d8                	lw	a4,4(a5)
    4a64:	fdc42783          	lw	a5,-36(s0)
    4a68:	c7d8                	sw	a4,12(a5)
}
    4a6a:	0001                	nop
    4a6c:	5432                	lw	s0,44(sp)
    4a6e:	6145                	addi	sp,sp,48
    4a70:	8082                	ret

00004a72 <RCC_AHBPeriphClockCmd>:
 *          NewState: ENABLE or DISABLE.
 *
 * @return  none
 */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    4a72:	1101                	addi	sp,sp,-32
    4a74:	ce22                	sw	s0,28(sp)
    4a76:	1000                	addi	s0,sp,32
    4a78:	fea42623          	sw	a0,-20(s0)
    4a7c:	feb42423          	sw	a1,-24(s0)
  if (NewState != DISABLE)
    4a80:	fe842783          	lw	a5,-24(s0)
    4a84:	cb99                	beqz	a5,4a9a <RCC_AHBPeriphClockCmd+0x28>
  {
    RCC->AHBPCENR |= RCC_AHBPeriph;
    4a86:	400217b7          	lui	a5,0x40021
    4a8a:	4bd4                	lw	a3,20(a5)
    4a8c:	400217b7          	lui	a5,0x40021
    4a90:	fec42703          	lw	a4,-20(s0)
    4a94:	8f55                	or	a4,a4,a3
    4a96:	cbd8                	sw	a4,20(a5)
  }
  else
  {
    RCC->AHBPCENR &= ~RCC_AHBPeriph;
  }
}
    4a98:	a821                	j	4ab0 <RCC_AHBPeriphClockCmd+0x3e>
    RCC->AHBPCENR &= ~RCC_AHBPeriph;
    4a9a:	400217b7          	lui	a5,0x40021
    4a9e:	4bd4                	lw	a3,20(a5)
    4aa0:	fec42783          	lw	a5,-20(s0)
    4aa4:	fff7c713          	not	a4,a5
    4aa8:	400217b7          	lui	a5,0x40021
    4aac:	8f75                	and	a4,a4,a3
    4aae:	cbd8                	sw	a4,20(a5)
}
    4ab0:	0001                	nop
    4ab2:	4472                	lw	s0,28(sp)
    4ab4:	6105                	addi	sp,sp,32
    4ab6:	8082                	ret

00004ab8 <RCC_APB2PeriphClockCmd>:
 *          NewState - ENABLE or DISABLE
 *
 * @return  none
 */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    4ab8:	1101                	addi	sp,sp,-32
    4aba:	ce22                	sw	s0,28(sp)
    4abc:	1000                	addi	s0,sp,32
    4abe:	fea42623          	sw	a0,-20(s0)
    4ac2:	feb42423          	sw	a1,-24(s0)
  if (NewState != DISABLE)
    4ac6:	fe842783          	lw	a5,-24(s0)
    4aca:	cb99                	beqz	a5,4ae0 <RCC_APB2PeriphClockCmd+0x28>
  {
    RCC->APB2PCENR |= RCC_APB2Periph;
    4acc:	400217b7          	lui	a5,0x40021
    4ad0:	4f94                	lw	a3,24(a5)
    4ad2:	400217b7          	lui	a5,0x40021
    4ad6:	fec42703          	lw	a4,-20(s0)
    4ada:	8f55                	or	a4,a4,a3
    4adc:	cf98                	sw	a4,24(a5)
  }
  else
  {
    RCC->APB2PCENR &= ~RCC_APB2Periph;
  }
}
    4ade:	a821                	j	4af6 <RCC_APB2PeriphClockCmd+0x3e>
    RCC->APB2PCENR &= ~RCC_APB2Periph;
    4ae0:	400217b7          	lui	a5,0x40021
    4ae4:	4f94                	lw	a3,24(a5)
    4ae6:	fec42783          	lw	a5,-20(s0)
    4aea:	fff7c713          	not	a4,a5
    4aee:	400217b7          	lui	a5,0x40021
    4af2:	8f75                	and	a4,a4,a3
    4af4:	cf98                	sw	a4,24(a5)
}
    4af6:	0001                	nop
    4af8:	4472                	lw	s0,28(sp)
    4afa:	6105                	addi	sp,sp,32
    4afc:	8082                	ret

00004afe <RCC_APB1PeriphClockCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    4afe:	1101                	addi	sp,sp,-32
    4b00:	ce22                	sw	s0,28(sp)
    4b02:	1000                	addi	s0,sp,32
    4b04:	fea42623          	sw	a0,-20(s0)
    4b08:	feb42423          	sw	a1,-24(s0)
  if (NewState != DISABLE)
    4b0c:	fe842783          	lw	a5,-24(s0)
    4b10:	cb99                	beqz	a5,4b26 <RCC_APB1PeriphClockCmd+0x28>
  {
    RCC->APB1PCENR |= RCC_APB1Periph;
    4b12:	400217b7          	lui	a5,0x40021
    4b16:	4fd4                	lw	a3,28(a5)
    4b18:	400217b7          	lui	a5,0x40021
    4b1c:	fec42703          	lw	a4,-20(s0)
    4b20:	8f55                	or	a4,a4,a3
    4b22:	cfd8                	sw	a4,28(a5)
  }
  else
  {
    RCC->APB1PCENR &= ~RCC_APB1Periph;
  }
}
    4b24:	a821                	j	4b3c <RCC_APB1PeriphClockCmd+0x3e>
    RCC->APB1PCENR &= ~RCC_APB1Periph;
    4b26:	400217b7          	lui	a5,0x40021
    4b2a:	4fd4                	lw	a3,28(a5)
    4b2c:	fec42783          	lw	a5,-20(s0)
    4b30:	fff7c713          	not	a4,a5
    4b34:	400217b7          	lui	a5,0x40021
    4b38:	8f75                	and	a4,a4,a3
    4b3a:	cfd8                	sw	a4,28(a5)
}
    4b3c:	0001                	nop
    4b3e:	4472                	lw	s0,28(sp)
    4b40:	6105                	addi	sp,sp,32
    4b42:	8082                	ret

00004b44 <RCC_AHBPeriphResetCmd>:
 *          NewState: ENABLE or DISABLE.
 *
 * @return  none
 */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
    4b44:	1101                	addi	sp,sp,-32
    4b46:	ce22                	sw	s0,28(sp)
    4b48:	1000                	addi	s0,sp,32
    4b4a:	fea42623          	sw	a0,-20(s0)
    4b4e:	feb42423          	sw	a1,-24(s0)
  if (NewState != DISABLE)
    4b52:	fe842783          	lw	a5,-24(s0)
    4b56:	cb99                	beqz	a5,4b6c <RCC_AHBPeriphResetCmd+0x28>
  {
    RCC->AHBPCENR |= RCC_AHBPeriph;
    4b58:	400217b7          	lui	a5,0x40021
    4b5c:	4bd4                	lw	a3,20(a5)
    4b5e:	400217b7          	lui	a5,0x40021
    4b62:	fec42703          	lw	a4,-20(s0)
    4b66:	8f55                	or	a4,a4,a3
    4b68:	cbd8                	sw	a4,20(a5)
  }
  else
  {
    RCC->AHBPCENR &= ~RCC_AHBPeriph;
  }
}
    4b6a:	a821                	j	4b82 <RCC_AHBPeriphResetCmd+0x3e>
    RCC->AHBPCENR &= ~RCC_AHBPeriph;
    4b6c:	400217b7          	lui	a5,0x40021
    4b70:	4bd4                	lw	a3,20(a5)
    4b72:	fec42783          	lw	a5,-20(s0)
    4b76:	fff7c713          	not	a4,a5
    4b7a:	400217b7          	lui	a5,0x40021
    4b7e:	8f75                	and	a4,a4,a3
    4b80:	cbd8                	sw	a4,20(a5)
}
    4b82:	0001                	nop
    4b84:	4472                	lw	s0,28(sp)
    4b86:	6105                	addi	sp,sp,32
    4b88:	8082                	ret

00004b8a <RCC_APB2PeriphResetCmd>:
 *          NewState - ENABLE or DISABLE
 *
 * @return  none
 */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
    4b8a:	1101                	addi	sp,sp,-32
    4b8c:	ce22                	sw	s0,28(sp)
    4b8e:	1000                	addi	s0,sp,32
    4b90:	fea42623          	sw	a0,-20(s0)
    4b94:	feb42423          	sw	a1,-24(s0)
  if (NewState != DISABLE)
    4b98:	fe842783          	lw	a5,-24(s0)
    4b9c:	cb99                	beqz	a5,4bb2 <RCC_APB2PeriphResetCmd+0x28>
  {
    RCC->APB2PRSTR |= RCC_APB2Periph;
    4b9e:	400217b7          	lui	a5,0x40021
    4ba2:	47d4                	lw	a3,12(a5)
    4ba4:	400217b7          	lui	a5,0x40021
    4ba8:	fec42703          	lw	a4,-20(s0)
    4bac:	8f55                	or	a4,a4,a3
    4bae:	c7d8                	sw	a4,12(a5)
  }
  else
  {
    RCC->APB2PRSTR &= ~RCC_APB2Periph;
  }
}
    4bb0:	a821                	j	4bc8 <RCC_APB2PeriphResetCmd+0x3e>
    RCC->APB2PRSTR &= ~RCC_APB2Periph;
    4bb2:	400217b7          	lui	a5,0x40021
    4bb6:	47d4                	lw	a3,12(a5)
    4bb8:	fec42783          	lw	a5,-20(s0)
    4bbc:	fff7c713          	not	a4,a5
    4bc0:	400217b7          	lui	a5,0x40021
    4bc4:	8f75                	and	a4,a4,a3
    4bc6:	c7d8                	sw	a4,12(a5)
}
    4bc8:	0001                	nop
    4bca:	4472                	lw	s0,28(sp)
    4bcc:	6105                	addi	sp,sp,32
    4bce:	8082                	ret

00004bd0 <RCC_APB1PeriphResetCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
    4bd0:	1101                	addi	sp,sp,-32
    4bd2:	ce22                	sw	s0,28(sp)
    4bd4:	1000                	addi	s0,sp,32
    4bd6:	fea42623          	sw	a0,-20(s0)
    4bda:	feb42423          	sw	a1,-24(s0)
  if (NewState != DISABLE)
    4bde:	fe842783          	lw	a5,-24(s0)
    4be2:	cb99                	beqz	a5,4bf8 <RCC_APB1PeriphResetCmd+0x28>
  {
    RCC->APB1PRSTR |= RCC_APB1Periph;
    4be4:	400217b7          	lui	a5,0x40021
    4be8:	4b94                	lw	a3,16(a5)
    4bea:	400217b7          	lui	a5,0x40021
    4bee:	fec42703          	lw	a4,-20(s0)
    4bf2:	8f55                	or	a4,a4,a3
    4bf4:	cb98                	sw	a4,16(a5)
  }
  else
  {
    RCC->APB1PRSTR &= ~RCC_APB1Periph;
  }
}
    4bf6:	a821                	j	4c0e <RCC_APB1PeriphResetCmd+0x3e>
    RCC->APB1PRSTR &= ~RCC_APB1Periph;
    4bf8:	400217b7          	lui	a5,0x40021
    4bfc:	4b94                	lw	a3,16(a5)
    4bfe:	fec42783          	lw	a5,-20(s0)
    4c02:	fff7c713          	not	a4,a5
    4c06:	400217b7          	lui	a5,0x40021
    4c0a:	8f75                	and	a4,a4,a3
    4c0c:	cb98                	sw	a4,16(a5)
}
    4c0e:	0001                	nop
    4c10:	4472                	lw	s0,28(sp)
    4c12:	6105                	addi	sp,sp,32
    4c14:	8082                	ret

00004c16 <RCC_MCOConfig>:
 *            RCC_MCO_HSI - HSI oscillator clock selected.
 *
 * @return  none
 */
void RCC_MCOConfig(uint8_t RCC_MCO)
{
    4c16:	1101                	addi	sp,sp,-32
    4c18:	ce22                	sw	s0,28(sp)
    4c1a:	1000                	addi	s0,sp,32
    4c1c:	87aa                	mv	a5,a0
    4c1e:	fef407a3          	sb	a5,-17(s0)
  *(__IO uint8_t *) CFGR0_BYTE4_ADDRESS = RCC_MCO;
    4c22:	400217b7          	lui	a5,0x40021
    4c26:	079d                	addi	a5,a5,7
    4c28:	fef44703          	lbu	a4,-17(s0)
    4c2c:	00e78023          	sb	a4,0(a5) # 40021000 <_eusrstack+0x2001d000>
}
    4c30:	0001                	nop
    4c32:	4472                	lw	s0,28(sp)
    4c34:	6105                	addi	sp,sp,32
    4c36:	8082                	ret

00004c38 <RCC_GetFlagStatus>:
 *            RCC_FLAG_LPWRRST - Low Power reset.
 *
 * @return  FlagStatus - SET or RESET.
 */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
    4c38:	7179                	addi	sp,sp,-48
    4c3a:	d622                	sw	s0,44(sp)
    4c3c:	1800                	addi	s0,sp,48
    4c3e:	87aa                	mv	a5,a0
    4c40:	fcf40fa3          	sb	a5,-33(s0)
  uint32_t tmp = 0;
    4c44:	fe042223          	sw	zero,-28(s0)
  uint32_t statusreg = 0;
    4c48:	fe042623          	sw	zero,-20(s0)
	
  FlagStatus bitstatus = RESET;
    4c4c:	fe042423          	sw	zero,-24(s0)
  tmp = RCC_FLAG >> 5;
    4c50:	fdf44783          	lbu	a5,-33(s0)
    4c54:	8395                	srli	a5,a5,0x5
    4c56:	0ff7f793          	andi	a5,a5,255
    4c5a:	fef42223          	sw	a5,-28(s0)
	
  if (tmp == 1)            
    4c5e:	fe442703          	lw	a4,-28(s0)
    4c62:	4785                	li	a5,1
    4c64:	00f71863          	bne	a4,a5,4c74 <RCC_GetFlagStatus+0x3c>
  {
    statusreg = RCC->CTLR;
    4c68:	400217b7          	lui	a5,0x40021
    4c6c:	439c                	lw	a5,0(a5)
    4c6e:	fef42623          	sw	a5,-20(s0)
    4c72:	a031                	j	4c7e <RCC_GetFlagStatus+0x46>
  }
  else                    
  {
    statusreg = RCC->RSTSCKR;
    4c74:	400217b7          	lui	a5,0x40021
    4c78:	53dc                	lw	a5,36(a5)
    4c7a:	fef42623          	sw	a5,-20(s0)
  }

  tmp = RCC_FLAG & FLAG_Mask;
    4c7e:	fdf44783          	lbu	a5,-33(s0)
    4c82:	8bfd                	andi	a5,a5,31
    4c84:	fef42223          	sw	a5,-28(s0)
	
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
    4c88:	fe442783          	lw	a5,-28(s0)
    4c8c:	fec42703          	lw	a4,-20(s0)
    4c90:	00f757b3          	srl	a5,a4,a5
    4c94:	8b85                	andi	a5,a5,1
    4c96:	c789                	beqz	a5,4ca0 <RCC_GetFlagStatus+0x68>
  {
    bitstatus = SET;
    4c98:	4785                	li	a5,1
    4c9a:	fef42423          	sw	a5,-24(s0)
    4c9e:	a019                	j	4ca4 <RCC_GetFlagStatus+0x6c>
  }
  else
  {
    bitstatus = RESET;
    4ca0:	fe042423          	sw	zero,-24(s0)
  }

  return bitstatus;
    4ca4:	fe842783          	lw	a5,-24(s0)
}
    4ca8:	853e                	mv	a0,a5
    4caa:	5432                	lw	s0,44(sp)
    4cac:	6145                	addi	sp,sp,48
    4cae:	8082                	ret

00004cb0 <RCC_ClearFlag>:
 *          The reset flags are: RCC_FLAG_PINRST, RCC_FLAG_PORRST, RCC_FLAG_SFTRST,
 *          RCC_FLAG_IWDGRST, RCC_FLAG_WWDGRST, RCC_FLAG_LPWRRST
 * @return  none
 */
void RCC_ClearFlag(void)
{
    4cb0:	1141                	addi	sp,sp,-16
    4cb2:	c622                	sw	s0,12(sp)
    4cb4:	0800                	addi	s0,sp,16
  RCC->RSTSCKR |= RSTSCKR_RMVF_Set;
    4cb6:	400217b7          	lui	a5,0x40021
    4cba:	53d4                	lw	a3,36(a5)
    4cbc:	400217b7          	lui	a5,0x40021
    4cc0:	01000737          	lui	a4,0x1000
    4cc4:	8f55                	or	a4,a4,a3
    4cc6:	d3d8                	sw	a4,36(a5)
}
    4cc8:	0001                	nop
    4cca:	4432                	lw	s0,12(sp)
    4ccc:	0141                	addi	sp,sp,16
    4cce:	8082                	ret

00004cd0 <SPI_I2S_DeInit>:
 * @param   SPIx - where x can be 1 to select the SPI peripheral.
 *
 * @return  none
 */
void SPI_I2S_DeInit(SPI_TypeDef *SPIx)
{
    4cd0:	1101                	addi	sp,sp,-32
    4cd2:	ce06                	sw	ra,28(sp)
    4cd4:	cc22                	sw	s0,24(sp)
    4cd6:	1000                	addi	s0,sp,32
    4cd8:	fea42623          	sw	a0,-20(s0)
    if(SPIx == SPI1)
    4cdc:	fec42703          	lw	a4,-20(s0)
    4ce0:	400137b7          	lui	a5,0x40013
    4ce4:	00f71863          	bne	a4,a5,4cf4 <SPI_I2S_DeInit+0x24>
    {
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, ENABLE);
    4ce8:	4585                	li	a1,1
    4cea:	6505                	lui	a0,0x1
    4cec:	3d79                	jal	4b8a <RCC_APB2PeriphResetCmd>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI1, DISABLE);
    4cee:	4581                	li	a1,0
    4cf0:	6505                	lui	a0,0x1
    4cf2:	3d61                	jal	4b8a <RCC_APB2PeriphResetCmd>
    }
}
    4cf4:	0001                	nop
    4cf6:	40f2                	lw	ra,28(sp)
    4cf8:	4462                	lw	s0,24(sp)
    4cfa:	6105                	addi	sp,sp,32
    4cfc:	8082                	ret

00004cfe <SPI_Init>:
 *        contains the configuration information for the specified SPI peripheral.
 *
 * @return  none
 */
void SPI_Init(SPI_TypeDef *SPIx, SPI_InitTypeDef *SPI_InitStruct)
{
    4cfe:	7179                	addi	sp,sp,-48
    4d00:	d622                	sw	s0,44(sp)
    4d02:	1800                	addi	s0,sp,48
    4d04:	fca42e23          	sw	a0,-36(s0)
    4d08:	fcb42c23          	sw	a1,-40(s0)
    uint16_t tmpreg = 0;
    4d0c:	fe041723          	sh	zero,-18(s0)

    tmpreg = SPIx->CTLR1;
    4d10:	fdc42783          	lw	a5,-36(s0)
    4d14:	0007d783          	lhu	a5,0(a5) # 40013000 <_eusrstack+0x2000f000>
    4d18:	fef41723          	sh	a5,-18(s0)
    tmpreg &= CTLR1_CLEAR_Mask;
    4d1c:	fee45703          	lhu	a4,-18(s0)
    4d20:	678d                	lui	a5,0x3
    4d22:	04078793          	addi	a5,a5,64 # 3040 <I2C_Init+0x46>
    4d26:	8ff9                	and	a5,a5,a4
    4d28:	fef41723          	sh	a5,-18(s0)
    tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
    4d2c:	fd842783          	lw	a5,-40(s0)
    4d30:	0007d703          	lhu	a4,0(a5)
    4d34:	fd842783          	lw	a5,-40(s0)
    4d38:	0027d783          	lhu	a5,2(a5)
    4d3c:	8fd9                	or	a5,a5,a4
    4d3e:	01079713          	slli	a4,a5,0x10
    4d42:	8341                	srli	a4,a4,0x10
                         SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |
    4d44:	fd842783          	lw	a5,-40(s0)
    4d48:	0047d783          	lhu	a5,4(a5)
    tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
    4d4c:	8fd9                	or	a5,a5,a4
    4d4e:	01079713          	slli	a4,a5,0x10
    4d52:	8341                	srli	a4,a4,0x10
                         SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |
    4d54:	fd842783          	lw	a5,-40(s0)
    4d58:	0067d783          	lhu	a5,6(a5)
    tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
    4d5c:	8fd9                	or	a5,a5,a4
    4d5e:	01079713          	slli	a4,a5,0x10
    4d62:	8341                	srli	a4,a4,0x10
                         SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |
    4d64:	fd842783          	lw	a5,-40(s0)
    4d68:	0087d783          	lhu	a5,8(a5)
    tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
    4d6c:	8fd9                	or	a5,a5,a4
    4d6e:	01079713          	slli	a4,a5,0x10
    4d72:	8341                	srli	a4,a4,0x10
                         SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |
    4d74:	fd842783          	lw	a5,-40(s0)
    4d78:	00a7d783          	lhu	a5,10(a5)
    tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
    4d7c:	8fd9                	or	a5,a5,a4
    4d7e:	01079713          	slli	a4,a5,0x10
    4d82:	8341                	srli	a4,a4,0x10
                         SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
    4d84:	fd842783          	lw	a5,-40(s0)
    4d88:	00c7d783          	lhu	a5,12(a5)
    tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
    4d8c:	8fd9                	or	a5,a5,a4
    4d8e:	01079713          	slli	a4,a5,0x10
    4d92:	8341                	srli	a4,a4,0x10
                         SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
    4d94:	fd842783          	lw	a5,-40(s0)
    4d98:	00e7d783          	lhu	a5,14(a5)
    tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
    4d9c:	8fd9                	or	a5,a5,a4
    4d9e:	01079713          	slli	a4,a5,0x10
    4da2:	8341                	srli	a4,a4,0x10
    4da4:	fee45783          	lhu	a5,-18(s0)
    4da8:	8fd9                	or	a5,a5,a4
    4daa:	fef41723          	sh	a5,-18(s0)

    SPIx->CTLR1 = tmpreg;
    4dae:	fdc42783          	lw	a5,-36(s0)
    4db2:	fee45703          	lhu	a4,-18(s0)
    4db6:	00e79023          	sh	a4,0(a5)
    SPIx->CRCR = SPI_InitStruct->SPI_CRCPolynomial;
    4dba:	fd842783          	lw	a5,-40(s0)
    4dbe:	0107d703          	lhu	a4,16(a5)
    4dc2:	fdc42783          	lw	a5,-36(s0)
    4dc6:	00e79823          	sh	a4,16(a5)
}
    4dca:	0001                	nop
    4dcc:	5432                	lw	s0,44(sp)
    4dce:	6145                	addi	sp,sp,48
    4dd0:	8082                	ret

00004dd2 <SPI_StructInit>:
 *        will be initialized.
 *
 * @return  none
 */
void SPI_StructInit(SPI_InitTypeDef *SPI_InitStruct)
{
    4dd2:	1101                	addi	sp,sp,-32
    4dd4:	ce22                	sw	s0,28(sp)
    4dd6:	1000                	addi	s0,sp,32
    4dd8:	fea42623          	sw	a0,-20(s0)
    SPI_InitStruct->SPI_Direction = SPI_Direction_2Lines_FullDuplex;
    4ddc:	fec42783          	lw	a5,-20(s0)
    4de0:	00079023          	sh	zero,0(a5)
    SPI_InitStruct->SPI_Mode = SPI_Mode_Slave;
    4de4:	fec42783          	lw	a5,-20(s0)
    4de8:	00079123          	sh	zero,2(a5)
    SPI_InitStruct->SPI_DataSize = SPI_DataSize_8b;
    4dec:	fec42783          	lw	a5,-20(s0)
    4df0:	00079223          	sh	zero,4(a5)
    SPI_InitStruct->SPI_CPOL = SPI_CPOL_Low;
    4df4:	fec42783          	lw	a5,-20(s0)
    4df8:	00079323          	sh	zero,6(a5)
    SPI_InitStruct->SPI_CPHA = SPI_CPHA_1Edge;
    4dfc:	fec42783          	lw	a5,-20(s0)
    4e00:	00079423          	sh	zero,8(a5)
    SPI_InitStruct->SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
    4e04:	fec42783          	lw	a5,-20(s0)
    4e08:	00079623          	sh	zero,12(a5)
    /*"SPI_FirstBit_LSB" not support SPI slave mode*/
    SPI_InitStruct->SPI_FirstBit = SPI_FirstBit_MSB;
    4e0c:	fec42783          	lw	a5,-20(s0)
    4e10:	00079723          	sh	zero,14(a5)
    SPI_InitStruct->SPI_CRCPolynomial = 7;
    4e14:	fec42783          	lw	a5,-20(s0)
    4e18:	471d                	li	a4,7
    4e1a:	00e79823          	sh	a4,16(a5)
}
    4e1e:	0001                	nop
    4e20:	4472                	lw	s0,28(sp)
    4e22:	6105                	addi	sp,sp,32
    4e24:	8082                	ret

00004e26 <SPI_Cmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void SPI_Cmd(SPI_TypeDef *SPIx, FunctionalState NewState)
{
    4e26:	1101                	addi	sp,sp,-32
    4e28:	ce22                	sw	s0,28(sp)
    4e2a:	1000                	addi	s0,sp,32
    4e2c:	fea42623          	sw	a0,-20(s0)
    4e30:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    4e34:	fe842783          	lw	a5,-24(s0)
    4e38:	c38d                	beqz	a5,4e5a <SPI_Cmd+0x34>
    {
        SPIx->CTLR1 |= CTLR1_SPE_Set;
    4e3a:	fec42783          	lw	a5,-20(s0)
    4e3e:	0007d783          	lhu	a5,0(a5)
    4e42:	07c2                	slli	a5,a5,0x10
    4e44:	83c1                	srli	a5,a5,0x10
    4e46:	0407e793          	ori	a5,a5,64
    4e4a:	01079713          	slli	a4,a5,0x10
    4e4e:	8341                	srli	a4,a4,0x10
    4e50:	fec42783          	lw	a5,-20(s0)
    4e54:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        SPIx->CTLR1 &= CTLR1_SPE_Reset;
    }
}
    4e58:	a005                	j	4e78 <SPI_Cmd+0x52>
        SPIx->CTLR1 &= CTLR1_SPE_Reset;
    4e5a:	fec42783          	lw	a5,-20(s0)
    4e5e:	0007d783          	lhu	a5,0(a5)
    4e62:	07c2                	slli	a5,a5,0x10
    4e64:	83c1                	srli	a5,a5,0x10
    4e66:	fbf7f793          	andi	a5,a5,-65
    4e6a:	01079713          	slli	a4,a5,0x10
    4e6e:	8341                	srli	a4,a4,0x10
    4e70:	fec42783          	lw	a5,-20(s0)
    4e74:	00e79023          	sh	a4,0(a5)
}
    4e78:	0001                	nop
    4e7a:	4472                	lw	s0,28(sp)
    4e7c:	6105                	addi	sp,sp,32
    4e7e:	8082                	ret

00004e80 <SPI_I2S_ITConfig>:
 *            SPI_I2S_IT_ERR - Error interrupt mask.
 *          NewState: ENABLE or DISABLE.
 * @return  none
 */
void SPI_I2S_ITConfig(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT, FunctionalState NewState)
{
    4e80:	7179                	addi	sp,sp,-48
    4e82:	d622                	sw	s0,44(sp)
    4e84:	1800                	addi	s0,sp,48
    4e86:	fca42e23          	sw	a0,-36(s0)
    4e8a:	87ae                	mv	a5,a1
    4e8c:	fcc42a23          	sw	a2,-44(s0)
    4e90:	fcf40da3          	sb	a5,-37(s0)
    uint16_t itpos = 0, itmask = 0;
    4e94:	fe041723          	sh	zero,-18(s0)
    4e98:	fe041623          	sh	zero,-20(s0)

    itpos = SPI_I2S_IT >> 4;
    4e9c:	fdb44783          	lbu	a5,-37(s0)
    4ea0:	8391                	srli	a5,a5,0x4
    4ea2:	0ff7f793          	andi	a5,a5,255
    4ea6:	fef41723          	sh	a5,-18(s0)
    itmask = (uint16_t)1 << (uint16_t)itpos;
    4eaa:	fee45783          	lhu	a5,-18(s0)
    4eae:	4705                	li	a4,1
    4eb0:	00f717b3          	sll	a5,a4,a5
    4eb4:	fef41623          	sh	a5,-20(s0)

    if(NewState != DISABLE)
    4eb8:	fd442783          	lw	a5,-44(s0)
    4ebc:	c39d                	beqz	a5,4ee2 <SPI_I2S_ITConfig+0x62>
    {
        SPIx->CTLR2 |= itmask;
    4ebe:	fdc42783          	lw	a5,-36(s0)
    4ec2:	0047d783          	lhu	a5,4(a5)
    4ec6:	01079713          	slli	a4,a5,0x10
    4eca:	8341                	srli	a4,a4,0x10
    4ecc:	fec45783          	lhu	a5,-20(s0)
    4ed0:	8fd9                	or	a5,a5,a4
    4ed2:	01079713          	slli	a4,a5,0x10
    4ed6:	8341                	srli	a4,a4,0x10
    4ed8:	fdc42783          	lw	a5,-36(s0)
    4edc:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        SPIx->CTLR2 &= (uint16_t)~itmask;
    }
}
    4ee0:	a035                	j	4f0c <SPI_I2S_ITConfig+0x8c>
        SPIx->CTLR2 &= (uint16_t)~itmask;
    4ee2:	fdc42783          	lw	a5,-36(s0)
    4ee6:	0047d783          	lhu	a5,4(a5)
    4eea:	01079713          	slli	a4,a5,0x10
    4eee:	8341                	srli	a4,a4,0x10
    4ef0:	fec45783          	lhu	a5,-20(s0)
    4ef4:	fff7c793          	not	a5,a5
    4ef8:	07c2                	slli	a5,a5,0x10
    4efa:	83c1                	srli	a5,a5,0x10
    4efc:	8ff9                	and	a5,a5,a4
    4efe:	01079713          	slli	a4,a5,0x10
    4f02:	8341                	srli	a4,a4,0x10
    4f04:	fdc42783          	lw	a5,-36(s0)
    4f08:	00e79223          	sh	a4,4(a5)
}
    4f0c:	0001                	nop
    4f0e:	5432                	lw	s0,44(sp)
    4f10:	6145                	addi	sp,sp,48
    4f12:	8082                	ret

00004f14 <SPI_I2S_DMACmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void SPI_I2S_DMACmd(SPI_TypeDef *SPIx, uint16_t SPI_I2S_DMAReq, FunctionalState NewState)
{
    4f14:	1101                	addi	sp,sp,-32
    4f16:	ce22                	sw	s0,28(sp)
    4f18:	1000                	addi	s0,sp,32
    4f1a:	fea42623          	sw	a0,-20(s0)
    4f1e:	87ae                	mv	a5,a1
    4f20:	fec42223          	sw	a2,-28(s0)
    4f24:	fef41523          	sh	a5,-22(s0)
    if(NewState != DISABLE)
    4f28:	fe442783          	lw	a5,-28(s0)
    4f2c:	c39d                	beqz	a5,4f52 <SPI_I2S_DMACmd+0x3e>
    {
        SPIx->CTLR2 |= SPI_I2S_DMAReq;
    4f2e:	fec42783          	lw	a5,-20(s0)
    4f32:	0047d783          	lhu	a5,4(a5)
    4f36:	01079713          	slli	a4,a5,0x10
    4f3a:	8341                	srli	a4,a4,0x10
    4f3c:	fea45783          	lhu	a5,-22(s0)
    4f40:	8fd9                	or	a5,a5,a4
    4f42:	01079713          	slli	a4,a5,0x10
    4f46:	8341                	srli	a4,a4,0x10
    4f48:	fec42783          	lw	a5,-20(s0)
    4f4c:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        SPIx->CTLR2 &= (uint16_t)~SPI_I2S_DMAReq;
    }
}
    4f50:	a035                	j	4f7c <SPI_I2S_DMACmd+0x68>
        SPIx->CTLR2 &= (uint16_t)~SPI_I2S_DMAReq;
    4f52:	fec42783          	lw	a5,-20(s0)
    4f56:	0047d783          	lhu	a5,4(a5)
    4f5a:	01079713          	slli	a4,a5,0x10
    4f5e:	8341                	srli	a4,a4,0x10
    4f60:	fea45783          	lhu	a5,-22(s0)
    4f64:	fff7c793          	not	a5,a5
    4f68:	07c2                	slli	a5,a5,0x10
    4f6a:	83c1                	srli	a5,a5,0x10
    4f6c:	8ff9                	and	a5,a5,a4
    4f6e:	01079713          	slli	a4,a5,0x10
    4f72:	8341                	srli	a4,a4,0x10
    4f74:	fec42783          	lw	a5,-20(s0)
    4f78:	00e79223          	sh	a4,4(a5)
}
    4f7c:	0001                	nop
    4f7e:	4472                	lw	s0,28(sp)
    4f80:	6105                	addi	sp,sp,32
    4f82:	8082                	ret

00004f84 <SPI_I2S_SendData>:
 *          Data - Data to be transmitted.
 *
 * @return  none
 */
void SPI_I2S_SendData(SPI_TypeDef *SPIx, uint16_t Data)
{
    4f84:	1101                	addi	sp,sp,-32
    4f86:	ce22                	sw	s0,28(sp)
    4f88:	1000                	addi	s0,sp,32
    4f8a:	fea42623          	sw	a0,-20(s0)
    4f8e:	87ae                	mv	a5,a1
    4f90:	fef41523          	sh	a5,-22(s0)
    SPIx->DATAR = Data;
    4f94:	fec42783          	lw	a5,-20(s0)
    4f98:	fea45703          	lhu	a4,-22(s0)
    4f9c:	00e79623          	sh	a4,12(a5)
}
    4fa0:	0001                	nop
    4fa2:	4472                	lw	s0,28(sp)
    4fa4:	6105                	addi	sp,sp,32
    4fa6:	8082                	ret

00004fa8 <SPI_I2S_ReceiveData>:
 *          Data - Data to be transmitted.
 *
 * @return  SPIx->DATAR - The value of the received data.
 */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef *SPIx)
{
    4fa8:	1101                	addi	sp,sp,-32
    4faa:	ce22                	sw	s0,28(sp)
    4fac:	1000                	addi	s0,sp,32
    4fae:	fea42623          	sw	a0,-20(s0)
    return SPIx->DATAR;
    4fb2:	fec42783          	lw	a5,-20(s0)
    4fb6:	00c7d783          	lhu	a5,12(a5)
    4fba:	07c2                	slli	a5,a5,0x10
    4fbc:	83c1                	srli	a5,a5,0x10
}
    4fbe:	853e                	mv	a0,a5
    4fc0:	4472                	lw	s0,28(sp)
    4fc2:	6105                	addi	sp,sp,32
    4fc4:	8082                	ret

00004fc6 <SPI_NSSInternalSoftwareConfig>:
 *            SPI_NSSInternalSoft_Reset - Reset NSS pin internally.
 *
 * @return  none
 */
void SPI_NSSInternalSoftwareConfig(SPI_TypeDef *SPIx, uint16_t SPI_NSSInternalSoft)
{
    4fc6:	1101                	addi	sp,sp,-32
    4fc8:	ce22                	sw	s0,28(sp)
    4fca:	1000                	addi	s0,sp,32
    4fcc:	fea42623          	sw	a0,-20(s0)
    4fd0:	87ae                	mv	a5,a1
    4fd2:	fef41523          	sh	a5,-22(s0)
    if(SPI_NSSInternalSoft != SPI_NSSInternalSoft_Reset)
    4fd6:	fea45703          	lhu	a4,-22(s0)
    4fda:	67c1                	lui	a5,0x10
    4fdc:	eff78793          	addi	a5,a5,-257 # feff <_data_lma+0xcf3>
    4fe0:	02f70263          	beq	a4,a5,5004 <SPI_NSSInternalSoftwareConfig+0x3e>
    {
        SPIx->CTLR1 |= SPI_NSSInternalSoft_Set;
    4fe4:	fec42783          	lw	a5,-20(s0)
    4fe8:	0007d783          	lhu	a5,0(a5)
    4fec:	07c2                	slli	a5,a5,0x10
    4fee:	83c1                	srli	a5,a5,0x10
    4ff0:	1007e793          	ori	a5,a5,256
    4ff4:	01079713          	slli	a4,a5,0x10
    4ff8:	8341                	srli	a4,a4,0x10
    4ffa:	fec42783          	lw	a5,-20(s0)
    4ffe:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        SPIx->CTLR1 &= SPI_NSSInternalSoft_Reset;
    }
}
    5002:	a005                	j	5022 <SPI_NSSInternalSoftwareConfig+0x5c>
        SPIx->CTLR1 &= SPI_NSSInternalSoft_Reset;
    5004:	fec42783          	lw	a5,-20(s0)
    5008:	0007d783          	lhu	a5,0(a5)
    500c:	07c2                	slli	a5,a5,0x10
    500e:	83c1                	srli	a5,a5,0x10
    5010:	eff7f793          	andi	a5,a5,-257
    5014:	01079713          	slli	a4,a5,0x10
    5018:	8341                	srli	a4,a4,0x10
    501a:	fec42783          	lw	a5,-20(s0)
    501e:	00e79023          	sh	a4,0(a5)
}
    5022:	0001                	nop
    5024:	4472                	lw	s0,28(sp)
    5026:	6105                	addi	sp,sp,32
    5028:	8082                	ret

0000502a <SPI_SSOutputCmd>:
 *          NewState - new state of the SPIx SS output.
 *
 * @return  none
 */
void SPI_SSOutputCmd(SPI_TypeDef *SPIx, FunctionalState NewState)
{
    502a:	1101                	addi	sp,sp,-32
    502c:	ce22                	sw	s0,28(sp)
    502e:	1000                	addi	s0,sp,32
    5030:	fea42623          	sw	a0,-20(s0)
    5034:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    5038:	fe842783          	lw	a5,-24(s0)
    503c:	c38d                	beqz	a5,505e <SPI_SSOutputCmd+0x34>
    {
        SPIx->CTLR2 |= CTLR2_SSOE_Set;
    503e:	fec42783          	lw	a5,-20(s0)
    5042:	0047d783          	lhu	a5,4(a5)
    5046:	07c2                	slli	a5,a5,0x10
    5048:	83c1                	srli	a5,a5,0x10
    504a:	0047e793          	ori	a5,a5,4
    504e:	01079713          	slli	a4,a5,0x10
    5052:	8341                	srli	a4,a4,0x10
    5054:	fec42783          	lw	a5,-20(s0)
    5058:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        SPIx->CTLR2 &= CTLR2_SSOE_Reset;
    }
}
    505c:	a839                	j	507a <SPI_SSOutputCmd+0x50>
        SPIx->CTLR2 &= CTLR2_SSOE_Reset;
    505e:	fec42783          	lw	a5,-20(s0)
    5062:	0047d783          	lhu	a5,4(a5)
    5066:	07c2                	slli	a5,a5,0x10
    5068:	83c1                	srli	a5,a5,0x10
    506a:	9bed                	andi	a5,a5,-5
    506c:	01079713          	slli	a4,a5,0x10
    5070:	8341                	srli	a4,a4,0x10
    5072:	fec42783          	lw	a5,-20(s0)
    5076:	00e79223          	sh	a4,4(a5)
}
    507a:	0001                	nop
    507c:	4472                	lw	s0,28(sp)
    507e:	6105                	addi	sp,sp,32
    5080:	8082                	ret

00005082 <SPI_DataSizeConfig>:
 *            SPI_DataSize_8b - Set data frame format to 8bit.
 *
 * @return  none
 */
void SPI_DataSizeConfig(SPI_TypeDef *SPIx, uint16_t SPI_DataSize)
{
    5082:	1101                	addi	sp,sp,-32
    5084:	ce22                	sw	s0,28(sp)
    5086:	1000                	addi	s0,sp,32
    5088:	fea42623          	sw	a0,-20(s0)
    508c:	87ae                	mv	a5,a1
    508e:	fef41523          	sh	a5,-22(s0)
    SPIx->CTLR1 &= (uint16_t)~SPI_DataSize_16b;
    5092:	fec42783          	lw	a5,-20(s0)
    5096:	0007d783          	lhu	a5,0(a5)
    509a:	01079713          	slli	a4,a5,0x10
    509e:	8341                	srli	a4,a4,0x10
    50a0:	77fd                	lui	a5,0xfffff
    50a2:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    50a6:	8ff9                	and	a5,a5,a4
    50a8:	01079713          	slli	a4,a5,0x10
    50ac:	8341                	srli	a4,a4,0x10
    50ae:	fec42783          	lw	a5,-20(s0)
    50b2:	00e79023          	sh	a4,0(a5)
    SPIx->CTLR1 |= SPI_DataSize;
    50b6:	fec42783          	lw	a5,-20(s0)
    50ba:	0007d783          	lhu	a5,0(a5)
    50be:	01079713          	slli	a4,a5,0x10
    50c2:	8341                	srli	a4,a4,0x10
    50c4:	fea45783          	lhu	a5,-22(s0)
    50c8:	8fd9                	or	a5,a5,a4
    50ca:	01079713          	slli	a4,a5,0x10
    50ce:	8341                	srli	a4,a4,0x10
    50d0:	fec42783          	lw	a5,-20(s0)
    50d4:	00e79023          	sh	a4,0(a5)
}
    50d8:	0001                	nop
    50da:	4472                	lw	s0,28(sp)
    50dc:	6105                	addi	sp,sp,32
    50de:	8082                	ret

000050e0 <SPI_TransmitCRC>:
 * @param   SPIx - where x can be 1 to select the SPI peripheral.
 *
 * @return  none
 */
void SPI_TransmitCRC(SPI_TypeDef *SPIx)
{
    50e0:	1101                	addi	sp,sp,-32
    50e2:	ce22                	sw	s0,28(sp)
    50e4:	1000                	addi	s0,sp,32
    50e6:	fea42623          	sw	a0,-20(s0)
    SPIx->CTLR1 |= CTLR1_CRCNext_Set;
    50ea:	fec42783          	lw	a5,-20(s0)
    50ee:	0007d783          	lhu	a5,0(a5)
    50f2:	01079713          	slli	a4,a5,0x10
    50f6:	8341                	srli	a4,a4,0x10
    50f8:	6785                	lui	a5,0x1
    50fa:	8fd9                	or	a5,a5,a4
    50fc:	01079713          	slli	a4,a5,0x10
    5100:	8341                	srli	a4,a4,0x10
    5102:	fec42783          	lw	a5,-20(s0)
    5106:	00e79023          	sh	a4,0(a5) # 1000 <ADC_GetFlagStatus+0x32>
}
    510a:	0001                	nop
    510c:	4472                	lw	s0,28(sp)
    510e:	6105                	addi	sp,sp,32
    5110:	8082                	ret

00005112 <SPI_CalculateCRC>:
 *          NewState - new state of the SPIx CRC value calculation.
 *
 * @return  none
 */
void SPI_CalculateCRC(SPI_TypeDef *SPIx, FunctionalState NewState)
{
    5112:	1101                	addi	sp,sp,-32
    5114:	ce22                	sw	s0,28(sp)
    5116:	1000                	addi	s0,sp,32
    5118:	fea42623          	sw	a0,-20(s0)
    511c:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    5120:	fe842783          	lw	a5,-24(s0)
    5124:	c395                	beqz	a5,5148 <SPI_CalculateCRC+0x36>
    {
        SPIx->CTLR1 |= CTLR1_CRCEN_Set;
    5126:	fec42783          	lw	a5,-20(s0)
    512a:	0007d783          	lhu	a5,0(a5)
    512e:	01079713          	slli	a4,a5,0x10
    5132:	8341                	srli	a4,a4,0x10
    5134:	6789                	lui	a5,0x2
    5136:	8fd9                	or	a5,a5,a4
    5138:	01079713          	slli	a4,a5,0x10
    513c:	8341                	srli	a4,a4,0x10
    513e:	fec42783          	lw	a5,-20(s0)
    5142:	00e79023          	sh	a4,0(a5) # 2000 <FLASH_GetFlagStatus+0x4c>
    }
    else
    {
        SPIx->CTLR1 &= CTLR1_CRCEN_Reset;
    }
}
    5146:	a015                	j	516a <SPI_CalculateCRC+0x58>
        SPIx->CTLR1 &= CTLR1_CRCEN_Reset;
    5148:	fec42783          	lw	a5,-20(s0)
    514c:	0007d783          	lhu	a5,0(a5)
    5150:	01079713          	slli	a4,a5,0x10
    5154:	8341                	srli	a4,a4,0x10
    5156:	77f9                	lui	a5,0xffffe
    5158:	17fd                	addi	a5,a5,-1
    515a:	8ff9                	and	a5,a5,a4
    515c:	01079713          	slli	a4,a5,0x10
    5160:	8341                	srli	a4,a4,0x10
    5162:	fec42783          	lw	a5,-20(s0)
    5166:	00e79023          	sh	a4,0(a5) # ffffe000 <_eusrstack+0xdfffa000>
}
    516a:	0001                	nop
    516c:	4472                	lw	s0,28(sp)
    516e:	6105                	addi	sp,sp,32
    5170:	8082                	ret

00005172 <SPI_GetCRC>:
 *            SPI_CRC_Rx - Selects Rx CRC register.
 *
 * @return  crcreg: The selected CRC register value.
 */
uint16_t SPI_GetCRC(SPI_TypeDef *SPIx, uint8_t SPI_CRC)
{
    5172:	7179                	addi	sp,sp,-48
    5174:	d622                	sw	s0,44(sp)
    5176:	1800                	addi	s0,sp,48
    5178:	fca42e23          	sw	a0,-36(s0)
    517c:	87ae                	mv	a5,a1
    517e:	fcf40da3          	sb	a5,-37(s0)
    uint16_t crcreg = 0;
    5182:	fe041723          	sh	zero,-18(s0)

    if(SPI_CRC != SPI_CRC_Rx)
    5186:	fdb44703          	lbu	a4,-37(s0)
    518a:	4785                	li	a5,1
    518c:	00f70963          	beq	a4,a5,519e <SPI_GetCRC+0x2c>
    {
        crcreg = SPIx->TCRCR;
    5190:	fdc42783          	lw	a5,-36(s0)
    5194:	0187d783          	lhu	a5,24(a5)
    5198:	fef41723          	sh	a5,-18(s0)
    519c:	a039                	j	51aa <SPI_GetCRC+0x38>
    }
    else
    {
        crcreg = SPIx->RCRCR;
    519e:	fdc42783          	lw	a5,-36(s0)
    51a2:	0147d783          	lhu	a5,20(a5)
    51a6:	fef41723          	sh	a5,-18(s0)
    }

    return crcreg;
    51aa:	fee45783          	lhu	a5,-18(s0)
}
    51ae:	853e                	mv	a0,a5
    51b0:	5432                	lw	s0,44(sp)
    51b2:	6145                	addi	sp,sp,48
    51b4:	8082                	ret

000051b6 <SPI_GetCRCPolynomial>:
 * @param   SPIx - where x can be 1 to select the SPI peripheral.
 *
 * @return  SPIx->CRCR - The CRC Polynomial register value.
 */
uint16_t SPI_GetCRCPolynomial(SPI_TypeDef *SPIx)
{
    51b6:	1101                	addi	sp,sp,-32
    51b8:	ce22                	sw	s0,28(sp)
    51ba:	1000                	addi	s0,sp,32
    51bc:	fea42623          	sw	a0,-20(s0)
    return SPIx->CRCR;
    51c0:	fec42783          	lw	a5,-20(s0)
    51c4:	0107d783          	lhu	a5,16(a5)
    51c8:	07c2                	slli	a5,a5,0x10
    51ca:	83c1                	srli	a5,a5,0x10
}
    51cc:	853e                	mv	a0,a5
    51ce:	4472                	lw	s0,28(sp)
    51d0:	6105                	addi	sp,sp,32
    51d2:	8082                	ret

000051d4 <SPI_BiDirectionalLineConfig>:
 *            SPI_Direction_Rx - Selects Rx receive direction.
 *
 * @return  none
 */
void SPI_BiDirectionalLineConfig(SPI_TypeDef *SPIx, uint16_t SPI_Direction)
{
    51d4:	1101                	addi	sp,sp,-32
    51d6:	ce22                	sw	s0,28(sp)
    51d8:	1000                	addi	s0,sp,32
    51da:	fea42623          	sw	a0,-20(s0)
    51de:	87ae                	mv	a5,a1
    51e0:	fef41523          	sh	a5,-22(s0)
    if(SPI_Direction == SPI_Direction_Tx)
    51e4:	fea45703          	lhu	a4,-22(s0)
    51e8:	6791                	lui	a5,0x4
    51ea:	02f71363          	bne	a4,a5,5210 <SPI_BiDirectionalLineConfig+0x3c>
    {
        SPIx->CTLR1 |= SPI_Direction_Tx;
    51ee:	fec42783          	lw	a5,-20(s0)
    51f2:	0007d783          	lhu	a5,0(a5) # 4000 <NVIC_Init+0x2b0>
    51f6:	01079713          	slli	a4,a5,0x10
    51fa:	8341                	srli	a4,a4,0x10
    51fc:	6791                	lui	a5,0x4
    51fe:	8fd9                	or	a5,a5,a4
    5200:	01079713          	slli	a4,a5,0x10
    5204:	8341                	srli	a4,a4,0x10
    5206:	fec42783          	lw	a5,-20(s0)
    520a:	00e79023          	sh	a4,0(a5) # 4000 <NVIC_Init+0x2b0>
    }
    else
    {
        SPIx->CTLR1 &= SPI_Direction_Rx;
    }
}
    520e:	a015                	j	5232 <SPI_BiDirectionalLineConfig+0x5e>
        SPIx->CTLR1 &= SPI_Direction_Rx;
    5210:	fec42783          	lw	a5,-20(s0)
    5214:	0007d783          	lhu	a5,0(a5)
    5218:	01079713          	slli	a4,a5,0x10
    521c:	8341                	srli	a4,a4,0x10
    521e:	77f1                	lui	a5,0xffffc
    5220:	17fd                	addi	a5,a5,-1
    5222:	8ff9                	and	a5,a5,a4
    5224:	01079713          	slli	a4,a5,0x10
    5228:	8341                	srli	a4,a4,0x10
    522a:	fec42783          	lw	a5,-20(s0)
    522e:	00e79023          	sh	a4,0(a5) # ffffc000 <_eusrstack+0xdfff8000>
}
    5232:	0001                	nop
    5234:	4472                	lw	s0,28(sp)
    5236:	6105                	addi	sp,sp,32
    5238:	8082                	ret

0000523a <SPI_I2S_GetFlagStatus>:
 *            SPI_FLAG_CRCERR - CRC Error flag.
 *
 * @return  FlagStatus: SET or RESET.
 */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef *SPIx, uint16_t SPI_I2S_FLAG)
{
    523a:	7179                	addi	sp,sp,-48
    523c:	d622                	sw	s0,44(sp)
    523e:	1800                	addi	s0,sp,48
    5240:	fca42e23          	sw	a0,-36(s0)
    5244:	87ae                	mv	a5,a1
    5246:	fcf41d23          	sh	a5,-38(s0)
    FlagStatus bitstatus = RESET;
    524a:	fe042623          	sw	zero,-20(s0)

    if((SPIx->STATR & SPI_I2S_FLAG) != (uint16_t)RESET)
    524e:	fdc42783          	lw	a5,-36(s0)
    5252:	0087d783          	lhu	a5,8(a5)
    5256:	01079713          	slli	a4,a5,0x10
    525a:	8341                	srli	a4,a4,0x10
    525c:	fda45783          	lhu	a5,-38(s0)
    5260:	8ff9                	and	a5,a5,a4
    5262:	07c2                	slli	a5,a5,0x10
    5264:	83c1                	srli	a5,a5,0x10
    5266:	c789                	beqz	a5,5270 <SPI_I2S_GetFlagStatus+0x36>
    {
        bitstatus = SET;
    5268:	4785                	li	a5,1
    526a:	fef42623          	sw	a5,-20(s0)
    526e:	a019                	j	5274 <SPI_I2S_GetFlagStatus+0x3a>
    }
    else
    {
        bitstatus = RESET;
    5270:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    5274:	fec42783          	lw	a5,-20(s0)
}
    5278:	853e                	mv	a0,a5
    527a:	5432                	lw	s0,44(sp)
    527c:	6145                	addi	sp,sp,48
    527e:	8082                	ret

00005280 <SPI_I2S_ClearFlag>:
 *          operation to SPI_STATR register (SPI_I2S_GetFlagStatus()) followed by a 
 *          write operation to SPI_CTLR1 register (SPI_Cmd() to enable the SPI).
 * @return  FlagStatus: SET or RESET.
 */
void SPI_I2S_ClearFlag(SPI_TypeDef *SPIx, uint16_t SPI_I2S_FLAG)
{
    5280:	1101                	addi	sp,sp,-32
    5282:	ce22                	sw	s0,28(sp)
    5284:	1000                	addi	s0,sp,32
    5286:	fea42623          	sw	a0,-20(s0)
    528a:	87ae                	mv	a5,a1
    528c:	fef41523          	sh	a5,-22(s0)
    SPIx->STATR = (uint16_t)~SPI_I2S_FLAG;
    5290:	fea45783          	lhu	a5,-22(s0)
    5294:	fff7c793          	not	a5,a5
    5298:	01079713          	slli	a4,a5,0x10
    529c:	8341                	srli	a4,a4,0x10
    529e:	fec42783          	lw	a5,-20(s0)
    52a2:	00e79423          	sh	a4,8(a5)
}
    52a6:	0001                	nop
    52a8:	4472                	lw	s0,28(sp)
    52aa:	6105                	addi	sp,sp,32
    52ac:	8082                	ret

000052ae <SPI_I2S_GetITStatus>:
 *            SPI_IT_CRCERR - CRC Error interrupt.
 *
 * @return  FlagStatus: SET or RESET.
 */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT)
{
    52ae:	7179                	addi	sp,sp,-48
    52b0:	d622                	sw	s0,44(sp)
    52b2:	1800                	addi	s0,sp,48
    52b4:	fca42e23          	sw	a0,-36(s0)
    52b8:	87ae                	mv	a5,a1
    52ba:	fcf40da3          	sb	a5,-37(s0)
    ITStatus bitstatus = RESET;
    52be:	fe042623          	sw	zero,-20(s0)
    uint16_t itpos = 0, itmask = 0, enablestatus = 0;
    52c2:	fe041523          	sh	zero,-22(s0)
    52c6:	fe041423          	sh	zero,-24(s0)
    52ca:	fe041323          	sh	zero,-26(s0)

    itpos = 0x01 << (SPI_I2S_IT & 0x0F);
    52ce:	fdb44783          	lbu	a5,-37(s0)
    52d2:	8bbd                	andi	a5,a5,15
    52d4:	4705                	li	a4,1
    52d6:	00f717b3          	sll	a5,a4,a5
    52da:	fef41523          	sh	a5,-22(s0)
    itmask = SPI_I2S_IT >> 4;
    52de:	fdb44783          	lbu	a5,-37(s0)
    52e2:	8391                	srli	a5,a5,0x4
    52e4:	0ff7f793          	andi	a5,a5,255
    52e8:	fef41423          	sh	a5,-24(s0)
    itmask = 0x01 << itmask;
    52ec:	fe845783          	lhu	a5,-24(s0)
    52f0:	4705                	li	a4,1
    52f2:	00f717b3          	sll	a5,a4,a5
    52f6:	fef41423          	sh	a5,-24(s0)
    enablestatus = (SPIx->CTLR2 & itmask);
    52fa:	fdc42783          	lw	a5,-36(s0)
    52fe:	0047d783          	lhu	a5,4(a5)
    5302:	01079713          	slli	a4,a5,0x10
    5306:	8341                	srli	a4,a4,0x10
    5308:	fe845783          	lhu	a5,-24(s0)
    530c:	8ff9                	and	a5,a5,a4
    530e:	fef41323          	sh	a5,-26(s0)

    if(((SPIx->STATR & itpos) != (uint16_t)RESET) && enablestatus)
    5312:	fdc42783          	lw	a5,-36(s0)
    5316:	0087d783          	lhu	a5,8(a5)
    531a:	01079713          	slli	a4,a5,0x10
    531e:	8341                	srli	a4,a4,0x10
    5320:	fea45783          	lhu	a5,-22(s0)
    5324:	8ff9                	and	a5,a5,a4
    5326:	07c2                	slli	a5,a5,0x10
    5328:	83c1                	srli	a5,a5,0x10
    532a:	cb81                	beqz	a5,533a <SPI_I2S_GetITStatus+0x8c>
    532c:	fe645783          	lhu	a5,-26(s0)
    5330:	c789                	beqz	a5,533a <SPI_I2S_GetITStatus+0x8c>
    {
        bitstatus = SET;
    5332:	4785                	li	a5,1
    5334:	fef42623          	sw	a5,-20(s0)
    5338:	a019                	j	533e <SPI_I2S_GetITStatus+0x90>
    }
    else
    {
        bitstatus = RESET;
    533a:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    533e:	fec42783          	lw	a5,-20(s0)
}
    5342:	853e                	mv	a0,a5
    5344:	5432                	lw	s0,44(sp)
    5346:	6145                	addi	sp,sp,48
    5348:	8082                	ret

0000534a <SPI_I2S_ClearITPendingBit>:
 *         followed by a write operation to SPI_CTLR1 register (SPI_Cmd() to enable 
 *         the SPI).      
 * @return  none
 */
void SPI_I2S_ClearITPendingBit(SPI_TypeDef *SPIx, uint8_t SPI_I2S_IT)
{
    534a:	7179                	addi	sp,sp,-48
    534c:	d622                	sw	s0,44(sp)
    534e:	1800                	addi	s0,sp,48
    5350:	fca42e23          	sw	a0,-36(s0)
    5354:	87ae                	mv	a5,a1
    5356:	fcf40da3          	sb	a5,-37(s0)
    uint16_t itpos = 0;
    535a:	fe041723          	sh	zero,-18(s0)

    itpos = 0x01 << (SPI_I2S_IT & 0x0F);
    535e:	fdb44783          	lbu	a5,-37(s0)
    5362:	8bbd                	andi	a5,a5,15
    5364:	4705                	li	a4,1
    5366:	00f717b3          	sll	a5,a4,a5
    536a:	fef41723          	sh	a5,-18(s0)
    SPIx->STATR = (uint16_t)~itpos;
    536e:	fee45783          	lhu	a5,-18(s0)
    5372:	fff7c793          	not	a5,a5
    5376:	01079713          	slli	a4,a5,0x10
    537a:	8341                	srli	a4,a4,0x10
    537c:	fdc42783          	lw	a5,-36(s0)
    5380:	00e79423          	sh	a4,8(a5)
}
    5384:	0001                	nop
    5386:	5432                	lw	s0,44(sp)
    5388:	6145                	addi	sp,sp,48
    538a:	8082                	ret

0000538c <TIM_DeInit>:
 * @param   TIMx - where x can be 1 to 3 to select the TIM peripheral.
 *
 * @return  none
 */
void TIM_DeInit(TIM_TypeDef *TIMx)
{
    538c:	1101                	addi	sp,sp,-32
    538e:	ce06                	sw	ra,28(sp)
    5390:	cc22                	sw	s0,24(sp)
    5392:	1000                	addi	s0,sp,32
    5394:	fea42623          	sw	a0,-20(s0)
    if(TIMx == TIM1)
    5398:	fec42703          	lw	a4,-20(s0)
    539c:	400137b7          	lui	a5,0x40013
    53a0:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    53a4:	00f71f63          	bne	a4,a5,53c2 <TIM_DeInit+0x36>
    {
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    53a8:	4585                	li	a1,1
    53aa:	6785                	lui	a5,0x1
    53ac:	80078513          	addi	a0,a5,-2048 # 800 <__stack_size>
    53b0:	fdaff0ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);
    53b4:	4581                	li	a1,0
    53b6:	6785                	lui	a5,0x1
    53b8:	80078513          	addi	a0,a5,-2048 # 800 <__stack_size>
    53bc:	fceff0ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
    else if(TIMx == TIM3)
    {
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    }
}
    53c0:	a081                	j	5400 <TIM_DeInit+0x74>
    else if(TIMx == TIM2)
    53c2:	fec42703          	lw	a4,-20(s0)
    53c6:	400007b7          	lui	a5,0x40000
    53ca:	00f71b63          	bne	a4,a5,53e0 <TIM_DeInit+0x54>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    53ce:	4585                	li	a1,1
    53d0:	4505                	li	a0,1
    53d2:	ffeff0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
    53d6:	4581                	li	a1,0
    53d8:	4505                	li	a0,1
    53da:	ff6ff0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
}
    53de:	a00d                	j	5400 <TIM_DeInit+0x74>
    else if(TIMx == TIM3)
    53e0:	fec42703          	lw	a4,-20(s0)
    53e4:	400007b7          	lui	a5,0x40000
    53e8:	40078793          	addi	a5,a5,1024 # 40000400 <_eusrstack+0x1fffc400>
    53ec:	00f71a63          	bne	a4,a5,5400 <TIM_DeInit+0x74>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    53f0:	4585                	li	a1,1
    53f2:	4509                	li	a0,2
    53f4:	fdcff0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
    53f8:	4581                	li	a1,0
    53fa:	4509                	li	a0,2
    53fc:	fd4ff0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
}
    5400:	0001                	nop
    5402:	40f2                	lw	ra,28(sp)
    5404:	4462                	lw	s0,24(sp)
    5406:	6105                	addi	sp,sp,32
    5408:	8082                	ret

0000540a <TIM_TimeBaseInit>:
 *        structure.
 *
 * @return  none
 */
void TIM_TimeBaseInit(TIM_TypeDef *TIMx, TIM_TimeBaseInitTypeDef *TIM_TimeBaseInitStruct)
{
    540a:	7179                	addi	sp,sp,-48
    540c:	d622                	sw	s0,44(sp)
    540e:	1800                	addi	s0,sp,48
    5410:	fca42e23          	sw	a0,-36(s0)
    5414:	fcb42c23          	sw	a1,-40(s0)
    uint16_t tmpcr1 = 0;
    5418:	fe041723          	sh	zero,-18(s0)

    tmpcr1 = TIMx->CTLR1;
    541c:	fdc42783          	lw	a5,-36(s0)
    5420:	0007d783          	lhu	a5,0(a5)
    5424:	fef41723          	sh	a5,-18(s0)

    if((TIMx == TIM1) || (TIMx == TIM2))
    5428:	fdc42703          	lw	a4,-36(s0)
    542c:	400137b7          	lui	a5,0x40013
    5430:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    5434:	00f70863          	beq	a4,a5,5444 <TIM_TimeBaseInit+0x3a>
    5438:	fdc42703          	lw	a4,-36(s0)
    543c:	400007b7          	lui	a5,0x40000
    5440:	02f71163          	bne	a4,a5,5462 <TIM_TimeBaseInit+0x58>
    {
        tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_DIR | TIM_CMS)));
    5444:	fee45783          	lhu	a5,-18(s0)
    5448:	f8f7f793          	andi	a5,a5,-113
    544c:	fef41723          	sh	a5,-18(s0)
        tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
    5450:	fd842783          	lw	a5,-40(s0)
    5454:	0027d703          	lhu	a4,2(a5) # 40000002 <_eusrstack+0x1fffc002>
    5458:	fee45783          	lhu	a5,-18(s0)
    545c:	8fd9                	or	a5,a5,a4
    545e:	fef41723          	sh	a5,-18(s0)
    }

    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CTLR1_CKD));
    5462:	fee45783          	lhu	a5,-18(s0)
    5466:	cff7f793          	andi	a5,a5,-769
    546a:	fef41723          	sh	a5,-18(s0)
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
    546e:	fd842783          	lw	a5,-40(s0)
    5472:	0067d703          	lhu	a4,6(a5)
    5476:	fee45783          	lhu	a5,-18(s0)
    547a:	8fd9                	or	a5,a5,a4
    547c:	fef41723          	sh	a5,-18(s0)

    TIMx->CTLR1 = tmpcr1;
    5480:	fdc42783          	lw	a5,-36(s0)
    5484:	fee45703          	lhu	a4,-18(s0)
    5488:	00e79023          	sh	a4,0(a5)
    TIMx->ATRLR = TIM_TimeBaseInitStruct->TIM_Period;
    548c:	fd842783          	lw	a5,-40(s0)
    5490:	0047d703          	lhu	a4,4(a5)
    5494:	fdc42783          	lw	a5,-36(s0)
    5498:	02e79623          	sh	a4,44(a5)
    TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    549c:	fd842783          	lw	a5,-40(s0)
    54a0:	0007d703          	lhu	a4,0(a5)
    54a4:	fdc42783          	lw	a5,-36(s0)
    54a8:	02e79423          	sh	a4,40(a5)

    if((TIMx == TIM1) || (TIMx == TIM2))
    54ac:	fdc42703          	lw	a4,-36(s0)
    54b0:	400137b7          	lui	a5,0x40013
    54b4:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    54b8:	00f70863          	beq	a4,a5,54c8 <TIM_TimeBaseInit+0xbe>
    54bc:	fdc42703          	lw	a4,-36(s0)
    54c0:	400007b7          	lui	a5,0x40000
    54c4:	00f71d63          	bne	a4,a5,54de <TIM_TimeBaseInit+0xd4>
    {
        TIMx->RPTCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
    54c8:	fd842783          	lw	a5,-40(s0)
    54cc:	0087c783          	lbu	a5,8(a5) # 40000008 <_eusrstack+0x1fffc008>
    54d0:	01079713          	slli	a4,a5,0x10
    54d4:	8341                	srli	a4,a4,0x10
    54d6:	fdc42783          	lw	a5,-36(s0)
    54da:	02e79823          	sh	a4,48(a5)
    }

    TIMx->SWEVGR = TIM_PSCReloadMode_Immediate;
    54de:	fdc42783          	lw	a5,-36(s0)
    54e2:	4705                	li	a4,1
    54e4:	00e79a23          	sh	a4,20(a5)
}
    54e8:	0001                	nop
    54ea:	5432                	lw	s0,44(sp)
    54ec:	6145                	addi	sp,sp,48
    54ee:	8082                	ret

000054f0 <TIM_OC1Init>:
 *          TIM_OCInitStruct - pointer to a TIM_OCInitTypeDef structure.
 *
 * @return  none
 */
void TIM_OC1Init(TIM_TypeDef *TIMx, TIM_OCInitTypeDef *TIM_OCInitStruct)
{
    54f0:	7179                	addi	sp,sp,-48
    54f2:	d622                	sw	s0,44(sp)
    54f4:	1800                	addi	s0,sp,48
    54f6:	fca42e23          	sw	a0,-36(s0)
    54fa:	fcb42c23          	sw	a1,-40(s0)
    uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    54fe:	fe041523          	sh	zero,-22(s0)
    5502:	fe041723          	sh	zero,-18(s0)
    5506:	fe041623          	sh	zero,-20(s0)

    TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CC1E);
    550a:	fdc42783          	lw	a5,-36(s0)
    550e:	0207d783          	lhu	a5,32(a5)
    5512:	07c2                	slli	a5,a5,0x10
    5514:	83c1                	srli	a5,a5,0x10
    5516:	9bf9                	andi	a5,a5,-2
    5518:	01079713          	slli	a4,a5,0x10
    551c:	8341                	srli	a4,a4,0x10
    551e:	fdc42783          	lw	a5,-36(s0)
    5522:	02e79023          	sh	a4,32(a5)
    tmpccer = TIMx->CCER;
    5526:	fdc42783          	lw	a5,-36(s0)
    552a:	0207d783          	lhu	a5,32(a5)
    552e:	fef41723          	sh	a5,-18(s0)
    tmpcr2 = TIMx->CTLR2;
    5532:	fdc42783          	lw	a5,-36(s0)
    5536:	0047d783          	lhu	a5,4(a5)
    553a:	fef41623          	sh	a5,-20(s0)
    tmpccmrx = TIMx->CHCTLR1;
    553e:	fdc42783          	lw	a5,-36(s0)
    5542:	0187d783          	lhu	a5,24(a5)
    5546:	fef41523          	sh	a5,-22(s0)
    tmpccmrx &= (uint16_t)(~((uint16_t)TIM_OC1M));
    554a:	fea45783          	lhu	a5,-22(s0)
    554e:	f8f7f793          	andi	a5,a5,-113
    5552:	fef41523          	sh	a5,-22(s0)
    tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CC1S));
    5556:	fea45783          	lhu	a5,-22(s0)
    555a:	9bf1                	andi	a5,a5,-4
    555c:	fef41523          	sh	a5,-22(s0)
    tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    5560:	fd842783          	lw	a5,-40(s0)
    5564:	0007d703          	lhu	a4,0(a5)
    5568:	fea45783          	lhu	a5,-22(s0)
    556c:	8fd9                	or	a5,a5,a4
    556e:	fef41523          	sh	a5,-22(s0)
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CC1P));
    5572:	fee45783          	lhu	a5,-18(s0)
    5576:	9bf5                	andi	a5,a5,-3
    5578:	fef41723          	sh	a5,-18(s0)
    tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
    557c:	fd842783          	lw	a5,-40(s0)
    5580:	0087d703          	lhu	a4,8(a5)
    5584:	fee45783          	lhu	a5,-18(s0)
    5588:	8fd9                	or	a5,a5,a4
    558a:	fef41723          	sh	a5,-18(s0)
    tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    558e:	fd842783          	lw	a5,-40(s0)
    5592:	0027d703          	lhu	a4,2(a5)
    5596:	fee45783          	lhu	a5,-18(s0)
    559a:	8fd9                	or	a5,a5,a4
    559c:	fef41723          	sh	a5,-18(s0)

    if((TIMx == TIM1)  || (TIMx == TIM2))
    55a0:	fdc42703          	lw	a4,-36(s0)
    55a4:	400137b7          	lui	a5,0x40013
    55a8:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    55ac:	00f70863          	beq	a4,a5,55bc <TIM_OC1Init+0xcc>
    55b0:	fdc42703          	lw	a4,-36(s0)
    55b4:	400007b7          	lui	a5,0x40000
    55b8:	06f71c63          	bne	a4,a5,5630 <TIM_OC1Init+0x140>
    {
        tmpccer &= (uint16_t)(~((uint16_t)TIM_CC1NP));
    55bc:	fee45783          	lhu	a5,-18(s0)
    55c0:	9bdd                	andi	a5,a5,-9
    55c2:	fef41723          	sh	a5,-18(s0)
        tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
    55c6:	fd842783          	lw	a5,-40(s0)
    55ca:	00a7d703          	lhu	a4,10(a5) # 4000000a <_eusrstack+0x1fffc00a>
    55ce:	fee45783          	lhu	a5,-18(s0)
    55d2:	8fd9                	or	a5,a5,a4
    55d4:	fef41723          	sh	a5,-18(s0)

        tmpccer &= (uint16_t)(~((uint16_t)TIM_CC1NE));
    55d8:	fee45783          	lhu	a5,-18(s0)
    55dc:	9bed                	andi	a5,a5,-5
    55de:	fef41723          	sh	a5,-18(s0)
        tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
    55e2:	fd842783          	lw	a5,-40(s0)
    55e6:	0047d703          	lhu	a4,4(a5)
    55ea:	fee45783          	lhu	a5,-18(s0)
    55ee:	8fd9                	or	a5,a5,a4
    55f0:	fef41723          	sh	a5,-18(s0)

        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_OIS1));
    55f4:	fec45783          	lhu	a5,-20(s0)
    55f8:	eff7f793          	andi	a5,a5,-257
    55fc:	fef41623          	sh	a5,-20(s0)
        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_OIS1N));
    5600:	fec45783          	lhu	a5,-20(s0)
    5604:	dff7f793          	andi	a5,a5,-513
    5608:	fef41623          	sh	a5,-20(s0)

        tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
    560c:	fd842783          	lw	a5,-40(s0)
    5610:	00c7d703          	lhu	a4,12(a5)
    5614:	fec45783          	lhu	a5,-20(s0)
    5618:	8fd9                	or	a5,a5,a4
    561a:	fef41623          	sh	a5,-20(s0)
        tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
    561e:	fd842783          	lw	a5,-40(s0)
    5622:	00e7d703          	lhu	a4,14(a5)
    5626:	fec45783          	lhu	a5,-20(s0)
    562a:	8fd9                	or	a5,a5,a4
    562c:	fef41623          	sh	a5,-20(s0)
    }

    TIMx->CTLR2 = tmpcr2;
    5630:	fdc42783          	lw	a5,-36(s0)
    5634:	fec45703          	lhu	a4,-20(s0)
    5638:	00e79223          	sh	a4,4(a5)
    TIMx->CHCTLR1 = tmpccmrx;
    563c:	fdc42783          	lw	a5,-36(s0)
    5640:	fea45703          	lhu	a4,-22(s0)
    5644:	00e79c23          	sh	a4,24(a5)
    TIMx->CH1CVR = TIM_OCInitStruct->TIM_Pulse;
    5648:	fd842783          	lw	a5,-40(s0)
    564c:	0067d703          	lhu	a4,6(a5)
    5650:	fdc42783          	lw	a5,-36(s0)
    5654:	02e79a23          	sh	a4,52(a5)
    TIMx->CCER = tmpccer;
    5658:	fdc42783          	lw	a5,-36(s0)
    565c:	fee45703          	lhu	a4,-18(s0)
    5660:	02e79023          	sh	a4,32(a5)
}
    5664:	0001                	nop
    5666:	5432                	lw	s0,44(sp)
    5668:	6145                	addi	sp,sp,48
    566a:	8082                	ret

0000566c <TIM_OC2Init>:
 *          TIM_OCInitStruct - pointer to a TIM_OCInitTypeDef structure.
 *
 * @return  none
 */
void TIM_OC2Init(TIM_TypeDef *TIMx, TIM_OCInitTypeDef *TIM_OCInitStruct)
{
    566c:	7179                	addi	sp,sp,-48
    566e:	d622                	sw	s0,44(sp)
    5670:	1800                	addi	s0,sp,48
    5672:	fca42e23          	sw	a0,-36(s0)
    5676:	fcb42c23          	sw	a1,-40(s0)
    uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    567a:	fe041523          	sh	zero,-22(s0)
    567e:	fe041723          	sh	zero,-18(s0)
    5682:	fe041623          	sh	zero,-20(s0)

    TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CC2E));
    5686:	fdc42783          	lw	a5,-36(s0)
    568a:	0207d783          	lhu	a5,32(a5)
    568e:	07c2                	slli	a5,a5,0x10
    5690:	83c1                	srli	a5,a5,0x10
    5692:	9bbd                	andi	a5,a5,-17
    5694:	01079713          	slli	a4,a5,0x10
    5698:	8341                	srli	a4,a4,0x10
    569a:	fdc42783          	lw	a5,-36(s0)
    569e:	02e79023          	sh	a4,32(a5)
    tmpccer = TIMx->CCER;
    56a2:	fdc42783          	lw	a5,-36(s0)
    56a6:	0207d783          	lhu	a5,32(a5)
    56aa:	fef41723          	sh	a5,-18(s0)
    tmpcr2 = TIMx->CTLR2;
    56ae:	fdc42783          	lw	a5,-36(s0)
    56b2:	0047d783          	lhu	a5,4(a5)
    56b6:	fef41623          	sh	a5,-20(s0)
    tmpccmrx = TIMx->CHCTLR1;
    56ba:	fdc42783          	lw	a5,-36(s0)
    56be:	0187d783          	lhu	a5,24(a5)
    56c2:	fef41523          	sh	a5,-22(s0)
    tmpccmrx &= (uint16_t)(~((uint16_t)TIM_OC2M));
    56c6:	fea45703          	lhu	a4,-22(s0)
    56ca:	77e5                	lui	a5,0xffff9
    56cc:	17fd                	addi	a5,a5,-1
    56ce:	8ff9                	and	a5,a5,a4
    56d0:	fef41523          	sh	a5,-22(s0)
    tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CC2S));
    56d4:	fea45783          	lhu	a5,-22(s0)
    56d8:	cff7f793          	andi	a5,a5,-769
    56dc:	fef41523          	sh	a5,-22(s0)
    tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    56e0:	fd842783          	lw	a5,-40(s0)
    56e4:	0007d783          	lhu	a5,0(a5) # ffff9000 <_eusrstack+0xdfff5000>
    56e8:	07a2                	slli	a5,a5,0x8
    56ea:	01079713          	slli	a4,a5,0x10
    56ee:	8341                	srli	a4,a4,0x10
    56f0:	fea45783          	lhu	a5,-22(s0)
    56f4:	8fd9                	or	a5,a5,a4
    56f6:	fef41523          	sh	a5,-22(s0)
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CC2P));
    56fa:	fee45783          	lhu	a5,-18(s0)
    56fe:	fdf7f793          	andi	a5,a5,-33
    5702:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
    5706:	fd842783          	lw	a5,-40(s0)
    570a:	0087d783          	lhu	a5,8(a5)
    570e:	0792                	slli	a5,a5,0x4
    5710:	01079713          	slli	a4,a5,0x10
    5714:	8341                	srli	a4,a4,0x10
    5716:	fee45783          	lhu	a5,-18(s0)
    571a:	8fd9                	or	a5,a5,a4
    571c:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
    5720:	fd842783          	lw	a5,-40(s0)
    5724:	0027d783          	lhu	a5,2(a5)
    5728:	0792                	slli	a5,a5,0x4
    572a:	01079713          	slli	a4,a5,0x10
    572e:	8341                	srli	a4,a4,0x10
    5730:	fee45783          	lhu	a5,-18(s0)
    5734:	8fd9                	or	a5,a5,a4
    5736:	fef41723          	sh	a5,-18(s0)

    if((TIMx == TIM1) || (TIMx == TIM2))
    573a:	fdc42703          	lw	a4,-36(s0)
    573e:	400137b7          	lui	a5,0x40013
    5742:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    5746:	00f70863          	beq	a4,a5,5756 <TIM_OC2Init+0xea>
    574a:	fdc42703          	lw	a4,-36(s0)
    574e:	400007b7          	lui	a5,0x40000
    5752:	0af71063          	bne	a4,a5,57f2 <TIM_OC2Init+0x186>
    {
        tmpccer &= (uint16_t)(~((uint16_t)TIM_CC2NP));
    5756:	fee45783          	lhu	a5,-18(s0)
    575a:	f7f7f793          	andi	a5,a5,-129
    575e:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    5762:	fd842783          	lw	a5,-40(s0)
    5766:	00a7d783          	lhu	a5,10(a5) # 4000000a <_eusrstack+0x1fffc00a>
    576a:	0792                	slli	a5,a5,0x4
    576c:	01079713          	slli	a4,a5,0x10
    5770:	8341                	srli	a4,a4,0x10
    5772:	fee45783          	lhu	a5,-18(s0)
    5776:	8fd9                	or	a5,a5,a4
    5778:	fef41723          	sh	a5,-18(s0)
        tmpccer &= (uint16_t)(~((uint16_t)TIM_CC2NE));
    577c:	fee45783          	lhu	a5,-18(s0)
    5780:	fbf7f793          	andi	a5,a5,-65
    5784:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
    5788:	fd842783          	lw	a5,-40(s0)
    578c:	0047d783          	lhu	a5,4(a5)
    5790:	0792                	slli	a5,a5,0x4
    5792:	01079713          	slli	a4,a5,0x10
    5796:	8341                	srli	a4,a4,0x10
    5798:	fee45783          	lhu	a5,-18(s0)
    579c:	8fd9                	or	a5,a5,a4
    579e:	fef41723          	sh	a5,-18(s0)

        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_OIS2));
    57a2:	fec45783          	lhu	a5,-20(s0)
    57a6:	bff7f793          	andi	a5,a5,-1025
    57aa:	fef41623          	sh	a5,-20(s0)
        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_OIS2N));
    57ae:	fec45703          	lhu	a4,-20(s0)
    57b2:	77fd                	lui	a5,0xfffff
    57b4:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    57b8:	8ff9                	and	a5,a5,a4
    57ba:	fef41623          	sh	a5,-20(s0)
        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    57be:	fd842783          	lw	a5,-40(s0)
    57c2:	00c7d783          	lhu	a5,12(a5)
    57c6:	078a                	slli	a5,a5,0x2
    57c8:	01079713          	slli	a4,a5,0x10
    57cc:	8341                	srli	a4,a4,0x10
    57ce:	fec45783          	lhu	a5,-20(s0)
    57d2:	8fd9                	or	a5,a5,a4
    57d4:	fef41623          	sh	a5,-20(s0)
        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
    57d8:	fd842783          	lw	a5,-40(s0)
    57dc:	00e7d783          	lhu	a5,14(a5)
    57e0:	078a                	slli	a5,a5,0x2
    57e2:	01079713          	slli	a4,a5,0x10
    57e6:	8341                	srli	a4,a4,0x10
    57e8:	fec45783          	lhu	a5,-20(s0)
    57ec:	8fd9                	or	a5,a5,a4
    57ee:	fef41623          	sh	a5,-20(s0)
    }

    TIMx->CTLR2 = tmpcr2;
    57f2:	fdc42783          	lw	a5,-36(s0)
    57f6:	fec45703          	lhu	a4,-20(s0)
    57fa:	00e79223          	sh	a4,4(a5)
    TIMx->CHCTLR1 = tmpccmrx;
    57fe:	fdc42783          	lw	a5,-36(s0)
    5802:	fea45703          	lhu	a4,-22(s0)
    5806:	00e79c23          	sh	a4,24(a5)
    TIMx->CH2CVR = TIM_OCInitStruct->TIM_Pulse;
    580a:	fd842783          	lw	a5,-40(s0)
    580e:	0067d703          	lhu	a4,6(a5)
    5812:	fdc42783          	lw	a5,-36(s0)
    5816:	02e79c23          	sh	a4,56(a5)
    TIMx->CCER = tmpccer;
    581a:	fdc42783          	lw	a5,-36(s0)
    581e:	fee45703          	lhu	a4,-18(s0)
    5822:	02e79023          	sh	a4,32(a5)
}
    5826:	0001                	nop
    5828:	5432                	lw	s0,44(sp)
    582a:	6145                	addi	sp,sp,48
    582c:	8082                	ret

0000582e <TIM_OC3Init>:
 *          TIM_OCInitStruct - pointer to a TIM_OCInitTypeDef structure.
 *
 * @return  none
 */
void TIM_OC3Init(TIM_TypeDef *TIMx, TIM_OCInitTypeDef *TIM_OCInitStruct)
{
    582e:	7179                	addi	sp,sp,-48
    5830:	d622                	sw	s0,44(sp)
    5832:	1800                	addi	s0,sp,48
    5834:	fca42e23          	sw	a0,-36(s0)
    5838:	fcb42c23          	sw	a1,-40(s0)
    uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    583c:	fe041523          	sh	zero,-22(s0)
    5840:	fe041723          	sh	zero,-18(s0)
    5844:	fe041623          	sh	zero,-20(s0)

    TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CC3E));
    5848:	fdc42783          	lw	a5,-36(s0)
    584c:	0207d783          	lhu	a5,32(a5)
    5850:	07c2                	slli	a5,a5,0x10
    5852:	83c1                	srli	a5,a5,0x10
    5854:	eff7f793          	andi	a5,a5,-257
    5858:	01079713          	slli	a4,a5,0x10
    585c:	8341                	srli	a4,a4,0x10
    585e:	fdc42783          	lw	a5,-36(s0)
    5862:	02e79023          	sh	a4,32(a5)
    tmpccer = TIMx->CCER;
    5866:	fdc42783          	lw	a5,-36(s0)
    586a:	0207d783          	lhu	a5,32(a5)
    586e:	fef41723          	sh	a5,-18(s0)
    tmpcr2 = TIMx->CTLR2;
    5872:	fdc42783          	lw	a5,-36(s0)
    5876:	0047d783          	lhu	a5,4(a5)
    587a:	fef41623          	sh	a5,-20(s0)
    tmpccmrx = TIMx->CHCTLR2;
    587e:	fdc42783          	lw	a5,-36(s0)
    5882:	01c7d783          	lhu	a5,28(a5)
    5886:	fef41523          	sh	a5,-22(s0)
    tmpccmrx &= (uint16_t)(~((uint16_t)TIM_OC3M));
    588a:	fea45783          	lhu	a5,-22(s0)
    588e:	f8f7f793          	andi	a5,a5,-113
    5892:	fef41523          	sh	a5,-22(s0)
    tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CC3S));
    5896:	fea45783          	lhu	a5,-22(s0)
    589a:	9bf1                	andi	a5,a5,-4
    589c:	fef41523          	sh	a5,-22(s0)
    tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
    58a0:	fd842783          	lw	a5,-40(s0)
    58a4:	0007d703          	lhu	a4,0(a5)
    58a8:	fea45783          	lhu	a5,-22(s0)
    58ac:	8fd9                	or	a5,a5,a4
    58ae:	fef41523          	sh	a5,-22(s0)
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CC3P));
    58b2:	fee45783          	lhu	a5,-18(s0)
    58b6:	dff7f793          	andi	a5,a5,-513
    58ba:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
    58be:	fd842783          	lw	a5,-40(s0)
    58c2:	0087d783          	lhu	a5,8(a5)
    58c6:	07a2                	slli	a5,a5,0x8
    58c8:	01079713          	slli	a4,a5,0x10
    58cc:	8341                	srli	a4,a4,0x10
    58ce:	fee45783          	lhu	a5,-18(s0)
    58d2:	8fd9                	or	a5,a5,a4
    58d4:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
    58d8:	fd842783          	lw	a5,-40(s0)
    58dc:	0027d783          	lhu	a5,2(a5)
    58e0:	07a2                	slli	a5,a5,0x8
    58e2:	01079713          	slli	a4,a5,0x10
    58e6:	8341                	srli	a4,a4,0x10
    58e8:	fee45783          	lhu	a5,-18(s0)
    58ec:	8fd9                	or	a5,a5,a4
    58ee:	fef41723          	sh	a5,-18(s0)

    if((TIMx == TIM1) || (TIMx == TIM2))
    58f2:	fdc42703          	lw	a4,-36(s0)
    58f6:	400137b7          	lui	a5,0x40013
    58fa:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    58fe:	00f70863          	beq	a4,a5,590e <TIM_OC3Init+0xe0>
    5902:	fdc42703          	lw	a4,-36(s0)
    5906:	400007b7          	lui	a5,0x40000
    590a:	0af71263          	bne	a4,a5,59ae <TIM_OC3Init+0x180>
    {
        tmpccer &= (uint16_t)(~((uint16_t)TIM_CC3NP));
    590e:	fee45703          	lhu	a4,-18(s0)
    5912:	77fd                	lui	a5,0xfffff
    5914:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    5918:	8ff9                	and	a5,a5,a4
    591a:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    591e:	fd842783          	lw	a5,-40(s0)
    5922:	00a7d783          	lhu	a5,10(a5)
    5926:	07a2                	slli	a5,a5,0x8
    5928:	01079713          	slli	a4,a5,0x10
    592c:	8341                	srli	a4,a4,0x10
    592e:	fee45783          	lhu	a5,-18(s0)
    5932:	8fd9                	or	a5,a5,a4
    5934:	fef41723          	sh	a5,-18(s0)
        tmpccer &= (uint16_t)(~((uint16_t)TIM_CC3NE));
    5938:	fee45783          	lhu	a5,-18(s0)
    593c:	bff7f793          	andi	a5,a5,-1025
    5940:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    5944:	fd842783          	lw	a5,-40(s0)
    5948:	0047d783          	lhu	a5,4(a5)
    594c:	07a2                	slli	a5,a5,0x8
    594e:	01079713          	slli	a4,a5,0x10
    5952:	8341                	srli	a4,a4,0x10
    5954:	fee45783          	lhu	a5,-18(s0)
    5958:	8fd9                	or	a5,a5,a4
    595a:	fef41723          	sh	a5,-18(s0)
        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_OIS3));
    595e:	fec45703          	lhu	a4,-20(s0)
    5962:	77fd                	lui	a5,0xfffff
    5964:	17fd                	addi	a5,a5,-1
    5966:	8ff9                	and	a5,a5,a4
    5968:	fef41623          	sh	a5,-20(s0)
        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_OIS3N));
    596c:	fec45703          	lhu	a4,-20(s0)
    5970:	77f9                	lui	a5,0xffffe
    5972:	17fd                	addi	a5,a5,-1
    5974:	8ff9                	and	a5,a5,a4
    5976:	fef41623          	sh	a5,-20(s0)
        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    597a:	fd842783          	lw	a5,-40(s0)
    597e:	00c7d783          	lhu	a5,12(a5) # ffffe00c <_eusrstack+0xdfffa00c>
    5982:	0792                	slli	a5,a5,0x4
    5984:	01079713          	slli	a4,a5,0x10
    5988:	8341                	srli	a4,a4,0x10
    598a:	fec45783          	lhu	a5,-20(s0)
    598e:	8fd9                	or	a5,a5,a4
    5990:	fef41623          	sh	a5,-20(s0)
        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
    5994:	fd842783          	lw	a5,-40(s0)
    5998:	00e7d783          	lhu	a5,14(a5)
    599c:	0792                	slli	a5,a5,0x4
    599e:	01079713          	slli	a4,a5,0x10
    59a2:	8341                	srli	a4,a4,0x10
    59a4:	fec45783          	lhu	a5,-20(s0)
    59a8:	8fd9                	or	a5,a5,a4
    59aa:	fef41623          	sh	a5,-20(s0)
    }

    TIMx->CTLR2 = tmpcr2;
    59ae:	fdc42783          	lw	a5,-36(s0)
    59b2:	fec45703          	lhu	a4,-20(s0)
    59b6:	00e79223          	sh	a4,4(a5)
    TIMx->CHCTLR2 = tmpccmrx;
    59ba:	fdc42783          	lw	a5,-36(s0)
    59be:	fea45703          	lhu	a4,-22(s0)
    59c2:	00e79e23          	sh	a4,28(a5)
    TIMx->CH3CVR = TIM_OCInitStruct->TIM_Pulse;
    59c6:	fd842783          	lw	a5,-40(s0)
    59ca:	0067d703          	lhu	a4,6(a5)
    59ce:	fdc42783          	lw	a5,-36(s0)
    59d2:	02e79e23          	sh	a4,60(a5)
    TIMx->CCER = tmpccer;
    59d6:	fdc42783          	lw	a5,-36(s0)
    59da:	fee45703          	lhu	a4,-18(s0)
    59de:	02e79023          	sh	a4,32(a5)
}
    59e2:	0001                	nop
    59e4:	5432                	lw	s0,44(sp)
    59e6:	6145                	addi	sp,sp,48
    59e8:	8082                	ret

000059ea <TIM_OC4Init>:
 *          TIM_OCInitStruct - pointer to a TIM_OCInitTypeDef structure.
 *
 * @return  none
 */
void TIM_OC4Init(TIM_TypeDef *TIMx, TIM_OCInitTypeDef *TIM_OCInitStruct)
{
    59ea:	7179                	addi	sp,sp,-48
    59ec:	d622                	sw	s0,44(sp)
    59ee:	1800                	addi	s0,sp,48
    59f0:	fca42e23          	sw	a0,-36(s0)
    59f4:	fcb42c23          	sw	a1,-40(s0)
    uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
    59f8:	fe041623          	sh	zero,-20(s0)
    59fc:	fe041523          	sh	zero,-22(s0)
    5a00:	fe041723          	sh	zero,-18(s0)

    TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CC4E));
    5a04:	fdc42783          	lw	a5,-36(s0)
    5a08:	0207d783          	lhu	a5,32(a5)
    5a0c:	01079713          	slli	a4,a5,0x10
    5a10:	8341                	srli	a4,a4,0x10
    5a12:	77fd                	lui	a5,0xfffff
    5a14:	17fd                	addi	a5,a5,-1
    5a16:	8ff9                	and	a5,a5,a4
    5a18:	01079713          	slli	a4,a5,0x10
    5a1c:	8341                	srli	a4,a4,0x10
    5a1e:	fdc42783          	lw	a5,-36(s0)
    5a22:	02e79023          	sh	a4,32(a5) # fffff020 <_eusrstack+0xdfffb020>
    tmpccer = TIMx->CCER;
    5a26:	fdc42783          	lw	a5,-36(s0)
    5a2a:	0207d783          	lhu	a5,32(a5)
    5a2e:	fef41523          	sh	a5,-22(s0)
    tmpcr2 = TIMx->CTLR2;
    5a32:	fdc42783          	lw	a5,-36(s0)
    5a36:	0047d783          	lhu	a5,4(a5)
    5a3a:	fef41723          	sh	a5,-18(s0)
    tmpccmrx = TIMx->CHCTLR2;
    5a3e:	fdc42783          	lw	a5,-36(s0)
    5a42:	01c7d783          	lhu	a5,28(a5)
    5a46:	fef41623          	sh	a5,-20(s0)
    tmpccmrx &= (uint16_t)(~((uint16_t)TIM_OC4M));
    5a4a:	fec45703          	lhu	a4,-20(s0)
    5a4e:	77e5                	lui	a5,0xffff9
    5a50:	17fd                	addi	a5,a5,-1
    5a52:	8ff9                	and	a5,a5,a4
    5a54:	fef41623          	sh	a5,-20(s0)
    tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CC4S));
    5a58:	fec45783          	lhu	a5,-20(s0)
    5a5c:	cff7f793          	andi	a5,a5,-769
    5a60:	fef41623          	sh	a5,-20(s0)
    tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
    5a64:	fd842783          	lw	a5,-40(s0)
    5a68:	0007d783          	lhu	a5,0(a5) # ffff9000 <_eusrstack+0xdfff5000>
    5a6c:	07a2                	slli	a5,a5,0x8
    5a6e:	01079713          	slli	a4,a5,0x10
    5a72:	8341                	srli	a4,a4,0x10
    5a74:	fec45783          	lhu	a5,-20(s0)
    5a78:	8fd9                	or	a5,a5,a4
    5a7a:	fef41623          	sh	a5,-20(s0)
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CC4P));
    5a7e:	fea45703          	lhu	a4,-22(s0)
    5a82:	77f9                	lui	a5,0xffffe
    5a84:	17fd                	addi	a5,a5,-1
    5a86:	8ff9                	and	a5,a5,a4
    5a88:	fef41523          	sh	a5,-22(s0)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
    5a8c:	fd842783          	lw	a5,-40(s0)
    5a90:	0087d783          	lhu	a5,8(a5) # ffffe008 <_eusrstack+0xdfffa008>
    5a94:	07b2                	slli	a5,a5,0xc
    5a96:	01079713          	slli	a4,a5,0x10
    5a9a:	8341                	srli	a4,a4,0x10
    5a9c:	fea45783          	lhu	a5,-22(s0)
    5aa0:	8fd9                	or	a5,a5,a4
    5aa2:	fef41523          	sh	a5,-22(s0)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
    5aa6:	fd842783          	lw	a5,-40(s0)
    5aaa:	0027d783          	lhu	a5,2(a5)
    5aae:	07b2                	slli	a5,a5,0xc
    5ab0:	01079713          	slli	a4,a5,0x10
    5ab4:	8341                	srli	a4,a4,0x10
    5ab6:	fea45783          	lhu	a5,-22(s0)
    5aba:	8fd9                	or	a5,a5,a4
    5abc:	fef41523          	sh	a5,-22(s0)

    if((TIMx == TIM1) || (TIMx == TIM2))
    5ac0:	fdc42703          	lw	a4,-36(s0)
    5ac4:	400137b7          	lui	a5,0x40013
    5ac8:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    5acc:	00f70863          	beq	a4,a5,5adc <TIM_OC4Init+0xf2>
    5ad0:	fdc42703          	lw	a4,-36(s0)
    5ad4:	400007b7          	lui	a5,0x40000
    5ad8:	02f71663          	bne	a4,a5,5b04 <TIM_OC4Init+0x11a>
    {
        tmpcr2 &= (uint16_t)(~((uint16_t)TIM_OIS4));
    5adc:	fee45703          	lhu	a4,-18(s0)
    5ae0:	77f1                	lui	a5,0xffffc
    5ae2:	17fd                	addi	a5,a5,-1
    5ae4:	8ff9                	and	a5,a5,a4
    5ae6:	fef41723          	sh	a5,-18(s0)
        tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
    5aea:	fd842783          	lw	a5,-40(s0)
    5aee:	00c7d783          	lhu	a5,12(a5) # ffffc00c <_eusrstack+0xdfff800c>
    5af2:	079a                	slli	a5,a5,0x6
    5af4:	01079713          	slli	a4,a5,0x10
    5af8:	8341                	srli	a4,a4,0x10
    5afa:	fee45783          	lhu	a5,-18(s0)
    5afe:	8fd9                	or	a5,a5,a4
    5b00:	fef41723          	sh	a5,-18(s0)
    }

    TIMx->CTLR2 = tmpcr2;
    5b04:	fdc42783          	lw	a5,-36(s0)
    5b08:	fee45703          	lhu	a4,-18(s0)
    5b0c:	00e79223          	sh	a4,4(a5)
    TIMx->CHCTLR2 = tmpccmrx;
    5b10:	fdc42783          	lw	a5,-36(s0)
    5b14:	fec45703          	lhu	a4,-20(s0)
    5b18:	00e79e23          	sh	a4,28(a5)
    TIMx->CH4CVR = TIM_OCInitStruct->TIM_Pulse;
    5b1c:	fd842783          	lw	a5,-40(s0)
    5b20:	0067d703          	lhu	a4,6(a5)
    5b24:	fdc42783          	lw	a5,-36(s0)
    5b28:	04e79023          	sh	a4,64(a5)
    TIMx->CCER = tmpccer;
    5b2c:	fdc42783          	lw	a5,-36(s0)
    5b30:	fea45703          	lhu	a4,-22(s0)
    5b34:	02e79023          	sh	a4,32(a5)
}
    5b38:	0001                	nop
    5b3a:	5432                	lw	s0,44(sp)
    5b3c:	6145                	addi	sp,sp,48
    5b3e:	8082                	ret

00005b40 <TIM_ICInit>:
 *          TIM_ICInitStruct - pointer to a TIM_ICInitTypeDef structure.
 *
 * @return  none
 */
void TIM_ICInit(TIM_TypeDef *TIMx, TIM_ICInitTypeDef *TIM_ICInitStruct)
{
    5b40:	1101                	addi	sp,sp,-32
    5b42:	ce06                	sw	ra,28(sp)
    5b44:	cc22                	sw	s0,24(sp)
    5b46:	1000                	addi	s0,sp,32
    5b48:	fea42623          	sw	a0,-20(s0)
    5b4c:	feb42423          	sw	a1,-24(s0)
    if(TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    5b50:	fe842783          	lw	a5,-24(s0)
    5b54:	0007d783          	lhu	a5,0(a5)
    5b58:	ef8d                	bnez	a5,5b92 <TIM_ICInit+0x52>
    {
        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    5b5a:	fe842783          	lw	a5,-24(s0)
    5b5e:	0027d703          	lhu	a4,2(a5)
    5b62:	fe842783          	lw	a5,-24(s0)
    5b66:	0047d603          	lhu	a2,4(a5)
    5b6a:	fe842783          	lw	a5,-24(s0)
    5b6e:	0087d783          	lhu	a5,8(a5)
    5b72:	86be                	mv	a3,a5
    5b74:	85ba                	mv	a1,a4
    5b76:	fec42503          	lw	a0,-20(s0)
    5b7a:	371010ef          	jal	ra,76ea <TI1_Config>
                   TIM_ICInitStruct->TIM_ICSelection,
                   TIM_ICInitStruct->TIM_ICFilter);
        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5b7e:	fe842783          	lw	a5,-24(s0)
    5b82:	0067d783          	lhu	a5,6(a5)
    5b86:	85be                	mv	a1,a5
    5b88:	fec42503          	lw	a0,-20(s0)
    5b8c:	7cc010ef          	jal	ra,7358 <TIM_SetIC1Prescaler>
        TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
                   TIM_ICInitStruct->TIM_ICSelection,
                   TIM_ICInitStruct->TIM_ICFilter);
        TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    }
}
    5b90:	a0d1                	j	5c54 <TIM_ICInit+0x114>
    else if(TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
    5b92:	fe842783          	lw	a5,-24(s0)
    5b96:	0007d703          	lhu	a4,0(a5)
    5b9a:	4791                	li	a5,4
    5b9c:	02f71e63          	bne	a4,a5,5bd8 <TIM_ICInit+0x98>
        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    5ba0:	fe842783          	lw	a5,-24(s0)
    5ba4:	0027d703          	lhu	a4,2(a5)
    5ba8:	fe842783          	lw	a5,-24(s0)
    5bac:	0047d603          	lhu	a2,4(a5)
    5bb0:	fe842783          	lw	a5,-24(s0)
    5bb4:	0087d783          	lhu	a5,8(a5)
    5bb8:	86be                	mv	a3,a5
    5bba:	85ba                	mv	a1,a4
    5bbc:	fec42503          	lw	a0,-20(s0)
    5bc0:	441010ef          	jal	ra,7800 <TI2_Config>
        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5bc4:	fe842783          	lw	a5,-24(s0)
    5bc8:	0067d783          	lhu	a5,6(a5)
    5bcc:	85be                	mv	a1,a5
    5bce:	fec42503          	lw	a0,-20(s0)
    5bd2:	7dc010ef          	jal	ra,73ae <TIM_SetIC2Prescaler>
}
    5bd6:	a8bd                	j	5c54 <TIM_ICInit+0x114>
    else if(TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
    5bd8:	fe842783          	lw	a5,-24(s0)
    5bdc:	0007d703          	lhu	a4,0(a5)
    5be0:	47a1                	li	a5,8
    5be2:	02f71e63          	bne	a4,a5,5c1e <TIM_ICInit+0xde>
        TI3_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    5be6:	fe842783          	lw	a5,-24(s0)
    5bea:	0027d703          	lhu	a4,2(a5)
    5bee:	fe842783          	lw	a5,-24(s0)
    5bf2:	0047d603          	lhu	a2,4(a5)
    5bf6:	fe842783          	lw	a5,-24(s0)
    5bfa:	0087d783          	lhu	a5,8(a5)
    5bfe:	86be                	mv	a3,a5
    5c00:	85ba                	mv	a1,a4
    5c02:	fec42503          	lw	a0,-20(s0)
    5c06:	531010ef          	jal	ra,7936 <TI3_Config>
        TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5c0a:	fe842783          	lw	a5,-24(s0)
    5c0e:	0067d783          	lhu	a5,6(a5)
    5c12:	85be                	mv	a1,a5
    5c14:	fec42503          	lw	a0,-20(s0)
    5c18:	7fa010ef          	jal	ra,7412 <TIM_SetIC3Prescaler>
}
    5c1c:	a825                	j	5c54 <TIM_ICInit+0x114>
        TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
    5c1e:	fe842783          	lw	a5,-24(s0)
    5c22:	0027d703          	lhu	a4,2(a5)
    5c26:	fe842783          	lw	a5,-24(s0)
    5c2a:	0047d603          	lhu	a2,4(a5)
    5c2e:	fe842783          	lw	a5,-24(s0)
    5c32:	0087d783          	lhu	a5,8(a5)
    5c36:	86be                	mv	a3,a5
    5c38:	85ba                	mv	a1,a4
    5c3a:	fec42503          	lw	a0,-20(s0)
    5c3e:	627010ef          	jal	ra,7a64 <TI4_Config>
        TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5c42:	fe842783          	lw	a5,-24(s0)
    5c46:	0067d783          	lhu	a5,6(a5)
    5c4a:	85be                	mv	a1,a5
    5c4c:	fec42503          	lw	a0,-20(s0)
    5c50:	019010ef          	jal	ra,7468 <TIM_SetIC4Prescaler>
}
    5c54:	0001                	nop
    5c56:	40f2                	lw	ra,28(sp)
    5c58:	4462                	lw	s0,24(sp)
    5c5a:	6105                	addi	sp,sp,32
    5c5c:	8082                	ret

00005c5e <TIM_PWMIConfig>:
 *          TIM_ICInitStruct - pointer to a TIM_ICInitTypeDef structure.
 *
 * @return  none
 */
void TIM_PWMIConfig(TIM_TypeDef *TIMx, TIM_ICInitTypeDef *TIM_ICInitStruct)
{
    5c5e:	7179                	addi	sp,sp,-48
    5c60:	d606                	sw	ra,44(sp)
    5c62:	d422                	sw	s0,40(sp)
    5c64:	1800                	addi	s0,sp,48
    5c66:	fca42e23          	sw	a0,-36(s0)
    5c6a:	fcb42c23          	sw	a1,-40(s0)
    uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
    5c6e:	fe041723          	sh	zero,-18(s0)
    uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
    5c72:	4785                	li	a5,1
    5c74:	fef41623          	sh	a5,-20(s0)

    if(TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
    5c78:	fd842783          	lw	a5,-40(s0)
    5c7c:	0027d783          	lhu	a5,2(a5)
    5c80:	e789                	bnez	a5,5c8a <TIM_PWMIConfig+0x2c>
    {
        icoppositepolarity = TIM_ICPolarity_Falling;
    5c82:	4789                	li	a5,2
    5c84:	fef41723          	sh	a5,-18(s0)
    5c88:	a019                	j	5c8e <TIM_PWMIConfig+0x30>
    }
    else
    {
        icoppositepolarity = TIM_ICPolarity_Rising;
    5c8a:	fe041723          	sh	zero,-18(s0)
    }

    if(TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
    5c8e:	fd842783          	lw	a5,-40(s0)
    5c92:	0047d703          	lhu	a4,4(a5)
    5c96:	4785                	li	a5,1
    5c98:	00f71663          	bne	a4,a5,5ca4 <TIM_PWMIConfig+0x46>
    {
        icoppositeselection = TIM_ICSelection_IndirectTI;
    5c9c:	4789                	li	a5,2
    5c9e:	fef41623          	sh	a5,-20(s0)
    5ca2:	a021                	j	5caa <TIM_PWMIConfig+0x4c>
    }
    else
    {
        icoppositeselection = TIM_ICSelection_DirectTI;
    5ca4:	4785                	li	a5,1
    5ca6:	fef41623          	sh	a5,-20(s0)
    }

    if(TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
    5caa:	fd842783          	lw	a5,-40(s0)
    5cae:	0007d783          	lhu	a5,0(a5)
    5cb2:	e7a5                	bnez	a5,5d1a <TIM_PWMIConfig+0xbc>
    {
        TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    5cb4:	fd842783          	lw	a5,-40(s0)
    5cb8:	0027d703          	lhu	a4,2(a5)
    5cbc:	fd842783          	lw	a5,-40(s0)
    5cc0:	0047d603          	lhu	a2,4(a5)
    5cc4:	fd842783          	lw	a5,-40(s0)
    5cc8:	0087d783          	lhu	a5,8(a5)
    5ccc:	86be                	mv	a3,a5
    5cce:	85ba                	mv	a1,a4
    5cd0:	fdc42503          	lw	a0,-36(s0)
    5cd4:	217010ef          	jal	ra,76ea <TI1_Config>
                   TIM_ICInitStruct->TIM_ICFilter);
        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5cd8:	fd842783          	lw	a5,-40(s0)
    5cdc:	0067d783          	lhu	a5,6(a5)
    5ce0:	85be                	mv	a1,a5
    5ce2:	fdc42503          	lw	a0,-36(s0)
    5ce6:	672010ef          	jal	ra,7358 <TIM_SetIC1Prescaler>
        TI2_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    5cea:	fd842783          	lw	a5,-40(s0)
    5cee:	0087d683          	lhu	a3,8(a5)
    5cf2:	fec45703          	lhu	a4,-20(s0)
    5cf6:	fee45783          	lhu	a5,-18(s0)
    5cfa:	863a                	mv	a2,a4
    5cfc:	85be                	mv	a1,a5
    5cfe:	fdc42503          	lw	a0,-36(s0)
    5d02:	2ff010ef          	jal	ra,7800 <TI2_Config>
        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5d06:	fd842783          	lw	a5,-40(s0)
    5d0a:	0067d783          	lhu	a5,6(a5)
    5d0e:	85be                	mv	a1,a5
    5d10:	fdc42503          	lw	a0,-36(s0)
    5d14:	69a010ef          	jal	ra,73ae <TIM_SetIC2Prescaler>
                   TIM_ICInitStruct->TIM_ICFilter);
        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
        TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    }
}
    5d18:	a09d                	j	5d7e <TIM_PWMIConfig+0x120>
        TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
    5d1a:	fd842783          	lw	a5,-40(s0)
    5d1e:	0027d703          	lhu	a4,2(a5)
    5d22:	fd842783          	lw	a5,-40(s0)
    5d26:	0047d603          	lhu	a2,4(a5)
    5d2a:	fd842783          	lw	a5,-40(s0)
    5d2e:	0087d783          	lhu	a5,8(a5)
    5d32:	86be                	mv	a3,a5
    5d34:	85ba                	mv	a1,a4
    5d36:	fdc42503          	lw	a0,-36(s0)
    5d3a:	2c7010ef          	jal	ra,7800 <TI2_Config>
        TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5d3e:	fd842783          	lw	a5,-40(s0)
    5d42:	0067d783          	lhu	a5,6(a5)
    5d46:	85be                	mv	a1,a5
    5d48:	fdc42503          	lw	a0,-36(s0)
    5d4c:	662010ef          	jal	ra,73ae <TIM_SetIC2Prescaler>
        TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    5d50:	fd842783          	lw	a5,-40(s0)
    5d54:	0087d683          	lhu	a3,8(a5)
    5d58:	fec45703          	lhu	a4,-20(s0)
    5d5c:	fee45783          	lhu	a5,-18(s0)
    5d60:	863a                	mv	a2,a4
    5d62:	85be                	mv	a1,a5
    5d64:	fdc42503          	lw	a0,-36(s0)
    5d68:	183010ef          	jal	ra,76ea <TI1_Config>
        TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
    5d6c:	fd842783          	lw	a5,-40(s0)
    5d70:	0067d783          	lhu	a5,6(a5)
    5d74:	85be                	mv	a1,a5
    5d76:	fdc42503          	lw	a0,-36(s0)
    5d7a:	5de010ef          	jal	ra,7358 <TIM_SetIC1Prescaler>
}
    5d7e:	0001                	nop
    5d80:	50b2                	lw	ra,44(sp)
    5d82:	5422                	lw	s0,40(sp)
    5d84:	6145                	addi	sp,sp,48
    5d86:	8082                	ret

00005d88 <TIM_BDTRConfig>:
 *          TIM_BDTRInitStruct - pointer to a TIM_BDTRInitTypeDef structure.
 *
 * @return  none
 */
void TIM_BDTRConfig(TIM_TypeDef *TIMx, TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    5d88:	1101                	addi	sp,sp,-32
    5d8a:	ce22                	sw	s0,28(sp)
    5d8c:	1000                	addi	s0,sp,32
    5d8e:	fea42623          	sw	a0,-20(s0)
    5d92:	feb42423          	sw	a1,-24(s0)
    TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5d96:	fe842783          	lw	a5,-24(s0)
    5d9a:	0007d703          	lhu	a4,0(a5)
    5d9e:	fe842783          	lw	a5,-24(s0)
    5da2:	0027d783          	lhu	a5,2(a5)
    5da6:	8fd9                	or	a5,a5,a4
    5da8:	01079713          	slli	a4,a5,0x10
    5dac:	8341                	srli	a4,a4,0x10
                 TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    5dae:	fe842783          	lw	a5,-24(s0)
    5db2:	0047d783          	lhu	a5,4(a5)
    TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5db6:	8fd9                	or	a5,a5,a4
    5db8:	01079713          	slli	a4,a5,0x10
    5dbc:	8341                	srli	a4,a4,0x10
                 TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
    5dbe:	fe842783          	lw	a5,-24(s0)
    5dc2:	0067d783          	lhu	a5,6(a5)
    TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5dc6:	8fd9                	or	a5,a5,a4
    5dc8:	01079713          	slli	a4,a5,0x10
    5dcc:	8341                	srli	a4,a4,0x10
                 TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    5dce:	fe842783          	lw	a5,-24(s0)
    5dd2:	0087d783          	lhu	a5,8(a5)
    TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5dd6:	8fd9                	or	a5,a5,a4
    5dd8:	01079713          	slli	a4,a5,0x10
    5ddc:	8341                	srli	a4,a4,0x10
                 TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
    5dde:	fe842783          	lw	a5,-24(s0)
    5de2:	00a7d783          	lhu	a5,10(a5)
    TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5de6:	8fd9                	or	a5,a5,a4
    5de8:	01079713          	slli	a4,a5,0x10
    5dec:	8341                	srli	a4,a4,0x10
                 TIM_BDTRInitStruct->TIM_AutomaticOutput;
    5dee:	fe842783          	lw	a5,-24(s0)
    5df2:	00c7d783          	lhu	a5,12(a5)
    TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
    5df6:	8fd9                	or	a5,a5,a4
    5df8:	01079713          	slli	a4,a5,0x10
    5dfc:	8341                	srli	a4,a4,0x10
    5dfe:	fec42783          	lw	a5,-20(s0)
    5e02:	04e79223          	sh	a4,68(a5)
}
    5e06:	0001                	nop
    5e08:	4472                	lw	s0,28(sp)
    5e0a:	6105                	addi	sp,sp,32
    5e0c:	8082                	ret

00005e0e <TIM_TimeBaseStructInit>:
 * @param   TIM_TimeBaseInitStruct - pointer to a TIM_TimeBaseInitTypeDef structure.
 *
 * @return  none
 */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef *TIM_TimeBaseInitStruct)
{
    5e0e:	1101                	addi	sp,sp,-32
    5e10:	ce22                	sw	s0,28(sp)
    5e12:	1000                	addi	s0,sp,32
    5e14:	fea42623          	sw	a0,-20(s0)
    TIM_TimeBaseInitStruct->TIM_Period = 0xFFFF;
    5e18:	fec42783          	lw	a5,-20(s0)
    5e1c:	577d                	li	a4,-1
    5e1e:	00e79223          	sh	a4,4(a5)
    TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
    5e22:	fec42783          	lw	a5,-20(s0)
    5e26:	00079023          	sh	zero,0(a5)
    TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
    5e2a:	fec42783          	lw	a5,-20(s0)
    5e2e:	00079323          	sh	zero,6(a5)
    TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
    5e32:	fec42783          	lw	a5,-20(s0)
    5e36:	00079123          	sh	zero,2(a5)
    TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
    5e3a:	fec42783          	lw	a5,-20(s0)
    5e3e:	00078423          	sb	zero,8(a5)
}
    5e42:	0001                	nop
    5e44:	4472                	lw	s0,28(sp)
    5e46:	6105                	addi	sp,sp,32
    5e48:	8082                	ret

00005e4a <TIM_OCStructInit>:
 * @param   TIM_OCInitStruct - pointer to a TIM_OCInitTypeDef structure.
 *
 * @return  none
 */
void TIM_OCStructInit(TIM_OCInitTypeDef *TIM_OCInitStruct)
{
    5e4a:	1101                	addi	sp,sp,-32
    5e4c:	ce22                	sw	s0,28(sp)
    5e4e:	1000                	addi	s0,sp,32
    5e50:	fea42623          	sw	a0,-20(s0)
    TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
    5e54:	fec42783          	lw	a5,-20(s0)
    5e58:	00079023          	sh	zero,0(a5)
    TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
    5e5c:	fec42783          	lw	a5,-20(s0)
    5e60:	00079123          	sh	zero,2(a5)
    TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
    5e64:	fec42783          	lw	a5,-20(s0)
    5e68:	00079223          	sh	zero,4(a5)
    TIM_OCInitStruct->TIM_Pulse = 0x0000;
    5e6c:	fec42783          	lw	a5,-20(s0)
    5e70:	00079323          	sh	zero,6(a5)
    TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
    5e74:	fec42783          	lw	a5,-20(s0)
    5e78:	00079423          	sh	zero,8(a5)
    TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
    5e7c:	fec42783          	lw	a5,-20(s0)
    5e80:	00079523          	sh	zero,10(a5)
    TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
    5e84:	fec42783          	lw	a5,-20(s0)
    5e88:	00079623          	sh	zero,12(a5)
    TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
    5e8c:	fec42783          	lw	a5,-20(s0)
    5e90:	00079723          	sh	zero,14(a5)
}
    5e94:	0001                	nop
    5e96:	4472                	lw	s0,28(sp)
    5e98:	6105                	addi	sp,sp,32
    5e9a:	8082                	ret

00005e9c <TIM_ICStructInit>:
 * @param   TIM_ICInitStruct - pointer to a TIM_ICInitTypeDef structure.
 *
 * @return  none
 */
void TIM_ICStructInit(TIM_ICInitTypeDef *TIM_ICInitStruct)
{
    5e9c:	1101                	addi	sp,sp,-32
    5e9e:	ce22                	sw	s0,28(sp)
    5ea0:	1000                	addi	s0,sp,32
    5ea2:	fea42623          	sw	a0,-20(s0)
    TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
    5ea6:	fec42783          	lw	a5,-20(s0)
    5eaa:	00079023          	sh	zero,0(a5)
    TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
    5eae:	fec42783          	lw	a5,-20(s0)
    5eb2:	00079123          	sh	zero,2(a5)
    TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
    5eb6:	fec42783          	lw	a5,-20(s0)
    5eba:	4705                	li	a4,1
    5ebc:	00e79223          	sh	a4,4(a5)
    TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
    5ec0:	fec42783          	lw	a5,-20(s0)
    5ec4:	00079323          	sh	zero,6(a5)
    TIM_ICInitStruct->TIM_ICFilter = 0x00;
    5ec8:	fec42783          	lw	a5,-20(s0)
    5ecc:	00079423          	sh	zero,8(a5)
}
    5ed0:	0001                	nop
    5ed2:	4472                	lw	s0,28(sp)
    5ed4:	6105                	addi	sp,sp,32
    5ed6:	8082                	ret

00005ed8 <TIM_BDTRStructInit>:
 * @param   TIM_BDTRInitStruct - pointer to a TIM_BDTRInitTypeDef structure.
 *
 * @return  none
 */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef *TIM_BDTRInitStruct)
{
    5ed8:	1101                	addi	sp,sp,-32
    5eda:	ce22                	sw	s0,28(sp)
    5edc:	1000                	addi	s0,sp,32
    5ede:	fea42623          	sw	a0,-20(s0)
    TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
    5ee2:	fec42783          	lw	a5,-20(s0)
    5ee6:	00079023          	sh	zero,0(a5)
    TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
    5eea:	fec42783          	lw	a5,-20(s0)
    5eee:	00079123          	sh	zero,2(a5)
    TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
    5ef2:	fec42783          	lw	a5,-20(s0)
    5ef6:	00079223          	sh	zero,4(a5)
    TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
    5efa:	fec42783          	lw	a5,-20(s0)
    5efe:	00079323          	sh	zero,6(a5)
    TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
    5f02:	fec42783          	lw	a5,-20(s0)
    5f06:	00079423          	sh	zero,8(a5)
    TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
    5f0a:	fec42783          	lw	a5,-20(s0)
    5f0e:	00079523          	sh	zero,10(a5)
    TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
    5f12:	fec42783          	lw	a5,-20(s0)
    5f16:	00079623          	sh	zero,12(a5)
}
    5f1a:	0001                	nop
    5f1c:	4472                	lw	s0,28(sp)
    5f1e:	6105                	addi	sp,sp,32
    5f20:	8082                	ret

00005f22 <TIM_Cmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_Cmd(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    5f22:	1101                	addi	sp,sp,-32
    5f24:	ce22                	sw	s0,28(sp)
    5f26:	1000                	addi	s0,sp,32
    5f28:	fea42623          	sw	a0,-20(s0)
    5f2c:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    5f30:	fe842783          	lw	a5,-24(s0)
    5f34:	c38d                	beqz	a5,5f56 <TIM_Cmd+0x34>
    {
        TIMx->CTLR1 |= TIM_CEN;
    5f36:	fec42783          	lw	a5,-20(s0)
    5f3a:	0007d783          	lhu	a5,0(a5)
    5f3e:	07c2                	slli	a5,a5,0x10
    5f40:	83c1                	srli	a5,a5,0x10
    5f42:	0017e793          	ori	a5,a5,1
    5f46:	01079713          	slli	a4,a5,0x10
    5f4a:	8341                	srli	a4,a4,0x10
    5f4c:	fec42783          	lw	a5,-20(s0)
    5f50:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        TIMx->CTLR1 &= (uint16_t)(~((uint16_t)TIM_CEN));
    }
}
    5f54:	a839                	j	5f72 <TIM_Cmd+0x50>
        TIMx->CTLR1 &= (uint16_t)(~((uint16_t)TIM_CEN));
    5f56:	fec42783          	lw	a5,-20(s0)
    5f5a:	0007d783          	lhu	a5,0(a5)
    5f5e:	07c2                	slli	a5,a5,0x10
    5f60:	83c1                	srli	a5,a5,0x10
    5f62:	9bf9                	andi	a5,a5,-2
    5f64:	01079713          	slli	a4,a5,0x10
    5f68:	8341                	srli	a4,a4,0x10
    5f6a:	fec42783          	lw	a5,-20(s0)
    5f6e:	00e79023          	sh	a4,0(a5)
}
    5f72:	0001                	nop
    5f74:	4472                	lw	s0,28(sp)
    5f76:	6105                	addi	sp,sp,32
    5f78:	8082                	ret

00005f7a <TIM_CtrlPWMOutputs>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_CtrlPWMOutputs(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    5f7a:	1101                	addi	sp,sp,-32
    5f7c:	ce22                	sw	s0,28(sp)
    5f7e:	1000                	addi	s0,sp,32
    5f80:	fea42623          	sw	a0,-20(s0)
    5f84:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    5f88:	fe842783          	lw	a5,-24(s0)
    5f8c:	c395                	beqz	a5,5fb0 <TIM_CtrlPWMOutputs+0x36>
    {
        TIMx->BDTR |= TIM_MOE;
    5f8e:	fec42783          	lw	a5,-20(s0)
    5f92:	0447d783          	lhu	a5,68(a5)
    5f96:	01079713          	slli	a4,a5,0x10
    5f9a:	8341                	srli	a4,a4,0x10
    5f9c:	77e1                	lui	a5,0xffff8
    5f9e:	8fd9                	or	a5,a5,a4
    5fa0:	01079713          	slli	a4,a5,0x10
    5fa4:	8341                	srli	a4,a4,0x10
    5fa6:	fec42783          	lw	a5,-20(s0)
    5faa:	04e79223          	sh	a4,68(a5) # ffff8044 <_eusrstack+0xdfff4044>
    }
    else
    {
        TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_MOE));
    }
}
    5fae:	a015                	j	5fd2 <TIM_CtrlPWMOutputs+0x58>
        TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_MOE));
    5fb0:	fec42783          	lw	a5,-20(s0)
    5fb4:	0447d783          	lhu	a5,68(a5)
    5fb8:	01079713          	slli	a4,a5,0x10
    5fbc:	8341                	srli	a4,a4,0x10
    5fbe:	67a1                	lui	a5,0x8
    5fc0:	17fd                	addi	a5,a5,-1
    5fc2:	8ff9                	and	a5,a5,a4
    5fc4:	01079713          	slli	a4,a5,0x10
    5fc8:	8341                	srli	a4,a4,0x10
    5fca:	fec42783          	lw	a5,-20(s0)
    5fce:	04e79223          	sh	a4,68(a5) # 8044 <USART_ClockInit+0x16>
}
    5fd2:	0001                	nop
    5fd4:	4472                	lw	s0,28(sp)
    5fd6:	6105                	addi	sp,sp,32
    5fd8:	8082                	ret

00005fda <TIM_ITConfig>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_ITConfig(TIM_TypeDef *TIMx, uint16_t TIM_IT, FunctionalState NewState)
{
    5fda:	1101                	addi	sp,sp,-32
    5fdc:	ce22                	sw	s0,28(sp)
    5fde:	1000                	addi	s0,sp,32
    5fe0:	fea42623          	sw	a0,-20(s0)
    5fe4:	87ae                	mv	a5,a1
    5fe6:	fec42223          	sw	a2,-28(s0)
    5fea:	fef41523          	sh	a5,-22(s0)
    if(NewState != DISABLE)
    5fee:	fe442783          	lw	a5,-28(s0)
    5ff2:	c39d                	beqz	a5,6018 <TIM_ITConfig+0x3e>
    {
        TIMx->DMAINTENR |= TIM_IT;
    5ff4:	fec42783          	lw	a5,-20(s0)
    5ff8:	00c7d783          	lhu	a5,12(a5)
    5ffc:	01079713          	slli	a4,a5,0x10
    6000:	8341                	srli	a4,a4,0x10
    6002:	fea45783          	lhu	a5,-22(s0)
    6006:	8fd9                	or	a5,a5,a4
    6008:	01079713          	slli	a4,a5,0x10
    600c:	8341                	srli	a4,a4,0x10
    600e:	fec42783          	lw	a5,-20(s0)
    6012:	00e79623          	sh	a4,12(a5)
    }
    else
    {
        TIMx->DMAINTENR &= (uint16_t)~TIM_IT;
    }
}
    6016:	a035                	j	6042 <TIM_ITConfig+0x68>
        TIMx->DMAINTENR &= (uint16_t)~TIM_IT;
    6018:	fec42783          	lw	a5,-20(s0)
    601c:	00c7d783          	lhu	a5,12(a5)
    6020:	01079713          	slli	a4,a5,0x10
    6024:	8341                	srli	a4,a4,0x10
    6026:	fea45783          	lhu	a5,-22(s0)
    602a:	fff7c793          	not	a5,a5
    602e:	07c2                	slli	a5,a5,0x10
    6030:	83c1                	srli	a5,a5,0x10
    6032:	8ff9                	and	a5,a5,a4
    6034:	01079713          	slli	a4,a5,0x10
    6038:	8341                	srli	a4,a4,0x10
    603a:	fec42783          	lw	a5,-20(s0)
    603e:	00e79623          	sh	a4,12(a5)
}
    6042:	0001                	nop
    6044:	4472                	lw	s0,28(sp)
    6046:	6105                	addi	sp,sp,32
    6048:	8082                	ret

0000604a <TIM_GenerateEvent>:
 *                 TIM_EventSource_Break: Timer Break event source.
 *
 * @return None
 */
void TIM_GenerateEvent(TIM_TypeDef *TIMx, uint16_t TIM_EventSource)
{
    604a:	1101                	addi	sp,sp,-32
    604c:	ce22                	sw	s0,28(sp)
    604e:	1000                	addi	s0,sp,32
    6050:	fea42623          	sw	a0,-20(s0)
    6054:	87ae                	mv	a5,a1
    6056:	fef41523          	sh	a5,-22(s0)
    TIMx->SWEVGR = TIM_EventSource;
    605a:	fec42783          	lw	a5,-20(s0)
    605e:	fea45703          	lhu	a4,-22(s0)
    6062:	00e79a23          	sh	a4,20(a5)
}
    6066:	0001                	nop
    6068:	4472                	lw	s0,28(sp)
    606a:	6105                	addi	sp,sp,32
    606c:	8082                	ret

0000606e <TIM_DMAConfig>:
 *            TIM_DMABurstLength_18Transfers.
 *
 * @return  none
 */
void TIM_DMAConfig(TIM_TypeDef *TIMx, uint16_t TIM_DMABase, uint16_t TIM_DMABurstLength)
{
    606e:	1101                	addi	sp,sp,-32
    6070:	ce22                	sw	s0,28(sp)
    6072:	1000                	addi	s0,sp,32
    6074:	fea42623          	sw	a0,-20(s0)
    6078:	87ae                	mv	a5,a1
    607a:	8732                	mv	a4,a2
    607c:	fef41523          	sh	a5,-22(s0)
    6080:	87ba                	mv	a5,a4
    6082:	fef41423          	sh	a5,-24(s0)
    TIMx->DMACFGR = TIM_DMABase | TIM_DMABurstLength;
    6086:	fea45703          	lhu	a4,-22(s0)
    608a:	fe845783          	lhu	a5,-24(s0)
    608e:	8fd9                	or	a5,a5,a4
    6090:	01079713          	slli	a4,a5,0x10
    6094:	8341                	srli	a4,a4,0x10
    6096:	fec42783          	lw	a5,-20(s0)
    609a:	04e79423          	sh	a4,72(a5)
}
    609e:	0001                	nop
    60a0:	4472                	lw	s0,28(sp)
    60a2:	6105                	addi	sp,sp,32
    60a4:	8082                	ret

000060a6 <TIM_DMACmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_DMACmd(TIM_TypeDef *TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{
    60a6:	1101                	addi	sp,sp,-32
    60a8:	ce22                	sw	s0,28(sp)
    60aa:	1000                	addi	s0,sp,32
    60ac:	fea42623          	sw	a0,-20(s0)
    60b0:	87ae                	mv	a5,a1
    60b2:	fec42223          	sw	a2,-28(s0)
    60b6:	fef41523          	sh	a5,-22(s0)
    if(NewState != DISABLE)
    60ba:	fe442783          	lw	a5,-28(s0)
    60be:	c39d                	beqz	a5,60e4 <TIM_DMACmd+0x3e>
    {
        TIMx->DMAINTENR |= TIM_DMASource;
    60c0:	fec42783          	lw	a5,-20(s0)
    60c4:	00c7d783          	lhu	a5,12(a5)
    60c8:	01079713          	slli	a4,a5,0x10
    60cc:	8341                	srli	a4,a4,0x10
    60ce:	fea45783          	lhu	a5,-22(s0)
    60d2:	8fd9                	or	a5,a5,a4
    60d4:	01079713          	slli	a4,a5,0x10
    60d8:	8341                	srli	a4,a4,0x10
    60da:	fec42783          	lw	a5,-20(s0)
    60de:	00e79623          	sh	a4,12(a5)
    }
    else
    {
        TIMx->DMAINTENR &= (uint16_t)~TIM_DMASource;
    }
}
    60e2:	a035                	j	610e <TIM_DMACmd+0x68>
        TIMx->DMAINTENR &= (uint16_t)~TIM_DMASource;
    60e4:	fec42783          	lw	a5,-20(s0)
    60e8:	00c7d783          	lhu	a5,12(a5)
    60ec:	01079713          	slli	a4,a5,0x10
    60f0:	8341                	srli	a4,a4,0x10
    60f2:	fea45783          	lhu	a5,-22(s0)
    60f6:	fff7c793          	not	a5,a5
    60fa:	07c2                	slli	a5,a5,0x10
    60fc:	83c1                	srli	a5,a5,0x10
    60fe:	8ff9                	and	a5,a5,a4
    6100:	01079713          	slli	a4,a5,0x10
    6104:	8341                	srli	a4,a4,0x10
    6106:	fec42783          	lw	a5,-20(s0)
    610a:	00e79623          	sh	a4,12(a5)
}
    610e:	0001                	nop
    6110:	4472                	lw	s0,28(sp)
    6112:	6105                	addi	sp,sp,32
    6114:	8082                	ret

00006116 <TIM_InternalClockConfig>:
 * @param   TIMx - where x can be 1 to 3 to select the TIM peripheral.
 *
 * @return  none
 */
void TIM_InternalClockConfig(TIM_TypeDef *TIMx)
{
    6116:	1101                	addi	sp,sp,-32
    6118:	ce22                	sw	s0,28(sp)
    611a:	1000                	addi	s0,sp,32
    611c:	fea42623          	sw	a0,-20(s0)
    TIMx->SMCFGR &= (uint16_t)(~((uint16_t)TIM_SMS));
    6120:	fec42783          	lw	a5,-20(s0)
    6124:	0087d783          	lhu	a5,8(a5)
    6128:	07c2                	slli	a5,a5,0x10
    612a:	83c1                	srli	a5,a5,0x10
    612c:	9be1                	andi	a5,a5,-8
    612e:	01079713          	slli	a4,a5,0x10
    6132:	8341                	srli	a4,a4,0x10
    6134:	fec42783          	lw	a5,-20(s0)
    6138:	00e79423          	sh	a4,8(a5)
}
    613c:	0001                	nop
    613e:	4472                	lw	s0,28(sp)
    6140:	6105                	addi	sp,sp,32
    6142:	8082                	ret

00006144 <TIM_ITRxExternalClockConfig>:
 *            TIM_TS_ITR3 - Internal Trigger 3.
 *
 * @return  none
 */
void TIM_ITRxExternalClockConfig(TIM_TypeDef *TIMx, uint16_t TIM_InputTriggerSource)
{
    6144:	1101                	addi	sp,sp,-32
    6146:	ce06                	sw	ra,28(sp)
    6148:	cc22                	sw	s0,24(sp)
    614a:	1000                	addi	s0,sp,32
    614c:	fea42623          	sw	a0,-20(s0)
    6150:	87ae                	mv	a5,a1
    6152:	fef41523          	sh	a5,-22(s0)
    TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
    6156:	fea45783          	lhu	a5,-22(s0)
    615a:	85be                	mv	a1,a5
    615c:	fec42503          	lw	a0,-20(s0)
    6160:	2455                	jal	6404 <TIM_SelectInputTrigger>
    TIMx->SMCFGR |= TIM_SlaveMode_External1;
    6162:	fec42783          	lw	a5,-20(s0)
    6166:	0087d783          	lhu	a5,8(a5)
    616a:	07c2                	slli	a5,a5,0x10
    616c:	83c1                	srli	a5,a5,0x10
    616e:	0077e793          	ori	a5,a5,7
    6172:	01079713          	slli	a4,a5,0x10
    6176:	8341                	srli	a4,a4,0x10
    6178:	fec42783          	lw	a5,-20(s0)
    617c:	00e79423          	sh	a4,8(a5)
}
    6180:	0001                	nop
    6182:	40f2                	lw	ra,28(sp)
    6184:	4462                	lw	s0,24(sp)
    6186:	6105                	addi	sp,sp,32
    6188:	8082                	ret

0000618a <TIM_TIxExternalClockConfig>:
 *
 * @return  none
 */
void TIM_TIxExternalClockConfig(TIM_TypeDef *TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
    618a:	1101                	addi	sp,sp,-32
    618c:	ce06                	sw	ra,28(sp)
    618e:	cc22                	sw	s0,24(sp)
    6190:	1000                	addi	s0,sp,32
    6192:	fea42623          	sw	a0,-20(s0)
    6196:	87ae                	mv	a5,a1
    6198:	8736                	mv	a4,a3
    619a:	fef41523          	sh	a5,-22(s0)
    619e:	87b2                	mv	a5,a2
    61a0:	fef41423          	sh	a5,-24(s0)
    61a4:	87ba                	mv	a5,a4
    61a6:	fef41323          	sh	a5,-26(s0)
    if(TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
    61aa:	fea45703          	lhu	a4,-22(s0)
    61ae:	06000793          	li	a5,96
    61b2:	00f71e63          	bne	a4,a5,61ce <TIM_TIxExternalClockConfig+0x44>
    {
        TI2_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    61b6:	fe645703          	lhu	a4,-26(s0)
    61ba:	fe845783          	lhu	a5,-24(s0)
    61be:	86ba                	mv	a3,a4
    61c0:	4605                	li	a2,1
    61c2:	85be                	mv	a1,a5
    61c4:	fec42503          	lw	a0,-20(s0)
    61c8:	638010ef          	jal	ra,7800 <TI2_Config>
    61cc:	a821                	j	61e4 <TIM_TIxExternalClockConfig+0x5a>
    }
    else
    {
        TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
    61ce:	fe645703          	lhu	a4,-26(s0)
    61d2:	fe845783          	lhu	a5,-24(s0)
    61d6:	86ba                	mv	a3,a4
    61d8:	4605                	li	a2,1
    61da:	85be                	mv	a1,a5
    61dc:	fec42503          	lw	a0,-20(s0)
    61e0:	50a010ef          	jal	ra,76ea <TI1_Config>
    }

    TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
    61e4:	fea45783          	lhu	a5,-22(s0)
    61e8:	85be                	mv	a1,a5
    61ea:	fec42503          	lw	a0,-20(s0)
    61ee:	2c19                	jal	6404 <TIM_SelectInputTrigger>
    TIMx->SMCFGR |= TIM_SlaveMode_External1;
    61f0:	fec42783          	lw	a5,-20(s0)
    61f4:	0087d783          	lhu	a5,8(a5)
    61f8:	07c2                	slli	a5,a5,0x10
    61fa:	83c1                	srli	a5,a5,0x10
    61fc:	0077e793          	ori	a5,a5,7
    6200:	01079713          	slli	a4,a5,0x10
    6204:	8341                	srli	a4,a4,0x10
    6206:	fec42783          	lw	a5,-20(s0)
    620a:	00e79423          	sh	a4,8(a5)
}
    620e:	0001                	nop
    6210:	40f2                	lw	ra,28(sp)
    6212:	4462                	lw	s0,24(sp)
    6214:	6105                	addi	sp,sp,32
    6216:	8082                	ret

00006218 <TIM_ETRClockMode1Config>:
 *
 * @return  none
 */
void TIM_ETRClockMode1Config(TIM_TypeDef *TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
    6218:	7179                	addi	sp,sp,-48
    621a:	d606                	sw	ra,44(sp)
    621c:	d422                	sw	s0,40(sp)
    621e:	1800                	addi	s0,sp,48
    6220:	fca42e23          	sw	a0,-36(s0)
    6224:	87ae                	mv	a5,a1
    6226:	8736                	mv	a4,a3
    6228:	fcf41d23          	sh	a5,-38(s0)
    622c:	87b2                	mv	a5,a2
    622e:	fcf41c23          	sh	a5,-40(s0)
    6232:	87ba                	mv	a5,a4
    6234:	fcf41b23          	sh	a5,-42(s0)
    uint16_t tmpsmcr = 0;
    6238:	fe041723          	sh	zero,-18(s0)

    TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    623c:	fd645683          	lhu	a3,-42(s0)
    6240:	fd845703          	lhu	a4,-40(s0)
    6244:	fda45783          	lhu	a5,-38(s0)
    6248:	863a                	mv	a2,a4
    624a:	85be                	mv	a1,a5
    624c:	fdc42503          	lw	a0,-36(s0)
    6250:	284d                	jal	6302 <TIM_ETRConfig>
    tmpsmcr = TIMx->SMCFGR;
    6252:	fdc42783          	lw	a5,-36(s0)
    6256:	0087d783          	lhu	a5,8(a5)
    625a:	fef41723          	sh	a5,-18(s0)
    tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMS));
    625e:	fee45783          	lhu	a5,-18(s0)
    6262:	9be1                	andi	a5,a5,-8
    6264:	fef41723          	sh	a5,-18(s0)
    tmpsmcr |= TIM_SlaveMode_External1;
    6268:	fee45783          	lhu	a5,-18(s0)
    626c:	0077e793          	ori	a5,a5,7
    6270:	fef41723          	sh	a5,-18(s0)
    tmpsmcr &= (uint16_t)(~((uint16_t)TIM_TS));
    6274:	fee45783          	lhu	a5,-18(s0)
    6278:	f8f7f793          	andi	a5,a5,-113
    627c:	fef41723          	sh	a5,-18(s0)
    tmpsmcr |= TIM_TS_ETRF;
    6280:	fee45783          	lhu	a5,-18(s0)
    6284:	0707e793          	ori	a5,a5,112
    6288:	fef41723          	sh	a5,-18(s0)
    TIMx->SMCFGR = tmpsmcr;
    628c:	fdc42783          	lw	a5,-36(s0)
    6290:	fee45703          	lhu	a4,-18(s0)
    6294:	00e79423          	sh	a4,8(a5)
}
    6298:	0001                	nop
    629a:	50b2                	lw	ra,44(sp)
    629c:	5422                	lw	s0,40(sp)
    629e:	6145                	addi	sp,sp,48
    62a0:	8082                	ret

000062a2 <TIM_ETRClockMode2Config>:
 *
 * @return  none
 */
void TIM_ETRClockMode2Config(TIM_TypeDef *TIMx, uint16_t TIM_ExtTRGPrescaler,
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
    62a2:	1101                	addi	sp,sp,-32
    62a4:	ce06                	sw	ra,28(sp)
    62a6:	cc22                	sw	s0,24(sp)
    62a8:	1000                	addi	s0,sp,32
    62aa:	fea42623          	sw	a0,-20(s0)
    62ae:	87ae                	mv	a5,a1
    62b0:	8736                	mv	a4,a3
    62b2:	fef41523          	sh	a5,-22(s0)
    62b6:	87b2                	mv	a5,a2
    62b8:	fef41423          	sh	a5,-24(s0)
    62bc:	87ba                	mv	a5,a4
    62be:	fef41323          	sh	a5,-26(s0)
    TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
    62c2:	fe645683          	lhu	a3,-26(s0)
    62c6:	fe845703          	lhu	a4,-24(s0)
    62ca:	fea45783          	lhu	a5,-22(s0)
    62ce:	863a                	mv	a2,a4
    62d0:	85be                	mv	a1,a5
    62d2:	fec42503          	lw	a0,-20(s0)
    62d6:	2035                	jal	6302 <TIM_ETRConfig>
    TIMx->SMCFGR |= TIM_ECE;
    62d8:	fec42783          	lw	a5,-20(s0)
    62dc:	0087d783          	lhu	a5,8(a5)
    62e0:	01079713          	slli	a4,a5,0x10
    62e4:	8341                	srli	a4,a4,0x10
    62e6:	6791                	lui	a5,0x4
    62e8:	8fd9                	or	a5,a5,a4
    62ea:	01079713          	slli	a4,a5,0x10
    62ee:	8341                	srli	a4,a4,0x10
    62f0:	fec42783          	lw	a5,-20(s0)
    62f4:	00e79423          	sh	a4,8(a5) # 4008 <NVIC_Init+0x2b8>
}
    62f8:	0001                	nop
    62fa:	40f2                	lw	ra,28(sp)
    62fc:	4462                	lw	s0,24(sp)
    62fe:	6105                	addi	sp,sp,32
    6300:	8082                	ret

00006302 <TIM_ETRConfig>:
 *
 * @return  none
 */
void TIM_ETRConfig(TIM_TypeDef *TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
    6302:	7179                	addi	sp,sp,-48
    6304:	d622                	sw	s0,44(sp)
    6306:	1800                	addi	s0,sp,48
    6308:	fca42e23          	sw	a0,-36(s0)
    630c:	87ae                	mv	a5,a1
    630e:	8736                	mv	a4,a3
    6310:	fcf41d23          	sh	a5,-38(s0)
    6314:	87b2                	mv	a5,a2
    6316:	fcf41c23          	sh	a5,-40(s0)
    631a:	87ba                	mv	a5,a4
    631c:	fcf41b23          	sh	a5,-42(s0)
    uint16_t tmpsmcr = 0;
    6320:	fe041723          	sh	zero,-18(s0)

    tmpsmcr = TIMx->SMCFGR;
    6324:	fdc42783          	lw	a5,-36(s0)
    6328:	0087d783          	lhu	a5,8(a5)
    632c:	fef41723          	sh	a5,-18(s0)
    tmpsmcr &= SMCFGR_ETR_Mask;
    6330:	fee45783          	lhu	a5,-18(s0)
    6334:	0ff7f793          	andi	a5,a5,255
    6338:	fef41723          	sh	a5,-18(s0)
    tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
    633c:	fd645783          	lhu	a5,-42(s0)
    6340:	07a2                	slli	a5,a5,0x8
    6342:	01079713          	slli	a4,a5,0x10
    6346:	8341                	srli	a4,a4,0x10
    6348:	fd845783          	lhu	a5,-40(s0)
    634c:	8fd9                	or	a5,a5,a4
    634e:	01079713          	slli	a4,a5,0x10
    6352:	8341                	srli	a4,a4,0x10
    6354:	fda45783          	lhu	a5,-38(s0)
    6358:	8fd9                	or	a5,a5,a4
    635a:	01079713          	slli	a4,a5,0x10
    635e:	8341                	srli	a4,a4,0x10
    6360:	fee45783          	lhu	a5,-18(s0)
    6364:	8fd9                	or	a5,a5,a4
    6366:	fef41723          	sh	a5,-18(s0)
    TIMx->SMCFGR = tmpsmcr;
    636a:	fdc42783          	lw	a5,-36(s0)
    636e:	fee45703          	lhu	a4,-18(s0)
    6372:	00e79423          	sh	a4,8(a5)
}
    6376:	0001                	nop
    6378:	5432                	lw	s0,44(sp)
    637a:	6145                	addi	sp,sp,48
    637c:	8082                	ret

0000637e <TIM_PrescalerConfig>:
 *            TIM_PSCReloadMode_Immediate - The Prescaler is loaded immediately.
 *
 * @return  none
 */
void TIM_PrescalerConfig(TIM_TypeDef *TIMx, uint16_t Prescaler, uint16_t TIM_PSCReloadMode)
{
    637e:	1101                	addi	sp,sp,-32
    6380:	ce22                	sw	s0,28(sp)
    6382:	1000                	addi	s0,sp,32
    6384:	fea42623          	sw	a0,-20(s0)
    6388:	87ae                	mv	a5,a1
    638a:	8732                	mv	a4,a2
    638c:	fef41523          	sh	a5,-22(s0)
    6390:	87ba                	mv	a5,a4
    6392:	fef41423          	sh	a5,-24(s0)
    TIMx->PSC = Prescaler;
    6396:	fec42783          	lw	a5,-20(s0)
    639a:	fea45703          	lhu	a4,-22(s0)
    639e:	02e79423          	sh	a4,40(a5)
    TIMx->SWEVGR = TIM_PSCReloadMode;
    63a2:	fec42783          	lw	a5,-20(s0)
    63a6:	fe845703          	lhu	a4,-24(s0)
    63aa:	00e79a23          	sh	a4,20(a5)
}
    63ae:	0001                	nop
    63b0:	4472                	lw	s0,28(sp)
    63b2:	6105                	addi	sp,sp,32
    63b4:	8082                	ret

000063b6 <TIM_CounterModeConfig>:
 *            TIM_CounterMode_CenterAligned3 - TIM Center Aligned Mode3.
 *
 * @return  none
 */
void TIM_CounterModeConfig(TIM_TypeDef *TIMx, uint16_t TIM_CounterMode)
{
    63b6:	7179                	addi	sp,sp,-48
    63b8:	d622                	sw	s0,44(sp)
    63ba:	1800                	addi	s0,sp,48
    63bc:	fca42e23          	sw	a0,-36(s0)
    63c0:	87ae                	mv	a5,a1
    63c2:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpcr1 = 0;
    63c6:	fe041723          	sh	zero,-18(s0)

    tmpcr1 = TIMx->CTLR1;
    63ca:	fdc42783          	lw	a5,-36(s0)
    63ce:	0007d783          	lhu	a5,0(a5)
    63d2:	fef41723          	sh	a5,-18(s0)
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_DIR | TIM_CMS)));
    63d6:	fee45783          	lhu	a5,-18(s0)
    63da:	f8f7f793          	andi	a5,a5,-113
    63de:	fef41723          	sh	a5,-18(s0)
    tmpcr1 |= TIM_CounterMode;
    63e2:	fee45703          	lhu	a4,-18(s0)
    63e6:	fda45783          	lhu	a5,-38(s0)
    63ea:	8fd9                	or	a5,a5,a4
    63ec:	fef41723          	sh	a5,-18(s0)
    TIMx->CTLR1 = tmpcr1;
    63f0:	fdc42783          	lw	a5,-36(s0)
    63f4:	fee45703          	lhu	a4,-18(s0)
    63f8:	00e79023          	sh	a4,0(a5)
}
    63fc:	0001                	nop
    63fe:	5432                	lw	s0,44(sp)
    6400:	6145                	addi	sp,sp,48
    6402:	8082                	ret

00006404 <TIM_SelectInputTrigger>:
 *            TIM_TS_ETRF - External Trigger input.
 *
 * @return  none
 */
void TIM_SelectInputTrigger(TIM_TypeDef *TIMx, uint16_t TIM_InputTriggerSource)
{
    6404:	7179                	addi	sp,sp,-48
    6406:	d622                	sw	s0,44(sp)
    6408:	1800                	addi	s0,sp,48
    640a:	fca42e23          	sw	a0,-36(s0)
    640e:	87ae                	mv	a5,a1
    6410:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpsmcr = 0;
    6414:	fe041723          	sh	zero,-18(s0)

    tmpsmcr = TIMx->SMCFGR;
    6418:	fdc42783          	lw	a5,-36(s0)
    641c:	0087d783          	lhu	a5,8(a5)
    6420:	fef41723          	sh	a5,-18(s0)
    tmpsmcr &= (uint16_t)(~((uint16_t)TIM_TS));
    6424:	fee45783          	lhu	a5,-18(s0)
    6428:	f8f7f793          	andi	a5,a5,-113
    642c:	fef41723          	sh	a5,-18(s0)
    tmpsmcr |= TIM_InputTriggerSource;
    6430:	fee45703          	lhu	a4,-18(s0)
    6434:	fda45783          	lhu	a5,-38(s0)
    6438:	8fd9                	or	a5,a5,a4
    643a:	fef41723          	sh	a5,-18(s0)
    TIMx->SMCFGR = tmpsmcr;
    643e:	fdc42783          	lw	a5,-36(s0)
    6442:	fee45703          	lhu	a4,-18(s0)
    6446:	00e79423          	sh	a4,8(a5)
}
    644a:	0001                	nop
    644c:	5432                	lw	s0,44(sp)
    644e:	6145                	addi	sp,sp,48
    6450:	8082                	ret

00006452 <TIM_EncoderInterfaceConfig>:
 *
 * @return  none
 */
void TIM_EncoderInterfaceConfig(TIM_TypeDef *TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
    6452:	7179                	addi	sp,sp,-48
    6454:	d622                	sw	s0,44(sp)
    6456:	1800                	addi	s0,sp,48
    6458:	fca42e23          	sw	a0,-36(s0)
    645c:	87ae                	mv	a5,a1
    645e:	8736                	mv	a4,a3
    6460:	fcf41d23          	sh	a5,-38(s0)
    6464:	87b2                	mv	a5,a2
    6466:	fcf41c23          	sh	a5,-40(s0)
    646a:	87ba                	mv	a5,a4
    646c:	fcf41b23          	sh	a5,-42(s0)
    uint16_t tmpsmcr = 0;
    6470:	fe041723          	sh	zero,-18(s0)
    uint16_t tmpccmr1 = 0;
    6474:	fe041623          	sh	zero,-20(s0)
    uint16_t tmpccer = 0;
    6478:	fe041523          	sh	zero,-22(s0)

    tmpsmcr = TIMx->SMCFGR;
    647c:	fdc42783          	lw	a5,-36(s0)
    6480:	0087d783          	lhu	a5,8(a5)
    6484:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 = TIMx->CHCTLR1;
    6488:	fdc42783          	lw	a5,-36(s0)
    648c:	0187d783          	lhu	a5,24(a5)
    6490:	fef41623          	sh	a5,-20(s0)
    tmpccer = TIMx->CCER;
    6494:	fdc42783          	lw	a5,-36(s0)
    6498:	0207d783          	lhu	a5,32(a5)
    649c:	fef41523          	sh	a5,-22(s0)
    tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMS));
    64a0:	fee45783          	lhu	a5,-18(s0)
    64a4:	9be1                	andi	a5,a5,-8
    64a6:	fef41723          	sh	a5,-18(s0)
    tmpsmcr |= TIM_EncoderMode;
    64aa:	fee45703          	lhu	a4,-18(s0)
    64ae:	fda45783          	lhu	a5,-38(s0)
    64b2:	8fd9                	or	a5,a5,a4
    64b4:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t)(((uint16_t) ~((uint16_t)TIM_CC1S)) & (uint16_t)(~((uint16_t)TIM_CC2S)));
    64b8:	fec45783          	lhu	a5,-20(s0)
    64bc:	cfc7f793          	andi	a5,a5,-772
    64c0:	fef41623          	sh	a5,-20(s0)
    tmpccmr1 |= TIM_CC1S_0 | TIM_CC2S_0;
    64c4:	fec45783          	lhu	a5,-20(s0)
    64c8:	1017e793          	ori	a5,a5,257
    64cc:	fef41623          	sh	a5,-20(s0)
    tmpccer &= (uint16_t)(((uint16_t) ~((uint16_t)TIM_CC1P)) & ((uint16_t) ~((uint16_t)TIM_CC2P)));
    64d0:	fea45783          	lhu	a5,-22(s0)
    64d4:	fdd7f793          	andi	a5,a5,-35
    64d8:	fef41523          	sh	a5,-22(s0)
    tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
    64dc:	fd645783          	lhu	a5,-42(s0)
    64e0:	0792                	slli	a5,a5,0x4
    64e2:	01079713          	slli	a4,a5,0x10
    64e6:	8341                	srli	a4,a4,0x10
    64e8:	fd845783          	lhu	a5,-40(s0)
    64ec:	8fd9                	or	a5,a5,a4
    64ee:	01079713          	slli	a4,a5,0x10
    64f2:	8341                	srli	a4,a4,0x10
    64f4:	fea45783          	lhu	a5,-22(s0)
    64f8:	8fd9                	or	a5,a5,a4
    64fa:	fef41523          	sh	a5,-22(s0)
    TIMx->SMCFGR = tmpsmcr;
    64fe:	fdc42783          	lw	a5,-36(s0)
    6502:	fee45703          	lhu	a4,-18(s0)
    6506:	00e79423          	sh	a4,8(a5)
    TIMx->CHCTLR1 = tmpccmr1;
    650a:	fdc42783          	lw	a5,-36(s0)
    650e:	fec45703          	lhu	a4,-20(s0)
    6512:	00e79c23          	sh	a4,24(a5)
    TIMx->CCER = tmpccer;
    6516:	fdc42783          	lw	a5,-36(s0)
    651a:	fea45703          	lhu	a4,-22(s0)
    651e:	02e79023          	sh	a4,32(a5)
}
    6522:	0001                	nop
    6524:	5432                	lw	s0,44(sp)
    6526:	6145                	addi	sp,sp,48
    6528:	8082                	ret

0000652a <TIM_ForcedOC1Config>:
 *            TIM_ForcedAction_InActive - Force inactive level on OC1REF.
 *
 * @return  none
 */
void TIM_ForcedOC1Config(TIM_TypeDef *TIMx, uint16_t TIM_ForcedAction)
{
    652a:	7179                	addi	sp,sp,-48
    652c:	d622                	sw	s0,44(sp)
    652e:	1800                	addi	s0,sp,48
    6530:	fca42e23          	sw	a0,-36(s0)
    6534:	87ae                	mv	a5,a1
    6536:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr1 = 0;
    653a:	fe041723          	sh	zero,-18(s0)

    tmpccmr1 = TIMx->CHCTLR1;
    653e:	fdc42783          	lw	a5,-36(s0)
    6542:	0187d783          	lhu	a5,24(a5)
    6546:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t) ~((uint16_t)TIM_OC1M);
    654a:	fee45783          	lhu	a5,-18(s0)
    654e:	f8f7f793          	andi	a5,a5,-113
    6552:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 |= TIM_ForcedAction;
    6556:	fee45703          	lhu	a4,-18(s0)
    655a:	fda45783          	lhu	a5,-38(s0)
    655e:	8fd9                	or	a5,a5,a4
    6560:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR1 = tmpccmr1;
    6564:	fdc42783          	lw	a5,-36(s0)
    6568:	fee45703          	lhu	a4,-18(s0)
    656c:	00e79c23          	sh	a4,24(a5)
}
    6570:	0001                	nop
    6572:	5432                	lw	s0,44(sp)
    6574:	6145                	addi	sp,sp,48
    6576:	8082                	ret

00006578 <TIM_ForcedOC2Config>:
 *            TIM_ForcedAction_InActive - Force inactive level on OC2REF.
 *
 * @return  none
 */
void TIM_ForcedOC2Config(TIM_TypeDef *TIMx, uint16_t TIM_ForcedAction)
{
    6578:	7179                	addi	sp,sp,-48
    657a:	d622                	sw	s0,44(sp)
    657c:	1800                	addi	s0,sp,48
    657e:	fca42e23          	sw	a0,-36(s0)
    6582:	87ae                	mv	a5,a1
    6584:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr1 = 0;
    6588:	fe041723          	sh	zero,-18(s0)

    tmpccmr1 = TIMx->CHCTLR1;
    658c:	fdc42783          	lw	a5,-36(s0)
    6590:	0187d783          	lhu	a5,24(a5)
    6594:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t) ~((uint16_t)TIM_OC2M);
    6598:	fee45703          	lhu	a4,-18(s0)
    659c:	77e5                	lui	a5,0xffff9
    659e:	17fd                	addi	a5,a5,-1
    65a0:	8ff9                	and	a5,a5,a4
    65a2:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
    65a6:	fda45783          	lhu	a5,-38(s0)
    65aa:	07a2                	slli	a5,a5,0x8
    65ac:	01079713          	slli	a4,a5,0x10
    65b0:	8341                	srli	a4,a4,0x10
    65b2:	fee45783          	lhu	a5,-18(s0)
    65b6:	8fd9                	or	a5,a5,a4
    65b8:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR1 = tmpccmr1;
    65bc:	fdc42783          	lw	a5,-36(s0)
    65c0:	fee45703          	lhu	a4,-18(s0)
    65c4:	00e79c23          	sh	a4,24(a5) # ffff9018 <_eusrstack+0xdfff5018>
}
    65c8:	0001                	nop
    65ca:	5432                	lw	s0,44(sp)
    65cc:	6145                	addi	sp,sp,48
    65ce:	8082                	ret

000065d0 <TIM_ForcedOC3Config>:
 *            TIM_ForcedAction_InActive - Force inactive level on OC3REF.
 *
 * @return  none
 */
void TIM_ForcedOC3Config(TIM_TypeDef *TIMx, uint16_t TIM_ForcedAction)
{
    65d0:	7179                	addi	sp,sp,-48
    65d2:	d622                	sw	s0,44(sp)
    65d4:	1800                	addi	s0,sp,48
    65d6:	fca42e23          	sw	a0,-36(s0)
    65da:	87ae                	mv	a5,a1
    65dc:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr2 = 0;
    65e0:	fe041723          	sh	zero,-18(s0)

    tmpccmr2 = TIMx->CHCTLR2;
    65e4:	fdc42783          	lw	a5,-36(s0)
    65e8:	01c7d783          	lhu	a5,28(a5)
    65ec:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 &= (uint16_t) ~((uint16_t)TIM_OC3M);
    65f0:	fee45783          	lhu	a5,-18(s0)
    65f4:	f8f7f793          	andi	a5,a5,-113
    65f8:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 |= TIM_ForcedAction;
    65fc:	fee45703          	lhu	a4,-18(s0)
    6600:	fda45783          	lhu	a5,-38(s0)
    6604:	8fd9                	or	a5,a5,a4
    6606:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR2 = tmpccmr2;
    660a:	fdc42783          	lw	a5,-36(s0)
    660e:	fee45703          	lhu	a4,-18(s0)
    6612:	00e79e23          	sh	a4,28(a5)
}
    6616:	0001                	nop
    6618:	5432                	lw	s0,44(sp)
    661a:	6145                	addi	sp,sp,48
    661c:	8082                	ret

0000661e <TIM_ForcedOC4Config>:
 *            TIM_ForcedAction_InActive - Force inactive level on OC4REF.
 *
 * @return  none
 */
void TIM_ForcedOC4Config(TIM_TypeDef *TIMx, uint16_t TIM_ForcedAction)
{
    661e:	7179                	addi	sp,sp,-48
    6620:	d622                	sw	s0,44(sp)
    6622:	1800                	addi	s0,sp,48
    6624:	fca42e23          	sw	a0,-36(s0)
    6628:	87ae                	mv	a5,a1
    662a:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr2 = 0;
    662e:	fe041723          	sh	zero,-18(s0)

    tmpccmr2 = TIMx->CHCTLR2;
    6632:	fdc42783          	lw	a5,-36(s0)
    6636:	01c7d783          	lhu	a5,28(a5)
    663a:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 &= (uint16_t) ~((uint16_t)TIM_OC4M);
    663e:	fee45703          	lhu	a4,-18(s0)
    6642:	77e5                	lui	a5,0xffff9
    6644:	17fd                	addi	a5,a5,-1
    6646:	8ff9                	and	a5,a5,a4
    6648:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
    664c:	fda45783          	lhu	a5,-38(s0)
    6650:	07a2                	slli	a5,a5,0x8
    6652:	01079713          	slli	a4,a5,0x10
    6656:	8341                	srli	a4,a4,0x10
    6658:	fee45783          	lhu	a5,-18(s0)
    665c:	8fd9                	or	a5,a5,a4
    665e:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR2 = tmpccmr2;
    6662:	fdc42783          	lw	a5,-36(s0)
    6666:	fee45703          	lhu	a4,-18(s0)
    666a:	00e79e23          	sh	a4,28(a5) # ffff901c <_eusrstack+0xdfff501c>
}
    666e:	0001                	nop
    6670:	5432                	lw	s0,44(sp)
    6672:	6145                	addi	sp,sp,48
    6674:	8082                	ret

00006676 <TIM_ARRPreloadConfig>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_ARRPreloadConfig(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    6676:	1101                	addi	sp,sp,-32
    6678:	ce22                	sw	s0,28(sp)
    667a:	1000                	addi	s0,sp,32
    667c:	fea42623          	sw	a0,-20(s0)
    6680:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    6684:	fe842783          	lw	a5,-24(s0)
    6688:	c38d                	beqz	a5,66aa <TIM_ARRPreloadConfig+0x34>
    {
        TIMx->CTLR1 |= TIM_ARPE;
    668a:	fec42783          	lw	a5,-20(s0)
    668e:	0007d783          	lhu	a5,0(a5)
    6692:	07c2                	slli	a5,a5,0x10
    6694:	83c1                	srli	a5,a5,0x10
    6696:	0807e793          	ori	a5,a5,128
    669a:	01079713          	slli	a4,a5,0x10
    669e:	8341                	srli	a4,a4,0x10
    66a0:	fec42783          	lw	a5,-20(s0)
    66a4:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        TIMx->CTLR1 &= (uint16_t) ~((uint16_t)TIM_ARPE);
    }
}
    66a8:	a005                	j	66c8 <TIM_ARRPreloadConfig+0x52>
        TIMx->CTLR1 &= (uint16_t) ~((uint16_t)TIM_ARPE);
    66aa:	fec42783          	lw	a5,-20(s0)
    66ae:	0007d783          	lhu	a5,0(a5)
    66b2:	07c2                	slli	a5,a5,0x10
    66b4:	83c1                	srli	a5,a5,0x10
    66b6:	f7f7f793          	andi	a5,a5,-129
    66ba:	01079713          	slli	a4,a5,0x10
    66be:	8341                	srli	a4,a4,0x10
    66c0:	fec42783          	lw	a5,-20(s0)
    66c4:	00e79023          	sh	a4,0(a5)
}
    66c8:	0001                	nop
    66ca:	4472                	lw	s0,28(sp)
    66cc:	6105                	addi	sp,sp,32
    66ce:	8082                	ret

000066d0 <TIM_SelectCOM>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_SelectCOM(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    66d0:	1101                	addi	sp,sp,-32
    66d2:	ce22                	sw	s0,28(sp)
    66d4:	1000                	addi	s0,sp,32
    66d6:	fea42623          	sw	a0,-20(s0)
    66da:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    66de:	fe842783          	lw	a5,-24(s0)
    66e2:	c38d                	beqz	a5,6704 <TIM_SelectCOM+0x34>
    {
        TIMx->CTLR2 |= TIM_CCUS;
    66e4:	fec42783          	lw	a5,-20(s0)
    66e8:	0047d783          	lhu	a5,4(a5)
    66ec:	07c2                	slli	a5,a5,0x10
    66ee:	83c1                	srli	a5,a5,0x10
    66f0:	0047e793          	ori	a5,a5,4
    66f4:	01079713          	slli	a4,a5,0x10
    66f8:	8341                	srli	a4,a4,0x10
    66fa:	fec42783          	lw	a5,-20(s0)
    66fe:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_CCUS);
    }
}
    6702:	a839                	j	6720 <TIM_SelectCOM+0x50>
        TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_CCUS);
    6704:	fec42783          	lw	a5,-20(s0)
    6708:	0047d783          	lhu	a5,4(a5)
    670c:	07c2                	slli	a5,a5,0x10
    670e:	83c1                	srli	a5,a5,0x10
    6710:	9bed                	andi	a5,a5,-5
    6712:	01079713          	slli	a4,a5,0x10
    6716:	8341                	srli	a4,a4,0x10
    6718:	fec42783          	lw	a5,-20(s0)
    671c:	00e79223          	sh	a4,4(a5)
}
    6720:	0001                	nop
    6722:	4472                	lw	s0,28(sp)
    6724:	6105                	addi	sp,sp,32
    6726:	8082                	ret

00006728 <TIM_SelectCCDMA>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_SelectCCDMA(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    6728:	1101                	addi	sp,sp,-32
    672a:	ce22                	sw	s0,28(sp)
    672c:	1000                	addi	s0,sp,32
    672e:	fea42623          	sw	a0,-20(s0)
    6732:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    6736:	fe842783          	lw	a5,-24(s0)
    673a:	c38d                	beqz	a5,675c <TIM_SelectCCDMA+0x34>
    {
        TIMx->CTLR2 |= TIM_CCDS;
    673c:	fec42783          	lw	a5,-20(s0)
    6740:	0047d783          	lhu	a5,4(a5)
    6744:	07c2                	slli	a5,a5,0x10
    6746:	83c1                	srli	a5,a5,0x10
    6748:	0087e793          	ori	a5,a5,8
    674c:	01079713          	slli	a4,a5,0x10
    6750:	8341                	srli	a4,a4,0x10
    6752:	fec42783          	lw	a5,-20(s0)
    6756:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_CCDS);
    }
}
    675a:	a839                	j	6778 <TIM_SelectCCDMA+0x50>
        TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_CCDS);
    675c:	fec42783          	lw	a5,-20(s0)
    6760:	0047d783          	lhu	a5,4(a5)
    6764:	07c2                	slli	a5,a5,0x10
    6766:	83c1                	srli	a5,a5,0x10
    6768:	9bdd                	andi	a5,a5,-9
    676a:	01079713          	slli	a4,a5,0x10
    676e:	8341                	srli	a4,a4,0x10
    6770:	fec42783          	lw	a5,-20(s0)
    6774:	00e79223          	sh	a4,4(a5)
}
    6778:	0001                	nop
    677a:	4472                	lw	s0,28(sp)
    677c:	6105                	addi	sp,sp,32
    677e:	8082                	ret

00006780 <TIM_CCPreloadControl>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_CCPreloadControl(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    6780:	1101                	addi	sp,sp,-32
    6782:	ce22                	sw	s0,28(sp)
    6784:	1000                	addi	s0,sp,32
    6786:	fea42623          	sw	a0,-20(s0)
    678a:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    678e:	fe842783          	lw	a5,-24(s0)
    6792:	c38d                	beqz	a5,67b4 <TIM_CCPreloadControl+0x34>
    {
        TIMx->CTLR2 |= TIM_CCPC;
    6794:	fec42783          	lw	a5,-20(s0)
    6798:	0047d783          	lhu	a5,4(a5)
    679c:	07c2                	slli	a5,a5,0x10
    679e:	83c1                	srli	a5,a5,0x10
    67a0:	0017e793          	ori	a5,a5,1
    67a4:	01079713          	slli	a4,a5,0x10
    67a8:	8341                	srli	a4,a4,0x10
    67aa:	fec42783          	lw	a5,-20(s0)
    67ae:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_CCPC);
    }
}
    67b2:	a839                	j	67d0 <TIM_CCPreloadControl+0x50>
        TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_CCPC);
    67b4:	fec42783          	lw	a5,-20(s0)
    67b8:	0047d783          	lhu	a5,4(a5)
    67bc:	07c2                	slli	a5,a5,0x10
    67be:	83c1                	srli	a5,a5,0x10
    67c0:	9bf9                	andi	a5,a5,-2
    67c2:	01079713          	slli	a4,a5,0x10
    67c6:	8341                	srli	a4,a4,0x10
    67c8:	fec42783          	lw	a5,-20(s0)
    67cc:	00e79223          	sh	a4,4(a5)
}
    67d0:	0001                	nop
    67d2:	4472                	lw	s0,28(sp)
    67d4:	6105                	addi	sp,sp,32
    67d6:	8082                	ret

000067d8 <TIM_OC1PreloadConfig>:
 *            TIM_OCPreload_Disable.
 *
 * @return  none
 */
void TIM_OC1PreloadConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCPreload)
{
    67d8:	7179                	addi	sp,sp,-48
    67da:	d622                	sw	s0,44(sp)
    67dc:	1800                	addi	s0,sp,48
    67de:	fca42e23          	sw	a0,-36(s0)
    67e2:	87ae                	mv	a5,a1
    67e4:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr1 = 0;
    67e8:	fe041723          	sh	zero,-18(s0)

    tmpccmr1 = TIMx->CHCTLR1;
    67ec:	fdc42783          	lw	a5,-36(s0)
    67f0:	0187d783          	lhu	a5,24(a5)
    67f4:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t) ~((uint16_t)TIM_OC1PE);
    67f8:	fee45783          	lhu	a5,-18(s0)
    67fc:	9bdd                	andi	a5,a5,-9
    67fe:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 |= TIM_OCPreload;
    6802:	fee45703          	lhu	a4,-18(s0)
    6806:	fda45783          	lhu	a5,-38(s0)
    680a:	8fd9                	or	a5,a5,a4
    680c:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR1 = tmpccmr1;
    6810:	fdc42783          	lw	a5,-36(s0)
    6814:	fee45703          	lhu	a4,-18(s0)
    6818:	00e79c23          	sh	a4,24(a5)
}
    681c:	0001                	nop
    681e:	5432                	lw	s0,44(sp)
    6820:	6145                	addi	sp,sp,48
    6822:	8082                	ret

00006824 <TIM_OC2PreloadConfig>:
 *            TIM_OCPreload_Disable.
 *
 * @return  none
 */
void TIM_OC2PreloadConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCPreload)
{
    6824:	7179                	addi	sp,sp,-48
    6826:	d622                	sw	s0,44(sp)
    6828:	1800                	addi	s0,sp,48
    682a:	fca42e23          	sw	a0,-36(s0)
    682e:	87ae                	mv	a5,a1
    6830:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr1 = 0;
    6834:	fe041723          	sh	zero,-18(s0)

    tmpccmr1 = TIMx->CHCTLR1;
    6838:	fdc42783          	lw	a5,-36(s0)
    683c:	0187d783          	lhu	a5,24(a5)
    6840:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t) ~((uint16_t)TIM_OC2PE);
    6844:	fee45703          	lhu	a4,-18(s0)
    6848:	77fd                	lui	a5,0xfffff
    684a:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    684e:	8ff9                	and	a5,a5,a4
    6850:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
    6854:	fda45783          	lhu	a5,-38(s0)
    6858:	07a2                	slli	a5,a5,0x8
    685a:	01079713          	slli	a4,a5,0x10
    685e:	8341                	srli	a4,a4,0x10
    6860:	fee45783          	lhu	a5,-18(s0)
    6864:	8fd9                	or	a5,a5,a4
    6866:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR1 = tmpccmr1;
    686a:	fdc42783          	lw	a5,-36(s0)
    686e:	fee45703          	lhu	a4,-18(s0)
    6872:	00e79c23          	sh	a4,24(a5)
}
    6876:	0001                	nop
    6878:	5432                	lw	s0,44(sp)
    687a:	6145                	addi	sp,sp,48
    687c:	8082                	ret

0000687e <TIM_OC3PreloadConfig>:
 *            TIM_OCPreload_Disable.
 *
 * @return  none
 */
void TIM_OC3PreloadConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCPreload)
{
    687e:	7179                	addi	sp,sp,-48
    6880:	d622                	sw	s0,44(sp)
    6882:	1800                	addi	s0,sp,48
    6884:	fca42e23          	sw	a0,-36(s0)
    6888:	87ae                	mv	a5,a1
    688a:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr2 = 0;
    688e:	fe041723          	sh	zero,-18(s0)

    tmpccmr2 = TIMx->CHCTLR2;
    6892:	fdc42783          	lw	a5,-36(s0)
    6896:	01c7d783          	lhu	a5,28(a5)
    689a:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 &= (uint16_t) ~((uint16_t)TIM_OC3PE);
    689e:	fee45783          	lhu	a5,-18(s0)
    68a2:	9bdd                	andi	a5,a5,-9
    68a4:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 |= TIM_OCPreload;
    68a8:	fee45703          	lhu	a4,-18(s0)
    68ac:	fda45783          	lhu	a5,-38(s0)
    68b0:	8fd9                	or	a5,a5,a4
    68b2:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR2 = tmpccmr2;
    68b6:	fdc42783          	lw	a5,-36(s0)
    68ba:	fee45703          	lhu	a4,-18(s0)
    68be:	00e79e23          	sh	a4,28(a5)
}
    68c2:	0001                	nop
    68c4:	5432                	lw	s0,44(sp)
    68c6:	6145                	addi	sp,sp,48
    68c8:	8082                	ret

000068ca <TIM_OC4PreloadConfig>:
 *            TIM_OCPreload_Disable.
 *
 * @return  none
 */
void TIM_OC4PreloadConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCPreload)
{
    68ca:	7179                	addi	sp,sp,-48
    68cc:	d622                	sw	s0,44(sp)
    68ce:	1800                	addi	s0,sp,48
    68d0:	fca42e23          	sw	a0,-36(s0)
    68d4:	87ae                	mv	a5,a1
    68d6:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr2 = 0;
    68da:	fe041723          	sh	zero,-18(s0)

    tmpccmr2 = TIMx->CHCTLR2;
    68de:	fdc42783          	lw	a5,-36(s0)
    68e2:	01c7d783          	lhu	a5,28(a5)
    68e6:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 &= (uint16_t) ~((uint16_t)TIM_OC4PE);
    68ea:	fee45703          	lhu	a4,-18(s0)
    68ee:	77fd                	lui	a5,0xfffff
    68f0:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    68f4:	8ff9                	and	a5,a5,a4
    68f6:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
    68fa:	fda45783          	lhu	a5,-38(s0)
    68fe:	07a2                	slli	a5,a5,0x8
    6900:	01079713          	slli	a4,a5,0x10
    6904:	8341                	srli	a4,a4,0x10
    6906:	fee45783          	lhu	a5,-18(s0)
    690a:	8fd9                	or	a5,a5,a4
    690c:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR2 = tmpccmr2;
    6910:	fdc42783          	lw	a5,-36(s0)
    6914:	fee45703          	lhu	a4,-18(s0)
    6918:	00e79e23          	sh	a4,28(a5)
}
    691c:	0001                	nop
    691e:	5432                	lw	s0,44(sp)
    6920:	6145                	addi	sp,sp,48
    6922:	8082                	ret

00006924 <TIM_OC1FastConfig>:
 *            TIM_OCFast_Disable - TIM output compare fast disable.
 *
 * @return  none
 */
void TIM_OC1FastConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCFast)
{
    6924:	7179                	addi	sp,sp,-48
    6926:	d622                	sw	s0,44(sp)
    6928:	1800                	addi	s0,sp,48
    692a:	fca42e23          	sw	a0,-36(s0)
    692e:	87ae                	mv	a5,a1
    6930:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr1 = 0;
    6934:	fe041723          	sh	zero,-18(s0)

    tmpccmr1 = TIMx->CHCTLR1;
    6938:	fdc42783          	lw	a5,-36(s0)
    693c:	0187d783          	lhu	a5,24(a5)
    6940:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t) ~((uint16_t)TIM_OC1FE);
    6944:	fee45783          	lhu	a5,-18(s0)
    6948:	9bed                	andi	a5,a5,-5
    694a:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 |= TIM_OCFast;
    694e:	fee45703          	lhu	a4,-18(s0)
    6952:	fda45783          	lhu	a5,-38(s0)
    6956:	8fd9                	or	a5,a5,a4
    6958:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR1 = tmpccmr1;
    695c:	fdc42783          	lw	a5,-36(s0)
    6960:	fee45703          	lhu	a4,-18(s0)
    6964:	00e79c23          	sh	a4,24(a5)
}
    6968:	0001                	nop
    696a:	5432                	lw	s0,44(sp)
    696c:	6145                	addi	sp,sp,48
    696e:	8082                	ret

00006970 <TIM_OC2FastConfig>:
 *            TIM_OCFast_Disable - TIM output compare fast disable.
 *
 * @return  none
 */
void TIM_OC2FastConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCFast)
{
    6970:	7179                	addi	sp,sp,-48
    6972:	d622                	sw	s0,44(sp)
    6974:	1800                	addi	s0,sp,48
    6976:	fca42e23          	sw	a0,-36(s0)
    697a:	87ae                	mv	a5,a1
    697c:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr1 = 0;
    6980:	fe041723          	sh	zero,-18(s0)

    tmpccmr1 = TIMx->CHCTLR1;
    6984:	fdc42783          	lw	a5,-36(s0)
    6988:	0187d783          	lhu	a5,24(a5)
    698c:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t) ~((uint16_t)TIM_OC2FE);
    6990:	fee45783          	lhu	a5,-18(s0)
    6994:	bff7f793          	andi	a5,a5,-1025
    6998:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
    699c:	fda45783          	lhu	a5,-38(s0)
    69a0:	07a2                	slli	a5,a5,0x8
    69a2:	01079713          	slli	a4,a5,0x10
    69a6:	8341                	srli	a4,a4,0x10
    69a8:	fee45783          	lhu	a5,-18(s0)
    69ac:	8fd9                	or	a5,a5,a4
    69ae:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR1 = tmpccmr1;
    69b2:	fdc42783          	lw	a5,-36(s0)
    69b6:	fee45703          	lhu	a4,-18(s0)
    69ba:	00e79c23          	sh	a4,24(a5)
}
    69be:	0001                	nop
    69c0:	5432                	lw	s0,44(sp)
    69c2:	6145                	addi	sp,sp,48
    69c4:	8082                	ret

000069c6 <TIM_OC3FastConfig>:
 *            TIM_OCFast_Disable - TIM output compare fast disable.
 *
 * @return  none
 */
void TIM_OC3FastConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCFast)
{
    69c6:	7179                	addi	sp,sp,-48
    69c8:	d622                	sw	s0,44(sp)
    69ca:	1800                	addi	s0,sp,48
    69cc:	fca42e23          	sw	a0,-36(s0)
    69d0:	87ae                	mv	a5,a1
    69d2:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr2 = 0;
    69d6:	fe041723          	sh	zero,-18(s0)

    tmpccmr2 = TIMx->CHCTLR2;
    69da:	fdc42783          	lw	a5,-36(s0)
    69de:	01c7d783          	lhu	a5,28(a5)
    69e2:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 &= (uint16_t) ~((uint16_t)TIM_OC3FE);
    69e6:	fee45783          	lhu	a5,-18(s0)
    69ea:	9bed                	andi	a5,a5,-5
    69ec:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 |= TIM_OCFast;
    69f0:	fee45703          	lhu	a4,-18(s0)
    69f4:	fda45783          	lhu	a5,-38(s0)
    69f8:	8fd9                	or	a5,a5,a4
    69fa:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR2 = tmpccmr2;
    69fe:	fdc42783          	lw	a5,-36(s0)
    6a02:	fee45703          	lhu	a4,-18(s0)
    6a06:	00e79e23          	sh	a4,28(a5)
}
    6a0a:	0001                	nop
    6a0c:	5432                	lw	s0,44(sp)
    6a0e:	6145                	addi	sp,sp,48
    6a10:	8082                	ret

00006a12 <TIM_OC4FastConfig>:
 *            TIM_OCFast_Disable - TIM output compare fast disable.
 *
 * @return  none
 */
void TIM_OC4FastConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCFast)
{
    6a12:	7179                	addi	sp,sp,-48
    6a14:	d622                	sw	s0,44(sp)
    6a16:	1800                	addi	s0,sp,48
    6a18:	fca42e23          	sw	a0,-36(s0)
    6a1c:	87ae                	mv	a5,a1
    6a1e:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr2 = 0;
    6a22:	fe041723          	sh	zero,-18(s0)

    tmpccmr2 = TIMx->CHCTLR2;
    6a26:	fdc42783          	lw	a5,-36(s0)
    6a2a:	01c7d783          	lhu	a5,28(a5)
    6a2e:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 &= (uint16_t) ~((uint16_t)TIM_OC4FE);
    6a32:	fee45783          	lhu	a5,-18(s0)
    6a36:	bff7f793          	andi	a5,a5,-1025
    6a3a:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
    6a3e:	fda45783          	lhu	a5,-38(s0)
    6a42:	07a2                	slli	a5,a5,0x8
    6a44:	01079713          	slli	a4,a5,0x10
    6a48:	8341                	srli	a4,a4,0x10
    6a4a:	fee45783          	lhu	a5,-18(s0)
    6a4e:	8fd9                	or	a5,a5,a4
    6a50:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR2 = tmpccmr2;
    6a54:	fdc42783          	lw	a5,-36(s0)
    6a58:	fee45703          	lhu	a4,-18(s0)
    6a5c:	00e79e23          	sh	a4,28(a5)
}
    6a60:	0001                	nop
    6a62:	5432                	lw	s0,44(sp)
    6a64:	6145                	addi	sp,sp,48
    6a66:	8082                	ret

00006a68 <TIM_ClearOC1Ref>:
 *            TIM_OCClear_Disable - TIM Output clear disable.
 *
 * @return  none
 */
void TIM_ClearOC1Ref(TIM_TypeDef *TIMx, uint16_t TIM_OCClear)
{
    6a68:	7179                	addi	sp,sp,-48
    6a6a:	d622                	sw	s0,44(sp)
    6a6c:	1800                	addi	s0,sp,48
    6a6e:	fca42e23          	sw	a0,-36(s0)
    6a72:	87ae                	mv	a5,a1
    6a74:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr1 = 0;
    6a78:	fe041723          	sh	zero,-18(s0)

    tmpccmr1 = TIMx->CHCTLR1;
    6a7c:	fdc42783          	lw	a5,-36(s0)
    6a80:	0187d783          	lhu	a5,24(a5)
    6a84:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t) ~((uint16_t)TIM_OC1CE);
    6a88:	fee45783          	lhu	a5,-18(s0)
    6a8c:	f7f7f793          	andi	a5,a5,-129
    6a90:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 |= TIM_OCClear;
    6a94:	fee45703          	lhu	a4,-18(s0)
    6a98:	fda45783          	lhu	a5,-38(s0)
    6a9c:	8fd9                	or	a5,a5,a4
    6a9e:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR1 = tmpccmr1;
    6aa2:	fdc42783          	lw	a5,-36(s0)
    6aa6:	fee45703          	lhu	a4,-18(s0)
    6aaa:	00e79c23          	sh	a4,24(a5)
}
    6aae:	0001                	nop
    6ab0:	5432                	lw	s0,44(sp)
    6ab2:	6145                	addi	sp,sp,48
    6ab4:	8082                	ret

00006ab6 <TIM_ClearOC2Ref>:
 *            TIM_OCClear_Disable - TIM Output clear disable.
 *
 * @return  none
 */
void TIM_ClearOC2Ref(TIM_TypeDef *TIMx, uint16_t TIM_OCClear)
{
    6ab6:	7179                	addi	sp,sp,-48
    6ab8:	d622                	sw	s0,44(sp)
    6aba:	1800                	addi	s0,sp,48
    6abc:	fca42e23          	sw	a0,-36(s0)
    6ac0:	87ae                	mv	a5,a1
    6ac2:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr1 = 0;
    6ac6:	fe041723          	sh	zero,-18(s0)

    tmpccmr1 = TIMx->CHCTLR1;
    6aca:	fdc42783          	lw	a5,-36(s0)
    6ace:	0187d783          	lhu	a5,24(a5)
    6ad2:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t) ~((uint16_t)TIM_OC2CE);
    6ad6:	fee45703          	lhu	a4,-18(s0)
    6ada:	67a1                	lui	a5,0x8
    6adc:	17fd                	addi	a5,a5,-1
    6ade:	8ff9                	and	a5,a5,a4
    6ae0:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
    6ae4:	fda45783          	lhu	a5,-38(s0)
    6ae8:	07a2                	slli	a5,a5,0x8
    6aea:	01079713          	slli	a4,a5,0x10
    6aee:	8341                	srli	a4,a4,0x10
    6af0:	fee45783          	lhu	a5,-18(s0)
    6af4:	8fd9                	or	a5,a5,a4
    6af6:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR1 = tmpccmr1;
    6afa:	fdc42783          	lw	a5,-36(s0)
    6afe:	fee45703          	lhu	a4,-18(s0)
    6b02:	00e79c23          	sh	a4,24(a5) # 8018 <USART_StructInit+0x32>
}
    6b06:	0001                	nop
    6b08:	5432                	lw	s0,44(sp)
    6b0a:	6145                	addi	sp,sp,48
    6b0c:	8082                	ret

00006b0e <TIM_ClearOC3Ref>:
 *            TIM_OCClear_Disable - TIM Output clear disable.
 *
 * @return  none
 */
void TIM_ClearOC3Ref(TIM_TypeDef *TIMx, uint16_t TIM_OCClear)
{
    6b0e:	7179                	addi	sp,sp,-48
    6b10:	d622                	sw	s0,44(sp)
    6b12:	1800                	addi	s0,sp,48
    6b14:	fca42e23          	sw	a0,-36(s0)
    6b18:	87ae                	mv	a5,a1
    6b1a:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr2 = 0;
    6b1e:	fe041723          	sh	zero,-18(s0)

    tmpccmr2 = TIMx->CHCTLR2;
    6b22:	fdc42783          	lw	a5,-36(s0)
    6b26:	01c7d783          	lhu	a5,28(a5)
    6b2a:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 &= (uint16_t) ~((uint16_t)TIM_OC3CE);
    6b2e:	fee45783          	lhu	a5,-18(s0)
    6b32:	f7f7f793          	andi	a5,a5,-129
    6b36:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 |= TIM_OCClear;
    6b3a:	fee45703          	lhu	a4,-18(s0)
    6b3e:	fda45783          	lhu	a5,-38(s0)
    6b42:	8fd9                	or	a5,a5,a4
    6b44:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR2 = tmpccmr2;
    6b48:	fdc42783          	lw	a5,-36(s0)
    6b4c:	fee45703          	lhu	a4,-18(s0)
    6b50:	00e79e23          	sh	a4,28(a5)
}
    6b54:	0001                	nop
    6b56:	5432                	lw	s0,44(sp)
    6b58:	6145                	addi	sp,sp,48
    6b5a:	8082                	ret

00006b5c <TIM_ClearOC4Ref>:
 *            TIM_OCClear_Disable - TIM Output clear disable.
 *
 * @return  none
 */
void TIM_ClearOC4Ref(TIM_TypeDef *TIMx, uint16_t TIM_OCClear)
{
    6b5c:	7179                	addi	sp,sp,-48
    6b5e:	d622                	sw	s0,44(sp)
    6b60:	1800                	addi	s0,sp,48
    6b62:	fca42e23          	sw	a0,-36(s0)
    6b66:	87ae                	mv	a5,a1
    6b68:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccmr2 = 0;
    6b6c:	fe041723          	sh	zero,-18(s0)

    tmpccmr2 = TIMx->CHCTLR2;
    6b70:	fdc42783          	lw	a5,-36(s0)
    6b74:	01c7d783          	lhu	a5,28(a5)
    6b78:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 &= (uint16_t) ~((uint16_t)TIM_OC4CE);
    6b7c:	fee45703          	lhu	a4,-18(s0)
    6b80:	67a1                	lui	a5,0x8
    6b82:	17fd                	addi	a5,a5,-1
    6b84:	8ff9                	and	a5,a5,a4
    6b86:	fef41723          	sh	a5,-18(s0)
    tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
    6b8a:	fda45783          	lhu	a5,-38(s0)
    6b8e:	07a2                	slli	a5,a5,0x8
    6b90:	01079713          	slli	a4,a5,0x10
    6b94:	8341                	srli	a4,a4,0x10
    6b96:	fee45783          	lhu	a5,-18(s0)
    6b9a:	8fd9                	or	a5,a5,a4
    6b9c:	fef41723          	sh	a5,-18(s0)
    TIMx->CHCTLR2 = tmpccmr2;
    6ba0:	fdc42783          	lw	a5,-36(s0)
    6ba4:	fee45703          	lhu	a4,-18(s0)
    6ba8:	00e79e23          	sh	a4,28(a5) # 801c <USART_StructInit+0x36>
}
    6bac:	0001                	nop
    6bae:	5432                	lw	s0,44(sp)
    6bb0:	6145                	addi	sp,sp,48
    6bb2:	8082                	ret

00006bb4 <TIM_OC1PolarityConfig>:
 *            TIM_OCPolarity_Low - Output Compare active low.
 *
 * @return  none
 */
void TIM_OC1PolarityConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCPolarity)
{
    6bb4:	7179                	addi	sp,sp,-48
    6bb6:	d622                	sw	s0,44(sp)
    6bb8:	1800                	addi	s0,sp,48
    6bba:	fca42e23          	sw	a0,-36(s0)
    6bbe:	87ae                	mv	a5,a1
    6bc0:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccer = 0;
    6bc4:	fe041723          	sh	zero,-18(s0)

    tmpccer = TIMx->CCER;
    6bc8:	fdc42783          	lw	a5,-36(s0)
    6bcc:	0207d783          	lhu	a5,32(a5)
    6bd0:	fef41723          	sh	a5,-18(s0)
    tmpccer &= (uint16_t) ~((uint16_t)TIM_CC1P);
    6bd4:	fee45783          	lhu	a5,-18(s0)
    6bd8:	9bf5                	andi	a5,a5,-3
    6bda:	fef41723          	sh	a5,-18(s0)
    tmpccer |= TIM_OCPolarity;
    6bde:	fee45703          	lhu	a4,-18(s0)
    6be2:	fda45783          	lhu	a5,-38(s0)
    6be6:	8fd9                	or	a5,a5,a4
    6be8:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER = tmpccer;
    6bec:	fdc42783          	lw	a5,-36(s0)
    6bf0:	fee45703          	lhu	a4,-18(s0)
    6bf4:	02e79023          	sh	a4,32(a5)
}
    6bf8:	0001                	nop
    6bfa:	5432                	lw	s0,44(sp)
    6bfc:	6145                	addi	sp,sp,48
    6bfe:	8082                	ret

00006c00 <TIM_OC1NPolarityConfig>:
 *            TIM_OCNPolarity_Low - Output Compare active low.
 *
 * @return  none
 */
void TIM_OC1NPolarityConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCNPolarity)
{
    6c00:	7179                	addi	sp,sp,-48
    6c02:	d622                	sw	s0,44(sp)
    6c04:	1800                	addi	s0,sp,48
    6c06:	fca42e23          	sw	a0,-36(s0)
    6c0a:	87ae                	mv	a5,a1
    6c0c:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccer = 0;
    6c10:	fe041723          	sh	zero,-18(s0)

    tmpccer = TIMx->CCER;
    6c14:	fdc42783          	lw	a5,-36(s0)
    6c18:	0207d783          	lhu	a5,32(a5)
    6c1c:	fef41723          	sh	a5,-18(s0)
    tmpccer &= (uint16_t) ~((uint16_t)TIM_CC1NP);
    6c20:	fee45783          	lhu	a5,-18(s0)
    6c24:	9bdd                	andi	a5,a5,-9
    6c26:	fef41723          	sh	a5,-18(s0)
    tmpccer |= TIM_OCNPolarity;
    6c2a:	fee45703          	lhu	a4,-18(s0)
    6c2e:	fda45783          	lhu	a5,-38(s0)
    6c32:	8fd9                	or	a5,a5,a4
    6c34:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER = tmpccer;
    6c38:	fdc42783          	lw	a5,-36(s0)
    6c3c:	fee45703          	lhu	a4,-18(s0)
    6c40:	02e79023          	sh	a4,32(a5)
}
    6c44:	0001                	nop
    6c46:	5432                	lw	s0,44(sp)
    6c48:	6145                	addi	sp,sp,48
    6c4a:	8082                	ret

00006c4c <TIM_OC2PolarityConfig>:
 *            TIM_OCPolarity_Low - Output Compare active low.
 *
 * @return  none
 */
void TIM_OC2PolarityConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCPolarity)
{
    6c4c:	7179                	addi	sp,sp,-48
    6c4e:	d622                	sw	s0,44(sp)
    6c50:	1800                	addi	s0,sp,48
    6c52:	fca42e23          	sw	a0,-36(s0)
    6c56:	87ae                	mv	a5,a1
    6c58:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccer = 0;
    6c5c:	fe041723          	sh	zero,-18(s0)

    tmpccer = TIMx->CCER;
    6c60:	fdc42783          	lw	a5,-36(s0)
    6c64:	0207d783          	lhu	a5,32(a5)
    6c68:	fef41723          	sh	a5,-18(s0)
    tmpccer &= (uint16_t) ~((uint16_t)TIM_CC2P);
    6c6c:	fee45783          	lhu	a5,-18(s0)
    6c70:	fdf7f793          	andi	a5,a5,-33
    6c74:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
    6c78:	fda45783          	lhu	a5,-38(s0)
    6c7c:	0792                	slli	a5,a5,0x4
    6c7e:	01079713          	slli	a4,a5,0x10
    6c82:	8341                	srli	a4,a4,0x10
    6c84:	fee45783          	lhu	a5,-18(s0)
    6c88:	8fd9                	or	a5,a5,a4
    6c8a:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER = tmpccer;
    6c8e:	fdc42783          	lw	a5,-36(s0)
    6c92:	fee45703          	lhu	a4,-18(s0)
    6c96:	02e79023          	sh	a4,32(a5)
}
    6c9a:	0001                	nop
    6c9c:	5432                	lw	s0,44(sp)
    6c9e:	6145                	addi	sp,sp,48
    6ca0:	8082                	ret

00006ca2 <TIM_OC2NPolarityConfig>:
 *            TIM_OCNPolarity_Low - Output Compare active low.
 *
 * @return  none
 */
void TIM_OC2NPolarityConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCNPolarity)
{
    6ca2:	7179                	addi	sp,sp,-48
    6ca4:	d622                	sw	s0,44(sp)
    6ca6:	1800                	addi	s0,sp,48
    6ca8:	fca42e23          	sw	a0,-36(s0)
    6cac:	87ae                	mv	a5,a1
    6cae:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccer = 0;
    6cb2:	fe041723          	sh	zero,-18(s0)

    tmpccer = TIMx->CCER;
    6cb6:	fdc42783          	lw	a5,-36(s0)
    6cba:	0207d783          	lhu	a5,32(a5)
    6cbe:	fef41723          	sh	a5,-18(s0)
    tmpccer &= (uint16_t) ~((uint16_t)TIM_CC2NP);
    6cc2:	fee45783          	lhu	a5,-18(s0)
    6cc6:	f7f7f793          	andi	a5,a5,-129
    6cca:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
    6cce:	fda45783          	lhu	a5,-38(s0)
    6cd2:	0792                	slli	a5,a5,0x4
    6cd4:	01079713          	slli	a4,a5,0x10
    6cd8:	8341                	srli	a4,a4,0x10
    6cda:	fee45783          	lhu	a5,-18(s0)
    6cde:	8fd9                	or	a5,a5,a4
    6ce0:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER = tmpccer;
    6ce4:	fdc42783          	lw	a5,-36(s0)
    6ce8:	fee45703          	lhu	a4,-18(s0)
    6cec:	02e79023          	sh	a4,32(a5)
}
    6cf0:	0001                	nop
    6cf2:	5432                	lw	s0,44(sp)
    6cf4:	6145                	addi	sp,sp,48
    6cf6:	8082                	ret

00006cf8 <TIM_OC3PolarityConfig>:
 *            TIM_OCPolarity_Low - Output Compare active low.
 *
 * @return  none
 */
void TIM_OC3PolarityConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCPolarity)
{
    6cf8:	7179                	addi	sp,sp,-48
    6cfa:	d622                	sw	s0,44(sp)
    6cfc:	1800                	addi	s0,sp,48
    6cfe:	fca42e23          	sw	a0,-36(s0)
    6d02:	87ae                	mv	a5,a1
    6d04:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccer = 0;
    6d08:	fe041723          	sh	zero,-18(s0)

    tmpccer = TIMx->CCER;
    6d0c:	fdc42783          	lw	a5,-36(s0)
    6d10:	0207d783          	lhu	a5,32(a5)
    6d14:	fef41723          	sh	a5,-18(s0)
    tmpccer &= (uint16_t) ~((uint16_t)TIM_CC3P);
    6d18:	fee45783          	lhu	a5,-18(s0)
    6d1c:	dff7f793          	andi	a5,a5,-513
    6d20:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
    6d24:	fda45783          	lhu	a5,-38(s0)
    6d28:	07a2                	slli	a5,a5,0x8
    6d2a:	01079713          	slli	a4,a5,0x10
    6d2e:	8341                	srli	a4,a4,0x10
    6d30:	fee45783          	lhu	a5,-18(s0)
    6d34:	8fd9                	or	a5,a5,a4
    6d36:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER = tmpccer;
    6d3a:	fdc42783          	lw	a5,-36(s0)
    6d3e:	fee45703          	lhu	a4,-18(s0)
    6d42:	02e79023          	sh	a4,32(a5)
}
    6d46:	0001                	nop
    6d48:	5432                	lw	s0,44(sp)
    6d4a:	6145                	addi	sp,sp,48
    6d4c:	8082                	ret

00006d4e <TIM_OC3NPolarityConfig>:
 *            TIM_OCNPolarity_Low - Output Compare active low.
 *
 * @return  none
 */
void TIM_OC3NPolarityConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCNPolarity)
{
    6d4e:	7179                	addi	sp,sp,-48
    6d50:	d622                	sw	s0,44(sp)
    6d52:	1800                	addi	s0,sp,48
    6d54:	fca42e23          	sw	a0,-36(s0)
    6d58:	87ae                	mv	a5,a1
    6d5a:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccer = 0;
    6d5e:	fe041723          	sh	zero,-18(s0)

    tmpccer = TIMx->CCER;
    6d62:	fdc42783          	lw	a5,-36(s0)
    6d66:	0207d783          	lhu	a5,32(a5)
    6d6a:	fef41723          	sh	a5,-18(s0)
    tmpccer &= (uint16_t) ~((uint16_t)TIM_CC3NP);
    6d6e:	fee45703          	lhu	a4,-18(s0)
    6d72:	77fd                	lui	a5,0xfffff
    6d74:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    6d78:	8ff9                	and	a5,a5,a4
    6d7a:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
    6d7e:	fda45783          	lhu	a5,-38(s0)
    6d82:	07a2                	slli	a5,a5,0x8
    6d84:	01079713          	slli	a4,a5,0x10
    6d88:	8341                	srli	a4,a4,0x10
    6d8a:	fee45783          	lhu	a5,-18(s0)
    6d8e:	8fd9                	or	a5,a5,a4
    6d90:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER = tmpccer;
    6d94:	fdc42783          	lw	a5,-36(s0)
    6d98:	fee45703          	lhu	a4,-18(s0)
    6d9c:	02e79023          	sh	a4,32(a5)
}
    6da0:	0001                	nop
    6da2:	5432                	lw	s0,44(sp)
    6da4:	6145                	addi	sp,sp,48
    6da6:	8082                	ret

00006da8 <TIM_OC4PolarityConfig>:
 *            TIM_OCPolarity_Low - Output Compare active low.
 *
 * @return  none
 */
void TIM_OC4PolarityConfig(TIM_TypeDef *TIMx, uint16_t TIM_OCPolarity)
{
    6da8:	7179                	addi	sp,sp,-48
    6daa:	d622                	sw	s0,44(sp)
    6dac:	1800                	addi	s0,sp,48
    6dae:	fca42e23          	sw	a0,-36(s0)
    6db2:	87ae                	mv	a5,a1
    6db4:	fcf41d23          	sh	a5,-38(s0)
    uint16_t tmpccer = 0;
    6db8:	fe041723          	sh	zero,-18(s0)

    tmpccer = TIMx->CCER;
    6dbc:	fdc42783          	lw	a5,-36(s0)
    6dc0:	0207d783          	lhu	a5,32(a5)
    6dc4:	fef41723          	sh	a5,-18(s0)
    tmpccer &= (uint16_t) ~((uint16_t)TIM_CC4P);
    6dc8:	fee45703          	lhu	a4,-18(s0)
    6dcc:	77f9                	lui	a5,0xffffe
    6dce:	17fd                	addi	a5,a5,-1
    6dd0:	8ff9                	and	a5,a5,a4
    6dd2:	fef41723          	sh	a5,-18(s0)
    tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
    6dd6:	fda45783          	lhu	a5,-38(s0)
    6dda:	07b2                	slli	a5,a5,0xc
    6ddc:	01079713          	slli	a4,a5,0x10
    6de0:	8341                	srli	a4,a4,0x10
    6de2:	fee45783          	lhu	a5,-18(s0)
    6de6:	8fd9                	or	a5,a5,a4
    6de8:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER = tmpccer;
    6dec:	fdc42783          	lw	a5,-36(s0)
    6df0:	fee45703          	lhu	a4,-18(s0)
    6df4:	02e79023          	sh	a4,32(a5) # ffffe020 <_eusrstack+0xdfffa020>
}
    6df8:	0001                	nop
    6dfa:	5432                	lw	s0,44(sp)
    6dfc:	6145                	addi	sp,sp,48
    6dfe:	8082                	ret

00006e00 <TIM_CCxCmd>:
 *            TIM_CCx_Disable.
 *
 * @return  none
 */
void TIM_CCxCmd(TIM_TypeDef *TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
    6e00:	7179                	addi	sp,sp,-48
    6e02:	d622                	sw	s0,44(sp)
    6e04:	1800                	addi	s0,sp,48
    6e06:	fca42e23          	sw	a0,-36(s0)
    6e0a:	87ae                	mv	a5,a1
    6e0c:	8732                	mv	a4,a2
    6e0e:	fcf41d23          	sh	a5,-38(s0)
    6e12:	87ba                	mv	a5,a4
    6e14:	fcf41c23          	sh	a5,-40(s0)
    uint16_t tmp = 0;
    6e18:	fe041723          	sh	zero,-18(s0)

    tmp = CCER_CCE_Set << TIM_Channel;
    6e1c:	fda45783          	lhu	a5,-38(s0)
    6e20:	4705                	li	a4,1
    6e22:	00f717b3          	sll	a5,a4,a5
    6e26:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER &= (uint16_t)~tmp;
    6e2a:	fdc42783          	lw	a5,-36(s0)
    6e2e:	0207d783          	lhu	a5,32(a5)
    6e32:	01079713          	slli	a4,a5,0x10
    6e36:	8341                	srli	a4,a4,0x10
    6e38:	fee45783          	lhu	a5,-18(s0)
    6e3c:	fff7c793          	not	a5,a5
    6e40:	07c2                	slli	a5,a5,0x10
    6e42:	83c1                	srli	a5,a5,0x10
    6e44:	8ff9                	and	a5,a5,a4
    6e46:	01079713          	slli	a4,a5,0x10
    6e4a:	8341                	srli	a4,a4,0x10
    6e4c:	fdc42783          	lw	a5,-36(s0)
    6e50:	02e79023          	sh	a4,32(a5)
    TIMx->CCER |= (uint16_t)(TIM_CCx << TIM_Channel);
    6e54:	fdc42783          	lw	a5,-36(s0)
    6e58:	0207d783          	lhu	a5,32(a5)
    6e5c:	01079713          	slli	a4,a5,0x10
    6e60:	8341                	srli	a4,a4,0x10
    6e62:	fd845683          	lhu	a3,-40(s0)
    6e66:	fda45783          	lhu	a5,-38(s0)
    6e6a:	00f697b3          	sll	a5,a3,a5
    6e6e:	07c2                	slli	a5,a5,0x10
    6e70:	83c1                	srli	a5,a5,0x10
    6e72:	8fd9                	or	a5,a5,a4
    6e74:	01079713          	slli	a4,a5,0x10
    6e78:	8341                	srli	a4,a4,0x10
    6e7a:	fdc42783          	lw	a5,-36(s0)
    6e7e:	02e79023          	sh	a4,32(a5)
}
    6e82:	0001                	nop
    6e84:	5432                	lw	s0,44(sp)
    6e86:	6145                	addi	sp,sp,48
    6e88:	8082                	ret

00006e8a <TIM_CCxNCmd>:
 *            TIM_CCxN_Disable.
 *
 * @return  none
 */
void TIM_CCxNCmd(TIM_TypeDef *TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
    6e8a:	7179                	addi	sp,sp,-48
    6e8c:	d622                	sw	s0,44(sp)
    6e8e:	1800                	addi	s0,sp,48
    6e90:	fca42e23          	sw	a0,-36(s0)
    6e94:	87ae                	mv	a5,a1
    6e96:	8732                	mv	a4,a2
    6e98:	fcf41d23          	sh	a5,-38(s0)
    6e9c:	87ba                	mv	a5,a4
    6e9e:	fcf41c23          	sh	a5,-40(s0)
    uint16_t tmp = 0;
    6ea2:	fe041723          	sh	zero,-18(s0)

    tmp = CCER_CCNE_Set << TIM_Channel;
    6ea6:	fda45783          	lhu	a5,-38(s0)
    6eaa:	4711                	li	a4,4
    6eac:	00f717b3          	sll	a5,a4,a5
    6eb0:	fef41723          	sh	a5,-18(s0)
    TIMx->CCER &= (uint16_t)~tmp;
    6eb4:	fdc42783          	lw	a5,-36(s0)
    6eb8:	0207d783          	lhu	a5,32(a5)
    6ebc:	01079713          	slli	a4,a5,0x10
    6ec0:	8341                	srli	a4,a4,0x10
    6ec2:	fee45783          	lhu	a5,-18(s0)
    6ec6:	fff7c793          	not	a5,a5
    6eca:	07c2                	slli	a5,a5,0x10
    6ecc:	83c1                	srli	a5,a5,0x10
    6ece:	8ff9                	and	a5,a5,a4
    6ed0:	01079713          	slli	a4,a5,0x10
    6ed4:	8341                	srli	a4,a4,0x10
    6ed6:	fdc42783          	lw	a5,-36(s0)
    6eda:	02e79023          	sh	a4,32(a5)
    TIMx->CCER |= (uint16_t)(TIM_CCxN << TIM_Channel);
    6ede:	fdc42783          	lw	a5,-36(s0)
    6ee2:	0207d783          	lhu	a5,32(a5)
    6ee6:	01079713          	slli	a4,a5,0x10
    6eea:	8341                	srli	a4,a4,0x10
    6eec:	fd845683          	lhu	a3,-40(s0)
    6ef0:	fda45783          	lhu	a5,-38(s0)
    6ef4:	00f697b3          	sll	a5,a3,a5
    6ef8:	07c2                	slli	a5,a5,0x10
    6efa:	83c1                	srli	a5,a5,0x10
    6efc:	8fd9                	or	a5,a5,a4
    6efe:	01079713          	slli	a4,a5,0x10
    6f02:	8341                	srli	a4,a4,0x10
    6f04:	fdc42783          	lw	a5,-36(s0)
    6f08:	02e79023          	sh	a4,32(a5)
}
    6f0c:	0001                	nop
    6f0e:	5432                	lw	s0,44(sp)
    6f10:	6145                	addi	sp,sp,48
    6f12:	8082                	ret

00006f14 <TIM_SelectOCxM>:
 *            TIM_ForcedAction_InActive.
 *
 * @return  none
 */
void TIM_SelectOCxM(TIM_TypeDef *TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
    6f14:	7179                	addi	sp,sp,-48
    6f16:	d622                	sw	s0,44(sp)
    6f18:	1800                	addi	s0,sp,48
    6f1a:	fca42e23          	sw	a0,-36(s0)
    6f1e:	87ae                	mv	a5,a1
    6f20:	8732                	mv	a4,a2
    6f22:	fcf41d23          	sh	a5,-38(s0)
    6f26:	87ba                	mv	a5,a4
    6f28:	fcf41c23          	sh	a5,-40(s0)
    uint32_t tmp = 0;
    6f2c:	fe042623          	sw	zero,-20(s0)
    uint16_t tmp1 = 0;
    6f30:	fe041523          	sh	zero,-22(s0)

    tmp = (uint32_t)TIMx;
    6f34:	fdc42783          	lw	a5,-36(s0)
    6f38:	fef42623          	sw	a5,-20(s0)
    tmp += CHCTLR_Offset;
    6f3c:	fec42783          	lw	a5,-20(s0)
    6f40:	07e1                	addi	a5,a5,24
    6f42:	fef42623          	sw	a5,-20(s0)
    tmp1 = CCER_CCE_Set << (uint16_t)TIM_Channel;
    6f46:	fda45783          	lhu	a5,-38(s0)
    6f4a:	4705                	li	a4,1
    6f4c:	00f717b3          	sll	a5,a4,a5
    6f50:	fef41523          	sh	a5,-22(s0)
    TIMx->CCER &= (uint16_t)~tmp1;
    6f54:	fdc42783          	lw	a5,-36(s0)
    6f58:	0207d783          	lhu	a5,32(a5)
    6f5c:	01079713          	slli	a4,a5,0x10
    6f60:	8341                	srli	a4,a4,0x10
    6f62:	fea45783          	lhu	a5,-22(s0)
    6f66:	fff7c793          	not	a5,a5
    6f6a:	07c2                	slli	a5,a5,0x10
    6f6c:	83c1                	srli	a5,a5,0x10
    6f6e:	8ff9                	and	a5,a5,a4
    6f70:	01079713          	slli	a4,a5,0x10
    6f74:	8341                	srli	a4,a4,0x10
    6f76:	fdc42783          	lw	a5,-36(s0)
    6f7a:	02e79023          	sh	a4,32(a5)

    if((TIM_Channel == TIM_Channel_1) || (TIM_Channel == TIM_Channel_3))
    6f7e:	fda45783          	lhu	a5,-38(s0)
    6f82:	c791                	beqz	a5,6f8e <TIM_SelectOCxM+0x7a>
    6f84:	fda45703          	lhu	a4,-38(s0)
    6f88:	47a1                	li	a5,8
    6f8a:	02f71f63          	bne	a4,a5,6fc8 <TIM_SelectOCxM+0xb4>
    {
        tmp += (TIM_Channel >> 1);
    6f8e:	fda45783          	lhu	a5,-38(s0)
    6f92:	8385                	srli	a5,a5,0x1
    6f94:	07c2                	slli	a5,a5,0x10
    6f96:	83c1                	srli	a5,a5,0x10
    6f98:	873e                	mv	a4,a5
    6f9a:	fec42783          	lw	a5,-20(s0)
    6f9e:	97ba                	add	a5,a5,a4
    6fa0:	fef42623          	sw	a5,-20(s0)
        *(__IO uint32_t *)tmp &= (uint32_t) ~((uint32_t)TIM_OC1M);
    6fa4:	fec42783          	lw	a5,-20(s0)
    6fa8:	4398                	lw	a4,0(a5)
    6faa:	fec42783          	lw	a5,-20(s0)
    6fae:	f8f77713          	andi	a4,a4,-113
    6fb2:	c398                	sw	a4,0(a5)
        *(__IO uint32_t *)tmp |= TIM_OCMode;
    6fb4:	fec42783          	lw	a5,-20(s0)
    6fb8:	4394                	lw	a3,0(a5)
    6fba:	fd845703          	lhu	a4,-40(s0)
    6fbe:	fec42783          	lw	a5,-20(s0)
    6fc2:	8f55                	or	a4,a4,a3
    6fc4:	c398                	sw	a4,0(a5)
    6fc6:	a0a9                	j	7010 <TIM_SelectOCxM+0xfc>
    }
    else
    {
        tmp += (uint16_t)(TIM_Channel - (uint16_t)4) >> (uint16_t)1;
    6fc8:	fda45783          	lhu	a5,-38(s0)
    6fcc:	17f1                	addi	a5,a5,-4
    6fce:	07c2                	slli	a5,a5,0x10
    6fd0:	83c1                	srli	a5,a5,0x10
    6fd2:	8385                	srli	a5,a5,0x1
    6fd4:	07c2                	slli	a5,a5,0x10
    6fd6:	83c1                	srli	a5,a5,0x10
    6fd8:	873e                	mv	a4,a5
    6fda:	fec42783          	lw	a5,-20(s0)
    6fde:	97ba                	add	a5,a5,a4
    6fe0:	fef42623          	sw	a5,-20(s0)
        *(__IO uint32_t *)tmp &= (uint32_t) ~((uint32_t)TIM_OC2M);
    6fe4:	fec42783          	lw	a5,-20(s0)
    6fe8:	4394                	lw	a3,0(a5)
    6fea:	fec42783          	lw	a5,-20(s0)
    6fee:	7765                	lui	a4,0xffff9
    6ff0:	177d                	addi	a4,a4,-1
    6ff2:	8f75                	and	a4,a4,a3
    6ff4:	c398                	sw	a4,0(a5)
        *(__IO uint32_t *)tmp |= (uint16_t)(TIM_OCMode << 8);
    6ff6:	fec42783          	lw	a5,-20(s0)
    6ffa:	4398                	lw	a4,0(a5)
    6ffc:	fd845783          	lhu	a5,-40(s0)
    7000:	07a2                	slli	a5,a5,0x8
    7002:	07c2                	slli	a5,a5,0x10
    7004:	83c1                	srli	a5,a5,0x10
    7006:	86be                	mv	a3,a5
    7008:	fec42783          	lw	a5,-20(s0)
    700c:	8f55                	or	a4,a4,a3
    700e:	c398                	sw	a4,0(a5)
    }
}
    7010:	0001                	nop
    7012:	5432                	lw	s0,44(sp)
    7014:	6145                	addi	sp,sp,48
    7016:	8082                	ret

00007018 <TIM_UpdateDisableConfig>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_UpdateDisableConfig(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    7018:	1101                	addi	sp,sp,-32
    701a:	ce22                	sw	s0,28(sp)
    701c:	1000                	addi	s0,sp,32
    701e:	fea42623          	sw	a0,-20(s0)
    7022:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    7026:	fe842783          	lw	a5,-24(s0)
    702a:	c38d                	beqz	a5,704c <TIM_UpdateDisableConfig+0x34>
    {
        TIMx->CTLR1 |= TIM_UDIS;
    702c:	fec42783          	lw	a5,-20(s0)
    7030:	0007d783          	lhu	a5,0(a5)
    7034:	07c2                	slli	a5,a5,0x10
    7036:	83c1                	srli	a5,a5,0x10
    7038:	0027e793          	ori	a5,a5,2
    703c:	01079713          	slli	a4,a5,0x10
    7040:	8341                	srli	a4,a4,0x10
    7042:	fec42783          	lw	a5,-20(s0)
    7046:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        TIMx->CTLR1 &= (uint16_t) ~((uint16_t)TIM_UDIS);
    }
}
    704a:	a839                	j	7068 <TIM_UpdateDisableConfig+0x50>
        TIMx->CTLR1 &= (uint16_t) ~((uint16_t)TIM_UDIS);
    704c:	fec42783          	lw	a5,-20(s0)
    7050:	0007d783          	lhu	a5,0(a5)
    7054:	07c2                	slli	a5,a5,0x10
    7056:	83c1                	srli	a5,a5,0x10
    7058:	9bf5                	andi	a5,a5,-3
    705a:	01079713          	slli	a4,a5,0x10
    705e:	8341                	srli	a4,a4,0x10
    7060:	fec42783          	lw	a5,-20(s0)
    7064:	00e79023          	sh	a4,0(a5)
}
    7068:	0001                	nop
    706a:	4472                	lw	s0,28(sp)
    706c:	6105                	addi	sp,sp,32
    706e:	8082                	ret

00007070 <TIM_UpdateRequestConfig>:
 *            TIM_UpdateSource_Global.
 *
 * @return  none
 */
void TIM_UpdateRequestConfig(TIM_TypeDef *TIMx, uint16_t TIM_UpdateSource)
{
    7070:	1101                	addi	sp,sp,-32
    7072:	ce22                	sw	s0,28(sp)
    7074:	1000                	addi	s0,sp,32
    7076:	fea42623          	sw	a0,-20(s0)
    707a:	87ae                	mv	a5,a1
    707c:	fef41523          	sh	a5,-22(s0)
    if(TIM_UpdateSource != TIM_UpdateSource_Global)
    7080:	fea45783          	lhu	a5,-22(s0)
    7084:	c38d                	beqz	a5,70a6 <TIM_UpdateRequestConfig+0x36>
    {
        TIMx->CTLR1 |= TIM_URS;
    7086:	fec42783          	lw	a5,-20(s0)
    708a:	0007d783          	lhu	a5,0(a5)
    708e:	07c2                	slli	a5,a5,0x10
    7090:	83c1                	srli	a5,a5,0x10
    7092:	0047e793          	ori	a5,a5,4
    7096:	01079713          	slli	a4,a5,0x10
    709a:	8341                	srli	a4,a4,0x10
    709c:	fec42783          	lw	a5,-20(s0)
    70a0:	00e79023          	sh	a4,0(a5)
    }
    else
    {
        TIMx->CTLR1 &= (uint16_t) ~((uint16_t)TIM_URS);
    }
}
    70a4:	a839                	j	70c2 <TIM_UpdateRequestConfig+0x52>
        TIMx->CTLR1 &= (uint16_t) ~((uint16_t)TIM_URS);
    70a6:	fec42783          	lw	a5,-20(s0)
    70aa:	0007d783          	lhu	a5,0(a5)
    70ae:	07c2                	slli	a5,a5,0x10
    70b0:	83c1                	srli	a5,a5,0x10
    70b2:	9bed                	andi	a5,a5,-5
    70b4:	01079713          	slli	a4,a5,0x10
    70b8:	8341                	srli	a4,a4,0x10
    70ba:	fec42783          	lw	a5,-20(s0)
    70be:	00e79023          	sh	a4,0(a5)
}
    70c2:	0001                	nop
    70c4:	4472                	lw	s0,28(sp)
    70c6:	6105                	addi	sp,sp,32
    70c8:	8082                	ret

000070ca <TIM_SelectHallSensor>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_SelectHallSensor(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    70ca:	1101                	addi	sp,sp,-32
    70cc:	ce22                	sw	s0,28(sp)
    70ce:	1000                	addi	s0,sp,32
    70d0:	fea42623          	sw	a0,-20(s0)
    70d4:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    70d8:	fe842783          	lw	a5,-24(s0)
    70dc:	c38d                	beqz	a5,70fe <TIM_SelectHallSensor+0x34>
    {
        TIMx->CTLR2 |= TIM_TI1S;
    70de:	fec42783          	lw	a5,-20(s0)
    70e2:	0047d783          	lhu	a5,4(a5)
    70e6:	07c2                	slli	a5,a5,0x10
    70e8:	83c1                	srli	a5,a5,0x10
    70ea:	0807e793          	ori	a5,a5,128
    70ee:	01079713          	slli	a4,a5,0x10
    70f2:	8341                	srli	a4,a4,0x10
    70f4:	fec42783          	lw	a5,-20(s0)
    70f8:	00e79223          	sh	a4,4(a5)
    }
    else
    {
        TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_TI1S);
    }
}
    70fc:	a005                	j	711c <TIM_SelectHallSensor+0x52>
        TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_TI1S);
    70fe:	fec42783          	lw	a5,-20(s0)
    7102:	0047d783          	lhu	a5,4(a5)
    7106:	07c2                	slli	a5,a5,0x10
    7108:	83c1                	srli	a5,a5,0x10
    710a:	f7f7f793          	andi	a5,a5,-129
    710e:	01079713          	slli	a4,a5,0x10
    7112:	8341                	srli	a4,a4,0x10
    7114:	fec42783          	lw	a5,-20(s0)
    7118:	00e79223          	sh	a4,4(a5)
}
    711c:	0001                	nop
    711e:	4472                	lw	s0,28(sp)
    7120:	6105                	addi	sp,sp,32
    7122:	8082                	ret

00007124 <TIM_SelectOnePulseMode>:
 *            TIM_OPMode_Repetitive.
 *
 * @return  none
 */
void TIM_SelectOnePulseMode(TIM_TypeDef *TIMx, uint16_t TIM_OPMode)
{
    7124:	1101                	addi	sp,sp,-32
    7126:	ce22                	sw	s0,28(sp)
    7128:	1000                	addi	s0,sp,32
    712a:	fea42623          	sw	a0,-20(s0)
    712e:	87ae                	mv	a5,a1
    7130:	fef41523          	sh	a5,-22(s0)
    TIMx->CTLR1 &= (uint16_t) ~((uint16_t)TIM_OPM);
    7134:	fec42783          	lw	a5,-20(s0)
    7138:	0007d783          	lhu	a5,0(a5)
    713c:	07c2                	slli	a5,a5,0x10
    713e:	83c1                	srli	a5,a5,0x10
    7140:	9bdd                	andi	a5,a5,-9
    7142:	01079713          	slli	a4,a5,0x10
    7146:	8341                	srli	a4,a4,0x10
    7148:	fec42783          	lw	a5,-20(s0)
    714c:	00e79023          	sh	a4,0(a5)
    TIMx->CTLR1 |= TIM_OPMode;
    7150:	fec42783          	lw	a5,-20(s0)
    7154:	0007d783          	lhu	a5,0(a5)
    7158:	01079713          	slli	a4,a5,0x10
    715c:	8341                	srli	a4,a4,0x10
    715e:	fea45783          	lhu	a5,-22(s0)
    7162:	8fd9                	or	a5,a5,a4
    7164:	01079713          	slli	a4,a5,0x10
    7168:	8341                	srli	a4,a4,0x10
    716a:	fec42783          	lw	a5,-20(s0)
    716e:	00e79023          	sh	a4,0(a5)
}
    7172:	0001                	nop
    7174:	4472                	lw	s0,28(sp)
    7176:	6105                	addi	sp,sp,32
    7178:	8082                	ret

0000717a <TIM_SelectOutputTrigger>:
 *            TIM_TRGOSource_OC4Ref - OC4REF signal is used as the trigger output (TRGO).
 *
 * @return  none
 */
void TIM_SelectOutputTrigger(TIM_TypeDef *TIMx, uint16_t TIM_TRGOSource)
{
    717a:	1101                	addi	sp,sp,-32
    717c:	ce22                	sw	s0,28(sp)
    717e:	1000                	addi	s0,sp,32
    7180:	fea42623          	sw	a0,-20(s0)
    7184:	87ae                	mv	a5,a1
    7186:	fef41523          	sh	a5,-22(s0)
    TIMx->CTLR2 &= (uint16_t) ~((uint16_t)TIM_MMS);
    718a:	fec42783          	lw	a5,-20(s0)
    718e:	0047d783          	lhu	a5,4(a5)
    7192:	07c2                	slli	a5,a5,0x10
    7194:	83c1                	srli	a5,a5,0x10
    7196:	f8f7f793          	andi	a5,a5,-113
    719a:	01079713          	slli	a4,a5,0x10
    719e:	8341                	srli	a4,a4,0x10
    71a0:	fec42783          	lw	a5,-20(s0)
    71a4:	00e79223          	sh	a4,4(a5)
    TIMx->CTLR2 |= TIM_TRGOSource;
    71a8:	fec42783          	lw	a5,-20(s0)
    71ac:	0047d783          	lhu	a5,4(a5)
    71b0:	01079713          	slli	a4,a5,0x10
    71b4:	8341                	srli	a4,a4,0x10
    71b6:	fea45783          	lhu	a5,-22(s0)
    71ba:	8fd9                	or	a5,a5,a4
    71bc:	01079713          	slli	a4,a5,0x10
    71c0:	8341                	srli	a4,a4,0x10
    71c2:	fec42783          	lw	a5,-20(s0)
    71c6:	00e79223          	sh	a4,4(a5)
}
    71ca:	0001                	nop
    71cc:	4472                	lw	s0,28(sp)
    71ce:	6105                	addi	sp,sp,32
    71d0:	8082                	ret

000071d2 <TIM_SelectSlaveMode>:
 *        (TRGI) clock the counter.
 *
 * @return  none
 */
void TIM_SelectSlaveMode(TIM_TypeDef *TIMx, uint16_t TIM_SlaveMode)
{
    71d2:	1101                	addi	sp,sp,-32
    71d4:	ce22                	sw	s0,28(sp)
    71d6:	1000                	addi	s0,sp,32
    71d8:	fea42623          	sw	a0,-20(s0)
    71dc:	87ae                	mv	a5,a1
    71de:	fef41523          	sh	a5,-22(s0)
    TIMx->SMCFGR &= (uint16_t) ~((uint16_t)TIM_SMS);
    71e2:	fec42783          	lw	a5,-20(s0)
    71e6:	0087d783          	lhu	a5,8(a5)
    71ea:	07c2                	slli	a5,a5,0x10
    71ec:	83c1                	srli	a5,a5,0x10
    71ee:	9be1                	andi	a5,a5,-8
    71f0:	01079713          	slli	a4,a5,0x10
    71f4:	8341                	srli	a4,a4,0x10
    71f6:	fec42783          	lw	a5,-20(s0)
    71fa:	00e79423          	sh	a4,8(a5)
    TIMx->SMCFGR |= TIM_SlaveMode;
    71fe:	fec42783          	lw	a5,-20(s0)
    7202:	0087d783          	lhu	a5,8(a5)
    7206:	01079713          	slli	a4,a5,0x10
    720a:	8341                	srli	a4,a4,0x10
    720c:	fea45783          	lhu	a5,-22(s0)
    7210:	8fd9                	or	a5,a5,a4
    7212:	01079713          	slli	a4,a5,0x10
    7216:	8341                	srli	a4,a4,0x10
    7218:	fec42783          	lw	a5,-20(s0)
    721c:	00e79423          	sh	a4,8(a5)
}
    7220:	0001                	nop
    7222:	4472                	lw	s0,28(sp)
    7224:	6105                	addi	sp,sp,32
    7226:	8082                	ret

00007228 <TIM_SelectMasterSlaveMode>:
 *            TIM_MasterSlaveMode_Disable - No action.
 *
 * @return  none
 */
void TIM_SelectMasterSlaveMode(TIM_TypeDef *TIMx, uint16_t TIM_MasterSlaveMode)
{
    7228:	1101                	addi	sp,sp,-32
    722a:	ce22                	sw	s0,28(sp)
    722c:	1000                	addi	s0,sp,32
    722e:	fea42623          	sw	a0,-20(s0)
    7232:	87ae                	mv	a5,a1
    7234:	fef41523          	sh	a5,-22(s0)
    TIMx->SMCFGR &= (uint16_t) ~((uint16_t)TIM_MSM);
    7238:	fec42783          	lw	a5,-20(s0)
    723c:	0087d783          	lhu	a5,8(a5)
    7240:	07c2                	slli	a5,a5,0x10
    7242:	83c1                	srli	a5,a5,0x10
    7244:	f7f7f793          	andi	a5,a5,-129
    7248:	01079713          	slli	a4,a5,0x10
    724c:	8341                	srli	a4,a4,0x10
    724e:	fec42783          	lw	a5,-20(s0)
    7252:	00e79423          	sh	a4,8(a5)
    TIMx->SMCFGR |= TIM_MasterSlaveMode;
    7256:	fec42783          	lw	a5,-20(s0)
    725a:	0087d783          	lhu	a5,8(a5)
    725e:	01079713          	slli	a4,a5,0x10
    7262:	8341                	srli	a4,a4,0x10
    7264:	fea45783          	lhu	a5,-22(s0)
    7268:	8fd9                	or	a5,a5,a4
    726a:	01079713          	slli	a4,a5,0x10
    726e:	8341                	srli	a4,a4,0x10
    7270:	fec42783          	lw	a5,-20(s0)
    7274:	00e79423          	sh	a4,8(a5)
}
    7278:	0001                	nop
    727a:	4472                	lw	s0,28(sp)
    727c:	6105                	addi	sp,sp,32
    727e:	8082                	ret

00007280 <TIM_SetCounter>:
 *          Counter - specifies the Counter register new value.
 *
 * @return  none
 */
void TIM_SetCounter(TIM_TypeDef *TIMx, uint16_t Counter)
{
    7280:	1101                	addi	sp,sp,-32
    7282:	ce22                	sw	s0,28(sp)
    7284:	1000                	addi	s0,sp,32
    7286:	fea42623          	sw	a0,-20(s0)
    728a:	87ae                	mv	a5,a1
    728c:	fef41523          	sh	a5,-22(s0)
    TIMx->CNT = Counter;
    7290:	fec42783          	lw	a5,-20(s0)
    7294:	fea45703          	lhu	a4,-22(s0)
    7298:	02e79223          	sh	a4,36(a5)
}
    729c:	0001                	nop
    729e:	4472                	lw	s0,28(sp)
    72a0:	6105                	addi	sp,sp,32
    72a2:	8082                	ret

000072a4 <TIM_SetAutoreload>:
 *          Autoreload - specifies the Autoreload register new value.
 *
 * @return  none
 */
void TIM_SetAutoreload(TIM_TypeDef *TIMx, uint16_t Autoreload)
{
    72a4:	1101                	addi	sp,sp,-32
    72a6:	ce22                	sw	s0,28(sp)
    72a8:	1000                	addi	s0,sp,32
    72aa:	fea42623          	sw	a0,-20(s0)
    72ae:	87ae                	mv	a5,a1
    72b0:	fef41523          	sh	a5,-22(s0)
    TIMx->ATRLR = Autoreload;
    72b4:	fec42783          	lw	a5,-20(s0)
    72b8:	fea45703          	lhu	a4,-22(s0)
    72bc:	02e79623          	sh	a4,44(a5)
}
    72c0:	0001                	nop
    72c2:	4472                	lw	s0,28(sp)
    72c4:	6105                	addi	sp,sp,32
    72c6:	8082                	ret

000072c8 <TIM_SetCompare1>:
 *          Compare1 - specifies the Capture Compare1 register new value.
 *
 * @return  none
 */
void TIM_SetCompare1(TIM_TypeDef *TIMx, uint16_t Compare1)
{
    72c8:	1101                	addi	sp,sp,-32
    72ca:	ce22                	sw	s0,28(sp)
    72cc:	1000                	addi	s0,sp,32
    72ce:	fea42623          	sw	a0,-20(s0)
    72d2:	87ae                	mv	a5,a1
    72d4:	fef41523          	sh	a5,-22(s0)
    TIMx->CH1CVR = Compare1;
    72d8:	fec42783          	lw	a5,-20(s0)
    72dc:	fea45703          	lhu	a4,-22(s0)
    72e0:	02e79a23          	sh	a4,52(a5)
}
    72e4:	0001                	nop
    72e6:	4472                	lw	s0,28(sp)
    72e8:	6105                	addi	sp,sp,32
    72ea:	8082                	ret

000072ec <TIM_SetCompare2>:
 *          Compare1 - specifies the Capture Compare1 register new value.
 *
 * @return  none
 */
void TIM_SetCompare2(TIM_TypeDef *TIMx, uint16_t Compare2)
{
    72ec:	1101                	addi	sp,sp,-32
    72ee:	ce22                	sw	s0,28(sp)
    72f0:	1000                	addi	s0,sp,32
    72f2:	fea42623          	sw	a0,-20(s0)
    72f6:	87ae                	mv	a5,a1
    72f8:	fef41523          	sh	a5,-22(s0)
    TIMx->CH2CVR = Compare2;
    72fc:	fec42783          	lw	a5,-20(s0)
    7300:	fea45703          	lhu	a4,-22(s0)
    7304:	02e79c23          	sh	a4,56(a5)
}
    7308:	0001                	nop
    730a:	4472                	lw	s0,28(sp)
    730c:	6105                	addi	sp,sp,32
    730e:	8082                	ret

00007310 <TIM_SetCompare3>:
 *          Compare1 - specifies the Capture Compare1 register new value.
 *
 * @return  none
 */
void TIM_SetCompare3(TIM_TypeDef *TIMx, uint16_t Compare3)
{
    7310:	1101                	addi	sp,sp,-32
    7312:	ce22                	sw	s0,28(sp)
    7314:	1000                	addi	s0,sp,32
    7316:	fea42623          	sw	a0,-20(s0)
    731a:	87ae                	mv	a5,a1
    731c:	fef41523          	sh	a5,-22(s0)
    TIMx->CH3CVR = Compare3;
    7320:	fec42783          	lw	a5,-20(s0)
    7324:	fea45703          	lhu	a4,-22(s0)
    7328:	02e79e23          	sh	a4,60(a5)
}
    732c:	0001                	nop
    732e:	4472                	lw	s0,28(sp)
    7330:	6105                	addi	sp,sp,32
    7332:	8082                	ret

00007334 <TIM_SetCompare4>:
 *          Compare1 - specifies the Capture Compare1 register new value.
 *
 * @return  none
 */
void TIM_SetCompare4(TIM_TypeDef *TIMx, uint16_t Compare4)
{
    7334:	1101                	addi	sp,sp,-32
    7336:	ce22                	sw	s0,28(sp)
    7338:	1000                	addi	s0,sp,32
    733a:	fea42623          	sw	a0,-20(s0)
    733e:	87ae                	mv	a5,a1
    7340:	fef41523          	sh	a5,-22(s0)
    TIMx->CH4CVR = Compare4;
    7344:	fec42783          	lw	a5,-20(s0)
    7348:	fea45703          	lhu	a4,-22(s0)
    734c:	04e79023          	sh	a4,64(a5)
}
    7350:	0001                	nop
    7352:	4472                	lw	s0,28(sp)
    7354:	6105                	addi	sp,sp,32
    7356:	8082                	ret

00007358 <TIM_SetIC1Prescaler>:
 *            TIM_ICPSC_DIV8 - capture is done once every 8 events.
 *
 * @return  none
 */
void TIM_SetIC1Prescaler(TIM_TypeDef *TIMx, uint16_t TIM_ICPSC)
{
    7358:	1101                	addi	sp,sp,-32
    735a:	ce22                	sw	s0,28(sp)
    735c:	1000                	addi	s0,sp,32
    735e:	fea42623          	sw	a0,-20(s0)
    7362:	87ae                	mv	a5,a1
    7364:	fef41523          	sh	a5,-22(s0)
    TIMx->CHCTLR1 &= (uint16_t) ~((uint16_t)TIM_IC1PSC);
    7368:	fec42783          	lw	a5,-20(s0)
    736c:	0187d783          	lhu	a5,24(a5)
    7370:	07c2                	slli	a5,a5,0x10
    7372:	83c1                	srli	a5,a5,0x10
    7374:	9bcd                	andi	a5,a5,-13
    7376:	01079713          	slli	a4,a5,0x10
    737a:	8341                	srli	a4,a4,0x10
    737c:	fec42783          	lw	a5,-20(s0)
    7380:	00e79c23          	sh	a4,24(a5)
    TIMx->CHCTLR1 |= TIM_ICPSC;
    7384:	fec42783          	lw	a5,-20(s0)
    7388:	0187d783          	lhu	a5,24(a5)
    738c:	01079713          	slli	a4,a5,0x10
    7390:	8341                	srli	a4,a4,0x10
    7392:	fea45783          	lhu	a5,-22(s0)
    7396:	8fd9                	or	a5,a5,a4
    7398:	01079713          	slli	a4,a5,0x10
    739c:	8341                	srli	a4,a4,0x10
    739e:	fec42783          	lw	a5,-20(s0)
    73a2:	00e79c23          	sh	a4,24(a5)
}
    73a6:	0001                	nop
    73a8:	4472                	lw	s0,28(sp)
    73aa:	6105                	addi	sp,sp,32
    73ac:	8082                	ret

000073ae <TIM_SetIC2Prescaler>:
 *            TIM_ICPSC_DIV8 - capture is done once every 8 events.
 *
 * @return  none
 */
void TIM_SetIC2Prescaler(TIM_TypeDef *TIMx, uint16_t TIM_ICPSC)
{
    73ae:	1101                	addi	sp,sp,-32
    73b0:	ce22                	sw	s0,28(sp)
    73b2:	1000                	addi	s0,sp,32
    73b4:	fea42623          	sw	a0,-20(s0)
    73b8:	87ae                	mv	a5,a1
    73ba:	fef41523          	sh	a5,-22(s0)
    TIMx->CHCTLR1 &= (uint16_t) ~((uint16_t)TIM_IC2PSC);
    73be:	fec42783          	lw	a5,-20(s0)
    73c2:	0187d783          	lhu	a5,24(a5)
    73c6:	01079713          	slli	a4,a5,0x10
    73ca:	8341                	srli	a4,a4,0x10
    73cc:	77fd                	lui	a5,0xfffff
    73ce:	3ff78793          	addi	a5,a5,1023 # fffff3ff <_eusrstack+0xdfffb3ff>
    73d2:	8ff9                	and	a5,a5,a4
    73d4:	01079713          	slli	a4,a5,0x10
    73d8:	8341                	srli	a4,a4,0x10
    73da:	fec42783          	lw	a5,-20(s0)
    73de:	00e79c23          	sh	a4,24(a5)
    TIMx->CHCTLR1 |= (uint16_t)(TIM_ICPSC << 8);
    73e2:	fec42783          	lw	a5,-20(s0)
    73e6:	0187d783          	lhu	a5,24(a5)
    73ea:	01079713          	slli	a4,a5,0x10
    73ee:	8341                	srli	a4,a4,0x10
    73f0:	fea45783          	lhu	a5,-22(s0)
    73f4:	07a2                	slli	a5,a5,0x8
    73f6:	07c2                	slli	a5,a5,0x10
    73f8:	83c1                	srli	a5,a5,0x10
    73fa:	8fd9                	or	a5,a5,a4
    73fc:	01079713          	slli	a4,a5,0x10
    7400:	8341                	srli	a4,a4,0x10
    7402:	fec42783          	lw	a5,-20(s0)
    7406:	00e79c23          	sh	a4,24(a5)
}
    740a:	0001                	nop
    740c:	4472                	lw	s0,28(sp)
    740e:	6105                	addi	sp,sp,32
    7410:	8082                	ret

00007412 <TIM_SetIC3Prescaler>:
 *            TIM_ICPSC_DIV8 - capture is done once every 8 events.
 *
 * @return  none
 */
void TIM_SetIC3Prescaler(TIM_TypeDef *TIMx, uint16_t TIM_ICPSC)
{
    7412:	1101                	addi	sp,sp,-32
    7414:	ce22                	sw	s0,28(sp)
    7416:	1000                	addi	s0,sp,32
    7418:	fea42623          	sw	a0,-20(s0)
    741c:	87ae                	mv	a5,a1
    741e:	fef41523          	sh	a5,-22(s0)
    TIMx->CHCTLR2 &= (uint16_t) ~((uint16_t)TIM_IC3PSC);
    7422:	fec42783          	lw	a5,-20(s0)
    7426:	01c7d783          	lhu	a5,28(a5)
    742a:	07c2                	slli	a5,a5,0x10
    742c:	83c1                	srli	a5,a5,0x10
    742e:	9bcd                	andi	a5,a5,-13
    7430:	01079713          	slli	a4,a5,0x10
    7434:	8341                	srli	a4,a4,0x10
    7436:	fec42783          	lw	a5,-20(s0)
    743a:	00e79e23          	sh	a4,28(a5)
    TIMx->CHCTLR2 |= TIM_ICPSC;
    743e:	fec42783          	lw	a5,-20(s0)
    7442:	01c7d783          	lhu	a5,28(a5)
    7446:	01079713          	slli	a4,a5,0x10
    744a:	8341                	srli	a4,a4,0x10
    744c:	fea45783          	lhu	a5,-22(s0)
    7450:	8fd9                	or	a5,a5,a4
    7452:	01079713          	slli	a4,a5,0x10
    7456:	8341                	srli	a4,a4,0x10
    7458:	fec42783          	lw	a5,-20(s0)
    745c:	00e79e23          	sh	a4,28(a5)
}
    7460:	0001                	nop
    7462:	4472                	lw	s0,28(sp)
    7464:	6105                	addi	sp,sp,32
    7466:	8082                	ret

00007468 <TIM_SetIC4Prescaler>:
 *            TIM_ICPSC_DIV8 - capture is done once every 8 events.
 *
 * @return  none
 */
void TIM_SetIC4Prescaler(TIM_TypeDef *TIMx, uint16_t TIM_ICPSC)
{
    7468:	1101                	addi	sp,sp,-32
    746a:	ce22                	sw	s0,28(sp)
    746c:	1000                	addi	s0,sp,32
    746e:	fea42623          	sw	a0,-20(s0)
    7472:	87ae                	mv	a5,a1
    7474:	fef41523          	sh	a5,-22(s0)
    TIMx->CHCTLR2 &= (uint16_t) ~((uint16_t)TIM_IC4PSC);
    7478:	fec42783          	lw	a5,-20(s0)
    747c:	01c7d783          	lhu	a5,28(a5)
    7480:	01079713          	slli	a4,a5,0x10
    7484:	8341                	srli	a4,a4,0x10
    7486:	77fd                	lui	a5,0xfffff
    7488:	3ff78793          	addi	a5,a5,1023 # fffff3ff <_eusrstack+0xdfffb3ff>
    748c:	8ff9                	and	a5,a5,a4
    748e:	01079713          	slli	a4,a5,0x10
    7492:	8341                	srli	a4,a4,0x10
    7494:	fec42783          	lw	a5,-20(s0)
    7498:	00e79e23          	sh	a4,28(a5)
    TIMx->CHCTLR2 |= (uint16_t)(TIM_ICPSC << 8);
    749c:	fec42783          	lw	a5,-20(s0)
    74a0:	01c7d783          	lhu	a5,28(a5)
    74a4:	01079713          	slli	a4,a5,0x10
    74a8:	8341                	srli	a4,a4,0x10
    74aa:	fea45783          	lhu	a5,-22(s0)
    74ae:	07a2                	slli	a5,a5,0x8
    74b0:	07c2                	slli	a5,a5,0x10
    74b2:	83c1                	srli	a5,a5,0x10
    74b4:	8fd9                	or	a5,a5,a4
    74b6:	01079713          	slli	a4,a5,0x10
    74ba:	8341                	srli	a4,a4,0x10
    74bc:	fec42783          	lw	a5,-20(s0)
    74c0:	00e79e23          	sh	a4,28(a5)
}
    74c4:	0001                	nop
    74c6:	4472                	lw	s0,28(sp)
    74c8:	6105                	addi	sp,sp,32
    74ca:	8082                	ret

000074cc <TIM_SetClockDivision>:
 *            TIM_CKD_DIV4 - TDTS = 4*Tck_tim.
 *
 * @return  none
 */
void TIM_SetClockDivision(TIM_TypeDef *TIMx, uint16_t TIM_CKD)
{
    74cc:	1101                	addi	sp,sp,-32
    74ce:	ce22                	sw	s0,28(sp)
    74d0:	1000                	addi	s0,sp,32
    74d2:	fea42623          	sw	a0,-20(s0)
    74d6:	87ae                	mv	a5,a1
    74d8:	fef41523          	sh	a5,-22(s0)
    TIMx->CTLR1 &= (uint16_t) ~((uint16_t)TIM_CTLR1_CKD);
    74dc:	fec42783          	lw	a5,-20(s0)
    74e0:	0007d783          	lhu	a5,0(a5)
    74e4:	07c2                	slli	a5,a5,0x10
    74e6:	83c1                	srli	a5,a5,0x10
    74e8:	cff7f793          	andi	a5,a5,-769
    74ec:	01079713          	slli	a4,a5,0x10
    74f0:	8341                	srli	a4,a4,0x10
    74f2:	fec42783          	lw	a5,-20(s0)
    74f6:	00e79023          	sh	a4,0(a5)
    TIMx->CTLR1 |= TIM_CKD;
    74fa:	fec42783          	lw	a5,-20(s0)
    74fe:	0007d783          	lhu	a5,0(a5)
    7502:	01079713          	slli	a4,a5,0x10
    7506:	8341                	srli	a4,a4,0x10
    7508:	fea45783          	lhu	a5,-22(s0)
    750c:	8fd9                	or	a5,a5,a4
    750e:	01079713          	slli	a4,a5,0x10
    7512:	8341                	srli	a4,a4,0x10
    7514:	fec42783          	lw	a5,-20(s0)
    7518:	00e79023          	sh	a4,0(a5)
}
    751c:	0001                	nop
    751e:	4472                	lw	s0,28(sp)
    7520:	6105                	addi	sp,sp,32
    7522:	8082                	ret

00007524 <TIM_GetCapture1>:
 * @param   TIMx - where x can be 1 to 3 select the TIM peripheral.
 *
 * @return  TIMx->CH1CVR - Capture Compare 1 Register value.
 */
uint16_t TIM_GetCapture1(TIM_TypeDef *TIMx)
{
    7524:	1101                	addi	sp,sp,-32
    7526:	ce22                	sw	s0,28(sp)
    7528:	1000                	addi	s0,sp,32
    752a:	fea42623          	sw	a0,-20(s0)
    return TIMx->CH1CVR;
    752e:	fec42783          	lw	a5,-20(s0)
    7532:	0347d783          	lhu	a5,52(a5)
    7536:	07c2                	slli	a5,a5,0x10
    7538:	83c1                	srli	a5,a5,0x10
}
    753a:	853e                	mv	a0,a5
    753c:	4472                	lw	s0,28(sp)
    753e:	6105                	addi	sp,sp,32
    7540:	8082                	ret

00007542 <TIM_GetCapture2>:
 * @param   TIMx - where x can be 1 to 3 select the TIM peripheral.
 *
 * @return  TIMx->CH2CVR - Capture Compare 2 Register value.
 */
uint16_t TIM_GetCapture2(TIM_TypeDef *TIMx)
{
    7542:	1101                	addi	sp,sp,-32
    7544:	ce22                	sw	s0,28(sp)
    7546:	1000                	addi	s0,sp,32
    7548:	fea42623          	sw	a0,-20(s0)
    return TIMx->CH2CVR;
    754c:	fec42783          	lw	a5,-20(s0)
    7550:	0387d783          	lhu	a5,56(a5)
    7554:	07c2                	slli	a5,a5,0x10
    7556:	83c1                	srli	a5,a5,0x10
}
    7558:	853e                	mv	a0,a5
    755a:	4472                	lw	s0,28(sp)
    755c:	6105                	addi	sp,sp,32
    755e:	8082                	ret

00007560 <TIM_GetCapture3>:
 * @param   TIMx - where x can be 1 to 2 select the TIM peripheral.
 *
 * @return  TIMx->CH3CVR - Capture Compare 3 Register value.
 */
uint16_t TIM_GetCapture3(TIM_TypeDef *TIMx)
{
    7560:	1101                	addi	sp,sp,-32
    7562:	ce22                	sw	s0,28(sp)
    7564:	1000                	addi	s0,sp,32
    7566:	fea42623          	sw	a0,-20(s0)
    return TIMx->CH3CVR;
    756a:	fec42783          	lw	a5,-20(s0)
    756e:	03c7d783          	lhu	a5,60(a5)
    7572:	07c2                	slli	a5,a5,0x10
    7574:	83c1                	srli	a5,a5,0x10
}
    7576:	853e                	mv	a0,a5
    7578:	4472                	lw	s0,28(sp)
    757a:	6105                	addi	sp,sp,32
    757c:	8082                	ret

0000757e <TIM_GetCapture4>:
 * @param   TIMx - where x can be 1 to 2 select the TIM peripheral.
 *
 * @return  TIMx->CH4CVR - Capture Compare 4 Register value.
 */
uint16_t TIM_GetCapture4(TIM_TypeDef *TIMx)
{
    757e:	1101                	addi	sp,sp,-32
    7580:	ce22                	sw	s0,28(sp)
    7582:	1000                	addi	s0,sp,32
    7584:	fea42623          	sw	a0,-20(s0)
    return TIMx->CH4CVR;
    7588:	fec42783          	lw	a5,-20(s0)
    758c:	0407d783          	lhu	a5,64(a5)
    7590:	07c2                	slli	a5,a5,0x10
    7592:	83c1                	srli	a5,a5,0x10
}
    7594:	853e                	mv	a0,a5
    7596:	4472                	lw	s0,28(sp)
    7598:	6105                	addi	sp,sp,32
    759a:	8082                	ret

0000759c <TIM_GetCounter>:
 * @param   TIMx - where x can be 1 to 3 select the TIM peripheral.
 *
 * @return  TIMx->CNT - Counter Register value.
 */
uint16_t TIM_GetCounter(TIM_TypeDef *TIMx)
{
    759c:	1101                	addi	sp,sp,-32
    759e:	ce22                	sw	s0,28(sp)
    75a0:	1000                	addi	s0,sp,32
    75a2:	fea42623          	sw	a0,-20(s0)
    return TIMx->CNT;
    75a6:	fec42783          	lw	a5,-20(s0)
    75aa:	0247d783          	lhu	a5,36(a5)
    75ae:	07c2                	slli	a5,a5,0x10
    75b0:	83c1                	srli	a5,a5,0x10
}
    75b2:	853e                	mv	a0,a5
    75b4:	4472                	lw	s0,28(sp)
    75b6:	6105                	addi	sp,sp,32
    75b8:	8082                	ret

000075ba <TIM_GetPrescaler>:
 * @param   TIMx - where x can be 1 to 3 select the TIM peripheral.
 *
 * @return  TIMx->PSC - Prescaler Register value.
 */
uint16_t TIM_GetPrescaler(TIM_TypeDef *TIMx)
{
    75ba:	1101                	addi	sp,sp,-32
    75bc:	ce22                	sw	s0,28(sp)
    75be:	1000                	addi	s0,sp,32
    75c0:	fea42623          	sw	a0,-20(s0)
    return TIMx->PSC;
    75c4:	fec42783          	lw	a5,-20(s0)
    75c8:	0287d783          	lhu	a5,40(a5)
    75cc:	07c2                	slli	a5,a5,0x10
    75ce:	83c1                	srli	a5,a5,0x10
}
    75d0:	853e                	mv	a0,a5
    75d2:	4472                	lw	s0,28(sp)
    75d4:	6105                	addi	sp,sp,32
    75d6:	8082                	ret

000075d8 <TIM_GetFlagStatus>:
 *            TIM_FLAG_CC4OF - TIM Capture Compare 4 overcapture Flag.
 *
 * @return  none
 */
FlagStatus TIM_GetFlagStatus(TIM_TypeDef *TIMx, uint16_t TIM_FLAG)
{
    75d8:	7179                	addi	sp,sp,-48
    75da:	d622                	sw	s0,44(sp)
    75dc:	1800                	addi	s0,sp,48
    75de:	fca42e23          	sw	a0,-36(s0)
    75e2:	87ae                	mv	a5,a1
    75e4:	fcf41d23          	sh	a5,-38(s0)
    ITStatus bitstatus = RESET;
    75e8:	fe042623          	sw	zero,-20(s0)

    if((TIMx->INTFR & TIM_FLAG) != (uint16_t)RESET)
    75ec:	fdc42783          	lw	a5,-36(s0)
    75f0:	0107d783          	lhu	a5,16(a5)
    75f4:	01079713          	slli	a4,a5,0x10
    75f8:	8341                	srli	a4,a4,0x10
    75fa:	fda45783          	lhu	a5,-38(s0)
    75fe:	8ff9                	and	a5,a5,a4
    7600:	07c2                	slli	a5,a5,0x10
    7602:	83c1                	srli	a5,a5,0x10
    7604:	c789                	beqz	a5,760e <TIM_GetFlagStatus+0x36>
    {
        bitstatus = SET;
    7606:	4785                	li	a5,1
    7608:	fef42623          	sw	a5,-20(s0)
    760c:	a019                	j	7612 <TIM_GetFlagStatus+0x3a>
    }
    else
    {
        bitstatus = RESET;
    760e:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    7612:	fec42783          	lw	a5,-20(s0)
}
    7616:	853e                	mv	a0,a5
    7618:	5432                	lw	s0,44(sp)
    761a:	6145                	addi	sp,sp,48
    761c:	8082                	ret

0000761e <TIM_ClearFlag>:
 *            TIM_FLAG_CC4OF - TIM Capture Compare 4 overcapture Flag.
 *
 * @return  none
 */
void TIM_ClearFlag(TIM_TypeDef *TIMx, uint16_t TIM_FLAG)
{
    761e:	1101                	addi	sp,sp,-32
    7620:	ce22                	sw	s0,28(sp)
    7622:	1000                	addi	s0,sp,32
    7624:	fea42623          	sw	a0,-20(s0)
    7628:	87ae                	mv	a5,a1
    762a:	fef41523          	sh	a5,-22(s0)
    TIMx->INTFR = (uint16_t)~TIM_FLAG;
    762e:	fea45783          	lhu	a5,-22(s0)
    7632:	fff7c793          	not	a5,a5
    7636:	01079713          	slli	a4,a5,0x10
    763a:	8341                	srli	a4,a4,0x10
    763c:	fec42783          	lw	a5,-20(s0)
    7640:	00e79823          	sh	a4,16(a5)
}
    7644:	0001                	nop
    7646:	4472                	lw	s0,28(sp)
    7648:	6105                	addi	sp,sp,32
    764a:	8082                	ret

0000764c <TIM_GetITStatus>:
 *            TIM_IT_Break - TIM Break Interrupt source.
 *
 * @return  none
 */
ITStatus TIM_GetITStatus(TIM_TypeDef *TIMx, uint16_t TIM_IT)
{
    764c:	7179                	addi	sp,sp,-48
    764e:	d622                	sw	s0,44(sp)
    7650:	1800                	addi	s0,sp,48
    7652:	fca42e23          	sw	a0,-36(s0)
    7656:	87ae                	mv	a5,a1
    7658:	fcf41d23          	sh	a5,-38(s0)
    ITStatus bitstatus = RESET;
    765c:	fe042623          	sw	zero,-20(s0)
    uint16_t itstatus = 0x0, itenable = 0x0;
    7660:	fe041523          	sh	zero,-22(s0)
    7664:	fe041423          	sh	zero,-24(s0)

    itstatus = TIMx->INTFR & TIM_IT;
    7668:	fdc42783          	lw	a5,-36(s0)
    766c:	0107d783          	lhu	a5,16(a5)
    7670:	01079713          	slli	a4,a5,0x10
    7674:	8341                	srli	a4,a4,0x10
    7676:	fda45783          	lhu	a5,-38(s0)
    767a:	8ff9                	and	a5,a5,a4
    767c:	fef41523          	sh	a5,-22(s0)

    itenable = TIMx->DMAINTENR & TIM_IT;
    7680:	fdc42783          	lw	a5,-36(s0)
    7684:	00c7d783          	lhu	a5,12(a5)
    7688:	01079713          	slli	a4,a5,0x10
    768c:	8341                	srli	a4,a4,0x10
    768e:	fda45783          	lhu	a5,-38(s0)
    7692:	8ff9                	and	a5,a5,a4
    7694:	fef41423          	sh	a5,-24(s0)
    if((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
    7698:	fea45783          	lhu	a5,-22(s0)
    769c:	cb81                	beqz	a5,76ac <TIM_GetITStatus+0x60>
    769e:	fe845783          	lhu	a5,-24(s0)
    76a2:	c789                	beqz	a5,76ac <TIM_GetITStatus+0x60>
    {
        bitstatus = SET;
    76a4:	4785                	li	a5,1
    76a6:	fef42623          	sw	a5,-20(s0)
    76aa:	a019                	j	76b0 <TIM_GetITStatus+0x64>
    }
    else
    {
        bitstatus = RESET;
    76ac:	fe042623          	sw	zero,-20(s0)
    }

    return bitstatus;
    76b0:	fec42783          	lw	a5,-20(s0)
}
    76b4:	853e                	mv	a0,a5
    76b6:	5432                	lw	s0,44(sp)
    76b8:	6145                	addi	sp,sp,48
    76ba:	8082                	ret

000076bc <TIM_ClearITPendingBit>:
 *            TIM_IT_Break - TIM Break Interrupt source.
 *
 * @return  none
 */
void TIM_ClearITPendingBit(TIM_TypeDef *TIMx, uint16_t TIM_IT)
{
    76bc:	1101                	addi	sp,sp,-32
    76be:	ce22                	sw	s0,28(sp)
    76c0:	1000                	addi	s0,sp,32
    76c2:	fea42623          	sw	a0,-20(s0)
    76c6:	87ae                	mv	a5,a1
    76c8:	fef41523          	sh	a5,-22(s0)
    TIMx->INTFR = (uint16_t)~TIM_IT;
    76cc:	fea45783          	lhu	a5,-22(s0)
    76d0:	fff7c793          	not	a5,a5
    76d4:	01079713          	slli	a4,a5,0x10
    76d8:	8341                	srli	a4,a4,0x10
    76da:	fec42783          	lw	a5,-20(s0)
    76de:	00e79823          	sh	a4,16(a5)
}
    76e2:	0001                	nop
    76e4:	4472                	lw	s0,28(sp)
    76e6:	6105                	addi	sp,sp,32
    76e8:	8082                	ret

000076ea <TI1_Config>:
 *
 * @return  none
 */
static void TI1_Config(TIM_TypeDef *TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    76ea:	7179                	addi	sp,sp,-48
    76ec:	d622                	sw	s0,44(sp)
    76ee:	1800                	addi	s0,sp,48
    76f0:	fca42e23          	sw	a0,-36(s0)
    76f4:	87ae                	mv	a5,a1
    76f6:	8736                	mv	a4,a3
    76f8:	fcf41d23          	sh	a5,-38(s0)
    76fc:	87b2                	mv	a5,a2
    76fe:	fcf41c23          	sh	a5,-40(s0)
    7702:	87ba                	mv	a5,a4
    7704:	fcf41b23          	sh	a5,-42(s0)
    uint16_t tmpccmr1 = 0, tmpccer = 0;
    7708:	fe041623          	sh	zero,-20(s0)
    770c:	fe041723          	sh	zero,-18(s0)

    TIMx->CCER &= (uint16_t) ~((uint16_t)TIM_CC1E);
    7710:	fdc42783          	lw	a5,-36(s0)
    7714:	0207d783          	lhu	a5,32(a5)
    7718:	07c2                	slli	a5,a5,0x10
    771a:	83c1                	srli	a5,a5,0x10
    771c:	9bf9                	andi	a5,a5,-2
    771e:	01079713          	slli	a4,a5,0x10
    7722:	8341                	srli	a4,a4,0x10
    7724:	fdc42783          	lw	a5,-36(s0)
    7728:	02e79023          	sh	a4,32(a5)
    tmpccmr1 = TIMx->CHCTLR1;
    772c:	fdc42783          	lw	a5,-36(s0)
    7730:	0187d783          	lhu	a5,24(a5)
    7734:	fef41623          	sh	a5,-20(s0)
    tmpccer = TIMx->CCER;
    7738:	fdc42783          	lw	a5,-36(s0)
    773c:	0207d783          	lhu	a5,32(a5)
    7740:	fef41723          	sh	a5,-18(s0)
    tmpccmr1 &= (uint16_t)(((uint16_t) ~((uint16_t)TIM_CC1S)) & ((uint16_t) ~((uint16_t)TIM_IC1F)));
    7744:	fec45783          	lhu	a5,-20(s0)
    7748:	f0c7f793          	andi	a5,a5,-244
    774c:	fef41623          	sh	a5,-20(s0)
    tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    7750:	fd645783          	lhu	a5,-42(s0)
    7754:	0792                	slli	a5,a5,0x4
    7756:	01079713          	slli	a4,a5,0x10
    775a:	8341                	srli	a4,a4,0x10
    775c:	fd845783          	lhu	a5,-40(s0)
    7760:	8fd9                	or	a5,a5,a4
    7762:	01079713          	slli	a4,a5,0x10
    7766:	8341                	srli	a4,a4,0x10
    7768:	fec45783          	lhu	a5,-20(s0)
    776c:	8fd9                	or	a5,a5,a4
    776e:	fef41623          	sh	a5,-20(s0)

    if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
    7772:	fdc42703          	lw	a4,-36(s0)
    7776:	400137b7          	lui	a5,0x40013
    777a:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    777e:	02f70063          	beq	a4,a5,779e <TI1_Config+0xb4>
    7782:	fdc42703          	lw	a4,-36(s0)
    7786:	400007b7          	lui	a5,0x40000
    778a:	00f70a63          	beq	a4,a5,779e <TI1_Config+0xb4>
    778e:	fdc42703          	lw	a4,-36(s0)
    7792:	400007b7          	lui	a5,0x40000
    7796:	40078793          	addi	a5,a5,1024 # 40000400 <_eusrstack+0x1fffc400>
    779a:	02f71363          	bne	a4,a5,77c0 <TI1_Config+0xd6>
    {
        tmpccer &= (uint16_t) ~((uint16_t)(TIM_CC1P));
    779e:	fee45783          	lhu	a5,-18(s0)
    77a2:	9bf5                	andi	a5,a5,-3
    77a4:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CC1E);
    77a8:	fda45703          	lhu	a4,-38(s0)
    77ac:	fee45783          	lhu	a5,-18(s0)
    77b0:	8fd9                	or	a5,a5,a4
    77b2:	07c2                	slli	a5,a5,0x10
    77b4:	83c1                	srli	a5,a5,0x10
    77b6:	0017e793          	ori	a5,a5,1
    77ba:	fef41723          	sh	a5,-18(s0)
    77be:	a00d                	j	77e0 <TI1_Config+0xf6>
    }
    else
    {
        tmpccer &= (uint16_t) ~((uint16_t)(TIM_CC1P | TIM_CC1NP));
    77c0:	fee45783          	lhu	a5,-18(s0)
    77c4:	9bd5                	andi	a5,a5,-11
    77c6:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CC1E);
    77ca:	fda45703          	lhu	a4,-38(s0)
    77ce:	fee45783          	lhu	a5,-18(s0)
    77d2:	8fd9                	or	a5,a5,a4
    77d4:	07c2                	slli	a5,a5,0x10
    77d6:	83c1                	srli	a5,a5,0x10
    77d8:	0017e793          	ori	a5,a5,1
    77dc:	fef41723          	sh	a5,-18(s0)
    }

    TIMx->CHCTLR1 = tmpccmr1;
    77e0:	fdc42783          	lw	a5,-36(s0)
    77e4:	fec45703          	lhu	a4,-20(s0)
    77e8:	00e79c23          	sh	a4,24(a5)
    TIMx->CCER = tmpccer;
    77ec:	fdc42783          	lw	a5,-36(s0)
    77f0:	fee45703          	lhu	a4,-18(s0)
    77f4:	02e79023          	sh	a4,32(a5)
}
    77f8:	0001                	nop
    77fa:	5432                	lw	s0,44(sp)
    77fc:	6145                	addi	sp,sp,48
    77fe:	8082                	ret

00007800 <TI2_Config>:
 *
 * @return  none
 */
static void TI2_Config(TIM_TypeDef *TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    7800:	7179                	addi	sp,sp,-48
    7802:	d622                	sw	s0,44(sp)
    7804:	1800                	addi	s0,sp,48
    7806:	fca42e23          	sw	a0,-36(s0)
    780a:	87ae                	mv	a5,a1
    780c:	8736                	mv	a4,a3
    780e:	fcf41d23          	sh	a5,-38(s0)
    7812:	87b2                	mv	a5,a2
    7814:	fcf41c23          	sh	a5,-40(s0)
    7818:	87ba                	mv	a5,a4
    781a:	fcf41b23          	sh	a5,-42(s0)
    uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
    781e:	fe041623          	sh	zero,-20(s0)
    7822:	fe041723          	sh	zero,-18(s0)
    7826:	fe041523          	sh	zero,-22(s0)

    TIMx->CCER &= (uint16_t) ~((uint16_t)TIM_CC2E);
    782a:	fdc42783          	lw	a5,-36(s0)
    782e:	0207d783          	lhu	a5,32(a5)
    7832:	07c2                	slli	a5,a5,0x10
    7834:	83c1                	srli	a5,a5,0x10
    7836:	9bbd                	andi	a5,a5,-17
    7838:	01079713          	slli	a4,a5,0x10
    783c:	8341                	srli	a4,a4,0x10
    783e:	fdc42783          	lw	a5,-36(s0)
    7842:	02e79023          	sh	a4,32(a5)
    tmpccmr1 = TIMx->CHCTLR1;
    7846:	fdc42783          	lw	a5,-36(s0)
    784a:	0187d783          	lhu	a5,24(a5)
    784e:	fef41623          	sh	a5,-20(s0)
    tmpccer = TIMx->CCER;
    7852:	fdc42783          	lw	a5,-36(s0)
    7856:	0207d783          	lhu	a5,32(a5)
    785a:	fef41723          	sh	a5,-18(s0)
    tmp = (uint16_t)(TIM_ICPolarity << 4);
    785e:	fda45783          	lhu	a5,-38(s0)
    7862:	0792                	slli	a5,a5,0x4
    7864:	fef41523          	sh	a5,-22(s0)
    tmpccmr1 &= (uint16_t)(((uint16_t) ~((uint16_t)TIM_CC2S)) & ((uint16_t) ~((uint16_t)TIM_IC2F)));
    7868:	fec45703          	lhu	a4,-20(s0)
    786c:	6785                	lui	a5,0x1
    786e:	cff78793          	addi	a5,a5,-769 # cff <ADC_InjectedChannelConfig+0x13b>
    7872:	8ff9                	and	a5,a5,a4
    7874:	fef41623          	sh	a5,-20(s0)
    tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
    7878:	fd645783          	lhu	a5,-42(s0)
    787c:	07b2                	slli	a5,a5,0xc
    787e:	01079713          	slli	a4,a5,0x10
    7882:	8341                	srli	a4,a4,0x10
    7884:	fec45783          	lhu	a5,-20(s0)
    7888:	8fd9                	or	a5,a5,a4
    788a:	fef41623          	sh	a5,-20(s0)
    tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
    788e:	fd845783          	lhu	a5,-40(s0)
    7892:	07a2                	slli	a5,a5,0x8
    7894:	01079713          	slli	a4,a5,0x10
    7898:	8341                	srli	a4,a4,0x10
    789a:	fec45783          	lhu	a5,-20(s0)
    789e:	8fd9                	or	a5,a5,a4
    78a0:	fef41623          	sh	a5,-20(s0)

    if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
    78a4:	fdc42703          	lw	a4,-36(s0)
    78a8:	400137b7          	lui	a5,0x40013
    78ac:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    78b0:	02f70063          	beq	a4,a5,78d0 <TI2_Config+0xd0>
    78b4:	fdc42703          	lw	a4,-36(s0)
    78b8:	400007b7          	lui	a5,0x40000
    78bc:	00f70a63          	beq	a4,a5,78d0 <TI2_Config+0xd0>
    78c0:	fdc42703          	lw	a4,-36(s0)
    78c4:	400007b7          	lui	a5,0x40000
    78c8:	40078793          	addi	a5,a5,1024 # 40000400 <_eusrstack+0x1fffc400>
    78cc:	02f71463          	bne	a4,a5,78f4 <TI2_Config+0xf4>
    {
        tmpccer &= (uint16_t) ~((uint16_t)(TIM_CC2P));
    78d0:	fee45783          	lhu	a5,-18(s0)
    78d4:	fdf7f793          	andi	a5,a5,-33
    78d8:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CC2E);
    78dc:	fea45703          	lhu	a4,-22(s0)
    78e0:	fee45783          	lhu	a5,-18(s0)
    78e4:	8fd9                	or	a5,a5,a4
    78e6:	07c2                	slli	a5,a5,0x10
    78e8:	83c1                	srli	a5,a5,0x10
    78ea:	0107e793          	ori	a5,a5,16
    78ee:	fef41723          	sh	a5,-18(s0)
    78f2:	a015                	j	7916 <TI2_Config+0x116>
    }
    else
    {
        tmpccer &= (uint16_t) ~((uint16_t)(TIM_CC2P | TIM_CC2NP));
    78f4:	fee45783          	lhu	a5,-18(s0)
    78f8:	f5f7f793          	andi	a5,a5,-161
    78fc:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CC2E);
    7900:	fda45703          	lhu	a4,-38(s0)
    7904:	fee45783          	lhu	a5,-18(s0)
    7908:	8fd9                	or	a5,a5,a4
    790a:	07c2                	slli	a5,a5,0x10
    790c:	83c1                	srli	a5,a5,0x10
    790e:	0107e793          	ori	a5,a5,16
    7912:	fef41723          	sh	a5,-18(s0)
    }

    TIMx->CHCTLR1 = tmpccmr1;
    7916:	fdc42783          	lw	a5,-36(s0)
    791a:	fec45703          	lhu	a4,-20(s0)
    791e:	00e79c23          	sh	a4,24(a5)
    TIMx->CCER = tmpccer;
    7922:	fdc42783          	lw	a5,-36(s0)
    7926:	fee45703          	lhu	a4,-18(s0)
    792a:	02e79023          	sh	a4,32(a5)
}
    792e:	0001                	nop
    7930:	5432                	lw	s0,44(sp)
    7932:	6145                	addi	sp,sp,48
    7934:	8082                	ret

00007936 <TI3_Config>:
 *
 * @return  none
 */
static void TI3_Config(TIM_TypeDef *TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    7936:	7179                	addi	sp,sp,-48
    7938:	d622                	sw	s0,44(sp)
    793a:	1800                	addi	s0,sp,48
    793c:	fca42e23          	sw	a0,-36(s0)
    7940:	87ae                	mv	a5,a1
    7942:	8736                	mv	a4,a3
    7944:	fcf41d23          	sh	a5,-38(s0)
    7948:	87b2                	mv	a5,a2
    794a:	fcf41c23          	sh	a5,-40(s0)
    794e:	87ba                	mv	a5,a4
    7950:	fcf41b23          	sh	a5,-42(s0)
    uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    7954:	fe041623          	sh	zero,-20(s0)
    7958:	fe041723          	sh	zero,-18(s0)
    795c:	fe041523          	sh	zero,-22(s0)

    TIMx->CCER &= (uint16_t) ~((uint16_t)TIM_CC3E);
    7960:	fdc42783          	lw	a5,-36(s0)
    7964:	0207d783          	lhu	a5,32(a5)
    7968:	07c2                	slli	a5,a5,0x10
    796a:	83c1                	srli	a5,a5,0x10
    796c:	eff7f793          	andi	a5,a5,-257
    7970:	01079713          	slli	a4,a5,0x10
    7974:	8341                	srli	a4,a4,0x10
    7976:	fdc42783          	lw	a5,-36(s0)
    797a:	02e79023          	sh	a4,32(a5)
    tmpccmr2 = TIMx->CHCTLR2;
    797e:	fdc42783          	lw	a5,-36(s0)
    7982:	01c7d783          	lhu	a5,28(a5)
    7986:	fef41623          	sh	a5,-20(s0)
    tmpccer = TIMx->CCER;
    798a:	fdc42783          	lw	a5,-36(s0)
    798e:	0207d783          	lhu	a5,32(a5)
    7992:	fef41723          	sh	a5,-18(s0)
    tmp = (uint16_t)(TIM_ICPolarity << 8);
    7996:	fda45783          	lhu	a5,-38(s0)
    799a:	07a2                	slli	a5,a5,0x8
    799c:	fef41523          	sh	a5,-22(s0)
    tmpccmr2 &= (uint16_t)(((uint16_t) ~((uint16_t)TIM_CC3S)) & ((uint16_t) ~((uint16_t)TIM_IC3F)));
    79a0:	fec45783          	lhu	a5,-20(s0)
    79a4:	f0c7f793          	andi	a5,a5,-244
    79a8:	fef41623          	sh	a5,-20(s0)
    tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
    79ac:	fd645783          	lhu	a5,-42(s0)
    79b0:	0792                	slli	a5,a5,0x4
    79b2:	01079713          	slli	a4,a5,0x10
    79b6:	8341                	srli	a4,a4,0x10
    79b8:	fd845783          	lhu	a5,-40(s0)
    79bc:	8fd9                	or	a5,a5,a4
    79be:	01079713          	slli	a4,a5,0x10
    79c2:	8341                	srli	a4,a4,0x10
    79c4:	fec45783          	lhu	a5,-20(s0)
    79c8:	8fd9                	or	a5,a5,a4
    79ca:	fef41623          	sh	a5,-20(s0)

    if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
    79ce:	fdc42703          	lw	a4,-36(s0)
    79d2:	400137b7          	lui	a5,0x40013
    79d6:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    79da:	02f70063          	beq	a4,a5,79fa <TI3_Config+0xc4>
    79de:	fdc42703          	lw	a4,-36(s0)
    79e2:	400007b7          	lui	a5,0x40000
    79e6:	00f70a63          	beq	a4,a5,79fa <TI3_Config+0xc4>
    79ea:	fdc42703          	lw	a4,-36(s0)
    79ee:	400007b7          	lui	a5,0x40000
    79f2:	40078793          	addi	a5,a5,1024 # 40000400 <_eusrstack+0x1fffc400>
    79f6:	02f71463          	bne	a4,a5,7a1e <TI3_Config+0xe8>
    {
        tmpccer &= (uint16_t) ~((uint16_t)(TIM_CC3P));
    79fa:	fee45783          	lhu	a5,-18(s0)
    79fe:	dff7f793          	andi	a5,a5,-513
    7a02:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CC3E);
    7a06:	fea45703          	lhu	a4,-22(s0)
    7a0a:	fee45783          	lhu	a5,-18(s0)
    7a0e:	8fd9                	or	a5,a5,a4
    7a10:	07c2                	slli	a5,a5,0x10
    7a12:	83c1                	srli	a5,a5,0x10
    7a14:	1007e793          	ori	a5,a5,256
    7a18:	fef41723          	sh	a5,-18(s0)
    7a1c:	a025                	j	7a44 <TI3_Config+0x10e>
    }
    else
    {
        tmpccer &= (uint16_t) ~((uint16_t)(TIM_CC3P | TIM_CC3NP));
    7a1e:	fee45703          	lhu	a4,-18(s0)
    7a22:	77fd                	lui	a5,0xfffff
    7a24:	5ff78793          	addi	a5,a5,1535 # fffff5ff <_eusrstack+0xdfffb5ff>
    7a28:	8ff9                	and	a5,a5,a4
    7a2a:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CC3E);
    7a2e:	fda45703          	lhu	a4,-38(s0)
    7a32:	fee45783          	lhu	a5,-18(s0)
    7a36:	8fd9                	or	a5,a5,a4
    7a38:	07c2                	slli	a5,a5,0x10
    7a3a:	83c1                	srli	a5,a5,0x10
    7a3c:	1007e793          	ori	a5,a5,256
    7a40:	fef41723          	sh	a5,-18(s0)
    }

    TIMx->CHCTLR2 = tmpccmr2;
    7a44:	fdc42783          	lw	a5,-36(s0)
    7a48:	fec45703          	lhu	a4,-20(s0)
    7a4c:	00e79e23          	sh	a4,28(a5)
    TIMx->CCER = tmpccer;
    7a50:	fdc42783          	lw	a5,-36(s0)
    7a54:	fee45703          	lhu	a4,-18(s0)
    7a58:	02e79023          	sh	a4,32(a5)
}
    7a5c:	0001                	nop
    7a5e:	5432                	lw	s0,44(sp)
    7a60:	6145                	addi	sp,sp,48
    7a62:	8082                	ret

00007a64 <TI4_Config>:
 *
 * @return  none
 */
static void TI4_Config(TIM_TypeDef *TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
    7a64:	7179                	addi	sp,sp,-48
    7a66:	d622                	sw	s0,44(sp)
    7a68:	1800                	addi	s0,sp,48
    7a6a:	fca42e23          	sw	a0,-36(s0)
    7a6e:	87ae                	mv	a5,a1
    7a70:	8736                	mv	a4,a3
    7a72:	fcf41d23          	sh	a5,-38(s0)
    7a76:	87b2                	mv	a5,a2
    7a78:	fcf41c23          	sh	a5,-40(s0)
    7a7c:	87ba                	mv	a5,a4
    7a7e:	fcf41b23          	sh	a5,-42(s0)
    uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
    7a82:	fe041623          	sh	zero,-20(s0)
    7a86:	fe041723          	sh	zero,-18(s0)
    7a8a:	fe041523          	sh	zero,-22(s0)

    TIMx->CCER &= (uint16_t) ~((uint16_t)TIM_CC4E);
    7a8e:	fdc42783          	lw	a5,-36(s0)
    7a92:	0207d783          	lhu	a5,32(a5)
    7a96:	01079713          	slli	a4,a5,0x10
    7a9a:	8341                	srli	a4,a4,0x10
    7a9c:	77fd                	lui	a5,0xfffff
    7a9e:	17fd                	addi	a5,a5,-1
    7aa0:	8ff9                	and	a5,a5,a4
    7aa2:	01079713          	slli	a4,a5,0x10
    7aa6:	8341                	srli	a4,a4,0x10
    7aa8:	fdc42783          	lw	a5,-36(s0)
    7aac:	02e79023          	sh	a4,32(a5) # fffff020 <_eusrstack+0xdfffb020>
    tmpccmr2 = TIMx->CHCTLR2;
    7ab0:	fdc42783          	lw	a5,-36(s0)
    7ab4:	01c7d783          	lhu	a5,28(a5)
    7ab8:	fef41623          	sh	a5,-20(s0)
    tmpccer = TIMx->CCER;
    7abc:	fdc42783          	lw	a5,-36(s0)
    7ac0:	0207d783          	lhu	a5,32(a5)
    7ac4:	fef41723          	sh	a5,-18(s0)
    tmp = (uint16_t)(TIM_ICPolarity << 12);
    7ac8:	fda45783          	lhu	a5,-38(s0)
    7acc:	07b2                	slli	a5,a5,0xc
    7ace:	fef41523          	sh	a5,-22(s0)
    tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CC4S) & ((uint16_t) ~((uint16_t)TIM_IC4F)));
    7ad2:	fec45703          	lhu	a4,-20(s0)
    7ad6:	6785                	lui	a5,0x1
    7ad8:	cff78793          	addi	a5,a5,-769 # cff <ADC_InjectedChannelConfig+0x13b>
    7adc:	8ff9                	and	a5,a5,a4
    7ade:	fef41623          	sh	a5,-20(s0)
    tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
    7ae2:	fd845783          	lhu	a5,-40(s0)
    7ae6:	07a2                	slli	a5,a5,0x8
    7ae8:	01079713          	slli	a4,a5,0x10
    7aec:	8341                	srli	a4,a4,0x10
    7aee:	fec45783          	lhu	a5,-20(s0)
    7af2:	8fd9                	or	a5,a5,a4
    7af4:	fef41623          	sh	a5,-20(s0)
    tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
    7af8:	fd645783          	lhu	a5,-42(s0)
    7afc:	07b2                	slli	a5,a5,0xc
    7afe:	01079713          	slli	a4,a5,0x10
    7b02:	8341                	srli	a4,a4,0x10
    7b04:	fec45783          	lhu	a5,-20(s0)
    7b08:	8fd9                	or	a5,a5,a4
    7b0a:	fef41623          	sh	a5,-20(s0)

    if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
    7b0e:	fdc42703          	lw	a4,-36(s0)
    7b12:	400137b7          	lui	a5,0x40013
    7b16:	c0078793          	addi	a5,a5,-1024 # 40012c00 <_eusrstack+0x2000ec00>
    7b1a:	02f70063          	beq	a4,a5,7b3a <TI4_Config+0xd6>
    7b1e:	fdc42703          	lw	a4,-36(s0)
    7b22:	400007b7          	lui	a5,0x40000
    7b26:	00f70a63          	beq	a4,a5,7b3a <TI4_Config+0xd6>
    7b2a:	fdc42703          	lw	a4,-36(s0)
    7b2e:	400007b7          	lui	a5,0x40000
    7b32:	40078793          	addi	a5,a5,1024 # 40000400 <_eusrstack+0x1fffc400>
    7b36:	02f71663          	bne	a4,a5,7b62 <TI4_Config+0xfe>
    {
        tmpccer &= (uint16_t) ~((uint16_t)(TIM_CC4P));
    7b3a:	fee45703          	lhu	a4,-18(s0)
    7b3e:	77f9                	lui	a5,0xffffe
    7b40:	17fd                	addi	a5,a5,-1
    7b42:	8ff9                	and	a5,a5,a4
    7b44:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CC4E);
    7b48:	fea45703          	lhu	a4,-22(s0)
    7b4c:	fee45783          	lhu	a5,-18(s0)
    7b50:	8fd9                	or	a5,a5,a4
    7b52:	01079713          	slli	a4,a5,0x10
    7b56:	8341                	srli	a4,a4,0x10
    7b58:	6785                	lui	a5,0x1
    7b5a:	8fd9                	or	a5,a5,a4
    7b5c:	fef41723          	sh	a5,-18(s0)
    7b60:	a01d                	j	7b86 <TI4_Config+0x122>
    }
    else
    {
        tmpccer &= (uint16_t) ~((uint16_t)TIM_CC3P);
    7b62:	fee45783          	lhu	a5,-18(s0)
    7b66:	dff7f793          	andi	a5,a5,-513
    7b6a:	fef41723          	sh	a5,-18(s0)
        tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CC4E);
    7b6e:	fda45703          	lhu	a4,-38(s0)
    7b72:	fee45783          	lhu	a5,-18(s0)
    7b76:	8fd9                	or	a5,a5,a4
    7b78:	01079713          	slli	a4,a5,0x10
    7b7c:	8341                	srli	a4,a4,0x10
    7b7e:	6785                	lui	a5,0x1
    7b80:	8fd9                	or	a5,a5,a4
    7b82:	fef41723          	sh	a5,-18(s0)
    }

    TIMx->CHCTLR2 = tmpccmr2;
    7b86:	fdc42783          	lw	a5,-36(s0)
    7b8a:	fec45703          	lhu	a4,-20(s0)
    7b8e:	00e79e23          	sh	a4,28(a5) # 101c <ADC_ClearFlag+0x14>
    TIMx->CCER = tmpccer;
    7b92:	fdc42783          	lw	a5,-36(s0)
    7b96:	fee45703          	lhu	a4,-18(s0)
    7b9a:	02e79023          	sh	a4,32(a5)
}
    7b9e:	0001                	nop
    7ba0:	5432                	lw	s0,44(sp)
    7ba2:	6145                	addi	sp,sp,48
    7ba4:	8082                	ret

00007ba6 <TIM_CaptureModeCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_CaptureModeCmd(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    7ba6:	1101                	addi	sp,sp,-32
    7ba8:	ce22                	sw	s0,28(sp)
    7baa:	1000                	addi	s0,sp,32
    7bac:	fea42623          	sw	a0,-20(s0)
    7bb0:	feb42423          	sw	a1,-24(s0)
    if(NewState)
    7bb4:	fe842783          	lw	a5,-24(s0)
    7bb8:	c395                	beqz	a5,7bdc <TIM_CaptureModeCmd+0x36>
    {
        TIMx->CTLR1 |= (1<<14);
    7bba:	fec42783          	lw	a5,-20(s0)
    7bbe:	0007d783          	lhu	a5,0(a5)
    7bc2:	01079713          	slli	a4,a5,0x10
    7bc6:	8341                	srli	a4,a4,0x10
    7bc8:	6791                	lui	a5,0x4
    7bca:	8fd9                	or	a5,a5,a4
    7bcc:	01079713          	slli	a4,a5,0x10
    7bd0:	8341                	srli	a4,a4,0x10
    7bd2:	fec42783          	lw	a5,-20(s0)
    7bd6:	00e79023          	sh	a4,0(a5) # 4000 <NVIC_Init+0x2b0>
    }
    else{
        TIMx->CTLR1 &= ~(1<<14);
    }
}
    7bda:	a015                	j	7bfe <TIM_CaptureModeCmd+0x58>
        TIMx->CTLR1 &= ~(1<<14);
    7bdc:	fec42783          	lw	a5,-20(s0)
    7be0:	0007d783          	lhu	a5,0(a5)
    7be4:	01079713          	slli	a4,a5,0x10
    7be8:	8341                	srli	a4,a4,0x10
    7bea:	77f1                	lui	a5,0xffffc
    7bec:	17fd                	addi	a5,a5,-1
    7bee:	8ff9                	and	a5,a5,a4
    7bf0:	01079713          	slli	a4,a5,0x10
    7bf4:	8341                	srli	a4,a4,0x10
    7bf6:	fec42783          	lw	a5,-20(s0)
    7bfa:	00e79023          	sh	a4,0(a5) # ffffc000 <_eusrstack+0xdfff8000>
}
    7bfe:	0001                	nop
    7c00:	4472                	lw	s0,28(sp)
    7c02:	6105                	addi	sp,sp,32
    7c04:	8082                	ret

00007c06 <TIM_IndicateCaptureLevelCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void TIM_IndicateCaptureLevelCmd(TIM_TypeDef *TIMx, FunctionalState NewState)
{
    7c06:	1101                	addi	sp,sp,-32
    7c08:	ce22                	sw	s0,28(sp)
    7c0a:	1000                	addi	s0,sp,32
    7c0c:	fea42623          	sw	a0,-20(s0)
    7c10:	feb42423          	sw	a1,-24(s0)
    if(NewState)
    7c14:	fe842783          	lw	a5,-24(s0)
    7c18:	c395                	beqz	a5,7c3c <TIM_IndicateCaptureLevelCmd+0x36>
    {
        TIMx->CTLR1 |= (1<<15);
    7c1a:	fec42783          	lw	a5,-20(s0)
    7c1e:	0007d783          	lhu	a5,0(a5)
    7c22:	01079713          	slli	a4,a5,0x10
    7c26:	8341                	srli	a4,a4,0x10
    7c28:	77e1                	lui	a5,0xffff8
    7c2a:	8fd9                	or	a5,a5,a4
    7c2c:	01079713          	slli	a4,a5,0x10
    7c30:	8341                	srli	a4,a4,0x10
    7c32:	fec42783          	lw	a5,-20(s0)
    7c36:	00e79023          	sh	a4,0(a5) # ffff8000 <_eusrstack+0xdfff4000>
    }
    else{
        TIMx->CTLR1 &= ~(1<<15);
    }
}
    7c3a:	a015                	j	7c5e <TIM_IndicateCaptureLevelCmd+0x58>
        TIMx->CTLR1 &= ~(1<<15);
    7c3c:	fec42783          	lw	a5,-20(s0)
    7c40:	0007d783          	lhu	a5,0(a5)
    7c44:	01079713          	slli	a4,a5,0x10
    7c48:	8341                	srli	a4,a4,0x10
    7c4a:	67a1                	lui	a5,0x8
    7c4c:	17fd                	addi	a5,a5,-1
    7c4e:	8ff9                	and	a5,a5,a4
    7c50:	01079713          	slli	a4,a5,0x10
    7c54:	8341                	srli	a4,a4,0x10
    7c56:	fec42783          	lw	a5,-20(s0)
    7c5a:	00e79023          	sh	a4,0(a5) # 8000 <USART_StructInit+0x1a>
}
    7c5e:	0001                	nop
    7c60:	4472                	lw	s0,28(sp)
    7c62:	6105                	addi	sp,sp,32
    7c64:	8082                	ret

00007c66 <TIM_OC12_SupersedeModeCmd>:
 *
 * @return  none
 */
void TIM_OC12_SupersedeModeCmd(TIM_TypeDef *TIMx, uint16_t TIM_Supersede_Mode_OC1, uint16_t TIM_Supersede_Mode_OC2,
                              FunctionalState NewState)
{
    7c66:	7179                	addi	sp,sp,-48
    7c68:	d622                	sw	s0,44(sp)
    7c6a:	1800                	addi	s0,sp,48
    7c6c:	fca42e23          	sw	a0,-36(s0)
    7c70:	87ae                	mv	a5,a1
    7c72:	8732                	mv	a4,a2
    7c74:	fcd42a23          	sw	a3,-44(s0)
    7c78:	fcf41d23          	sh	a5,-38(s0)
    7c7c:	87ba                	mv	a5,a4
    7c7e:	fcf41c23          	sh	a5,-40(s0)
    uint32_t tmpreg = 0;
    7c82:	fe042623          	sw	zero,-20(s0)

    tmpreg = TIMx->SPEC;
    7c86:	fdc42783          	lw	a5,-36(s0)
    7c8a:	0507d783          	lhu	a5,80(a5)
    7c8e:	07c2                	slli	a5,a5,0x10
    7c90:	83c1                	srli	a5,a5,0x10
    7c92:	fef42623          	sw	a5,-20(s0)

    tmpreg &= SPEC_OC12_Mask;
    7c96:	fec42703          	lw	a4,-20(s0)
    7c9a:	67c1                	lui	a5,0x10
    7c9c:	fce78793          	addi	a5,a5,-50 # ffce <_data_lma+0xdc2>
    7ca0:	8ff9                	and	a5,a5,a4
    7ca2:	fef42623          	sw	a5,-20(s0)
    tmpreg |= TIM_Supersede_Mode_OC1 | TIM_Supersede_Mode_OC2;
    7ca6:	fda45703          	lhu	a4,-38(s0)
    7caa:	fd845783          	lhu	a5,-40(s0)
    7cae:	8fd9                	or	a5,a5,a4
    7cb0:	07c2                	slli	a5,a5,0x10
    7cb2:	83c1                	srli	a5,a5,0x10
    7cb4:	873e                	mv	a4,a5
    7cb6:	fec42783          	lw	a5,-20(s0)
    7cba:	8fd9                	or	a5,a5,a4
    7cbc:	fef42623          	sw	a5,-20(s0)


    if(NewState)
    7cc0:	fd442783          	lw	a5,-44(s0)
    7cc4:	c799                	beqz	a5,7cd2 <TIM_OC12_SupersedeModeCmd+0x6c>
    {
        tmpreg |= (1<<0);
    7cc6:	fec42783          	lw	a5,-20(s0)
    7cca:	0017e793          	ori	a5,a5,1
    7cce:	fef42623          	sw	a5,-20(s0)
    }

    TIMx->SPEC = tmpreg;
    7cd2:	fec42783          	lw	a5,-20(s0)
    7cd6:	01079713          	slli	a4,a5,0x10
    7cda:	8341                	srli	a4,a4,0x10
    7cdc:	fdc42783          	lw	a5,-36(s0)
    7ce0:	04e79823          	sh	a4,80(a5)
}
    7ce4:	0001                	nop
    7ce6:	5432                	lw	s0,44(sp)
    7ce8:	6145                	addi	sp,sp,48
    7cea:	8082                	ret

00007cec <TIM_OC34_SupersedeModeCmd>:
 *
 * @return  none
 */
void TIM_OC34_SupersedeModeCmd(TIM_TypeDef *TIMx, uint16_t TIM_Supersede_Mode_OC3, uint16_t TIM_Supersede_Mode_OC4,
                              FunctionalState NewState)
{
    7cec:	7179                	addi	sp,sp,-48
    7cee:	d622                	sw	s0,44(sp)
    7cf0:	1800                	addi	s0,sp,48
    7cf2:	fca42e23          	sw	a0,-36(s0)
    7cf6:	87ae                	mv	a5,a1
    7cf8:	8732                	mv	a4,a2
    7cfa:	fcd42a23          	sw	a3,-44(s0)
    7cfe:	fcf41d23          	sh	a5,-38(s0)
    7d02:	87ba                	mv	a5,a4
    7d04:	fcf41c23          	sh	a5,-40(s0)
    uint32_t tmpreg = 0;
    7d08:	fe042623          	sw	zero,-20(s0)

    tmpreg = TIMx->SPEC;
    7d0c:	fdc42783          	lw	a5,-36(s0)
    7d10:	0507d783          	lhu	a5,80(a5)
    7d14:	07c2                	slli	a5,a5,0x10
    7d16:	83c1                	srli	a5,a5,0x10
    7d18:	fef42623          	sw	a5,-20(s0)

    tmpreg &= SPEC_OC34_Mask;
    7d1c:	fec42703          	lw	a4,-20(s0)
    7d20:	67c1                	lui	a5,0x10
    7d22:	f3d78793          	addi	a5,a5,-195 # ff3d <_data_lma+0xd31>
    7d26:	8ff9                	and	a5,a5,a4
    7d28:	fef42623          	sw	a5,-20(s0)
    tmpreg |= TIM_Supersede_Mode_OC3 | TIM_Supersede_Mode_OC4;
    7d2c:	fda45703          	lhu	a4,-38(s0)
    7d30:	fd845783          	lhu	a5,-40(s0)
    7d34:	8fd9                	or	a5,a5,a4
    7d36:	07c2                	slli	a5,a5,0x10
    7d38:	83c1                	srli	a5,a5,0x10
    7d3a:	873e                	mv	a4,a5
    7d3c:	fec42783          	lw	a5,-20(s0)
    7d40:	8fd9                	or	a5,a5,a4
    7d42:	fef42623          	sw	a5,-20(s0)


    if(NewState)
    7d46:	fd442783          	lw	a5,-44(s0)
    7d4a:	c799                	beqz	a5,7d58 <TIM_OC34_SupersedeModeCmd+0x6c>
    {
        tmpreg |= (1<<1);
    7d4c:	fec42783          	lw	a5,-20(s0)
    7d50:	0027e793          	ori	a5,a5,2
    7d54:	fef42623          	sw	a5,-20(s0)
    }

    TIMx->SPEC = tmpreg;
    7d58:	fec42783          	lw	a5,-20(s0)
    7d5c:	01079713          	slli	a4,a5,0x10
    7d60:	8341                	srli	a4,a4,0x10
    7d62:	fdc42783          	lw	a5,-36(s0)
    7d66:	04e79823          	sh	a4,80(a5)
}
    7d6a:	0001                	nop
    7d6c:	5432                	lw	s0,44(sp)
    7d6e:	6145                	addi	sp,sp,48
    7d70:	8082                	ret

00007d72 <USART_DeInit>:
 * @param   USARTx - where x can be 1, 2 , 3 or 4 to select the UART peripheral.
 *
 * @return  none
 */
void USART_DeInit(USART_TypeDef *USARTx)
{
    7d72:	1101                	addi	sp,sp,-32
    7d74:	ce06                	sw	ra,28(sp)
    7d76:	cc22                	sw	s0,24(sp)
    7d78:	1000                	addi	s0,sp,32
    7d7a:	fea42623          	sw	a0,-20(s0)
    if(USARTx == USART1)
    7d7e:	fec42703          	lw	a4,-20(s0)
    7d82:	400147b7          	lui	a5,0x40014
    7d86:	80078793          	addi	a5,a5,-2048 # 40013800 <_eusrstack+0x2000f800>
    7d8a:	00f71b63          	bne	a4,a5,7da0 <USART_DeInit+0x2e>
    {
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    7d8e:	4585                	li	a1,1
    7d90:	6511                	lui	a0,0x4
    7d92:	df9fc0ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
        RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
    7d96:	4581                	li	a1,0
    7d98:	6511                	lui	a0,0x4
    7d9a:	df1fc0ef          	jal	ra,4b8a <RCC_APB2PeriphResetCmd>
    else if(USARTx == USART4)
    {
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, ENABLE);
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, DISABLE);
    }
}
    7d9e:	a88d                	j	7e10 <USART_DeInit+0x9e>
    else if(USARTx == USART2)
    7da0:	fec42703          	lw	a4,-20(s0)
    7da4:	400047b7          	lui	a5,0x40004
    7da8:	40078793          	addi	a5,a5,1024 # 40004400 <_eusrstack+0x20000400>
    7dac:	00f71d63          	bne	a4,a5,7dc6 <USART_DeInit+0x54>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
    7db0:	4585                	li	a1,1
    7db2:	00020537          	lui	a0,0x20
    7db6:	e1bfc0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    7dba:	4581                	li	a1,0
    7dbc:	00020537          	lui	a0,0x20
    7dc0:	e11fc0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
}
    7dc4:	a0b1                	j	7e10 <USART_DeInit+0x9e>
    else if(USARTx == USART3)
    7dc6:	fec42703          	lw	a4,-20(s0)
    7dca:	400057b7          	lui	a5,0x40005
    7dce:	80078793          	addi	a5,a5,-2048 # 40004800 <_eusrstack+0x20000800>
    7dd2:	00f71d63          	bne	a4,a5,7dec <USART_DeInit+0x7a>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, ENABLE);
    7dd6:	4585                	li	a1,1
    7dd8:	00040537          	lui	a0,0x40
    7ddc:	df5fc0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
    7de0:	4581                	li	a1,0
    7de2:	00040537          	lui	a0,0x40
    7de6:	debfc0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
}
    7dea:	a01d                	j	7e10 <USART_DeInit+0x9e>
    else if(USARTx == USART4)
    7dec:	fec42703          	lw	a4,-20(s0)
    7df0:	400057b7          	lui	a5,0x40005
    7df4:	c0078793          	addi	a5,a5,-1024 # 40004c00 <_eusrstack+0x20000c00>
    7df8:	00f71c63          	bne	a4,a5,7e10 <USART_DeInit+0x9e>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, ENABLE);
    7dfc:	4585                	li	a1,1
    7dfe:	00080537          	lui	a0,0x80
    7e02:	dcffc0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
        RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART4, DISABLE);
    7e06:	4581                	li	a1,0
    7e08:	00080537          	lui	a0,0x80
    7e0c:	dc5fc0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
}
    7e10:	0001                	nop
    7e12:	40f2                	lw	ra,28(sp)
    7e14:	4462                	lw	s0,24(sp)
    7e16:	6105                	addi	sp,sp,32
    7e18:	8082                	ret

00007e1a <USART_Init>:
 *        USART peripheral.
 *
 * @return  none
 */
void USART_Init(USART_TypeDef *USARTx, USART_InitTypeDef *USART_InitStruct)
{
    7e1a:	715d                	addi	sp,sp,-80
    7e1c:	c686                	sw	ra,76(sp)
    7e1e:	c4a2                	sw	s0,72(sp)
    7e20:	0880                	addi	s0,sp,80
    7e22:	faa42e23          	sw	a0,-68(s0)
    7e26:	fab42c23          	sw	a1,-72(s0)
    uint32_t          tmpreg = 0x00, apbclock = 0x00;
    7e2a:	fe042423          	sw	zero,-24(s0)
    7e2e:	fe042623          	sw	zero,-20(s0)
    uint32_t          integerdivider = 0x00;
    7e32:	fe042223          	sw	zero,-28(s0)
    uint32_t          fractionaldivider = 0x00;
    7e36:	fe042023          	sw	zero,-32(s0)
    uint32_t          usartxbase = 0;
    7e3a:	fc042e23          	sw	zero,-36(s0)

    if(USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
    {
    }

    usartxbase = (uint32_t)USARTx;
    7e3e:	fbc42783          	lw	a5,-68(s0)
    7e42:	fcf42e23          	sw	a5,-36(s0)
    tmpreg = USARTx->CTLR2;
    7e46:	fbc42783          	lw	a5,-68(s0)
    7e4a:	0107d783          	lhu	a5,16(a5)
    7e4e:	07c2                	slli	a5,a5,0x10
    7e50:	83c1                	srli	a5,a5,0x10
    7e52:	fef42423          	sw	a5,-24(s0)
    tmpreg &= CTLR2_STOP_CLEAR_Mask;
    7e56:	fe842703          	lw	a4,-24(s0)
    7e5a:	67b5                	lui	a5,0xd
    7e5c:	17fd                	addi	a5,a5,-1
    7e5e:	8ff9                	and	a5,a5,a4
    7e60:	fef42423          	sw	a5,-24(s0)
    tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
    7e64:	fb842783          	lw	a5,-72(s0)
    7e68:	0067d783          	lhu	a5,6(a5) # d006 <__adddf3+0x33e>
    7e6c:	873e                	mv	a4,a5
    7e6e:	fe842783          	lw	a5,-24(s0)
    7e72:	8fd9                	or	a5,a5,a4
    7e74:	fef42423          	sw	a5,-24(s0)

    USARTx->CTLR2 = (uint16_t)tmpreg;
    7e78:	fe842783          	lw	a5,-24(s0)
    7e7c:	01079713          	slli	a4,a5,0x10
    7e80:	8341                	srli	a4,a4,0x10
    7e82:	fbc42783          	lw	a5,-68(s0)
    7e86:	00e79823          	sh	a4,16(a5)
    tmpreg = USARTx->CTLR1;
    7e8a:	fbc42783          	lw	a5,-68(s0)
    7e8e:	00c7d783          	lhu	a5,12(a5)
    7e92:	07c2                	slli	a5,a5,0x10
    7e94:	83c1                	srli	a5,a5,0x10
    7e96:	fef42423          	sw	a5,-24(s0)
    tmpreg &= CTLR1_CLEAR_Mask;
    7e9a:	fe842703          	lw	a4,-24(s0)
    7e9e:	67bd                	lui	a5,0xf
    7ea0:	9f378793          	addi	a5,a5,-1549 # e9f3 <strlen+0x1b>
    7ea4:	8ff9                	and	a5,a5,a4
    7ea6:	fef42423          	sw	a5,-24(s0)
    tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    7eaa:	fb842783          	lw	a5,-72(s0)
    7eae:	0047d703          	lhu	a4,4(a5)
    7eb2:	fb842783          	lw	a5,-72(s0)
    7eb6:	0087d783          	lhu	a5,8(a5)
    7eba:	8fd9                	or	a5,a5,a4
    7ebc:	01079713          	slli	a4,a5,0x10
    7ec0:	8341                	srli	a4,a4,0x10
              USART_InitStruct->USART_Mode;
    7ec2:	fb842783          	lw	a5,-72(s0)
    7ec6:	00a7d783          	lhu	a5,10(a5)
    tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
    7eca:	8fd9                	or	a5,a5,a4
    7ecc:	07c2                	slli	a5,a5,0x10
    7ece:	83c1                	srli	a5,a5,0x10
    7ed0:	873e                	mv	a4,a5
    7ed2:	fe842783          	lw	a5,-24(s0)
    7ed6:	8fd9                	or	a5,a5,a4
    7ed8:	fef42423          	sw	a5,-24(s0)
    USARTx->CTLR1 = (uint16_t)tmpreg;
    7edc:	fe842783          	lw	a5,-24(s0)
    7ee0:	01079713          	slli	a4,a5,0x10
    7ee4:	8341                	srli	a4,a4,0x10
    7ee6:	fbc42783          	lw	a5,-68(s0)
    7eea:	00e79623          	sh	a4,12(a5)

    tmpreg = USARTx->CTLR3;
    7eee:	fbc42783          	lw	a5,-68(s0)
    7ef2:	0147d783          	lhu	a5,20(a5)
    7ef6:	07c2                	slli	a5,a5,0x10
    7ef8:	83c1                	srli	a5,a5,0x10
    7efa:	fef42423          	sw	a5,-24(s0)
    tmpreg &= CTLR3_CLEAR_Mask;
    7efe:	fe842703          	lw	a4,-24(s0)
    7f02:	67c1                	lui	a5,0x10
    7f04:	cff78793          	addi	a5,a5,-769 # fcff <_data_lma+0xaf3>
    7f08:	8ff9                	and	a5,a5,a4
    7f0a:	fef42423          	sw	a5,-24(s0)
    tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
    7f0e:	fb842783          	lw	a5,-72(s0)
    7f12:	00c7d783          	lhu	a5,12(a5)
    7f16:	873e                	mv	a4,a5
    7f18:	fe842783          	lw	a5,-24(s0)
    7f1c:	8fd9                	or	a5,a5,a4
    7f1e:	fef42423          	sw	a5,-24(s0)
    USARTx->CTLR3 = (uint16_t)tmpreg;
    7f22:	fe842783          	lw	a5,-24(s0)
    7f26:	01079713          	slli	a4,a5,0x10
    7f2a:	8341                	srli	a4,a4,0x10
    7f2c:	fbc42783          	lw	a5,-68(s0)
    7f30:	00e79a23          	sh	a4,20(a5)

    RCC_GetClocksFreq(&RCC_ClocksStatus);
    7f34:	fcc40793          	addi	a5,s0,-52
    7f38:	853e                	mv	a0,a5
    7f3a:	a91fc0ef          	jal	ra,49ca <RCC_GetClocksFreq>

    if(usartxbase == USART1_BASE)
    7f3e:	fdc42703          	lw	a4,-36(s0)
    7f42:	400147b7          	lui	a5,0x40014
    7f46:	80078793          	addi	a5,a5,-2048 # 40013800 <_eusrstack+0x2000f800>
    7f4a:	00f71763          	bne	a4,a5,7f58 <USART_Init+0x13e>
    {
        apbclock = RCC_ClocksStatus.PCLK2_Frequency;
    7f4e:	fd842783          	lw	a5,-40(s0)
    7f52:	fef42623          	sw	a5,-20(s0)
    7f56:	a029                	j	7f60 <USART_Init+0x146>
    }
    else
    {
        apbclock = RCC_ClocksStatus.PCLK1_Frequency;
    7f58:	fd442783          	lw	a5,-44(s0)
    7f5c:	fef42623          	sw	a5,-20(s0)
    }

    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));
    7f60:	fec42703          	lw	a4,-20(s0)
    7f64:	87ba                	mv	a5,a4
    7f66:	0786                	slli	a5,a5,0x1
    7f68:	97ba                	add	a5,a5,a4
    7f6a:	078e                	slli	a5,a5,0x3
    7f6c:	973e                	add	a4,a4,a5
    7f6e:	fb842783          	lw	a5,-72(s0)
    7f72:	439c                	lw	a5,0(a5)
    7f74:	078a                	slli	a5,a5,0x2
    7f76:	02f757b3          	divu	a5,a4,a5
    7f7a:	fef42223          	sw	a5,-28(s0)
    tmpreg = (integerdivider / 100) << 4;
    7f7e:	fe442703          	lw	a4,-28(s0)
    7f82:	06400793          	li	a5,100
    7f86:	02f757b3          	divu	a5,a4,a5
    7f8a:	0792                	slli	a5,a5,0x4
    7f8c:	fef42423          	sw	a5,-24(s0)

    fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
    7f90:	fe842783          	lw	a5,-24(s0)
    7f94:	0047d713          	srli	a4,a5,0x4
    7f98:	06400793          	li	a5,100
    7f9c:	02f707b3          	mul	a5,a4,a5
    7fa0:	fe442703          	lw	a4,-28(s0)
    7fa4:	40f707b3          	sub	a5,a4,a5
    7fa8:	fef42023          	sw	a5,-32(s0)
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
    7fac:	fe042783          	lw	a5,-32(s0)
    7fb0:	0792                	slli	a5,a5,0x4
    7fb2:	03278713          	addi	a4,a5,50
    7fb6:	06400793          	li	a5,100
    7fba:	02f757b3          	divu	a5,a4,a5
    7fbe:	8bbd                	andi	a5,a5,15
    7fc0:	fe842703          	lw	a4,-24(s0)
    7fc4:	8fd9                	or	a5,a5,a4
    7fc6:	fef42423          	sw	a5,-24(s0)

    USARTx->BRR = (uint16_t)tmpreg;
    7fca:	fe842783          	lw	a5,-24(s0)
    7fce:	01079713          	slli	a4,a5,0x10
    7fd2:	8341                	srli	a4,a4,0x10
    7fd4:	fbc42783          	lw	a5,-68(s0)
    7fd8:	00e79423          	sh	a4,8(a5)
}
    7fdc:	0001                	nop
    7fde:	40b6                	lw	ra,76(sp)
    7fe0:	4426                	lw	s0,72(sp)
    7fe2:	6161                	addi	sp,sp,80
    7fe4:	8082                	ret

00007fe6 <USART_StructInit>:
 *       which will be initialized.
 *
 * @return  none
 */
void USART_StructInit(USART_InitTypeDef *USART_InitStruct)
{
    7fe6:	1101                	addi	sp,sp,-32
    7fe8:	ce22                	sw	s0,28(sp)
    7fea:	1000                	addi	s0,sp,32
    7fec:	fea42623          	sw	a0,-20(s0)
    USART_InitStruct->USART_BaudRate = 9600;
    7ff0:	fec42783          	lw	a5,-20(s0)
    7ff4:	6709                	lui	a4,0x2
    7ff6:	58070713          	addi	a4,a4,1408 # 2580 <GPIO_Init+0xf2>
    7ffa:	c398                	sw	a4,0(a5)
    USART_InitStruct->USART_WordLength = USART_WordLength_8b;
    7ffc:	fec42783          	lw	a5,-20(s0)
    8000:	00079223          	sh	zero,4(a5)
    USART_InitStruct->USART_StopBits = USART_StopBits_1;
    8004:	fec42783          	lw	a5,-20(s0)
    8008:	00079323          	sh	zero,6(a5)
    USART_InitStruct->USART_Parity = USART_Parity_No;
    800c:	fec42783          	lw	a5,-20(s0)
    8010:	00079423          	sh	zero,8(a5)
    USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    8014:	fec42783          	lw	a5,-20(s0)
    8018:	4731                	li	a4,12
    801a:	00e79523          	sh	a4,10(a5)
    USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    801e:	fec42783          	lw	a5,-20(s0)
    8022:	00079623          	sh	zero,12(a5)
}
    8026:	0001                	nop
    8028:	4472                	lw	s0,28(sp)
    802a:	6105                	addi	sp,sp,32
    802c:	8082                	ret

0000802e <USART_ClockInit>:
 *        USART peripheral.
 *
 * @return  none
 */
void USART_ClockInit(USART_TypeDef *USARTx, USART_ClockInitTypeDef *USART_ClockInitStruct)
{
    802e:	7179                	addi	sp,sp,-48
    8030:	d622                	sw	s0,44(sp)
    8032:	1800                	addi	s0,sp,48
    8034:	fca42e23          	sw	a0,-36(s0)
    8038:	fcb42c23          	sw	a1,-40(s0)
    uint32_t tmpreg = 0x00;
    803c:	fe042623          	sw	zero,-20(s0)

    tmpreg = USARTx->CTLR2;
    8040:	fdc42783          	lw	a5,-36(s0)
    8044:	0107d783          	lhu	a5,16(a5)
    8048:	07c2                	slli	a5,a5,0x10
    804a:	83c1                	srli	a5,a5,0x10
    804c:	fef42623          	sw	a5,-20(s0)
    tmpreg &= CTLR2_CLOCK_CLEAR_Mask;
    8050:	fec42703          	lw	a4,-20(s0)
    8054:	67bd                	lui	a5,0xf
    8056:	0ff78793          	addi	a5,a5,255 # f0ff <__clz_tab+0x33>
    805a:	8ff9                	and	a5,a5,a4
    805c:	fef42623          	sw	a5,-20(s0)
    tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    8060:	fd842783          	lw	a5,-40(s0)
    8064:	0007d703          	lhu	a4,0(a5)
    8068:	fd842783          	lw	a5,-40(s0)
    806c:	0027d783          	lhu	a5,2(a5)
              USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit;
    8070:	8fd9                	or	a5,a5,a4
    8072:	01079713          	slli	a4,a5,0x10
    8076:	8341                	srli	a4,a4,0x10
    8078:	fd842783          	lw	a5,-40(s0)
    807c:	0047d783          	lhu	a5,4(a5)
    8080:	8fd9                	or	a5,a5,a4
    8082:	01079713          	slli	a4,a5,0x10
    8086:	8341                	srli	a4,a4,0x10
    8088:	fd842783          	lw	a5,-40(s0)
    808c:	0067d783          	lhu	a5,6(a5)
    8090:	8fd9                	or	a5,a5,a4
    8092:	07c2                	slli	a5,a5,0x10
    8094:	83c1                	srli	a5,a5,0x10
    8096:	873e                	mv	a4,a5
    tmpreg |= (uint32_t)USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL |
    8098:	fec42783          	lw	a5,-20(s0)
    809c:	8fd9                	or	a5,a5,a4
    809e:	fef42623          	sw	a5,-20(s0)
    USARTx->CTLR2 = (uint16_t)tmpreg;
    80a2:	fec42783          	lw	a5,-20(s0)
    80a6:	01079713          	slli	a4,a5,0x10
    80aa:	8341                	srli	a4,a4,0x10
    80ac:	fdc42783          	lw	a5,-36(s0)
    80b0:	00e79823          	sh	a4,16(a5)
}
    80b4:	0001                	nop
    80b6:	5432                	lw	s0,44(sp)
    80b8:	6145                	addi	sp,sp,48
    80ba:	8082                	ret

000080bc <USART_ClockStructInit>:
 *        structure which will be initialized.
 *
 * @return  none
 */
void USART_ClockStructInit(USART_ClockInitTypeDef *USART_ClockInitStruct)
{
    80bc:	1101                	addi	sp,sp,-32
    80be:	ce22                	sw	s0,28(sp)
    80c0:	1000                	addi	s0,sp,32
    80c2:	fea42623          	sw	a0,-20(s0)
    USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
    80c6:	fec42783          	lw	a5,-20(s0)
    80ca:	00079023          	sh	zero,0(a5)
    USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
    80ce:	fec42783          	lw	a5,-20(s0)
    80d2:	00079123          	sh	zero,2(a5)
    USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
    80d6:	fec42783          	lw	a5,-20(s0)
    80da:	00079223          	sh	zero,4(a5)
    USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
    80de:	fec42783          	lw	a5,-20(s0)
    80e2:	00079323          	sh	zero,6(a5)
}
    80e6:	0001                	nop
    80e8:	4472                	lw	s0,28(sp)
    80ea:	6105                	addi	sp,sp,32
    80ec:	8082                	ret

000080ee <USART_Cmd>:
 *          NewState: ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_Cmd(USART_TypeDef *USARTx, FunctionalState NewState)
{
    80ee:	1101                	addi	sp,sp,-32
    80f0:	ce22                	sw	s0,28(sp)
    80f2:	1000                	addi	s0,sp,32
    80f4:	fea42623          	sw	a0,-20(s0)
    80f8:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    80fc:	fe842783          	lw	a5,-24(s0)
    8100:	c395                	beqz	a5,8124 <USART_Cmd+0x36>
    {
        USARTx->CTLR1 |= CTLR1_UE_Set;
    8102:	fec42783          	lw	a5,-20(s0)
    8106:	00c7d783          	lhu	a5,12(a5)
    810a:	01079713          	slli	a4,a5,0x10
    810e:	8341                	srli	a4,a4,0x10
    8110:	6789                	lui	a5,0x2
    8112:	8fd9                	or	a5,a5,a4
    8114:	01079713          	slli	a4,a5,0x10
    8118:	8341                	srli	a4,a4,0x10
    811a:	fec42783          	lw	a5,-20(s0)
    811e:	00e79623          	sh	a4,12(a5) # 200c <FLASH_ClearFlag+0x2>
    }
    else
    {
        USARTx->CTLR1 &= CTLR1_UE_Reset;
    }
}
    8122:	a015                	j	8146 <USART_Cmd+0x58>
        USARTx->CTLR1 &= CTLR1_UE_Reset;
    8124:	fec42783          	lw	a5,-20(s0)
    8128:	00c7d783          	lhu	a5,12(a5)
    812c:	01079713          	slli	a4,a5,0x10
    8130:	8341                	srli	a4,a4,0x10
    8132:	77f9                	lui	a5,0xffffe
    8134:	17fd                	addi	a5,a5,-1
    8136:	8ff9                	and	a5,a5,a4
    8138:	01079713          	slli	a4,a5,0x10
    813c:	8341                	srli	a4,a4,0x10
    813e:	fec42783          	lw	a5,-20(s0)
    8142:	00e79623          	sh	a4,12(a5) # ffffe00c <_eusrstack+0xdfffa00c>
}
    8146:	0001                	nop
    8148:	4472                	lw	s0,28(sp)
    814a:	6105                	addi	sp,sp,32
    814c:	8082                	ret

0000814e <USART_ITConfig>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_ITConfig(USART_TypeDef *USARTx, uint16_t USART_IT, FunctionalState NewState)
{
    814e:	7179                	addi	sp,sp,-48
    8150:	d622                	sw	s0,44(sp)
    8152:	1800                	addi	s0,sp,48
    8154:	fca42e23          	sw	a0,-36(s0)
    8158:	87ae                	mv	a5,a1
    815a:	fcc42a23          	sw	a2,-44(s0)
    815e:	fcf41d23          	sh	a5,-38(s0)
    uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
    8162:	fe042423          	sw	zero,-24(s0)
    8166:	fe042223          	sw	zero,-28(s0)
    816a:	fe042023          	sw	zero,-32(s0)
    uint32_t usartxbase = 0x00;
    816e:	fe042623          	sw	zero,-20(s0)


    usartxbase = (uint32_t)USARTx;
    8172:	fdc42783          	lw	a5,-36(s0)
    8176:	fef42623          	sw	a5,-20(s0)
    usartreg = (((uint8_t)USART_IT) >> 0x05);
    817a:	fda45783          	lhu	a5,-38(s0)
    817e:	0ff7f793          	andi	a5,a5,255
    8182:	8395                	srli	a5,a5,0x5
    8184:	0ff7f793          	andi	a5,a5,255
    8188:	fef42423          	sw	a5,-24(s0)
    itpos = USART_IT & IT_Mask;
    818c:	fda45783          	lhu	a5,-38(s0)
    8190:	8bfd                	andi	a5,a5,31
    8192:	fef42223          	sw	a5,-28(s0)
    itmask = (((uint32_t)0x01) << itpos);
    8196:	fe442783          	lw	a5,-28(s0)
    819a:	4705                	li	a4,1
    819c:	00f717b3          	sll	a5,a4,a5
    81a0:	fef42023          	sw	a5,-32(s0)

    if(usartreg == 0x01)
    81a4:	fe842703          	lw	a4,-24(s0)
    81a8:	4785                	li	a5,1
    81aa:	00f71863          	bne	a4,a5,81ba <USART_ITConfig+0x6c>
    {
        usartxbase += 0x0C;
    81ae:	fec42783          	lw	a5,-20(s0)
    81b2:	07b1                	addi	a5,a5,12
    81b4:	fef42623          	sw	a5,-20(s0)
    81b8:	a00d                	j	81da <USART_ITConfig+0x8c>
    }
    else if(usartreg == 0x02)
    81ba:	fe842703          	lw	a4,-24(s0)
    81be:	4789                	li	a5,2
    81c0:	00f71863          	bne	a4,a5,81d0 <USART_ITConfig+0x82>
    {
        usartxbase += 0x10;
    81c4:	fec42783          	lw	a5,-20(s0)
    81c8:	07c1                	addi	a5,a5,16
    81ca:	fef42623          	sw	a5,-20(s0)
    81ce:	a031                	j	81da <USART_ITConfig+0x8c>
    }
    else
    {
        usartxbase += 0x14;
    81d0:	fec42783          	lw	a5,-20(s0)
    81d4:	07d1                	addi	a5,a5,20
    81d6:	fef42623          	sw	a5,-20(s0)
    }

    if(NewState != DISABLE)
    81da:	fd442783          	lw	a5,-44(s0)
    81de:	cb99                	beqz	a5,81f4 <USART_ITConfig+0xa6>
    {
        *(__IO uint32_t *)usartxbase |= itmask;
    81e0:	fec42783          	lw	a5,-20(s0)
    81e4:	4394                	lw	a3,0(a5)
    81e6:	fec42783          	lw	a5,-20(s0)
    81ea:	fe042703          	lw	a4,-32(s0)
    81ee:	8f55                	or	a4,a4,a3
    81f0:	c398                	sw	a4,0(a5)
    }
    else
    {
        *(__IO uint32_t *)usartxbase &= ~itmask;
    }
}
    81f2:	a821                	j	820a <USART_ITConfig+0xbc>
        *(__IO uint32_t *)usartxbase &= ~itmask;
    81f4:	fec42783          	lw	a5,-20(s0)
    81f8:	4394                	lw	a3,0(a5)
    81fa:	fe042783          	lw	a5,-32(s0)
    81fe:	fff7c713          	not	a4,a5
    8202:	fec42783          	lw	a5,-20(s0)
    8206:	8f75                	and	a4,a4,a3
    8208:	c398                	sw	a4,0(a5)
}
    820a:	0001                	nop
    820c:	5432                	lw	s0,44(sp)
    820e:	6145                	addi	sp,sp,48
    8210:	8082                	ret

00008212 <USART_DMACmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_DMACmd(USART_TypeDef *USARTx, uint16_t USART_DMAReq, FunctionalState NewState)
{
    8212:	1101                	addi	sp,sp,-32
    8214:	ce22                	sw	s0,28(sp)
    8216:	1000                	addi	s0,sp,32
    8218:	fea42623          	sw	a0,-20(s0)
    821c:	87ae                	mv	a5,a1
    821e:	fec42223          	sw	a2,-28(s0)
    8222:	fef41523          	sh	a5,-22(s0)
    if(NewState != DISABLE)
    8226:	fe442783          	lw	a5,-28(s0)
    822a:	c39d                	beqz	a5,8250 <USART_DMACmd+0x3e>
    {
        USARTx->CTLR3 |= USART_DMAReq;
    822c:	fec42783          	lw	a5,-20(s0)
    8230:	0147d783          	lhu	a5,20(a5)
    8234:	01079713          	slli	a4,a5,0x10
    8238:	8341                	srli	a4,a4,0x10
    823a:	fea45783          	lhu	a5,-22(s0)
    823e:	8fd9                	or	a5,a5,a4
    8240:	01079713          	slli	a4,a5,0x10
    8244:	8341                	srli	a4,a4,0x10
    8246:	fec42783          	lw	a5,-20(s0)
    824a:	00e79a23          	sh	a4,20(a5)
    }
    else
    {
        USARTx->CTLR3 &= (uint16_t)~USART_DMAReq;
    }
}
    824e:	a035                	j	827a <USART_DMACmd+0x68>
        USARTx->CTLR3 &= (uint16_t)~USART_DMAReq;
    8250:	fec42783          	lw	a5,-20(s0)
    8254:	0147d783          	lhu	a5,20(a5)
    8258:	01079713          	slli	a4,a5,0x10
    825c:	8341                	srli	a4,a4,0x10
    825e:	fea45783          	lhu	a5,-22(s0)
    8262:	fff7c793          	not	a5,a5
    8266:	07c2                	slli	a5,a5,0x10
    8268:	83c1                	srli	a5,a5,0x10
    826a:	8ff9                	and	a5,a5,a4
    826c:	01079713          	slli	a4,a5,0x10
    8270:	8341                	srli	a4,a4,0x10
    8272:	fec42783          	lw	a5,-20(s0)
    8276:	00e79a23          	sh	a4,20(a5)
}
    827a:	0001                	nop
    827c:	4472                	lw	s0,28(sp)
    827e:	6105                	addi	sp,sp,32
    8280:	8082                	ret

00008282 <USART_SetAddress>:
 *          USART_Address - Indicates the address of the USART node.
 *
 * @return  none
 */
void USART_SetAddress(USART_TypeDef *USARTx, uint8_t USART_Address)
{
    8282:	1101                	addi	sp,sp,-32
    8284:	ce22                	sw	s0,28(sp)
    8286:	1000                	addi	s0,sp,32
    8288:	fea42623          	sw	a0,-20(s0)
    828c:	87ae                	mv	a5,a1
    828e:	fef405a3          	sb	a5,-21(s0)
    USARTx->CTLR2 &= CTLR2_Address_Mask;
    8292:	fec42783          	lw	a5,-20(s0)
    8296:	0107d783          	lhu	a5,16(a5)
    829a:	07c2                	slli	a5,a5,0x10
    829c:	83c1                	srli	a5,a5,0x10
    829e:	9bc1                	andi	a5,a5,-16
    82a0:	01079713          	slli	a4,a5,0x10
    82a4:	8341                	srli	a4,a4,0x10
    82a6:	fec42783          	lw	a5,-20(s0)
    82aa:	00e79823          	sh	a4,16(a5)
    USARTx->CTLR2 |= USART_Address;
    82ae:	fec42783          	lw	a5,-20(s0)
    82b2:	0107d783          	lhu	a5,16(a5)
    82b6:	01079713          	slli	a4,a5,0x10
    82ba:	8341                	srli	a4,a4,0x10
    82bc:	feb44783          	lbu	a5,-21(s0)
    82c0:	07c2                	slli	a5,a5,0x10
    82c2:	83c1                	srli	a5,a5,0x10
    82c4:	8fd9                	or	a5,a5,a4
    82c6:	01079713          	slli	a4,a5,0x10
    82ca:	8341                	srli	a4,a4,0x10
    82cc:	fec42783          	lw	a5,-20(s0)
    82d0:	00e79823          	sh	a4,16(a5)
}
    82d4:	0001                	nop
    82d6:	4472                	lw	s0,28(sp)
    82d8:	6105                	addi	sp,sp,32
    82da:	8082                	ret

000082dc <USART_WakeUpConfig>:
 *            USART_WakeUp_AddressMark - WakeUp by an address mark.
 *
 * @return  none
 */
void USART_WakeUpConfig(USART_TypeDef *USARTx, uint16_t USART_WakeUp)
{
    82dc:	1101                	addi	sp,sp,-32
    82de:	ce22                	sw	s0,28(sp)
    82e0:	1000                	addi	s0,sp,32
    82e2:	fea42623          	sw	a0,-20(s0)
    82e6:	87ae                	mv	a5,a1
    82e8:	fef41523          	sh	a5,-22(s0)
    USARTx->CTLR1 &= CTLR1_WAKE_Mask;
    82ec:	fec42783          	lw	a5,-20(s0)
    82f0:	00c7d783          	lhu	a5,12(a5)
    82f4:	01079713          	slli	a4,a5,0x10
    82f8:	8341                	srli	a4,a4,0x10
    82fa:	77fd                	lui	a5,0xfffff
    82fc:	7ff78793          	addi	a5,a5,2047 # fffff7ff <_eusrstack+0xdfffb7ff>
    8300:	8ff9                	and	a5,a5,a4
    8302:	01079713          	slli	a4,a5,0x10
    8306:	8341                	srli	a4,a4,0x10
    8308:	fec42783          	lw	a5,-20(s0)
    830c:	00e79623          	sh	a4,12(a5)
    USARTx->CTLR1 |= USART_WakeUp;
    8310:	fec42783          	lw	a5,-20(s0)
    8314:	00c7d783          	lhu	a5,12(a5)
    8318:	01079713          	slli	a4,a5,0x10
    831c:	8341                	srli	a4,a4,0x10
    831e:	fea45783          	lhu	a5,-22(s0)
    8322:	8fd9                	or	a5,a5,a4
    8324:	01079713          	slli	a4,a5,0x10
    8328:	8341                	srli	a4,a4,0x10
    832a:	fec42783          	lw	a5,-20(s0)
    832e:	00e79623          	sh	a4,12(a5)
}
    8332:	0001                	nop
    8334:	4472                	lw	s0,28(sp)
    8336:	6105                	addi	sp,sp,32
    8338:	8082                	ret

0000833a <USART_ReceiverWakeUpCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_ReceiverWakeUpCmd(USART_TypeDef *USARTx, FunctionalState NewState)
{
    833a:	1101                	addi	sp,sp,-32
    833c:	ce22                	sw	s0,28(sp)
    833e:	1000                	addi	s0,sp,32
    8340:	fea42623          	sw	a0,-20(s0)
    8344:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    8348:	fe842783          	lw	a5,-24(s0)
    834c:	c38d                	beqz	a5,836e <USART_ReceiverWakeUpCmd+0x34>
    {
        USARTx->CTLR1 |= CTLR1_RWU_Set;
    834e:	fec42783          	lw	a5,-20(s0)
    8352:	00c7d783          	lhu	a5,12(a5)
    8356:	07c2                	slli	a5,a5,0x10
    8358:	83c1                	srli	a5,a5,0x10
    835a:	0027e793          	ori	a5,a5,2
    835e:	01079713          	slli	a4,a5,0x10
    8362:	8341                	srli	a4,a4,0x10
    8364:	fec42783          	lw	a5,-20(s0)
    8368:	00e79623          	sh	a4,12(a5)
    }
    else
    {
        USARTx->CTLR1 &= CTLR1_RWU_Reset;
    }
}
    836c:	a839                	j	838a <USART_ReceiverWakeUpCmd+0x50>
        USARTx->CTLR1 &= CTLR1_RWU_Reset;
    836e:	fec42783          	lw	a5,-20(s0)
    8372:	00c7d783          	lhu	a5,12(a5)
    8376:	07c2                	slli	a5,a5,0x10
    8378:	83c1                	srli	a5,a5,0x10
    837a:	9bf5                	andi	a5,a5,-3
    837c:	01079713          	slli	a4,a5,0x10
    8380:	8341                	srli	a4,a4,0x10
    8382:	fec42783          	lw	a5,-20(s0)
    8386:	00e79623          	sh	a4,12(a5)
}
    838a:	0001                	nop
    838c:	4472                	lw	s0,28(sp)
    838e:	6105                	addi	sp,sp,32
    8390:	8082                	ret

00008392 <USART_LINBreakDetectLengthConfig>:
 *            USART_LINBreakDetectLength_11b - 11-bit break detection.
 *
 * @return  none
 */
void USART_LINBreakDetectLengthConfig(USART_TypeDef *USARTx, uint16_t USART_LINBreakDetectLength)
{
    8392:	1101                	addi	sp,sp,-32
    8394:	ce22                	sw	s0,28(sp)
    8396:	1000                	addi	s0,sp,32
    8398:	fea42623          	sw	a0,-20(s0)
    839c:	87ae                	mv	a5,a1
    839e:	fef41523          	sh	a5,-22(s0)
    USARTx->CTLR2 &= CTLR2_LBDL_Mask;
    83a2:	fec42783          	lw	a5,-20(s0)
    83a6:	0107d783          	lhu	a5,16(a5)
    83aa:	07c2                	slli	a5,a5,0x10
    83ac:	83c1                	srli	a5,a5,0x10
    83ae:	fdf7f793          	andi	a5,a5,-33
    83b2:	01079713          	slli	a4,a5,0x10
    83b6:	8341                	srli	a4,a4,0x10
    83b8:	fec42783          	lw	a5,-20(s0)
    83bc:	00e79823          	sh	a4,16(a5)
    USARTx->CTLR2 |= USART_LINBreakDetectLength;
    83c0:	fec42783          	lw	a5,-20(s0)
    83c4:	0107d783          	lhu	a5,16(a5)
    83c8:	01079713          	slli	a4,a5,0x10
    83cc:	8341                	srli	a4,a4,0x10
    83ce:	fea45783          	lhu	a5,-22(s0)
    83d2:	8fd9                	or	a5,a5,a4
    83d4:	01079713          	slli	a4,a5,0x10
    83d8:	8341                	srli	a4,a4,0x10
    83da:	fec42783          	lw	a5,-20(s0)
    83de:	00e79823          	sh	a4,16(a5)
}
    83e2:	0001                	nop
    83e4:	4472                	lw	s0,28(sp)
    83e6:	6105                	addi	sp,sp,32
    83e8:	8082                	ret

000083ea <USART_LINCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_LINCmd(USART_TypeDef *USARTx, FunctionalState NewState)
{
    83ea:	1101                	addi	sp,sp,-32
    83ec:	ce22                	sw	s0,28(sp)
    83ee:	1000                	addi	s0,sp,32
    83f0:	fea42623          	sw	a0,-20(s0)
    83f4:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    83f8:	fe842783          	lw	a5,-24(s0)
    83fc:	c395                	beqz	a5,8420 <USART_LINCmd+0x36>
    {
        USARTx->CTLR2 |= CTLR2_LINEN_Set;
    83fe:	fec42783          	lw	a5,-20(s0)
    8402:	0107d783          	lhu	a5,16(a5)
    8406:	01079713          	slli	a4,a5,0x10
    840a:	8341                	srli	a4,a4,0x10
    840c:	6791                	lui	a5,0x4
    840e:	8fd9                	or	a5,a5,a4
    8410:	01079713          	slli	a4,a5,0x10
    8414:	8341                	srli	a4,a4,0x10
    8416:	fec42783          	lw	a5,-20(s0)
    841a:	00e79823          	sh	a4,16(a5) # 4010 <NVIC_Init+0x2c0>
    }
    else
    {
        USARTx->CTLR2 &= CTLR2_LINEN_Reset;
    }
}
    841e:	a015                	j	8442 <USART_LINCmd+0x58>
        USARTx->CTLR2 &= CTLR2_LINEN_Reset;
    8420:	fec42783          	lw	a5,-20(s0)
    8424:	0107d783          	lhu	a5,16(a5)
    8428:	01079713          	slli	a4,a5,0x10
    842c:	8341                	srli	a4,a4,0x10
    842e:	77f1                	lui	a5,0xffffc
    8430:	17fd                	addi	a5,a5,-1
    8432:	8ff9                	and	a5,a5,a4
    8434:	01079713          	slli	a4,a5,0x10
    8438:	8341                	srli	a4,a4,0x10
    843a:	fec42783          	lw	a5,-20(s0)
    843e:	00e79823          	sh	a4,16(a5) # ffffc010 <_eusrstack+0xdfff8010>
}
    8442:	0001                	nop
    8444:	4472                	lw	s0,28(sp)
    8446:	6105                	addi	sp,sp,32
    8448:	8082                	ret

0000844a <USART_SendData>:
 *          Data - the data to transmit.
 *
 * @return  none
 */
void USART_SendData(USART_TypeDef *USARTx, uint16_t Data)
{
    844a:	1101                	addi	sp,sp,-32
    844c:	ce22                	sw	s0,28(sp)
    844e:	1000                	addi	s0,sp,32
    8450:	fea42623          	sw	a0,-20(s0)
    8454:	87ae                	mv	a5,a1
    8456:	fef41523          	sh	a5,-22(s0)
    USARTx->DATAR = (Data & (uint16_t)0x01FF);
    845a:	fea45783          	lhu	a5,-22(s0)
    845e:	1ff7f793          	andi	a5,a5,511
    8462:	01079713          	slli	a4,a5,0x10
    8466:	8341                	srli	a4,a4,0x10
    8468:	fec42783          	lw	a5,-20(s0)
    846c:	00e79223          	sh	a4,4(a5)
}
    8470:	0001                	nop
    8472:	4472                	lw	s0,28(sp)
    8474:	6105                	addi	sp,sp,32
    8476:	8082                	ret

00008478 <USART_ReceiveData>:
 * @param   USARTx - where x can be 1, 2, 3 or 4 to select the USART peripheral.
 *
 * @return  The received data.
 */
uint16_t USART_ReceiveData(USART_TypeDef *USARTx)
{
    8478:	1101                	addi	sp,sp,-32
    847a:	ce22                	sw	s0,28(sp)
    847c:	1000                	addi	s0,sp,32
    847e:	fea42623          	sw	a0,-20(s0)
    return (uint16_t)(USARTx->DATAR & (uint16_t)0x01FF);
    8482:	fec42783          	lw	a5,-20(s0)
    8486:	0047d783          	lhu	a5,4(a5)
    848a:	07c2                	slli	a5,a5,0x10
    848c:	83c1                	srli	a5,a5,0x10
    848e:	1ff7f793          	andi	a5,a5,511
    8492:	07c2                	slli	a5,a5,0x10
    8494:	83c1                	srli	a5,a5,0x10
}
    8496:	853e                	mv	a0,a5
    8498:	4472                	lw	s0,28(sp)
    849a:	6105                	addi	sp,sp,32
    849c:	8082                	ret

0000849e <USART_SendBreak>:
 * @param   USARTx - where x can be 1, 2, 3 or 4 to select the USART peripheral.
 *
 * @return  none
 */
void USART_SendBreak(USART_TypeDef *USARTx)
{
    849e:	1101                	addi	sp,sp,-32
    84a0:	ce22                	sw	s0,28(sp)
    84a2:	1000                	addi	s0,sp,32
    84a4:	fea42623          	sw	a0,-20(s0)
    USARTx->CTLR1 |= CTLR1_SBK_Set;
    84a8:	fec42783          	lw	a5,-20(s0)
    84ac:	00c7d783          	lhu	a5,12(a5)
    84b0:	07c2                	slli	a5,a5,0x10
    84b2:	83c1                	srli	a5,a5,0x10
    84b4:	0017e793          	ori	a5,a5,1
    84b8:	01079713          	slli	a4,a5,0x10
    84bc:	8341                	srli	a4,a4,0x10
    84be:	fec42783          	lw	a5,-20(s0)
    84c2:	00e79623          	sh	a4,12(a5)
}
    84c6:	0001                	nop
    84c8:	4472                	lw	s0,28(sp)
    84ca:	6105                	addi	sp,sp,32
    84cc:	8082                	ret

000084ce <USART_SetGuardTime>:
 *          USART_GuardTime - specifies the guard time.
 *
 * @return  none
 */
void USART_SetGuardTime(USART_TypeDef *USARTx, uint8_t USART_GuardTime)
{
    84ce:	1101                	addi	sp,sp,-32
    84d0:	ce22                	sw	s0,28(sp)
    84d2:	1000                	addi	s0,sp,32
    84d4:	fea42623          	sw	a0,-20(s0)
    84d8:	87ae                	mv	a5,a1
    84da:	fef405a3          	sb	a5,-21(s0)
    USARTx->GPR &= GPR_LSB_Mask;
    84de:	fec42783          	lw	a5,-20(s0)
    84e2:	0187d783          	lhu	a5,24(a5)
    84e6:	07c2                	slli	a5,a5,0x10
    84e8:	83c1                	srli	a5,a5,0x10
    84ea:	0ff7f793          	andi	a5,a5,255
    84ee:	01079713          	slli	a4,a5,0x10
    84f2:	8341                	srli	a4,a4,0x10
    84f4:	fec42783          	lw	a5,-20(s0)
    84f8:	00e79c23          	sh	a4,24(a5)
    USARTx->GPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
    84fc:	fec42783          	lw	a5,-20(s0)
    8500:	0187d783          	lhu	a5,24(a5)
    8504:	01079713          	slli	a4,a5,0x10
    8508:	8341                	srli	a4,a4,0x10
    850a:	feb44783          	lbu	a5,-21(s0)
    850e:	07c2                	slli	a5,a5,0x10
    8510:	83c1                	srli	a5,a5,0x10
    8512:	07a2                	slli	a5,a5,0x8
    8514:	07c2                	slli	a5,a5,0x10
    8516:	83c1                	srli	a5,a5,0x10
    8518:	8fd9                	or	a5,a5,a4
    851a:	01079713          	slli	a4,a5,0x10
    851e:	8341                	srli	a4,a4,0x10
    8520:	fec42783          	lw	a5,-20(s0)
    8524:	00e79c23          	sh	a4,24(a5)
}
    8528:	0001                	nop
    852a:	4472                	lw	s0,28(sp)
    852c:	6105                	addi	sp,sp,32
    852e:	8082                	ret

00008530 <USART_SetPrescaler>:
 *          USART_Prescaler - specifies the prescaler clock.
 *
 * @return  none
 */
void USART_SetPrescaler(USART_TypeDef *USARTx, uint8_t USART_Prescaler)
{
    8530:	1101                	addi	sp,sp,-32
    8532:	ce22                	sw	s0,28(sp)
    8534:	1000                	addi	s0,sp,32
    8536:	fea42623          	sw	a0,-20(s0)
    853a:	87ae                	mv	a5,a1
    853c:	fef405a3          	sb	a5,-21(s0)
    USARTx->GPR &= GPR_MSB_Mask;
    8540:	fec42783          	lw	a5,-20(s0)
    8544:	0187d783          	lhu	a5,24(a5)
    8548:	07c2                	slli	a5,a5,0x10
    854a:	83c1                	srli	a5,a5,0x10
    854c:	f007f793          	andi	a5,a5,-256
    8550:	01079713          	slli	a4,a5,0x10
    8554:	8341                	srli	a4,a4,0x10
    8556:	fec42783          	lw	a5,-20(s0)
    855a:	00e79c23          	sh	a4,24(a5)
    USARTx->GPR |= USART_Prescaler;
    855e:	fec42783          	lw	a5,-20(s0)
    8562:	0187d783          	lhu	a5,24(a5)
    8566:	01079713          	slli	a4,a5,0x10
    856a:	8341                	srli	a4,a4,0x10
    856c:	feb44783          	lbu	a5,-21(s0)
    8570:	07c2                	slli	a5,a5,0x10
    8572:	83c1                	srli	a5,a5,0x10
    8574:	8fd9                	or	a5,a5,a4
    8576:	01079713          	slli	a4,a5,0x10
    857a:	8341                	srli	a4,a4,0x10
    857c:	fec42783          	lw	a5,-20(s0)
    8580:	00e79c23          	sh	a4,24(a5)
}
    8584:	0001                	nop
    8586:	4472                	lw	s0,28(sp)
    8588:	6105                	addi	sp,sp,32
    858a:	8082                	ret

0000858c <USART_SmartCardCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_SmartCardCmd(USART_TypeDef *USARTx, FunctionalState NewState)
{
    858c:	1101                	addi	sp,sp,-32
    858e:	ce22                	sw	s0,28(sp)
    8590:	1000                	addi	s0,sp,32
    8592:	fea42623          	sw	a0,-20(s0)
    8596:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    859a:	fe842783          	lw	a5,-24(s0)
    859e:	c38d                	beqz	a5,85c0 <USART_SmartCardCmd+0x34>
    {
        USARTx->CTLR3 |= CTLR3_SCEN_Set;
    85a0:	fec42783          	lw	a5,-20(s0)
    85a4:	0147d783          	lhu	a5,20(a5)
    85a8:	07c2                	slli	a5,a5,0x10
    85aa:	83c1                	srli	a5,a5,0x10
    85ac:	0207e793          	ori	a5,a5,32
    85b0:	01079713          	slli	a4,a5,0x10
    85b4:	8341                	srli	a4,a4,0x10
    85b6:	fec42783          	lw	a5,-20(s0)
    85ba:	00e79a23          	sh	a4,20(a5)
    }
    else
    {
        USARTx->CTLR3 &= CTLR3_SCEN_Reset;
    }
}
    85be:	a005                	j	85de <USART_SmartCardCmd+0x52>
        USARTx->CTLR3 &= CTLR3_SCEN_Reset;
    85c0:	fec42783          	lw	a5,-20(s0)
    85c4:	0147d783          	lhu	a5,20(a5)
    85c8:	07c2                	slli	a5,a5,0x10
    85ca:	83c1                	srli	a5,a5,0x10
    85cc:	fdf7f793          	andi	a5,a5,-33
    85d0:	01079713          	slli	a4,a5,0x10
    85d4:	8341                	srli	a4,a4,0x10
    85d6:	fec42783          	lw	a5,-20(s0)
    85da:	00e79a23          	sh	a4,20(a5)
}
    85de:	0001                	nop
    85e0:	4472                	lw	s0,28(sp)
    85e2:	6105                	addi	sp,sp,32
    85e4:	8082                	ret

000085e6 <USART_SmartCardNACKCmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_SmartCardNACKCmd(USART_TypeDef *USARTx, FunctionalState NewState)
{
    85e6:	1101                	addi	sp,sp,-32
    85e8:	ce22                	sw	s0,28(sp)
    85ea:	1000                	addi	s0,sp,32
    85ec:	fea42623          	sw	a0,-20(s0)
    85f0:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    85f4:	fe842783          	lw	a5,-24(s0)
    85f8:	c38d                	beqz	a5,861a <USART_SmartCardNACKCmd+0x34>
    {
        USARTx->CTLR3 |= CTLR3_NACK_Set;
    85fa:	fec42783          	lw	a5,-20(s0)
    85fe:	0147d783          	lhu	a5,20(a5)
    8602:	07c2                	slli	a5,a5,0x10
    8604:	83c1                	srli	a5,a5,0x10
    8606:	0107e793          	ori	a5,a5,16
    860a:	01079713          	slli	a4,a5,0x10
    860e:	8341                	srli	a4,a4,0x10
    8610:	fec42783          	lw	a5,-20(s0)
    8614:	00e79a23          	sh	a4,20(a5)
    }
    else
    {
        USARTx->CTLR3 &= CTLR3_NACK_Reset;
    }
}
    8618:	a839                	j	8636 <USART_SmartCardNACKCmd+0x50>
        USARTx->CTLR3 &= CTLR3_NACK_Reset;
    861a:	fec42783          	lw	a5,-20(s0)
    861e:	0147d783          	lhu	a5,20(a5)
    8622:	07c2                	slli	a5,a5,0x10
    8624:	83c1                	srli	a5,a5,0x10
    8626:	9bbd                	andi	a5,a5,-17
    8628:	01079713          	slli	a4,a5,0x10
    862c:	8341                	srli	a4,a4,0x10
    862e:	fec42783          	lw	a5,-20(s0)
    8632:	00e79a23          	sh	a4,20(a5)
}
    8636:	0001                	nop
    8638:	4472                	lw	s0,28(sp)
    863a:	6105                	addi	sp,sp,32
    863c:	8082                	ret

0000863e <USART_HalfDuplexCmd>:
 *                  NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_HalfDuplexCmd(USART_TypeDef *USARTx, FunctionalState NewState)
{
    863e:	1101                	addi	sp,sp,-32
    8640:	ce22                	sw	s0,28(sp)
    8642:	1000                	addi	s0,sp,32
    8644:	fea42623          	sw	a0,-20(s0)
    8648:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    864c:	fe842783          	lw	a5,-24(s0)
    8650:	c38d                	beqz	a5,8672 <USART_HalfDuplexCmd+0x34>
    {
        USARTx->CTLR3 |= CTLR3_HDSEL_Set;
    8652:	fec42783          	lw	a5,-20(s0)
    8656:	0147d783          	lhu	a5,20(a5)
    865a:	07c2                	slli	a5,a5,0x10
    865c:	83c1                	srli	a5,a5,0x10
    865e:	0087e793          	ori	a5,a5,8
    8662:	01079713          	slli	a4,a5,0x10
    8666:	8341                	srli	a4,a4,0x10
    8668:	fec42783          	lw	a5,-20(s0)
    866c:	00e79a23          	sh	a4,20(a5)
    }
    else
    {
        USARTx->CTLR3 &= CTLR3_HDSEL_Reset;
    }
}
    8670:	a839                	j	868e <USART_HalfDuplexCmd+0x50>
        USARTx->CTLR3 &= CTLR3_HDSEL_Reset;
    8672:	fec42783          	lw	a5,-20(s0)
    8676:	0147d783          	lhu	a5,20(a5)
    867a:	07c2                	slli	a5,a5,0x10
    867c:	83c1                	srli	a5,a5,0x10
    867e:	9bdd                	andi	a5,a5,-9
    8680:	01079713          	slli	a4,a5,0x10
    8684:	8341                	srli	a4,a4,0x10
    8686:	fec42783          	lw	a5,-20(s0)
    868a:	00e79a23          	sh	a4,20(a5)
}
    868e:	0001                	nop
    8690:	4472                	lw	s0,28(sp)
    8692:	6105                	addi	sp,sp,32
    8694:	8082                	ret

00008696 <USART_IrDAConfig>:
 *            USART_IrDAMode_Normal.
 *
 * @return  none
 */
void USART_IrDAConfig(USART_TypeDef *USARTx, uint16_t USART_IrDAMode)
{
    8696:	1101                	addi	sp,sp,-32
    8698:	ce22                	sw	s0,28(sp)
    869a:	1000                	addi	s0,sp,32
    869c:	fea42623          	sw	a0,-20(s0)
    86a0:	87ae                	mv	a5,a1
    86a2:	fef41523          	sh	a5,-22(s0)
    USARTx->CTLR3 &= CTLR3_IRLP_Mask;
    86a6:	fec42783          	lw	a5,-20(s0)
    86aa:	0147d783          	lhu	a5,20(a5)
    86ae:	07c2                	slli	a5,a5,0x10
    86b0:	83c1                	srli	a5,a5,0x10
    86b2:	9bed                	andi	a5,a5,-5
    86b4:	01079713          	slli	a4,a5,0x10
    86b8:	8341                	srli	a4,a4,0x10
    86ba:	fec42783          	lw	a5,-20(s0)
    86be:	00e79a23          	sh	a4,20(a5)
    USARTx->CTLR3 |= USART_IrDAMode;
    86c2:	fec42783          	lw	a5,-20(s0)
    86c6:	0147d783          	lhu	a5,20(a5)
    86ca:	01079713          	slli	a4,a5,0x10
    86ce:	8341                	srli	a4,a4,0x10
    86d0:	fea45783          	lhu	a5,-22(s0)
    86d4:	8fd9                	or	a5,a5,a4
    86d6:	01079713          	slli	a4,a5,0x10
    86da:	8341                	srli	a4,a4,0x10
    86dc:	fec42783          	lw	a5,-20(s0)
    86e0:	00e79a23          	sh	a4,20(a5)
}
    86e4:	0001                	nop
    86e6:	4472                	lw	s0,28(sp)
    86e8:	6105                	addi	sp,sp,32
    86ea:	8082                	ret

000086ec <USART_IrDACmd>:
 *          NewState - ENABLE or DISABLE.
 *
 * @return  none
 */
void USART_IrDACmd(USART_TypeDef *USARTx, FunctionalState NewState)
{
    86ec:	1101                	addi	sp,sp,-32
    86ee:	ce22                	sw	s0,28(sp)
    86f0:	1000                	addi	s0,sp,32
    86f2:	fea42623          	sw	a0,-20(s0)
    86f6:	feb42423          	sw	a1,-24(s0)
    if(NewState != DISABLE)
    86fa:	fe842783          	lw	a5,-24(s0)
    86fe:	c38d                	beqz	a5,8720 <USART_IrDACmd+0x34>
    {
        USARTx->CTLR3 |= CTLR3_IREN_Set;
    8700:	fec42783          	lw	a5,-20(s0)
    8704:	0147d783          	lhu	a5,20(a5)
    8708:	07c2                	slli	a5,a5,0x10
    870a:	83c1                	srli	a5,a5,0x10
    870c:	0027e793          	ori	a5,a5,2
    8710:	01079713          	slli	a4,a5,0x10
    8714:	8341                	srli	a4,a4,0x10
    8716:	fec42783          	lw	a5,-20(s0)
    871a:	00e79a23          	sh	a4,20(a5)
    }
    else
    {
        USARTx->CTLR3 &= CTLR3_IREN_Reset;
    }
}
    871e:	a839                	j	873c <USART_IrDACmd+0x50>
        USARTx->CTLR3 &= CTLR3_IREN_Reset;
    8720:	fec42783          	lw	a5,-20(s0)
    8724:	0147d783          	lhu	a5,20(a5)
    8728:	07c2                	slli	a5,a5,0x10
    872a:	83c1                	srli	a5,a5,0x10
    872c:	9bf5                	andi	a5,a5,-3
    872e:	01079713          	slli	a4,a5,0x10
    8732:	8341                	srli	a4,a4,0x10
    8734:	fec42783          	lw	a5,-20(s0)
    8738:	00e79a23          	sh	a4,20(a5)
}
    873c:	0001                	nop
    873e:	4472                	lw	s0,28(sp)
    8740:	6105                	addi	sp,sp,32
    8742:	8082                	ret

00008744 <USART_GetFlagStatus>:
 *            USART_FLAG_PE - Parity Error flag.
 *
 * @return  bitstatus: SET or RESET
 */
FlagStatus USART_GetFlagStatus(USART_TypeDef *USARTx, uint16_t USART_FLAG)
{
    8744:	7179                	addi	sp,sp,-48
    8746:	d622                	sw	s0,44(sp)
    8748:	1800                	addi	s0,sp,48
    874a:	fca42e23          	sw	a0,-36(s0)
    874e:	87ae                	mv	a5,a1
    8750:	fcf41d23          	sh	a5,-38(s0)
    FlagStatus bitstatus = RESET;
    8754:	fe042623          	sw	zero,-20(s0)


    if((USARTx->STATR & USART_FLAG) != (uint16_t)RESET)
    8758:	fdc42783          	lw	a5,-36(s0)
    875c:	0007d783          	lhu	a5,0(a5)
    8760:	01079713          	slli	a4,a5,0x10
    8764:	8341                	srli	a4,a4,0x10
    8766:	fda45783          	lhu	a5,-38(s0)
    876a:	8ff9                	and	a5,a5,a4
    876c:	07c2                	slli	a5,a5,0x10
    876e:	83c1                	srli	a5,a5,0x10
    8770:	c789                	beqz	a5,877a <USART_GetFlagStatus+0x36>
    {
        bitstatus = SET;
    8772:	4785                	li	a5,1
    8774:	fef42623          	sw	a5,-20(s0)
    8778:	a019                	j	877e <USART_GetFlagStatus+0x3a>
    }
    else
    {
        bitstatus = RESET;
    877a:	fe042623          	sw	zero,-20(s0)
    }
    return bitstatus;
    877e:	fec42783          	lw	a5,-20(s0)
}
    8782:	853e                	mv	a0,a5
    8784:	5432                	lw	s0,44(sp)
    8786:	6145                	addi	sp,sp,48
    8788:	8082                	ret

0000878a <USART_ClearFlag>:
 *            - TXE flag is cleared only by a write to the USART_DATAR register 
 *            (USART_SendData()).
 * @return  none
 */
void USART_ClearFlag(USART_TypeDef *USARTx, uint16_t USART_FLAG)
{
    878a:	1101                	addi	sp,sp,-32
    878c:	ce22                	sw	s0,28(sp)
    878e:	1000                	addi	s0,sp,32
    8790:	fea42623          	sw	a0,-20(s0)
    8794:	87ae                	mv	a5,a1
    8796:	fef41523          	sh	a5,-22(s0)

    USARTx->STATR = (uint16_t)~USART_FLAG;
    879a:	fea45783          	lhu	a5,-22(s0)
    879e:	fff7c793          	not	a5,a5
    87a2:	01079713          	slli	a4,a5,0x10
    87a6:	8341                	srli	a4,a4,0x10
    87a8:	fec42783          	lw	a5,-20(s0)
    87ac:	00e79023          	sh	a4,0(a5)
}
    87b0:	0001                	nop
    87b2:	4472                	lw	s0,28(sp)
    87b4:	6105                	addi	sp,sp,32
    87b6:	8082                	ret

000087b8 <USART_GetITStatus>:
 *            USART_IT_PE - Parity Error interrupt.
 *
 * @return  bitstatus: SET or RESET.
 */
ITStatus USART_GetITStatus(USART_TypeDef *USARTx, uint16_t USART_IT)
{
    87b8:	7179                	addi	sp,sp,-48
    87ba:	d622                	sw	s0,44(sp)
    87bc:	1800                	addi	s0,sp,48
    87be:	fca42e23          	sw	a0,-36(s0)
    87c2:	87ae                	mv	a5,a1
    87c4:	fcf41d23          	sh	a5,-38(s0)
    uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
    87c8:	fe042223          	sw	zero,-28(s0)
    87cc:	fe042623          	sw	zero,-20(s0)
    87d0:	fe042023          	sw	zero,-32(s0)
    ITStatus bitstatus = RESET;
    87d4:	fe042423          	sw	zero,-24(s0)

    usartreg = (((uint8_t)USART_IT) >> 0x05);
    87d8:	fda45783          	lhu	a5,-38(s0)
    87dc:	0ff7f793          	andi	a5,a5,255
    87e0:	8395                	srli	a5,a5,0x5
    87e2:	0ff7f793          	andi	a5,a5,255
    87e6:	fef42023          	sw	a5,-32(s0)
    itmask = USART_IT & IT_Mask;
    87ea:	fda45783          	lhu	a5,-38(s0)
    87ee:	8bfd                	andi	a5,a5,31
    87f0:	fef42623          	sw	a5,-20(s0)
    itmask = (uint32_t)0x01 << itmask;
    87f4:	fec42783          	lw	a5,-20(s0)
    87f8:	4705                	li	a4,1
    87fa:	00f717b3          	sll	a5,a4,a5
    87fe:	fef42623          	sw	a5,-20(s0)

    if(usartreg == 0x01)
    8802:	fe042703          	lw	a4,-32(s0)
    8806:	4785                	li	a5,1
    8808:	00f71f63          	bne	a4,a5,8826 <USART_GetITStatus+0x6e>
    {
        itmask &= USARTx->CTLR1;
    880c:	fdc42783          	lw	a5,-36(s0)
    8810:	00c7d783          	lhu	a5,12(a5)
    8814:	07c2                	slli	a5,a5,0x10
    8816:	83c1                	srli	a5,a5,0x10
    8818:	873e                	mv	a4,a5
    881a:	fec42783          	lw	a5,-20(s0)
    881e:	8ff9                	and	a5,a5,a4
    8820:	fef42623          	sw	a5,-20(s0)
    8824:	a83d                	j	8862 <USART_GetITStatus+0xaa>
    }
    else if(usartreg == 0x02)
    8826:	fe042703          	lw	a4,-32(s0)
    882a:	4789                	li	a5,2
    882c:	00f71f63          	bne	a4,a5,884a <USART_GetITStatus+0x92>
    {
        itmask &= USARTx->CTLR2;
    8830:	fdc42783          	lw	a5,-36(s0)
    8834:	0107d783          	lhu	a5,16(a5)
    8838:	07c2                	slli	a5,a5,0x10
    883a:	83c1                	srli	a5,a5,0x10
    883c:	873e                	mv	a4,a5
    883e:	fec42783          	lw	a5,-20(s0)
    8842:	8ff9                	and	a5,a5,a4
    8844:	fef42623          	sw	a5,-20(s0)
    8848:	a829                	j	8862 <USART_GetITStatus+0xaa>
    }
    else
    {
        itmask &= USARTx->CTLR3;
    884a:	fdc42783          	lw	a5,-36(s0)
    884e:	0147d783          	lhu	a5,20(a5)
    8852:	07c2                	slli	a5,a5,0x10
    8854:	83c1                	srli	a5,a5,0x10
    8856:	873e                	mv	a4,a5
    8858:	fec42783          	lw	a5,-20(s0)
    885c:	8ff9                	and	a5,a5,a4
    885e:	fef42623          	sw	a5,-20(s0)
    }

    bitpos = USART_IT >> 0x08;
    8862:	fda45783          	lhu	a5,-38(s0)
    8866:	83a1                	srli	a5,a5,0x8
    8868:	07c2                	slli	a5,a5,0x10
    886a:	83c1                	srli	a5,a5,0x10
    886c:	fef42223          	sw	a5,-28(s0)
    bitpos = (uint32_t)0x01 << bitpos;
    8870:	fe442783          	lw	a5,-28(s0)
    8874:	4705                	li	a4,1
    8876:	00f717b3          	sll	a5,a4,a5
    887a:	fef42223          	sw	a5,-28(s0)
    bitpos &= USARTx->STATR;
    887e:	fdc42783          	lw	a5,-36(s0)
    8882:	0007d783          	lhu	a5,0(a5)
    8886:	07c2                	slli	a5,a5,0x10
    8888:	83c1                	srli	a5,a5,0x10
    888a:	873e                	mv	a4,a5
    888c:	fe442783          	lw	a5,-28(s0)
    8890:	8ff9                	and	a5,a5,a4
    8892:	fef42223          	sw	a5,-28(s0)

    if((itmask != (uint16_t)RESET) && (bitpos != (uint16_t)RESET))
    8896:	fec42783          	lw	a5,-20(s0)
    889a:	cb81                	beqz	a5,88aa <USART_GetITStatus+0xf2>
    889c:	fe442783          	lw	a5,-28(s0)
    88a0:	c789                	beqz	a5,88aa <USART_GetITStatus+0xf2>
    {
        bitstatus = SET;
    88a2:	4785                	li	a5,1
    88a4:	fef42423          	sw	a5,-24(s0)
    88a8:	a019                	j	88ae <USART_GetITStatus+0xf6>
    }
    else
    {
        bitstatus = RESET;
    88aa:	fe042423          	sw	zero,-24(s0)
    }

    return bitstatus;
    88ae:	fe842783          	lw	a5,-24(s0)
}
    88b2:	853e                	mv	a0,a5
    88b4:	5432                	lw	s0,44(sp)
    88b6:	6145                	addi	sp,sp,48
    88b8:	8082                	ret

000088ba <USART_ClearITPendingBit>:
 *            - TXE pending bit is cleared only by a write to the USART_DATAR register 
 *            (USART_SendData()).
 * @return  none
 */
void USART_ClearITPendingBit(USART_TypeDef *USARTx, uint16_t USART_IT)
{
    88ba:	7179                	addi	sp,sp,-48
    88bc:	d622                	sw	s0,44(sp)
    88be:	1800                	addi	s0,sp,48
    88c0:	fca42e23          	sw	a0,-36(s0)
    88c4:	87ae                	mv	a5,a1
    88c6:	fcf41d23          	sh	a5,-38(s0)
    uint16_t bitpos = 0x00, itmask = 0x00;
    88ca:	fe041723          	sh	zero,-18(s0)
    88ce:	fe041623          	sh	zero,-20(s0)

    bitpos = USART_IT >> 0x08;
    88d2:	fda45783          	lhu	a5,-38(s0)
    88d6:	83a1                	srli	a5,a5,0x8
    88d8:	fef41723          	sh	a5,-18(s0)
    itmask = ((uint16_t)0x01 << (uint16_t)bitpos);
    88dc:	fee45783          	lhu	a5,-18(s0)
    88e0:	4705                	li	a4,1
    88e2:	00f717b3          	sll	a5,a4,a5
    88e6:	fef41623          	sh	a5,-20(s0)
    USARTx->STATR = (uint16_t)~itmask;
    88ea:	fec45783          	lhu	a5,-20(s0)
    88ee:	fff7c793          	not	a5,a5
    88f2:	01079713          	slli	a4,a5,0x10
    88f6:	8341                	srli	a4,a4,0x10
    88f8:	fdc42783          	lw	a5,-36(s0)
    88fc:	00e79023          	sh	a4,0(a5)
}
    8900:	0001                	nop
    8902:	5432                	lw	s0,44(sp)
    8904:	6145                	addi	sp,sp,48
    8906:	8082                	ret

00008908 <WWDG_DeInit>:
 * @brief   Deinitializes the WWDG peripheral registers to their default reset values
 *
 * @return  none
 */
void WWDG_DeInit(void)
{
    8908:	1141                	addi	sp,sp,-16
    890a:	c606                	sw	ra,12(sp)
    890c:	c422                	sw	s0,8(sp)
    890e:	0800                	addi	s0,sp,16
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
    8910:	4585                	li	a1,1
    8912:	6785                	lui	a5,0x1
    8914:	80078513          	addi	a0,a5,-2048 # 800 <__stack_size>
    8918:	ab8fc0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
    891c:	4581                	li	a1,0
    891e:	6785                	lui	a5,0x1
    8920:	80078513          	addi	a0,a5,-2048 # 800 <__stack_size>
    8924:	aacfc0ef          	jal	ra,4bd0 <RCC_APB1PeriphResetCmd>
}
    8928:	0001                	nop
    892a:	40b2                	lw	ra,12(sp)
    892c:	4422                	lw	s0,8(sp)
    892e:	0141                	addi	sp,sp,16
    8930:	8082                	ret

00008932 <WWDG_SetPrescaler>:
 *            WWDG_Prescaler_8 - WWDG counter clock = (PCLK1/4096)/8
 *
 * @return  none
 */
void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
{
    8932:	7179                	addi	sp,sp,-48
    8934:	d622                	sw	s0,44(sp)
    8936:	1800                	addi	s0,sp,48
    8938:	fca42e23          	sw	a0,-36(s0)
    uint32_t tmpreg = 0;
    893c:	fe042623          	sw	zero,-20(s0)
    tmpreg = WWDG->CFGR & CFGR_WDGTB_Mask;
    8940:	400037b7          	lui	a5,0x40003
    8944:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    8948:	43dc                	lw	a5,4(a5)
    894a:	e7f7f793          	andi	a5,a5,-385
    894e:	fef42623          	sw	a5,-20(s0)
    tmpreg |= WWDG_Prescaler;
    8952:	fec42703          	lw	a4,-20(s0)
    8956:	fdc42783          	lw	a5,-36(s0)
    895a:	8fd9                	or	a5,a5,a4
    895c:	fef42623          	sw	a5,-20(s0)
    WWDG->CFGR = tmpreg;
    8960:	400037b7          	lui	a5,0x40003
    8964:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    8968:	fec42703          	lw	a4,-20(s0)
    896c:	c3d8                	sw	a4,4(a5)
}
    896e:	0001                	nop
    8970:	5432                	lw	s0,44(sp)
    8972:	6145                	addi	sp,sp,48
    8974:	8082                	ret

00008976 <WWDG_SetWindowValue>:
 *        downcounter,which must be lower than 0x80
 *
 * @return  none
 */
void WWDG_SetWindowValue(uint8_t WindowValue)
{
    8976:	7179                	addi	sp,sp,-48
    8978:	d622                	sw	s0,44(sp)
    897a:	1800                	addi	s0,sp,48
    897c:	87aa                	mv	a5,a0
    897e:	fcf40fa3          	sb	a5,-33(s0)
    __IO uint32_t tmpreg = 0;
    8982:	fe042623          	sw	zero,-20(s0)

    tmpreg = WWDG->CFGR & CFGR_W_Mask;
    8986:	400037b7          	lui	a5,0x40003
    898a:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    898e:	43dc                	lw	a5,4(a5)
    8990:	f807f793          	andi	a5,a5,-128
    8994:	fef42623          	sw	a5,-20(s0)

    tmpreg |= WindowValue & (uint32_t)BIT_Mask;
    8998:	fdf44783          	lbu	a5,-33(s0)
    899c:	07f7f713          	andi	a4,a5,127
    89a0:	fec42783          	lw	a5,-20(s0)
    89a4:	8fd9                	or	a5,a5,a4
    89a6:	fef42623          	sw	a5,-20(s0)

    WWDG->CFGR = tmpreg;
    89aa:	400037b7          	lui	a5,0x40003
    89ae:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    89b2:	fec42703          	lw	a4,-20(s0)
    89b6:	c3d8                	sw	a4,4(a5)
}
    89b8:	0001                	nop
    89ba:	5432                	lw	s0,44(sp)
    89bc:	6145                	addi	sp,sp,48
    89be:	8082                	ret

000089c0 <WWDG_EnableIT>:
 * @brief   Enables the WWDG Early Wakeup interrupt(EWI)
 *
 * @return  none
 */
void WWDG_EnableIT(void)
{
    89c0:	1141                	addi	sp,sp,-16
    89c2:	c622                	sw	s0,12(sp)
    89c4:	0800                	addi	s0,sp,16
    WWDG->CFGR |= (1 << 9);
    89c6:	400037b7          	lui	a5,0x40003
    89ca:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    89ce:	43d8                	lw	a4,4(a5)
    89d0:	400037b7          	lui	a5,0x40003
    89d4:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    89d8:	20076713          	ori	a4,a4,512
    89dc:	c3d8                	sw	a4,4(a5)
}
    89de:	0001                	nop
    89e0:	4432                	lw	s0,12(sp)
    89e2:	0141                	addi	sp,sp,16
    89e4:	8082                	ret

000089e6 <WWDG_SetCounter>:
 *        number between 0x40 and 0x7F
 *
 * @return  none
 */
void WWDG_SetCounter(uint8_t Counter)
{
    89e6:	1101                	addi	sp,sp,-32
    89e8:	ce22                	sw	s0,28(sp)
    89ea:	1000                	addi	s0,sp,32
    89ec:	87aa                	mv	a5,a0
    89ee:	fef407a3          	sb	a5,-17(s0)
    WWDG->CTLR = Counter & BIT_Mask;
    89f2:	fef44703          	lbu	a4,-17(s0)
    89f6:	400037b7          	lui	a5,0x40003
    89fa:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    89fe:	07f77713          	andi	a4,a4,127
    8a02:	c398                	sw	a4,0(a5)
}
    8a04:	0001                	nop
    8a06:	4472                	lw	s0,28(sp)
    8a08:	6105                	addi	sp,sp,32
    8a0a:	8082                	ret

00008a0c <WWDG_Enable>:
 * @param   Counter - specifies the watchdog counter value,which must be a
 *        number between 0x40 and 0x7F
 * @return  none
 */
void WWDG_Enable(uint8_t Counter)
{
    8a0c:	1101                	addi	sp,sp,-32
    8a0e:	ce22                	sw	s0,28(sp)
    8a10:	1000                	addi	s0,sp,32
    8a12:	87aa                	mv	a5,a0
    8a14:	fef407a3          	sb	a5,-17(s0)
    WWDG->CTLR = CTLR_WDGA_Set | Counter;
    8a18:	fef44783          	lbu	a5,-17(s0)
    8a1c:	f807e793          	ori	a5,a5,-128
    8a20:	0ff7f713          	andi	a4,a5,255
    8a24:	400037b7          	lui	a5,0x40003
    8a28:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    8a2c:	c398                	sw	a4,0(a5)
}
    8a2e:	0001                	nop
    8a30:	4472                	lw	s0,28(sp)
    8a32:	6105                	addi	sp,sp,32
    8a34:	8082                	ret

00008a36 <WWDG_GetFlagStatus>:
 * @brief   Checks whether the Early Wakeup interrupt flag is set or not
 *
 * @return  The new state of the Early Wakeup interrupt flag (SET or RESET)
 */
FlagStatus WWDG_GetFlagStatus(void)
{
    8a36:	1141                	addi	sp,sp,-16
    8a38:	c622                	sw	s0,12(sp)
    8a3a:	0800                	addi	s0,sp,16
    return (FlagStatus)(WWDG->STATR);
    8a3c:	400037b7          	lui	a5,0x40003
    8a40:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    8a44:	479c                	lw	a5,8(a5)
}
    8a46:	853e                	mv	a0,a5
    8a48:	4432                	lw	s0,12(sp)
    8a4a:	0141                	addi	sp,sp,16
    8a4c:	8082                	ret

00008a4e <WWDG_ClearFlag>:
 * @brief   Clears Early Wakeup interrupt flag
 *
 * @return  none
 */
void WWDG_ClearFlag(void)
{
    8a4e:	1141                	addi	sp,sp,-16
    8a50:	c622                	sw	s0,12(sp)
    8a52:	0800                	addi	s0,sp,16
    WWDG->STATR = (uint32_t)RESET;
    8a54:	400037b7          	lui	a5,0x40003
    8a58:	c0078793          	addi	a5,a5,-1024 # 40002c00 <_eusrstack+0x1fffec00>
    8a5c:	0007a423          	sw	zero,8(a5)
}
    8a60:	0001                	nop
    8a62:	4432                	lw	s0,12(sp)
    8a64:	0141                	addi	sp,sp,16
    8a66:	8082                	ret

00008a68 <cli_init>:
      uint16_t size;
} buff_queue_t;


void cli_init(void)
{
    8a68:	1141                	addi	sp,sp,-16
    8a6a:	c606                	sw	ra,12(sp)
    8a6c:	c422                	sw	s0,8(sp)
    8a6e:	0800                	addi	s0,sp,16
	CLI_PRINT("\n");
    8a70:	67bd                	lui	a5,0xf
    8a72:	a4078513          	addi	a0,a5,-1472 # ea40 <strlen+0x68>
    8a76:	518030ef          	jal	ra,bf8e <xprintf>
	CLI_PRINT("    ___    __ __              ____  _____\n");
    8a7a:	67bd                	lui	a5,0xf
    8a7c:	a4478513          	addi	a0,a5,-1468 # ea44 <strlen+0x6c>
    8a80:	50e030ef          	jal	ra,bf8e <xprintf>
	CLI_PRINT("   /   |  / //_/   ____ ___  / __ \\/ ___/\n");
    8a84:	67bd                	lui	a5,0xf
    8a86:	a7078513          	addi	a0,a5,-1424 # ea70 <strlen+0x98>
    8a8a:	504030ef          	jal	ra,bf8e <xprintf>
	CLI_PRINT("  / /| | / .<     / __ `__ \\/ / / /\\__ \\\n");
    8a8e:	67bd                	lui	a5,0xf
    8a90:	a9c78513          	addi	a0,a5,-1380 # ea9c <strlen+0xc4>
    8a94:	4fa030ef          	jal	ra,bf8e <xprintf>
	CLI_PRINT(" / ___ |/ /| |   / / / / / / /_/ /___/ /\n");
    8a98:	67bd                	lui	a5,0xf
    8a9a:	ac878513          	addi	a0,a5,-1336 # eac8 <strlen+0xf0>
    8a9e:	4f0030ef          	jal	ra,bf8e <xprintf>
      CLI_PRINT("/_/  |_/_/ |_|  /_/ /_/ /_/\\____//____/\n");
    8aa2:	67bd                	lui	a5,0xf
    8aa4:	af478513          	addi	a0,a5,-1292 # eaf4 <strlen+0x11c>
    8aa8:	4e6030ef          	jal	ra,bf8e <xprintf>
      CLI_PRINT("\n");
    8aac:	67bd                	lui	a5,0xf
    8aae:	a4078513          	addi	a0,a5,-1472 # ea40 <strlen+0x68>
    8ab2:	4dc030ef          	jal	ra,bf8e <xprintf>
	CLI_PRINT(" Welcome to Active Kernel mini RTOS!\n");
    8ab6:	67bd                	lui	a5,0xf
    8ab8:	b2078513          	addi	a0,a5,-1248 # eb20 <strlen+0x148>
    8abc:	4d2030ef          	jal	ra,bf8e <xprintf>
    8ac0:	0001                	nop
    8ac2:	40b2                	lw	ra,12(sp)
    8ac4:	4422                	lw	s0,8(sp)
    8ac6:	0141                	addi	sp,sp,16
    8ac8:	8082                	ret

00008aca <os_cpu_clear_sw_irq>:
uint8_t* irq_stack_ptr = (irq_stack_space + OS_CFG_IRQ_STK_SIZE); 


/* clear soft interrupt */
void os_cpu_clear_sw_irq(void)
{
    8aca:	1141                	addi	sp,sp,-16
    8acc:	c622                	sw	s0,12(sp)
    8ace:	0800                	addi	s0,sp,16
    SysTick->CTLR &= ~(1<<31);
    8ad0:	e000f7b7          	lui	a5,0xe000f
    8ad4:	4394                	lw	a3,0(a5)
    8ad6:	e000f7b7          	lui	a5,0xe000f
    8ada:	80000737          	lui	a4,0x80000
    8ade:	fff74713          	not	a4,a4
    8ae2:	8f75                	and	a4,a4,a3
    8ae4:	c398                	sw	a4,0(a5)
}
    8ae6:	0001                	nop
    8ae8:	4432                	lw	s0,12(sp)
    8aea:	0141                	addi	sp,sp,16
    8aec:	8082                	ret

00008aee <os_cpu_trigger_sw_irq>:

/* trigger software interrupt */
void os_cpu_trigger_sw_irq(void)
{
    8aee:	1141                	addi	sp,sp,-16
    8af0:	c622                	sw	s0,12(sp)
    8af2:	0800                	addi	s0,sp,16
    SysTick->CTLR |= (1<<31);
    8af4:	e000f7b7          	lui	a5,0xe000f
    8af8:	4394                	lw	a3,0(a5)
    8afa:	e000f7b7          	lui	a5,0xe000f
    8afe:	80000737          	lui	a4,0x80000
    8b02:	8f55                	or	a4,a4,a3
    8b04:	c398                	sw	a4,0(a5)
}
    8b06:	0001                	nop
    8b08:	4432                	lw	s0,12(sp)
    8b0a:	0141                	addi	sp,sp,16
    8b0c:	8082                	ret

00008b0e <os_cpu_get_irq_sp>:

void os_cpu_get_irq_sp()
{
    8b0e:	1141                	addi	sp,sp,-16
    8b10:	c622                	sw	s0,12(sp)
    8b12:	0800                	addi	s0,sp,16
	__asm volatile("csrrw sp, mscratch, sp  \n");
    8b14:	34011173          	csrrw	sp,mscratch,sp
}
    8b18:	0001                	nop
    8b1a:	4432                	lw	s0,12(sp)
    8b1c:	0141                	addi	sp,sp,16
    8b1e:	8082                	ret

00008b20 <os_cpu_free_irq_sp>:
void os_cpu_free_irq_sp()
{
    8b20:	1141                	addi	sp,sp,-16
    8b22:	c622                	sw	s0,12(sp)
    8b24:	0800                	addi	s0,sp,16
	__asm volatile("csrrw sp, mscratch, sp \n");
    8b26:	34011173          	csrrw	sp,mscratch,sp
}
    8b2a:	0001                	nop
    8b2c:	4432                	lw	s0,12(sp)
    8b2e:	0141                	addi	sp,sp,16
    8b30:	8082                	ret

00008b32 <os_cpu_systick_init_freq>:

/*Passing SystemCoreClock to init tick at every 1ms*/
static void os_cpu_systick_init_freq(uint32_t cpu_freq)
{
    8b32:	7179                	addi	sp,sp,-48
    8b34:	d622                	sw	s0,44(sp)
    8b36:	1800                	addi	s0,sp,48
    8b38:	fca42e23          	sw	a0,-36(s0)
	volatile uint32_t ticks = cpu_freq / 1000;
    8b3c:	fdc42683          	lw	a3,-36(s0)
    8b40:	3e800713          	li	a4,1000
    8b44:	02e6d733          	divu	a4,a3,a4
    8b48:	fee42623          	sw	a4,-20(s0)
	/* Clear counting flag status */
	SysTick->SR = 0;
    8b4c:	e000f737          	lui	a4,0xe000f
    8b50:	00072223          	sw	zero,4(a4) # e000f004 <_eusrstack+0xc000b004>
	/* Couting up init, auto-reload enable */
	SysTick->CTLR |= (1 << 5) | (1 << 4) | (1 << 3);
    8b54:	e000f737          	lui	a4,0xe000f
    8b58:	4314                	lw	a3,0(a4)
    8b5a:	e000f737          	lui	a4,0xe000f
    8b5e:	0386e693          	ori	a3,a3,56
    8b62:	c314                	sw	a3,0(a4)
	/* HCLK as clock source */
	SysTick->CTLR |= (1 << 2);
    8b64:	e000f737          	lui	a4,0xe000f
    8b68:	4314                	lw	a3,0(a4)
    8b6a:	e000f737          	lui	a4,0xe000f
    8b6e:	0046e693          	ori	a3,a3,4
    8b72:	c314                	sw	a3,0(a4)
	/* Reset counter */
	SysTick->CNT = (uint32_t)0;
    8b74:	e000f737          	lui	a4,0xe000f
    8b78:	4601                	li	a2,0
    8b7a:	4681                	li	a3,0
    8b7c:	c710                	sw	a2,8(a4)
    8b7e:	c754                	sw	a3,12(a4)
	/* Set compare value */
	SysTick->CMP = (uint32_t)ticks - 1;
    8b80:	fec42703          	lw	a4,-20(s0)
    8b84:	fff70693          	addi	a3,a4,-1 # e000efff <_eusrstack+0xc000afff>
    8b88:	e000f737          	lui	a4,0xe000f
    8b8c:	87b6                	mv	a5,a3
    8b8e:	4801                	li	a6,0
    8b90:	cb1c                	sw	a5,16(a4)
    8b92:	01072a23          	sw	a6,20(a4) # e000f014 <_eusrstack+0xc000b014>
	/* Start systick timer */
	SysTick->CTLR = 0xf;
    8b96:	e000f7b7          	lui	a5,0xe000f
    8b9a:	473d                	li	a4,15
    8b9c:	c398                	sw	a4,0(a5)
}
    8b9e:	0001                	nop
    8ba0:	5432                	lw	s0,44(sp)
    8ba2:	6145                	addi	sp,sp,48
    8ba4:	8082                	ret

00008ba6 <os_cpu_init_and_run>:

void os_cpu_init_and_run(void)
{
    8ba6:	7179                	addi	sp,sp,-48
    8ba8:	d606                	sw	ra,44(sp)
    8baa:	d422                	sw	s0,40(sp)
    8bac:	1800                	addi	s0,sp,48
	__asm volatile(
    8bae:	8101a283          	lw	t0,-2032(gp) # 20000030 <irq_stack_ptr>
		"lw t0, irq_stack_ptr	\n" 
	);
	// __asm volatile(
	// 	"addi t0, t0, -512	\n" 
	// );
	__asm volatile(
    8bb2:	34029073          	csrw	mscratch,t0
		"csrw mscratch,t0		\n" 
	);
	
	
	irq_stack_ptr = (uint8_t *)(((uint32_t) irq_stack_ptr) - sizeof(uint32_t));
    8bb6:	8101a783          	lw	a5,-2032(gp) # 20000030 <irq_stack_ptr>
    8bba:	17f1                	addi	a5,a5,-4
    8bbc:	873e                	mv	a4,a5
    8bbe:	80e1a823          	sw	a4,-2032(gp) # 20000030 <irq_stack_ptr>

	irq_stack_ptr = (uint8_t *)(((uint32_t) irq_stack_ptr) & 0xFFFFFFFC);
    8bc2:	8101a783          	lw	a5,-2032(gp) # 20000030 <irq_stack_ptr>
    8bc6:	9bf1                	andi	a5,a5,-4
    8bc8:	873e                	mv	a4,a5
    8bca:	80e1a823          	sw	a4,-2032(gp) # 20000030 <irq_stack_ptr>
    8bce:	47b9                	li	a5,14
    8bd0:	fcf42e23          	sw	a5,-36(s0)
    8bd4:	fc040da3          	sb	zero,-37(s0)
  NVIC->IPRIOR[(uint32_t)(IRQn)] = priority;
    8bd8:	e000e737          	lui	a4,0xe000e
    8bdc:	fdc42783          	lw	a5,-36(s0)
    8be0:	97ba                	add	a5,a5,a4
    8be2:	fdb44703          	lbu	a4,-37(s0)
    8be6:	40e78023          	sb	a4,1024(a5) # e000f400 <_eusrstack+0xc000b400>
    8bea:	47b1                	li	a5,12
    8bec:	fef42223          	sw	a5,-28(s0)
    8bf0:	4785                	li	a5,1
    8bf2:	fef401a3          	sb	a5,-29(s0)
    8bf6:	e000e737          	lui	a4,0xe000e
    8bfa:	fe442783          	lw	a5,-28(s0)
    8bfe:	97ba                	add	a5,a5,a4
    8c00:	fe344703          	lbu	a4,-29(s0)
    8c04:	40e78023          	sb	a4,1024(a5)
	
	NVIC_SetPriority(Software_IRQn,0x00);
	NVIC_SetPriority(SysTick_IRQn, 0x01);   
	os_cpu_systick_init_freq(SystemCoreClock);
    8c08:	200007b7          	lui	a5,0x20000
    8c0c:	0207a783          	lw	a5,32(a5) # 20000020 <SystemCoreClock>
    8c10:	853e                	mv	a0,a5
    8c12:	3705                	jal	8b32 <os_cpu_systick_init_freq>
    8c14:	47b9                	li	a5,14
    8c16:	fef42423          	sw	a5,-24(s0)
  NVIC->IENR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));
    8c1a:	fe842783          	lw	a5,-24(s0)
    8c1e:	8bfd                	andi	a5,a5,31
    8c20:	4705                	li	a4,1
    8c22:	00f716b3          	sll	a3,a4,a5
    8c26:	e000e737          	lui	a4,0xe000e
    8c2a:	fe842783          	lw	a5,-24(s0)
    8c2e:	8395                	srli	a5,a5,0x5
    8c30:	04078793          	addi	a5,a5,64
    8c34:	078a                	slli	a5,a5,0x2
    8c36:	97ba                	add	a5,a5,a4
    8c38:	c394                	sw	a3,0(a5)
    8c3a:	47b1                	li	a5,12
    8c3c:	fef42623          	sw	a5,-20(s0)
    8c40:	fec42783          	lw	a5,-20(s0)
    8c44:	8bfd                	andi	a5,a5,31
    8c46:	4705                	li	a4,1
    8c48:	00f716b3          	sll	a3,a4,a5
    8c4c:	e000e737          	lui	a4,0xe000e
    8c50:	fec42783          	lw	a5,-20(s0)
    8c54:	8395                	srli	a5,a5,0x5
    8c56:	04078793          	addi	a5,a5,64
    8c5a:	078a                	slli	a5,a5,0x2
    8c5c:	97ba                	add	a5,a5,a4
    8c5e:	c394                	sw	a3,0(a5)
	NVIC_EnableIRQ(Software_IRQn);
	NVIC_EnableIRQ(SysTick_IRQn);	
	os_cpu_start_first_task();
    8c60:	6d4030ef          	jal	ra,c334 <os_cpu_start_first_task>
}
    8c64:	0001                	nop
    8c66:	50b2                	lw	ra,44(sp)
    8c68:	5422                	lw	s0,40(sp)
    8c6a:	6145                	addi	sp,sp,48
    8c6c:	8082                	ret

00008c6e <os_cpu_init_stk_frame>:
 * The stack frame when init for RiscV QingKe V4
 * 
 * The first param of pf_task(void *p_arg) is p_arg, goes into a0
 */
uint32_t *os_cpu_init_stk_frame(uint32_t *p_top_of_stack, task_func_t pf_task, void *p_arg )
{
    8c6e:	7179                	addi	sp,sp,-48
    8c70:	d622                	sw	s0,44(sp)
    8c72:	1800                	addi	s0,sp,48
    8c74:	fca42e23          	sw	a0,-36(s0)
    8c78:	fcb42c23          	sw	a1,-40(s0)
    8c7c:	fcc42a23          	sw	a2,-44(s0)
	/* Move down the sp */
	p_top_of_stack  -= (uint32_t)(sizeof(cpu_stk_frame_t)/sizeof(uint32_t));
    8c80:	fdc42783          	lw	a5,-36(s0)
    8c84:	f8078793          	addi	a5,a5,-128
    8c88:	fcf42e23          	sw	a5,-36(s0)

	/* Assign the stack frame */
	cpu_stk_frame_t *p_stack_frame = (cpu_stk_frame_t *)p_top_of_stack;
    8c8c:	fdc42783          	lw	a5,-36(s0)
    8c90:	fef42623          	sw	a5,-20(s0)

// 	uint32_t gp = 0;
//     __asm volatile("mv %0, gp":"=r"(gp));

	p_stack_frame->gp        = (uint32_t)0u;           // global pointer
    8c94:	fec42783          	lw	a5,-20(s0)
    8c98:	0007a623          	sw	zero,12(a5)
	p_stack_frame->a0        = (uint32_t)p_arg;        // argument
    8c9c:	fd442703          	lw	a4,-44(s0)
    8ca0:	fec42783          	lw	a5,-20(s0)
    8ca4:	d798                	sw	a4,40(a5)
	p_stack_frame->ra		 = (uint32_t)pf_task;      // task exit
    8ca6:	fd842703          	lw	a4,-40(s0)
    8caa:	fec42783          	lw	a5,-20(s0)
    8cae:	c798                	sw	a4,8(a5)
	p_stack_frame->mstatus   = (uint32_t)0x1880;   	   // return to machine mode and enable interrupt
    8cb0:	fec42783          	lw	a5,-20(s0)
    8cb4:	6709                	lui	a4,0x2
    8cb6:	88070713          	addi	a4,a4,-1920 # 1880 <EXTI_Init+0x10c>
    8cba:	c3d8                	sw	a4,4(a5)
	p_stack_frame->mepc      = (uint32_t)pf_task;      // task entry 
    8cbc:	fd842703          	lw	a4,-40(s0)
    8cc0:	fec42783          	lw	a5,-20(s0)
    8cc4:	c398                	sw	a4,0(a5)

	return (uint32_t *) p_top_of_stack;
    8cc6:	fdc42783          	lw	a5,-36(s0)
}
    8cca:	853e                	mv	a0,a5
    8ccc:	5432                	lw	s0,44(sp)
    8cce:	6145                	addi	sp,sp,48
    8cd0:	8082                	ret

00008cd2 <SysTick_Handler>:
extern "C"
{
#endif
	__attribute__((interrupt())) 
	void os_cpu_SysTickHandler()
	{
    8cd2:	715d                	addi	sp,sp,-80
    8cd4:	c686                	sw	ra,76(sp)
    8cd6:	c496                	sw	t0,72(sp)
    8cd8:	c29a                	sw	t1,68(sp)
    8cda:	c09e                	sw	t2,64(sp)
    8cdc:	de22                	sw	s0,60(sp)
    8cde:	dc2a                	sw	a0,56(sp)
    8ce0:	da2e                	sw	a1,52(sp)
    8ce2:	d832                	sw	a2,48(sp)
    8ce4:	d636                	sw	a3,44(sp)
    8ce6:	d43a                	sw	a4,40(sp)
    8ce8:	d23e                	sw	a5,36(sp)
    8cea:	d042                	sw	a6,32(sp)
    8cec:	ce46                	sw	a7,28(sp)
    8cee:	cc72                	sw	t3,24(sp)
    8cf0:	ca76                	sw	t4,20(sp)
    8cf2:	c87a                	sw	t5,16(sp)
    8cf4:	c67e                	sw	t6,12(sp)
    8cf6:	0880                	addi	s0,sp,80
		os_cpu_get_irq_sp();
    8cf8:	3d19                	jal	8b0e <os_cpu_get_irq_sp>
		DISABLE_INTERRUPTS
    8cfa:	6789                	lui	a5,0x2
    8cfc:	80078793          	addi	a5,a5,-2048 # 1800 <EXTI_Init+0x8c>
    8d00:	30079073          	csrw	mstatus,a5
		SysTick->SR = 0;
    8d04:	e000f7b7          	lui	a5,0xe000f
    8d08:	0007a223          	sw	zero,4(a5) # e000f004 <_eusrstack+0xc000b004>
		/* Increment the RTOS tick. */
		if (os_task_increment_tick() == OS_TRUE)
    8d0c:	6f6010ef          	jal	ra,a402 <os_task_increment_tick>
    8d10:	87aa                	mv	a5,a0
    8d12:	873e                	mv	a4,a5
    8d14:	4785                	li	a5,1
    8d16:	00f71b63          	bne	a4,a5,8d2c <SysTick_Handler+0x5a>
		{
			check_for_stack_overflow();
			/* A context switch is required.  Context switching is performed in
			 * the PendSV interrupt.  Pend the PendSV interrupt. */
			os_cpu_trigger_PendSV();	
    8d1a:	e000f7b7          	lui	a5,0xe000f
    8d1e:	4394                	lw	a3,0(a5)
    8d20:	e000f7b7          	lui	a5,0xe000f
    8d24:	80000737          	lui	a4,0x80000
    8d28:	8f55                	or	a4,a4,a3
    8d2a:	c398                	sw	a4,0(a5)
		}
		ENABLE_INTERRUPTS
    8d2c:	6789                	lui	a5,0x2
    8d2e:	88878793          	addi	a5,a5,-1912 # 1888 <EXTI_Init+0x114>
    8d32:	80079073          	csrw	0x800,a5
		os_cpu_free_irq_sp();
    8d36:	33ed                	jal	8b20 <os_cpu_free_irq_sp>
	}
    8d38:	0001                	nop
    8d3a:	40b6                	lw	ra,76(sp)
    8d3c:	42a6                	lw	t0,72(sp)
    8d3e:	4316                	lw	t1,68(sp)
    8d40:	4386                	lw	t2,64(sp)
    8d42:	5472                	lw	s0,60(sp)
    8d44:	5562                	lw	a0,56(sp)
    8d46:	55d2                	lw	a1,52(sp)
    8d48:	5642                	lw	a2,48(sp)
    8d4a:	56b2                	lw	a3,44(sp)
    8d4c:	5722                	lw	a4,40(sp)
    8d4e:	5792                	lw	a5,36(sp)
    8d50:	5802                	lw	a6,32(sp)
    8d52:	48f2                	lw	a7,28(sp)
    8d54:	4e62                	lw	t3,24(sp)
    8d56:	4ed2                	lw	t4,20(sp)
    8d58:	4f42                	lw	t5,16(sp)
    8d5a:	4fb2                	lw	t6,12(sp)
    8d5c:	6161                	addi	sp,sp,80
    8d5e:	30200073          	mret

00008d62 <os_hook_stack_overflow>:
#include "os_log.h"
#include "task_list.h"

__attribute__((weak)) 
void os_hook_stack_overflow(task_id_t task_id, uint8_t num_of_stk_overflow )
{
    8d62:	1101                	addi	sp,sp,-32
    8d64:	ce06                	sw	ra,28(sp)
    8d66:	cc22                	sw	s0,24(sp)
    8d68:	1000                	addi	s0,sp,32
    8d6a:	87aa                	mv	a5,a0
    8d6c:	872e                	mv	a4,a1
    8d6e:	fef407a3          	sb	a5,-17(s0)
    8d72:	87ba                	mv	a5,a4
    8d74:	fef40723          	sb	a5,-18(s0)
    LOG_ERROR("Stack overflown %d : %d", task_id, num_of_stk_overflow);
    8d78:	fef44783          	lbu	a5,-17(s0)
    8d7c:	fee44703          	lbu	a4,-18(s0)
    8d80:	86be                	mv	a3,a5
    8d82:	4639                	li	a2,14
    8d84:	67bd                	lui	a5,0xf
    8d86:	b4878593          	addi	a1,a5,-1208 # eb48 <strlen+0x170>
    8d8a:	67bd                	lui	a5,0xf
    8d8c:	b6878513          	addi	a0,a5,-1176 # eb68 <strlen+0x190>
    8d90:	1fe030ef          	jal	ra,bf8e <xprintf>
    for(;;);
    8d94:	a001                	j	8d94 <os_hook_stack_overflow+0x32>

00008d96 <os_critical_enter>:

static volatile uint16_t critical_nesting_count;


void os_critical_enter(void)
{
    8d96:	1141                	addi	sp,sp,-16
    8d98:	c622                	sw	s0,12(sp)
    8d9a:	0800                	addi	s0,sp,16
    DISABLE_INTERRUPTS
    8d9c:	6789                	lui	a5,0x2
    8d9e:	80078793          	addi	a5,a5,-2048 # 1800 <EXTI_Init+0x8c>
    8da2:	30079073          	csrw	mstatus,a5
    critical_nesting_count++;
    8da6:	a281d783          	lhu	a5,-1496(gp) # 20000248 <critical_nesting_count>
    8daa:	07c2                	slli	a5,a5,0x10
    8dac:	83c1                	srli	a5,a5,0x10
    8dae:	0785                	addi	a5,a5,1
    8db0:	01079713          	slli	a4,a5,0x10
    8db4:	8341                	srli	a4,a4,0x10
    8db6:	a2e19423          	sh	a4,-1496(gp) # 20000248 <critical_nesting_count>
}
    8dba:	0001                	nop
    8dbc:	4432                	lw	s0,12(sp)
    8dbe:	0141                	addi	sp,sp,16
    8dc0:	8082                	ret

00008dc2 <os_critical_exit>:

void os_critical_exit(void)
{
    8dc2:	1141                	addi	sp,sp,-16
    8dc4:	c622                	sw	s0,12(sp)
    8dc6:	0800                	addi	s0,sp,16
    //os_assert(critical_nesting_count, "NESTING CRITICAL UNBALANCED");
    critical_nesting_count--;
    8dc8:	a281d783          	lhu	a5,-1496(gp) # 20000248 <critical_nesting_count>
    8dcc:	07c2                	slli	a5,a5,0x10
    8dce:	83c1                	srli	a5,a5,0x10
    8dd0:	17fd                	addi	a5,a5,-1
    8dd2:	01079713          	slli	a4,a5,0x10
    8dd6:	8341                	srli	a4,a4,0x10
    8dd8:	a2e19423          	sh	a4,-1496(gp) # 20000248 <critical_nesting_count>
    if (critical_nesting_count == 0)
    8ddc:	a281d783          	lhu	a5,-1496(gp) # 20000248 <critical_nesting_count>
    8de0:	07c2                	slli	a5,a5,0x10
    8de2:	83c1                	srli	a5,a5,0x10
    8de4:	e791                	bnez	a5,8df0 <os_critical_exit+0x2e>
    {
        ENABLE_INTERRUPTS
    8de6:	6789                	lui	a5,0x2
    8de8:	88878793          	addi	a5,a5,-1912 # 1888 <EXTI_Init+0x114>
    8dec:	80079073          	csrw	0x800,a5
    }
}
    8df0:	0001                	nop
    8df2:	4432                	lw	s0,12(sp)
    8df4:	0141                	addi	sp,sp,16
    8df6:	8082                	ret

00008df8 <os_init>:


void os_init(void)
{
    8df8:	1141                	addi	sp,sp,-16
    8dfa:	c606                	sw	ra,12(sp)
    8dfc:	c422                	sw	s0,8(sp)
    8dfe:	0800                	addi	s0,sp,16
    {
        LOG_ERROR("OS_ERR_NO_TASK_AVAILABLE - Entering while loop");
        DISABLE_INTERRUPTS
        while(1);
    }
    critical_nesting_count = (uint16_t)0u;
    8e00:	a2019423          	sh	zero,-1496(gp) # 20000248 <critical_nesting_count>
    os_prio_init();
    8e04:	519000ef          	jal	ra,9b1c <os_prio_init>
    os_msg_init();
    8e08:	08b000ef          	jal	ra,9692 <os_msg_init>
    os_timer_init();
    8e0c:	0e2020ef          	jal	ra,aeee <os_timer_init>
}
    8e10:	0001                	nop
    8e12:	40b2                	lw	ra,12(sp)
    8e14:	4422                	lw	s0,8(sp)
    8e16:	0141                	addi	sp,sp,16
    8e18:	8082                	ret

00008e1a <os_run>:

void os_run(void)
{
    8e1a:	1141                	addi	sp,sp,-16
    8e1c:	c606                	sw	ra,12(sp)
    8e1e:	c422                	sw	s0,8(sp)
    8e20:	0800                	addi	s0,sp,16
    os_task_start();
    8e22:	76a010ef          	jal	ra,a58c <os_task_start>
    os_cpu_init_and_run();
    8e26:	3341                	jal	8ba6 <os_cpu_init_and_run>
}
    8e28:	0001                	nop
    8e2a:	40b2                	lw	ra,12(sp)
    8e2c:	4422                	lw	s0,8(sp)
    8e2e:	0141                	addi	sp,sp,16
    8e30:	8082                	ret

00008e32 <os_list_init>:
#include "os_cfg.h"
#include "os_list.h"

void os_list_init(list_t *const p_list)
{
    8e32:	1101                	addi	sp,sp,-32
    8e34:	ce22                	sw	s0,28(sp)
    8e36:	1000                	addi	s0,sp,32
    8e38:	fea42623          	sw	a0,-20(s0)
    p_list->end_item.value = OS_CFG_DELAY_MAX;
    8e3c:	fec42783          	lw	a5,-20(s0)
    8e40:	577d                	li	a4,-1
    8e42:	c7d8                	sw	a4,12(a5)

    /* End item points to itself when list is empty */
    p_list->end_item.next_ptr = (list_item_t *)&(p_list->end_item);
    8e44:	fec42783          	lw	a5,-20(s0)
    8e48:	00478713          	addi	a4,a5,4
    8e4c:	fec42783          	lw	a5,-20(s0)
    8e50:	c3d8                	sw	a4,4(a5)
    p_list->end_item.prev_ptr = (list_item_t *)&(p_list->end_item);
    8e52:	fec42783          	lw	a5,-20(s0)
    8e56:	00478713          	addi	a4,a5,4
    8e5a:	fec42783          	lw	a5,-20(s0)
    8e5e:	c798                	sw	a4,8(a5)

    p_list->num_of_items = (uint16_t)0U;
    8e60:	fec42783          	lw	a5,-20(s0)
    8e64:	00079c23          	sh	zero,24(a5)
}
    8e68:	0001                	nop
    8e6a:	4472                	lw	s0,28(sp)
    8e6c:	6105                	addi	sp,sp,32
    8e6e:	8082                	ret

00008e70 <os_list_item_init>:

void os_list_item_init(list_item_t *const p_list_item)
{
    8e70:	1101                	addi	sp,sp,-32
    8e72:	ce22                	sw	s0,28(sp)
    8e74:	1000                	addi	s0,sp,32
    8e76:	fea42623          	sw	a0,-20(s0)
    p_list_item->list_ptr = NULL; /* The list is more important, all the members of item will be set later */
    8e7a:	fec42783          	lw	a5,-20(s0)
    8e7e:	0007a823          	sw	zero,16(a5)
}
    8e82:	0001                	nop
    8e84:	4472                	lw	s0,28(sp)
    8e86:	6105                	addi	sp,sp,32
    8e88:	8082                	ret

00008e8a <os_list_insert_end>:

void os_list_insert_end(list_t *const p_list, list_item_t *const p_list_item)
{
    8e8a:	7179                	addi	sp,sp,-48
    8e8c:	d622                	sw	s0,44(sp)
    8e8e:	1800                	addi	s0,sp,48
    8e90:	fca42e23          	sw	a0,-36(s0)
    8e94:	fcb42c23          	sw	a1,-40(s0)
    if (list_get_num_item(p_list) == 0u)
    8e98:	fdc42783          	lw	a5,-36(s0)
    8e9c:	0187d783          	lhu	a5,24(a5)
    8ea0:	ef9d                	bnez	a5,8ede <os_list_insert_end+0x54>
    {
        p_list_item->next_ptr = &(p_list->end_item);
    8ea2:	fdc42783          	lw	a5,-36(s0)
    8ea6:	00478713          	addi	a4,a5,4
    8eaa:	fd842783          	lw	a5,-40(s0)
    8eae:	c398                	sw	a4,0(a5)
        p_list_item->prev_ptr = &(p_list->end_item);
    8eb0:	fdc42783          	lw	a5,-36(s0)
    8eb4:	00478713          	addi	a4,a5,4
    8eb8:	fd842783          	lw	a5,-40(s0)
    8ebc:	c3d8                	sw	a4,4(a5)

        p_list->end_item.next_ptr = p_list_item;
    8ebe:	fdc42783          	lw	a5,-36(s0)
    8ec2:	fd842703          	lw	a4,-40(s0)
    8ec6:	c3d8                	sw	a4,4(a5)
        p_list->end_item.prev_ptr = p_list_item;
    8ec8:	fdc42783          	lw	a5,-36(s0)
    8ecc:	fd842703          	lw	a4,-40(s0)
    8ed0:	c798                	sw	a4,8(a5)

        p_list->curr_item_ptr = p_list_item;
    8ed2:	fdc42783          	lw	a5,-36(s0)
    8ed6:	fd842703          	lw	a4,-40(s0)
    8eda:	c398                	sw	a4,0(a5)
    8edc:	a825                	j	8f14 <os_list_insert_end+0x8a>
    }
    else
    {
        list_item_t *const p_last_item = p_list->end_item.prev_ptr;
    8ede:	fdc42783          	lw	a5,-36(s0)
    8ee2:	479c                	lw	a5,8(a5)
    8ee4:	fef42623          	sw	a5,-20(s0)

        p_last_item->next_ptr = p_list_item;
    8ee8:	fec42783          	lw	a5,-20(s0)
    8eec:	fd842703          	lw	a4,-40(s0)
    8ef0:	c398                	sw	a4,0(a5)
        p_list_item->prev_ptr = p_last_item;
    8ef2:	fd842783          	lw	a5,-40(s0)
    8ef6:	fec42703          	lw	a4,-20(s0)
    8efa:	c3d8                	sw	a4,4(a5)

        p_list_item->next_ptr = &(p_list->end_item);
    8efc:	fdc42783          	lw	a5,-36(s0)
    8f00:	00478713          	addi	a4,a5,4
    8f04:	fd842783          	lw	a5,-40(s0)
    8f08:	c398                	sw	a4,0(a5)
        p_list->end_item.prev_ptr = p_list_item;
    8f0a:	fdc42783          	lw	a5,-36(s0)
    8f0e:	fd842703          	lw	a4,-40(s0)
    8f12:	c798                	sw	a4,8(a5)
    }

    /* Remember which list the item is in. */
    p_list_item->list_ptr = p_list;
    8f14:	fd842783          	lw	a5,-40(s0)
    8f18:	fdc42703          	lw	a4,-36(s0)
    8f1c:	cb98                	sw	a4,16(a5)

    (p_list->num_of_items)++;
    8f1e:	fdc42783          	lw	a5,-36(s0)
    8f22:	0187d783          	lhu	a5,24(a5)
    8f26:	0785                	addi	a5,a5,1
    8f28:	01079713          	slli	a4,a5,0x10
    8f2c:	8341                	srli	a4,a4,0x10
    8f2e:	fdc42783          	lw	a5,-36(s0)
    8f32:	00e79c23          	sh	a4,24(a5)
}
    8f36:	0001                	nop
    8f38:	5432                	lw	s0,44(sp)
    8f3a:	6145                	addi	sp,sp,48
    8f3c:	8082                	ret

00008f3e <list_item_get_next>:

list_item_t *list_item_get_next(list_item_t *p_list_item)
{
    8f3e:	1101                	addi	sp,sp,-32
    8f40:	ce22                	sw	s0,28(sp)
    8f42:	1000                	addi	s0,sp,32
    8f44:	fea42623          	sw	a0,-20(s0)
    if ((p_list_item)->next_ptr != &(list_item_get_list_contain(p_list_item)->end_item))
    8f48:	fec42783          	lw	a5,-20(s0)
    8f4c:	4398                	lw	a4,0(a5)
    8f4e:	fec42783          	lw	a5,-20(s0)
    8f52:	4b9c                	lw	a5,16(a5)
    8f54:	0791                	addi	a5,a5,4
    8f56:	00f70663          	beq	a4,a5,8f62 <list_item_get_next+0x24>
        return (p_list_item)->next_ptr;
    8f5a:	fec42783          	lw	a5,-20(s0)
    8f5e:	439c                	lw	a5,0(a5)
    8f60:	a029                	j	8f6a <list_item_get_next+0x2c>
    else
        return (p_list_item)->next_ptr->next_ptr;
    8f62:	fec42783          	lw	a5,-20(s0)
    8f66:	439c                	lw	a5,0(a5)
    8f68:	439c                	lw	a5,0(a5)
}
    8f6a:	853e                	mv	a0,a5
    8f6c:	4472                	lw	s0,28(sp)
    8f6e:	6105                	addi	sp,sp,32
    8f70:	8082                	ret

00008f72 <list_item_get_prev>:
list_item_t *list_item_get_prev(list_item_t *p_list_item)
{
    8f72:	1101                	addi	sp,sp,-32
    8f74:	ce22                	sw	s0,28(sp)
    8f76:	1000                	addi	s0,sp,32
    8f78:	fea42623          	sw	a0,-20(s0)
    if ((p_list_item)->prev_ptr != &(list_item_get_list_contain(p_list_item)->end_item))
    8f7c:	fec42783          	lw	a5,-20(s0)
    8f80:	43d8                	lw	a4,4(a5)
    8f82:	fec42783          	lw	a5,-20(s0)
    8f86:	4b9c                	lw	a5,16(a5)
    8f88:	0791                	addi	a5,a5,4
    8f8a:	00f70663          	beq	a4,a5,8f96 <list_item_get_prev+0x24>
        return (p_list_item)->prev_ptr;
    8f8e:	fec42783          	lw	a5,-20(s0)
    8f92:	43dc                	lw	a5,4(a5)
    8f94:	a029                	j	8f9e <list_item_get_prev+0x2c>
    else
        return (p_list_item)->prev_ptr->prev_ptr;
    8f96:	fec42783          	lw	a5,-20(s0)
    8f9a:	43dc                	lw	a5,4(a5)
    8f9c:	43dc                	lw	a5,4(a5)
}
    8f9e:	853e                	mv	a0,a5
    8fa0:	4472                	lw	s0,28(sp)
    8fa2:	6105                	addi	sp,sp,32
    8fa4:	8082                	ret

00008fa6 <os_list_insert>:

void os_list_insert(list_t *const p_list, list_item_t *const p_list_item)
{
    8fa6:	7179                	addi	sp,sp,-48
    8fa8:	d606                	sw	ra,44(sp)
    8faa:	d422                	sw	s0,40(sp)
    8fac:	1800                	addi	s0,sp,48
    8fae:	fca42e23          	sw	a0,-36(s0)
    8fb2:	fcb42c23          	sw	a1,-40(s0)
    if (list_get_num_item(p_list) == 0u)
    8fb6:	fdc42783          	lw	a5,-36(s0)
    8fba:	0187d783          	lhu	a5,24(a5)
    8fbe:	e799                	bnez	a5,8fcc <os_list_insert+0x26>
        os_list_insert_end(p_list, p_list_item);
    8fc0:	fd842583          	lw	a1,-40(s0)
    8fc4:	fdc42503          	lw	a0,-36(s0)
    8fc8:	35c9                	jal	8e8a <os_list_insert_end>
         * item later. */
        p_list_item->list_ptr = p_list;

        (p_list->num_of_items)++;
    }
}
    8fca:	a859                	j	9060 <os_list_insert+0xba>
        const uint32_t value_to_insert = p_list_item->value;
    8fcc:	fd842783          	lw	a5,-40(s0)
    8fd0:	479c                	lw	a5,8(a5)
    8fd2:	fef42423          	sw	a5,-24(s0)
        if (value_to_insert == OS_CFG_DELAY_MAX)
    8fd6:	fe842703          	lw	a4,-24(s0)
    8fda:	57fd                	li	a5,-1
    8fdc:	00f71863          	bne	a4,a5,8fec <os_list_insert+0x46>
            p_iterator = p_list->end_item.prev_ptr;
    8fe0:	fdc42783          	lw	a5,-36(s0)
    8fe4:	479c                	lw	a5,8(a5)
    8fe6:	fef42623          	sw	a5,-20(s0)
    8fea:	a025                	j	9012 <os_list_insert+0x6c>
            for (p_iterator = (list_item_t *)&(p_list->end_item); p_iterator->next_ptr->value <= value_to_insert; p_iterator = p_iterator->next_ptr)
    8fec:	fdc42783          	lw	a5,-36(s0)
    8ff0:	0791                	addi	a5,a5,4
    8ff2:	fef42623          	sw	a5,-20(s0)
    8ff6:	a031                	j	9002 <os_list_insert+0x5c>
    8ff8:	fec42783          	lw	a5,-20(s0)
    8ffc:	439c                	lw	a5,0(a5)
    8ffe:	fef42623          	sw	a5,-20(s0)
    9002:	fec42783          	lw	a5,-20(s0)
    9006:	439c                	lw	a5,0(a5)
    9008:	479c                	lw	a5,8(a5)
    900a:	fe842703          	lw	a4,-24(s0)
    900e:	fef775e3          	bgeu	a4,a5,8ff8 <os_list_insert+0x52>
        p_list_item->next_ptr = p_iterator->next_ptr;
    9012:	fec42783          	lw	a5,-20(s0)
    9016:	4398                	lw	a4,0(a5)
    9018:	fd842783          	lw	a5,-40(s0)
    901c:	c398                	sw	a4,0(a5)
        p_list_item->next_ptr->prev_ptr = p_list_item;
    901e:	fd842783          	lw	a5,-40(s0)
    9022:	439c                	lw	a5,0(a5)
    9024:	fd842703          	lw	a4,-40(s0)
    9028:	c3d8                	sw	a4,4(a5)
        p_list_item->prev_ptr = p_iterator;
    902a:	fd842783          	lw	a5,-40(s0)
    902e:	fec42703          	lw	a4,-20(s0)
    9032:	c3d8                	sw	a4,4(a5)
        p_iterator->next_ptr = p_list_item;
    9034:	fec42783          	lw	a5,-20(s0)
    9038:	fd842703          	lw	a4,-40(s0)
    903c:	c398                	sw	a4,0(a5)
        p_list_item->list_ptr = p_list;
    903e:	fd842783          	lw	a5,-40(s0)
    9042:	fdc42703          	lw	a4,-36(s0)
    9046:	cb98                	sw	a4,16(a5)
        (p_list->num_of_items)++;
    9048:	fdc42783          	lw	a5,-36(s0)
    904c:	0187d783          	lhu	a5,24(a5)
    9050:	0785                	addi	a5,a5,1
    9052:	01079713          	slli	a4,a5,0x10
    9056:	8341                	srli	a4,a4,0x10
    9058:	fdc42783          	lw	a5,-36(s0)
    905c:	00e79c23          	sh	a4,24(a5)
}
    9060:	0001                	nop
    9062:	50b2                	lw	ra,44(sp)
    9064:	5422                	lw	s0,40(sp)
    9066:	6145                	addi	sp,sp,48
    9068:	8082                	ret

0000906a <os_list_remove>:

uint16_t os_list_remove(list_item_t *const p_list_item)
{
    906a:	7179                	addi	sp,sp,-48
    906c:	d622                	sw	s0,44(sp)
    906e:	1800                	addi	s0,sp,48
    9070:	fca42e23          	sw	a0,-36(s0)
    list_t *const p_list = p_list_item->list_ptr;
    9074:	fdc42783          	lw	a5,-36(s0)
    9078:	4b9c                	lw	a5,16(a5)
    907a:	fef42623          	sw	a5,-20(s0)

    p_list_item->next_ptr->prev_ptr = p_list_item->prev_ptr;
    907e:	fdc42783          	lw	a5,-36(s0)
    9082:	439c                	lw	a5,0(a5)
    9084:	fdc42703          	lw	a4,-36(s0)
    9088:	4358                	lw	a4,4(a4)
    908a:	c3d8                	sw	a4,4(a5)
    p_list_item->prev_ptr->next_ptr = p_list_item->next_ptr;
    908c:	fdc42783          	lw	a5,-36(s0)
    9090:	43dc                	lw	a5,4(a5)
    9092:	fdc42703          	lw	a4,-36(s0)
    9096:	4318                	lw	a4,0(a4)
    9098:	c398                	sw	a4,0(a5)

    /* Update curr item to the previous */
    if (p_list->curr_item_ptr == p_list_item)
    909a:	fec42783          	lw	a5,-20(s0)
    909e:	439c                	lw	a5,0(a5)
    90a0:	fdc42703          	lw	a4,-36(s0)
    90a4:	00f71863          	bne	a4,a5,90b4 <os_list_remove+0x4a>
    {
        p_list->curr_item_ptr = p_list_item->prev_ptr;
    90a8:	fdc42783          	lw	a5,-36(s0)
    90ac:	43d8                	lw	a4,4(a5)
    90ae:	fec42783          	lw	a5,-20(s0)
    90b2:	c398                	sw	a4,0(a5)
    else
    {
        // mtCOVERAGE_TEST_MARKER();
    }

    p_list_item->list_ptr = NULL;
    90b4:	fdc42783          	lw	a5,-36(s0)
    90b8:	0007a823          	sw	zero,16(a5)
    (p_list->num_of_items)--;
    90bc:	fec42783          	lw	a5,-20(s0)
    90c0:	0187d783          	lhu	a5,24(a5)
    90c4:	17fd                	addi	a5,a5,-1
    90c6:	01079713          	slli	a4,a5,0x10
    90ca:	8341                	srli	a4,a4,0x10
    90cc:	fec42783          	lw	a5,-20(s0)
    90d0:	00e79c23          	sh	a4,24(a5)

    return p_list->num_of_items;
    90d4:	fec42783          	lw	a5,-20(s0)
    90d8:	0187d783          	lhu	a5,24(a5)
}
    90dc:	853e                	mv	a0,a5
    90de:	5432                	lw	s0,44(sp)
    90e0:	6145                	addi	sp,sp,48
    90e2:	8082                	ret

000090e4 <list_get_owner_of_next_item>:

void *list_get_owner_of_next_item(list_t *const p_list)
{
    90e4:	7179                	addi	sp,sp,-48
    90e6:	d622                	sw	s0,44(sp)
    90e8:	1800                	addi	s0,sp,48
    90ea:	fca42e23          	sw	a0,-36(s0)
    list_t *const p_const_list = (p_list);
    90ee:	fdc42783          	lw	a5,-36(s0)
    90f2:	fef42623          	sw	a5,-20(s0)
    /* Increment the index to the next item and return the item, ensuring */
    /* we don't return the marker used at the end of the list.  */
    (p_const_list)->curr_item_ptr = (p_const_list)->curr_item_ptr->next_ptr;
    90f6:	fec42783          	lw	a5,-20(s0)
    90fa:	439c                	lw	a5,0(a5)
    90fc:	4398                	lw	a4,0(a5)
    90fe:	fec42783          	lw	a5,-20(s0)
    9102:	c398                	sw	a4,0(a5)

    if ((void *)(p_const_list)->curr_item_ptr == (void *)&((p_const_list)->end_item))
    9104:	fec42783          	lw	a5,-20(s0)
    9108:	4398                	lw	a4,0(a5)
    910a:	fec42783          	lw	a5,-20(s0)
    910e:	0791                	addi	a5,a5,4
    9110:	00f71963          	bne	a4,a5,9122 <list_get_owner_of_next_item+0x3e>
    {
        (p_const_list)->curr_item_ptr = (p_const_list)->curr_item_ptr->next_ptr;
    9114:	fec42783          	lw	a5,-20(s0)
    9118:	439c                	lw	a5,0(a5)
    911a:	4398                	lw	a4,0(a5)
    911c:	fec42783          	lw	a5,-20(s0)
    9120:	c398                	sw	a4,0(a5)
    }

    return (p_const_list)->curr_item_ptr->owner_ptr;
    9122:	fec42783          	lw	a5,-20(s0)
    9126:	439c                	lw	a5,0(a5)
    9128:	47dc                	lw	a5,12(a5)
    912a:	853e                	mv	a0,a5
    912c:	5432                	lw	s0,44(sp)
    912e:	6145                	addi	sp,sp,48
    9130:	8082                	ret

00009132 <os_mem_heap_init>:

static uint32_t byte_available = 0;


static void os_mem_heap_init(void)
{
    9132:	1101                	addi	sp,sp,-32
    9134:	ce22                	sw	s0,28(sp)
    9136:	1000                	addi	s0,sp,32
	uint32_t total_heap_size = OS_CFG_HEAP_SIZE;
    9138:	6785                	lui	a5,0x1
    913a:	40078793          	addi	a5,a5,1024 # 1400 <DMA_DeInit+0xc6>
    913e:	fef42623          	sw	a5,-20(s0)
	uint32_t heap_addr = (uint32_t)mem_heap;
    9142:	200007b7          	lui	a5,0x20000
    9146:	24c78793          	addi	a5,a5,588 # 2000024c <mem_heap>
    914a:	fef42423          	sw	a5,-24(s0)
	if ((heap_addr & (ALIGNMENT - 1)) != 0) /* If address of heap memory is not alligned	*/
    914e:	fe842783          	lw	a5,-24(s0)
    9152:	8b8d                	andi	a5,a5,3
    9154:	c79d                	beqz	a5,9182 <os_mem_heap_init+0x50>
	{
		heap_addr += (ALIGNMENT - 1);
    9156:	fe842783          	lw	a5,-24(s0)
    915a:	078d                	addi	a5,a5,3
    915c:	fef42423          	sw	a5,-24(s0)
		heap_addr &= ALIGNMENT;
    9160:	fe842783          	lw	a5,-24(s0)
    9164:	8b91                	andi	a5,a5,4
    9166:	fef42423          	sw	a5,-24(s0)
		total_heap_size -= heap_addr - (uint32_t)mem_heap; /* Recalculate size of heap memory	*/
    916a:	fec42703          	lw	a4,-20(s0)
    916e:	fe842783          	lw	a5,-24(s0)
    9172:	8f1d                	sub	a4,a4,a5
    9174:	200007b7          	lui	a5,0x20000
    9178:	24c78793          	addi	a5,a5,588 # 2000024c <mem_heap>
    917c:	97ba                	add	a5,a5,a4
    917e:	fef42623          	sw	a5,-20(s0)
	}

	mem_blk_end_ptr = (mem_blk_header_t *)(heap_addr); /* Address of first block	*/
    9182:	fe842703          	lw	a4,-24(s0)
    9186:	200017b7          	lui	a5,0x20001
    918a:	64e7ac23          	sw	a4,1624(a5) # 20001658 <mem_blk_end_ptr>
	mem_blk_end_ptr->size = total_heap_size - SIZE_OF_BLOCK_HEADER;
    918e:	200017b7          	lui	a5,0x20001
    9192:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    9196:	fec42703          	lw	a4,-20(s0)
    919a:	1751                	addi	a4,a4,-12
    919c:	c398                	sw	a4,0(a5)
	mem_blk_end_ptr->state = MEM_STATE_FREE;
    919e:	200017b7          	lui	a5,0x20001
    91a2:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    91a6:	0007a223          	sw	zero,4(a5)
	mem_blk_end_ptr->next_ptr = NULL;
    91aa:	200017b7          	lui	a5,0x20001
    91ae:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    91b2:	0007a423          	sw	zero,8(a5)

	mem_blk_start.size = 0;
    91b6:	200017b7          	lui	a5,0x20001
    91ba:	6407a623          	sw	zero,1612(a5) # 2000164c <mem_blk_start>
	mem_blk_start.next_ptr = mem_blk_end_ptr;
    91be:	200017b7          	lui	a5,0x20001
    91c2:	6587a703          	lw	a4,1624(a5) # 20001658 <mem_blk_end_ptr>
    91c6:	200017b7          	lui	a5,0x20001
    91ca:	64c78793          	addi	a5,a5,1612 # 2000164c <mem_blk_start>
    91ce:	c798                	sw	a4,8(a5)

	byte_available = total_heap_size - SIZE_OF_BLOCK_HEADER;
    91d0:	fec42783          	lw	a5,-20(s0)
    91d4:	ff478713          	addi	a4,a5,-12
    91d8:	200017b7          	lui	a5,0x20001
    91dc:	64e7ae23          	sw	a4,1628(a5) # 2000165c <byte_available>
}
    91e0:	0001                	nop
    91e2:	4472                	lw	s0,28(sp)
    91e4:	6105                	addi	sp,sp,32
    91e6:	8082                	ret

000091e8 <os_mem_malloc>:

void *os_mem_malloc(size_t size)
{
    91e8:	7179                	addi	sp,sp,-48
    91ea:	d606                	sw	ra,44(sp)
    91ec:	d422                	sw	s0,40(sp)
    91ee:	1800                	addi	s0,sp,48
    91f0:	fca42e23          	sw	a0,-36(s0)
	uint8_t *p_return = NULL;
    91f4:	fe042623          	sw	zero,-20(s0)
	if (mem_blk_end_ptr == NULL)
    91f8:	200017b7          	lui	a5,0x20001
    91fc:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    9200:	e391                	bnez	a5,9204 <os_mem_malloc+0x1c>
	{
		os_mem_heap_init();
    9202:	3f05                	jal	9132 <os_mem_heap_init>
	}
	size = mem_align(size);
    9204:	fdc42783          	lw	a5,-36(s0)
    9208:	078d                	addi	a5,a5,3
    920a:	9bf1                	andi	a5,a5,-4
    920c:	fcf42e23          	sw	a5,-36(s0)
	if (size == 0 || size > byte_available)
    9210:	fdc42783          	lw	a5,-36(s0)
    9214:	cb89                	beqz	a5,9226 <os_mem_malloc+0x3e>
    9216:	200017b7          	lui	a5,0x20001
    921a:	65c7a783          	lw	a5,1628(a5) # 2000165c <byte_available>
    921e:	fdc42703          	lw	a4,-36(s0)
    9222:	02e7f263          	bgeu	a5,a4,9246 <os_mem_malloc+0x5e>
	{
		os_assert(0, "OS_ERR_MEM_INVALID_SIZE");
    9226:	67bd                	lui	a5,0xf
    9228:	b9c78693          	addi	a3,a5,-1124 # eb9c <strlen+0x1c4>
    922c:	04200613          	li	a2,66
    9230:	67bd                	lui	a5,0xf
    9232:	bb478593          	addi	a1,a5,-1100 # ebb4 <strlen+0x1dc>
    9236:	67bd                	lui	a5,0xf
    9238:	bd078513          	addi	a0,a5,-1072 # ebd0 <strlen+0x1f8>
    923c:	553020ef          	jal	ra,bf8e <xprintf>
		return p_return; // Invalid size
    9240:	fec42783          	lw	a5,-20(s0)
    9244:	a2c1                	j	9404 <os_mem_malloc+0x21c>
	}

	else
	{
		mem_blk_header_t *p_block = &mem_blk_start;
    9246:	200017b7          	lui	a5,0x20001
    924a:	64c78793          	addi	a5,a5,1612 # 2000164c <mem_blk_start>
    924e:	fef42423          	sw	a5,-24(s0)
		p_block = p_block->next_ptr;
    9252:	fe842783          	lw	a5,-24(s0)
    9256:	479c                	lw	a5,8(a5)
    9258:	fef42423          	sw	a5,-24(s0)
		while (p_block != mem_blk_end_ptr)
    925c:	a01d                	j	9282 <os_mem_malloc+0x9a>
		{
			if (p_block->size < size || p_block->state == MEM_STATE_BUSY)
    925e:	fe842783          	lw	a5,-24(s0)
    9262:	439c                	lw	a5,0(a5)
    9264:	fdc42703          	lw	a4,-36(s0)
    9268:	00e7e863          	bltu	a5,a4,9278 <os_mem_malloc+0x90>
    926c:	fe842783          	lw	a5,-24(s0)
    9270:	43d8                	lw	a4,4(a5)
    9272:	4785                	li	a5,1
    9274:	00f71f63          	bne	a4,a5,9292 <os_mem_malloc+0xaa>
			{
				p_block = p_block->next_ptr;
    9278:	fe842783          	lw	a5,-24(s0)
    927c:	479c                	lw	a5,8(a5)
    927e:	fef42423          	sw	a5,-24(s0)
		while (p_block != mem_blk_end_ptr)
    9282:	200017b7          	lui	a5,0x20001
    9286:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    928a:	fe842703          	lw	a4,-24(s0)
    928e:	fcf718e3          	bne	a4,a5,925e <os_mem_malloc+0x76>
			}
			else
				break;
		}
		if (p_block != NULL)
    9292:	fe842783          	lw	a5,-24(s0)
    9296:	12078a63          	beqz	a5,93ca <os_mem_malloc+0x1e2>
		{
			if (p_block == mem_blk_end_ptr && p_block->size < size)
    929a:	200017b7          	lui	a5,0x20001
    929e:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    92a2:	fe842703          	lw	a4,-24(s0)
    92a6:	02f71963          	bne	a4,a5,92d8 <os_mem_malloc+0xf0>
    92aa:	fe842783          	lw	a5,-24(s0)
    92ae:	439c                	lw	a5,0(a5)
    92b0:	fdc42703          	lw	a4,-36(s0)
    92b4:	02e7f263          	bgeu	a5,a4,92d8 <os_mem_malloc+0xf0>
			{
				os_assert(0, "OS_ERR_MEM_NO_BLOCK");
    92b8:	67bd                	lui	a5,0xf
    92ba:	bf878693          	addi	a3,a5,-1032 # ebf8 <strlen+0x220>
    92be:	05700613          	li	a2,87
    92c2:	67bd                	lui	a5,0xf
    92c4:	bb478593          	addi	a1,a5,-1100 # ebb4 <strlen+0x1dc>
    92c8:	67bd                	lui	a5,0xf
    92ca:	bd078513          	addi	a0,a5,-1072 # ebd0 <strlen+0x1f8>
    92ce:	4c1020ef          	jal	ra,bf8e <xprintf>
				return (void *)p_return; // No block available
    92d2:	fec42783          	lw	a5,-20(s0)
    92d6:	a23d                	j	9404 <os_mem_malloc+0x21c>
			}

			if ((p_block->size - size) > MIN_SIZE_TO_SPLIT)
    92d8:	fe842783          	lw	a5,-24(s0)
    92dc:	4398                	lw	a4,0(a5)
    92de:	fdc42783          	lw	a5,-36(s0)
    92e2:	8f1d                	sub	a4,a4,a5
    92e4:	47a1                	li	a5,8
    92e6:	08e7fc63          	bgeu	a5,a4,937e <os_mem_malloc+0x196>
			{
				p_return = ((uint8_t *)p_block + SIZE_OF_BLOCK_HEADER);
    92ea:	fe842783          	lw	a5,-24(s0)
    92ee:	07b1                	addi	a5,a5,12
    92f0:	fef42623          	sw	a5,-20(s0)

				mem_blk_header_t *p_new_block = (mem_blk_header_t *)(((uint8_t *)p_block) + SIZE_OF_BLOCK_HEADER + size);
    92f4:	fdc42783          	lw	a5,-36(s0)
    92f8:	07b1                	addi	a5,a5,12
    92fa:	fe842703          	lw	a4,-24(s0)
    92fe:	97ba                	add	a5,a5,a4
    9300:	fef42223          	sw	a5,-28(s0)
				p_new_block->size = p_block->size - size - SIZE_OF_BLOCK_HEADER;
    9304:	fe842783          	lw	a5,-24(s0)
    9308:	4398                	lw	a4,0(a5)
    930a:	fdc42783          	lw	a5,-36(s0)
    930e:	40f707b3          	sub	a5,a4,a5
    9312:	ff478713          	addi	a4,a5,-12
    9316:	fe442783          	lw	a5,-28(s0)
    931a:	c398                	sw	a4,0(a5)
				p_new_block->state = MEM_STATE_FREE;
    931c:	fe442783          	lw	a5,-28(s0)
    9320:	0007a223          	sw	zero,4(a5)
				p_new_block->next_ptr = p_block->next_ptr;
    9324:	fe842783          	lw	a5,-24(s0)
    9328:	4798                	lw	a4,8(a5)
    932a:	fe442783          	lw	a5,-28(s0)
    932e:	c798                	sw	a4,8(a5)
				if (p_new_block->next_ptr == NULL)
    9330:	fe442783          	lw	a5,-28(s0)
    9334:	479c                	lw	a5,8(a5)
    9336:	e799                	bnez	a5,9344 <os_mem_malloc+0x15c>
				{
					mem_blk_end_ptr = p_new_block;
    9338:	200017b7          	lui	a5,0x20001
    933c:	fe442703          	lw	a4,-28(s0)
    9340:	64e7ac23          	sw	a4,1624(a5) # 20001658 <mem_blk_end_ptr>
				}

				p_block->size = size;
    9344:	fe842783          	lw	a5,-24(s0)
    9348:	fdc42703          	lw	a4,-36(s0)
    934c:	c398                	sw	a4,0(a5)
				p_block->state = MEM_STATE_BUSY;
    934e:	fe842783          	lw	a5,-24(s0)
    9352:	4705                	li	a4,1
    9354:	c3d8                	sw	a4,4(a5)
				p_block->next_ptr = p_new_block;
    9356:	fe842783          	lw	a5,-24(s0)
    935a:	fe442703          	lw	a4,-28(s0)
    935e:	c798                	sw	a4,8(a5)
				// p_block = p_block->next_ptr;

				byte_available -= (size + SIZE_OF_BLOCK_HEADER);
    9360:	200017b7          	lui	a5,0x20001
    9364:	65c7a703          	lw	a4,1628(a5) # 2000165c <byte_available>
    9368:	fdc42783          	lw	a5,-36(s0)
    936c:	40f707b3          	sub	a5,a4,a5
    9370:	ff478713          	addi	a4,a5,-12
    9374:	200017b7          	lui	a5,0x20001
    9378:	64e7ae23          	sw	a4,1628(a5) # 2000165c <byte_available>
    937c:	a035                	j	93a8 <os_mem_malloc+0x1c0>
			}

			else
			{
				p_return = ((uint8_t *)p_block + SIZE_OF_BLOCK_HEADER);
    937e:	fe842783          	lw	a5,-24(s0)
    9382:	07b1                	addi	a5,a5,12
    9384:	fef42623          	sw	a5,-20(s0)
				p_block->state = MEM_STATE_BUSY;
    9388:	fe842783          	lw	a5,-24(s0)
    938c:	4705                	li	a4,1
    938e:	c3d8                	sw	a4,4(a5)
				byte_available -= p_block->size;
    9390:	200017b7          	lui	a5,0x20001
    9394:	65c7a703          	lw	a4,1628(a5) # 2000165c <byte_available>
    9398:	fe842783          	lw	a5,-24(s0)
    939c:	439c                	lw	a5,0(a5)
    939e:	8f1d                	sub	a4,a4,a5
    93a0:	200017b7          	lui	a5,0x20001
    93a4:	64e7ae23          	sw	a4,1628(a5) # 2000165c <byte_available>
			}
			LOG_DBG("Malloc:  0x%08x\t\tSize: %d", (uint32_t *)p_return, size);
    93a8:	fdc42703          	lw	a4,-36(s0)
    93ac:	fec42683          	lw	a3,-20(s0)
    93b0:	07600613          	li	a2,118
    93b4:	67bd                	lui	a5,0xf
    93b6:	bb478593          	addi	a1,a5,-1100 # ebb4 <strlen+0x1dc>
    93ba:	67bd                	lui	a5,0xf
    93bc:	c0c78513          	addi	a0,a5,-1012 # ec0c <strlen+0x234>
    93c0:	3cf020ef          	jal	ra,bf8e <xprintf>
			return (void *)p_return;
    93c4:	fec42783          	lw	a5,-20(s0)
    93c8:	a835                	j	9404 <os_mem_malloc+0x21c>
		}
		else
		{
			os_assert(0, "OS_ERR_MEM_BLOCK_NULL");
    93ca:	67bd                	lui	a5,0xf
    93cc:	c4878693          	addi	a3,a5,-952 # ec48 <strlen+0x270>
    93d0:	07b00613          	li	a2,123
    93d4:	67bd                	lui	a5,0xf
    93d6:	bb478593          	addi	a1,a5,-1100 # ebb4 <strlen+0x1dc>
    93da:	67bd                	lui	a5,0xf
    93dc:	bd078513          	addi	a0,a5,-1072 # ebd0 <strlen+0x1f8>
    93e0:	3af020ef          	jal	ra,bf8e <xprintf>
			/* MEM_FAULT (p_block null) */
		}
	}
	LOG_DBG("Malloc:  0x%08x\t\tSize: %d", (uint32_t *)p_return, size);
    93e4:	fdc42703          	lw	a4,-36(s0)
    93e8:	fec42683          	lw	a3,-20(s0)
    93ec:	07f00613          	li	a2,127
    93f0:	67bd                	lui	a5,0xf
    93f2:	bb478593          	addi	a1,a5,-1100 # ebb4 <strlen+0x1dc>
    93f6:	67bd                	lui	a5,0xf
    93f8:	c0c78513          	addi	a0,a5,-1012 # ec0c <strlen+0x234>
    93fc:	393020ef          	jal	ra,bf8e <xprintf>
	return (void *) p_return;
    9400:	fec42783          	lw	a5,-20(s0)
}
    9404:	853e                	mv	a0,a5
    9406:	50b2                	lw	ra,44(sp)
    9408:	5422                	lw	s0,40(sp)
    940a:	6145                	addi	sp,sp,48
    940c:	8082                	ret

0000940e <os_mem_free>:

void os_mem_free(void *p_addr)
{
    940e:	7179                	addi	sp,sp,-48
    9410:	d606                	sw	ra,44(sp)
    9412:	d422                	sw	s0,40(sp)
    9414:	1800                	addi	s0,sp,48
    9416:	fca42e23          	sw	a0,-36(s0)
	if (mem_blk_end_ptr == NULL)
    941a:	200017b7          	lui	a5,0x20001
    941e:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    9422:	e391                	bnez	a5,9426 <os_mem_free+0x18>
	{
		os_mem_heap_init();
    9424:	3339                	jal	9132 <os_mem_heap_init>
	}
	if (((uint8_t *)p_addr) > ((uint8_t *)mem_blk_end_ptr + SIZE_OF_BLOCK_HEADER + mem_blk_end_ptr->size))
    9426:	200017b7          	lui	a5,0x20001
    942a:	6587a703          	lw	a4,1624(a5) # 20001658 <mem_blk_end_ptr>
    942e:	200017b7          	lui	a5,0x20001
    9432:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    9436:	439c                	lw	a5,0(a5)
    9438:	07b1                	addi	a5,a5,12
    943a:	97ba                	add	a5,a5,a4
    943c:	fdc42703          	lw	a4,-36(s0)
    9440:	02e7f063          	bgeu	a5,a4,9460 <os_mem_free+0x52>
	{
		os_assert(0, "OS_ERR_MEM_INVALID_ADDRESS");
    9444:	67bd                	lui	a5,0xf
    9446:	c6078693          	addi	a3,a5,-928 # ec60 <strlen+0x288>
    944a:	08b00613          	li	a2,139
    944e:	67bd                	lui	a5,0xf
    9450:	bb478593          	addi	a1,a5,-1100 # ebb4 <strlen+0x1dc>
    9454:	67bd                	lui	a5,0xf
    9456:	bd078513          	addi	a0,a5,-1072 # ebd0 <strlen+0x1f8>
    945a:	335020ef          	jal	ra,bf8e <xprintf>
		return; // Invalid address
    945e:	a261                	j	95e6 <os_mem_free+0x1d8>
	}

	if ((size_t)(((uint8_t *)p_addr) - SIZE_OF_BLOCK_HEADER) < (size_t)mem_blk_start.next_ptr)
    9460:	fdc42783          	lw	a5,-36(s0)
    9464:	17d1                	addi	a5,a5,-12
    9466:	873e                	mv	a4,a5
    9468:	200017b7          	lui	a5,0x20001
    946c:	64c78793          	addi	a5,a5,1612 # 2000164c <mem_blk_start>
    9470:	479c                	lw	a5,8(a5)
    9472:	02f77063          	bgeu	a4,a5,9492 <os_mem_free+0x84>
	{
		os_assert(0, "OS_ERR_MEM_INVALID_ADDRESS");
    9476:	67bd                	lui	a5,0xf
    9478:	c6078693          	addi	a3,a5,-928 # ec60 <strlen+0x288>
    947c:	09100613          	li	a2,145
    9480:	67bd                	lui	a5,0xf
    9482:	bb478593          	addi	a1,a5,-1100 # ebb4 <strlen+0x1dc>
    9486:	67bd                	lui	a5,0xf
    9488:	bd078513          	addi	a0,a5,-1072 # ebd0 <strlen+0x1f8>
    948c:	303020ef          	jal	ra,bf8e <xprintf>
		return; // Invalid address
    9490:	aa99                	j	95e6 <os_mem_free+0x1d8>
	}
	else
	{
		mem_blk_header_t *p_block = (mem_blk_header_t *)((uint8_t *)p_addr - SIZE_OF_BLOCK_HEADER);
    9492:	fdc42783          	lw	a5,-36(s0)
    9496:	17d1                	addi	a5,a5,-12
    9498:	fef42223          	sw	a5,-28(s0)
		if (p_block->state == MEM_STATE_FREE)
    949c:	fe442783          	lw	a5,-28(s0)
    94a0:	43dc                	lw	a5,4(a5)
    94a2:	12078f63          	beqz	a5,95e0 <os_mem_free+0x1d2>
		{
			return;
		}
		mem_blk_header_t *p_block_temp = &mem_blk_start;
    94a6:	200017b7          	lui	a5,0x20001
    94aa:	64c78793          	addi	a5,a5,1612 # 2000164c <mem_blk_start>
    94ae:	fef42623          	sw	a5,-20(s0)
		mem_blk_header_t *p_prev_block = p_block_temp;
    94b2:	fec42783          	lw	a5,-20(s0)
    94b6:	fef42423          	sw	a5,-24(s0)

		while (p_block_temp != mem_blk_end_ptr && (uint8_t *)p_block_temp != (uint8_t *)p_block)
    94ba:	a811                	j	94ce <os_mem_free+0xc0>
		{
			p_prev_block = p_block_temp;
    94bc:	fec42783          	lw	a5,-20(s0)
    94c0:	fef42423          	sw	a5,-24(s0)
			p_block_temp = p_block_temp->next_ptr;
    94c4:	fec42783          	lw	a5,-20(s0)
    94c8:	479c                	lw	a5,8(a5)
    94ca:	fef42623          	sw	a5,-20(s0)
		while (p_block_temp != mem_blk_end_ptr && (uint8_t *)p_block_temp != (uint8_t *)p_block)
    94ce:	200017b7          	lui	a5,0x20001
    94d2:	6587a783          	lw	a5,1624(a5) # 20001658 <mem_blk_end_ptr>
    94d6:	fec42703          	lw	a4,-20(s0)
    94da:	00f70863          	beq	a4,a5,94ea <os_mem_free+0xdc>
    94de:	fec42703          	lw	a4,-20(s0)
    94e2:	fe442783          	lw	a5,-28(s0)
    94e6:	fcf71be3          	bne	a4,a5,94bc <os_mem_free+0xae>
		}
		if (p_block_temp != NULL)
    94ea:	fec42783          	lw	a5,-20(s0)
    94ee:	cbf9                	beqz	a5,95c4 <os_mem_free+0x1b6>
		{
			byte_available += p_block_temp->size;
    94f0:	fec42783          	lw	a5,-20(s0)
    94f4:	4398                	lw	a4,0(a5)
    94f6:	200017b7          	lui	a5,0x20001
    94fa:	65c7a783          	lw	a5,1628(a5) # 2000165c <byte_available>
    94fe:	973e                	add	a4,a4,a5
    9500:	200017b7          	lui	a5,0x20001
    9504:	64e7ae23          	sw	a4,1628(a5) # 2000165c <byte_available>

			p_block_temp->state = MEM_STATE_FREE;
    9508:	fec42783          	lw	a5,-20(s0)
    950c:	0007a223          	sw	zero,4(a5)

			// Merge the next block
			if (p_block_temp->next_ptr != NULL && p_block_temp->next_ptr->state == MEM_STATE_FREE)
    9510:	fec42783          	lw	a5,-20(s0)
    9514:	479c                	lw	a5,8(a5)
    9516:	cfb1                	beqz	a5,9572 <os_mem_free+0x164>
    9518:	fec42783          	lw	a5,-20(s0)
    951c:	479c                	lw	a5,8(a5)
    951e:	43dc                	lw	a5,4(a5)
    9520:	eba9                	bnez	a5,9572 <os_mem_free+0x164>
			{
				byte_available += SIZE_OF_BLOCK_HEADER;
    9522:	200017b7          	lui	a5,0x20001
    9526:	65c7a783          	lw	a5,1628(a5) # 2000165c <byte_available>
    952a:	00c78713          	addi	a4,a5,12
    952e:	200017b7          	lui	a5,0x20001
    9532:	64e7ae23          	sw	a4,1628(a5) # 2000165c <byte_available>

				p_block_temp->size += p_block_temp->next_ptr->size + SIZE_OF_BLOCK_HEADER;
    9536:	fec42783          	lw	a5,-20(s0)
    953a:	4398                	lw	a4,0(a5)
    953c:	fec42783          	lw	a5,-20(s0)
    9540:	479c                	lw	a5,8(a5)
    9542:	439c                	lw	a5,0(a5)
    9544:	97ba                	add	a5,a5,a4
    9546:	00c78713          	addi	a4,a5,12
    954a:	fec42783          	lw	a5,-20(s0)
    954e:	c398                	sw	a4,0(a5)
				p_block_temp->next_ptr = p_block_temp->next_ptr->next_ptr;
    9550:	fec42783          	lw	a5,-20(s0)
    9554:	479c                	lw	a5,8(a5)
    9556:	4798                	lw	a4,8(a5)
    9558:	fec42783          	lw	a5,-20(s0)
    955c:	c798                	sw	a4,8(a5)
				if (p_block_temp->next_ptr == NULL)
    955e:	fec42783          	lw	a5,-20(s0)
    9562:	479c                	lw	a5,8(a5)
    9564:	e799                	bnez	a5,9572 <os_mem_free+0x164>
				{
					mem_blk_end_ptr = p_block_temp;
    9566:	200017b7          	lui	a5,0x20001
    956a:	fec42703          	lw	a4,-20(s0)
    956e:	64e7ac23          	sw	a4,1624(a5) # 20001658 <mem_blk_end_ptr>
				}
			}

			// Merge the prev block
			if (p_prev_block->state == MEM_STATE_FREE && (uint8_t *)p_prev_block != (uint8_t*)&mem_blk_start)
    9572:	fe842783          	lw	a5,-24(s0)
    9576:	43dc                	lw	a5,4(a5)
    9578:	e7b5                	bnez	a5,95e4 <os_mem_free+0x1d6>
    957a:	fe842703          	lw	a4,-24(s0)
    957e:	200017b7          	lui	a5,0x20001
    9582:	64c78793          	addi	a5,a5,1612 # 2000164c <mem_blk_start>
    9586:	04f70f63          	beq	a4,a5,95e4 <os_mem_free+0x1d6>
			{
				byte_available += SIZE_OF_BLOCK_HEADER;
    958a:	200017b7          	lui	a5,0x20001
    958e:	65c7a783          	lw	a5,1628(a5) # 2000165c <byte_available>
    9592:	00c78713          	addi	a4,a5,12
    9596:	200017b7          	lui	a5,0x20001
    959a:	64e7ae23          	sw	a4,1628(a5) # 2000165c <byte_available>

				p_prev_block->size += p_block_temp->size + SIZE_OF_BLOCK_HEADER;
    959e:	fe842783          	lw	a5,-24(s0)
    95a2:	4398                	lw	a4,0(a5)
    95a4:	fec42783          	lw	a5,-20(s0)
    95a8:	439c                	lw	a5,0(a5)
    95aa:	97ba                	add	a5,a5,a4
    95ac:	00c78713          	addi	a4,a5,12
    95b0:	fe842783          	lw	a5,-24(s0)
    95b4:	c398                	sw	a4,0(a5)
				p_prev_block->next_ptr = p_block_temp->next_ptr;
    95b6:	fec42783          	lw	a5,-20(s0)
    95ba:	4798                	lw	a4,8(a5)
    95bc:	fe842783          	lw	a5,-24(s0)
    95c0:	c798                	sw	a4,8(a5)
		{
			os_assert(0, "OS_ERR_MEM_INVALID_ADDRESS");
			return; // Invalid address
		}
	}
	return;
    95c2:	a00d                	j	95e4 <os_mem_free+0x1d6>
			os_assert(0, "OS_ERR_MEM_INVALID_ADDRESS");
    95c4:	67bd                	lui	a5,0xf
    95c6:	c6078693          	addi	a3,a5,-928 # ec60 <strlen+0x288>
    95ca:	0c100613          	li	a2,193
    95ce:	67bd                	lui	a5,0xf
    95d0:	bb478593          	addi	a1,a5,-1100 # ebb4 <strlen+0x1dc>
    95d4:	67bd                	lui	a5,0xf
    95d6:	bd078513          	addi	a0,a5,-1072 # ebd0 <strlen+0x1f8>
    95da:	1b5020ef          	jal	ra,bf8e <xprintf>
			return; // Invalid address
    95de:	a021                	j	95e6 <os_mem_free+0x1d8>
			return;
    95e0:	0001                	nop
    95e2:	a011                	j	95e6 <os_mem_free+0x1d8>
	return;
    95e4:	0001                	nop
}
    95e6:	50b2                	lw	ra,44(sp)
    95e8:	5422                	lw	s0,40(sp)
    95ea:	6145                	addi	sp,sp,48
    95ec:	8082                	ret

000095ee <msg_pool_init>:
static msg_t 	msg_pool[OS_CFG_MSG_POOL_SIZE];
static msg_t 	*free_list_msg_pool;
static uint8_t 	msg_pool_used;

static void msg_pool_init(void)
{
    95ee:	1101                	addi	sp,sp,-32
    95f0:	ce06                	sw	ra,28(sp)
    95f2:	cc22                	sw	s0,24(sp)
    95f4:	1000                	addi	s0,sp,32
    ENTER_CRITICAL();
    95f6:	fa0ff0ef          	jal	ra,8d96 <os_critical_enter>
    uint8_t index;

    free_list_msg_pool = (msg_t *)msg_pool;
    95fa:	200027b7          	lui	a5,0x20002
    95fe:	20001737          	lui	a4,0x20001
    9602:	66070713          	addi	a4,a4,1632 # 20001660 <msg_pool>
    9606:	96e7a023          	sw	a4,-1696(a5) # 20001960 <free_list_msg_pool>

    for (index = 0; index < OS_CFG_MSG_POOL_SIZE; index++)
    960a:	fe0407a3          	sb	zero,-17(s0)
    960e:	a095                	j	9672 <msg_pool_init+0x84>
    {
        if (index == (OS_CFG_MSG_POOL_SIZE - 1))
    9610:	fef44703          	lbu	a4,-17(s0)
    9614:	47fd                	li	a5,31
    9616:	02f71063          	bne	a4,a5,9636 <msg_pool_init+0x48>
        {
            msg_pool[index].next = NULL;
    961a:	fef44703          	lbu	a4,-17(s0)
    961e:	200016b7          	lui	a3,0x20001
    9622:	87ba                	mv	a5,a4
    9624:	0786                	slli	a5,a5,0x1
    9626:	97ba                	add	a5,a5,a4
    9628:	078e                	slli	a5,a5,0x3
    962a:	66068713          	addi	a4,a3,1632 # 20001660 <msg_pool>
    962e:	97ba                	add	a5,a5,a4
    9630:	0007a023          	sw	zero,0(a5)
    9634:	a815                	j	9668 <msg_pool_init+0x7a>
        }
        else
        {
            msg_pool[index].next = (msg_t *)&msg_pool[index + 1];
    9636:	fef44783          	lbu	a5,-17(s0)
    963a:	00178693          	addi	a3,a5,1
    963e:	fef44703          	lbu	a4,-17(s0)
    9642:	87b6                	mv	a5,a3
    9644:	0786                	slli	a5,a5,0x1
    9646:	97b6                	add	a5,a5,a3
    9648:	078e                	slli	a5,a5,0x3
    964a:	200016b7          	lui	a3,0x20001
    964e:	66068693          	addi	a3,a3,1632 # 20001660 <msg_pool>
    9652:	96be                	add	a3,a3,a5
    9654:	20001637          	lui	a2,0x20001
    9658:	87ba                	mv	a5,a4
    965a:	0786                	slli	a5,a5,0x1
    965c:	97ba                	add	a5,a5,a4
    965e:	078e                	slli	a5,a5,0x3
    9660:	66060713          	addi	a4,a2,1632 # 20001660 <msg_pool>
    9664:	97ba                	add	a5,a5,a4
    9666:	c394                	sw	a3,0(a5)
    for (index = 0; index < OS_CFG_MSG_POOL_SIZE; index++)
    9668:	fef44783          	lbu	a5,-17(s0)
    966c:	0785                	addi	a5,a5,1
    966e:	fef407a3          	sb	a5,-17(s0)
    9672:	fef44703          	lbu	a4,-17(s0)
    9676:	47fd                	li	a5,31
    9678:	f8e7fce3          	bgeu	a5,a4,9610 <msg_pool_init+0x22>
        }
    }

    msg_pool_used = 0;
    967c:	200027b7          	lui	a5,0x20002
    9680:	96078223          	sb	zero,-1692(a5) # 20001964 <msg_pool_used>

    EXIT_CRITICAL();
    9684:	f3eff0ef          	jal	ra,8dc2 <os_critical_exit>
}
    9688:	0001                	nop
    968a:	40f2                	lw	ra,28(sp)
    968c:	4462                	lw	s0,24(sp)
    968e:	6105                	addi	sp,sp,32
    9690:	8082                	ret

00009692 <os_msg_init>:
void os_msg_init(void)
{
    9692:	1141                	addi	sp,sp,-16
    9694:	c606                	sw	ra,12(sp)
    9696:	c422                	sw	s0,8(sp)
    9698:	0800                	addi	s0,sp,16
    msg_pool_init();
    969a:	3f91                	jal	95ee <msg_pool_init>
}
    969c:	0001                	nop
    969e:	40b2                	lw	ra,12(sp)
    96a0:	4422                	lw	s0,8(sp)
    96a2:	0141                	addi	sp,sp,16
    96a4:	8082                	ret

000096a6 <os_msg_free>:

void os_msg_free(msg_t *p_msg)
{
    96a6:	1101                	addi	sp,sp,-32
    96a8:	ce06                	sw	ra,28(sp)
    96aa:	cc22                	sw	s0,24(sp)
    96ac:	1000                	addi	s0,sp,32
    96ae:	fea42623          	sw	a0,-20(s0)
    ENTER_CRITICAL();
    96b2:	ee4ff0ef          	jal	ra,8d96 <os_critical_enter>

    p_msg->next = free_list_msg_pool;
    96b6:	200027b7          	lui	a5,0x20002
    96ba:	9607a703          	lw	a4,-1696(a5) # 20001960 <free_list_msg_pool>
    96be:	fec42783          	lw	a5,-20(s0)
    96c2:	c398                	sw	a4,0(a5)
    free_list_msg_pool = p_msg;
    96c4:	200027b7          	lui	a5,0x20002
    96c8:	fec42703          	lw	a4,-20(s0)
    96cc:	96e7a023          	sw	a4,-1696(a5) # 20001960 <free_list_msg_pool>
    if (p_msg->type == MSG_TYPE_DYNAMIC)
    96d0:	fec42783          	lw	a5,-20(s0)
    96d4:	4b98                	lw	a4,16(a5)
    96d6:	4785                	li	a5,1
    96d8:	00f71763          	bne	a4,a5,96e6 <os_msg_free+0x40>
    {
        os_mem_free(p_msg->content_ptr);
    96dc:	fec42783          	lw	a5,-20(s0)
    96e0:	47dc                	lw	a5,12(a5)
    96e2:	853e                	mv	a0,a5
    96e4:	332d                	jal	940e <os_mem_free>
    }
    msg_pool_used--;
    96e6:	200027b7          	lui	a5,0x20002
    96ea:	9647c783          	lbu	a5,-1692(a5) # 20001964 <msg_pool_used>
    96ee:	17fd                	addi	a5,a5,-1
    96f0:	0ff7f713          	andi	a4,a5,255
    96f4:	200027b7          	lui	a5,0x20002
    96f8:	96e78223          	sb	a4,-1692(a5) # 20001964 <msg_pool_used>

    EXIT_CRITICAL();
    96fc:	ec6ff0ef          	jal	ra,8dc2 <os_critical_exit>
}
    9700:	0001                	nop
    9702:	40f2                	lw	ra,28(sp)
    9704:	4462                	lw	s0,24(sp)
    9706:	6105                	addi	sp,sp,32
    9708:	8082                	ret

0000970a <os_msg_queue_init>:

void os_msg_queue_init(msg_queue_t *p_msg_q,
                       uint8_t size)
{
    970a:	1101                	addi	sp,sp,-32
    970c:	ce22                	sw	s0,28(sp)
    970e:	1000                	addi	s0,sp,32
    9710:	fea42623          	sw	a0,-20(s0)
    9714:	87ae                	mv	a5,a1
    9716:	fef405a3          	sb	a5,-21(s0)
    p_msg_q->head_ptr = NULL;
    971a:	fec42783          	lw	a5,-20(s0)
    971e:	0007a023          	sw	zero,0(a5)
    p_msg_q->tail_ptr = NULL;
    9722:	fec42783          	lw	a5,-20(s0)
    9726:	0007a223          	sw	zero,4(a5)
    p_msg_q->size_max = size;
    972a:	fec42783          	lw	a5,-20(s0)
    972e:	feb44703          	lbu	a4,-21(s0)
    9732:	00e78423          	sb	a4,8(a5)
    p_msg_q->size_curr = 0u;
    9736:	fec42783          	lw	a5,-20(s0)
    973a:	000784a3          	sb	zero,9(a5)
}
    973e:	0001                	nop
    9740:	4472                	lw	s0,28(sp)
    9742:	6105                	addi	sp,sp,32
    9744:	8082                	ret

00009746 <os_msg_queue_put_dynamic>:

void os_msg_queue_put_dynamic(msg_queue_t *p_msg_q,
                              int32_t sig,
                              void *p_content,
                              uint8_t size)
{
    9746:	7179                	addi	sp,sp,-48
    9748:	d606                	sw	ra,44(sp)
    974a:	d422                	sw	s0,40(sp)
    974c:	1800                	addi	s0,sp,48
    974e:	fca42e23          	sw	a0,-36(s0)
    9752:	fcb42c23          	sw	a1,-40(s0)
    9756:	fcc42a23          	sw	a2,-44(s0)
    975a:	87b6                	mv	a5,a3
    975c:	fcf409a3          	sb	a5,-45(s0)
    ENTER_CRITICAL();
    9760:	e36ff0ef          	jal	ra,8d96 <os_critical_enter>
    msg_t *p_msg;
    msg_t *p_msg_tail;
    if (p_msg_q->size_curr >= p_msg_q->size_max)
    9764:	fdc42783          	lw	a5,-36(s0)
    9768:	0097c703          	lbu	a4,9(a5)
    976c:	fdc42783          	lw	a5,-36(s0)
    9770:	0087c783          	lbu	a5,8(a5)
    9774:	02f76263          	bltu	a4,a5,9798 <os_msg_queue_put_dynamic+0x52>
    {
        // OSUniversalError = OS_ERR_MSG_QUEUE_IS_FULL;
        os_assert(0, "OS_ERR_MSG_QUEUE_IS_FULL");
    9778:	67bd                	lui	a5,0xf
    977a:	c7c78693          	addi	a3,a5,-900 # ec7c <strlen+0x2a4>
    977e:	04c00613          	li	a2,76
    9782:	67bd                	lui	a5,0xf
    9784:	c9878593          	addi	a1,a5,-872 # ec98 <strlen+0x2c0>
    9788:	67bd                	lui	a5,0xf
    978a:	cb478513          	addi	a0,a5,-844 # ecb4 <strlen+0x2dc>
    978e:	001020ef          	jal	ra,bf8e <xprintf>
        EXIT_CRITICAL();
    9792:	e30ff0ef          	jal	ra,8dc2 <os_critical_exit>
        return;
    9796:	aa21                	j	98ae <os_msg_queue_put_dynamic+0x168>
    }
    if (msg_pool_used >= OS_CFG_MSG_POOL_SIZE)
    9798:	200027b7          	lui	a5,0x20002
    979c:	9647c703          	lbu	a4,-1692(a5) # 20001964 <msg_pool_used>
    97a0:	47fd                	li	a5,31
    97a2:	02e7f263          	bgeu	a5,a4,97c6 <os_msg_queue_put_dynamic+0x80>
    {
        // OSUniversalError = OS_ERR_MSG_POOL_IS_FULL;
        os_assert(0, "OS_ERR_MSG_POOL_IS_FULL");
    97a6:	67bd                	lui	a5,0xf
    97a8:	cdc78693          	addi	a3,a5,-804 # ecdc <strlen+0x304>
    97ac:	05300613          	li	a2,83
    97b0:	67bd                	lui	a5,0xf
    97b2:	c9878593          	addi	a1,a5,-872 # ec98 <strlen+0x2c0>
    97b6:	67bd                	lui	a5,0xf
    97b8:	cb478513          	addi	a0,a5,-844 # ecb4 <strlen+0x2dc>
    97bc:	7d2020ef          	jal	ra,bf8e <xprintf>
        EXIT_CRITICAL();
    97c0:	e02ff0ef          	jal	ra,8dc2 <os_critical_exit>
        return;
    97c4:	a0ed                	j	98ae <os_msg_queue_put_dynamic+0x168>
    }

    p_msg = free_list_msg_pool;
    97c6:	200027b7          	lui	a5,0x20002
    97ca:	9607a783          	lw	a5,-1696(a5) # 20001960 <free_list_msg_pool>
    97ce:	fef42623          	sw	a5,-20(s0)
    free_list_msg_pool = p_msg->next;
    97d2:	fec42783          	lw	a5,-20(s0)
    97d6:	4398                	lw	a4,0(a5)
    97d8:	200027b7          	lui	a5,0x20002
    97dc:	96e7a023          	sw	a4,-1696(a5) # 20001960 <free_list_msg_pool>
    msg_pool_used++;
    97e0:	200027b7          	lui	a5,0x20002
    97e4:	9647c783          	lbu	a5,-1692(a5) # 20001964 <msg_pool_used>
    97e8:	0785                	addi	a5,a5,1
    97ea:	0ff7f713          	andi	a4,a5,255
    97ee:	200027b7          	lui	a5,0x20002
    97f2:	96e78223          	sb	a4,-1692(a5) # 20001964 <msg_pool_used>

    if (p_msg_q->size_curr == 0u) /* Is this first message placed in the queue? */
    97f6:	fdc42783          	lw	a5,-36(s0)
    97fa:	0097c783          	lbu	a5,9(a5)
    97fe:	e78d                	bnez	a5,9828 <os_msg_queue_put_dynamic+0xe2>
    {
        p_msg_q->head_ptr = p_msg; /* Yes */
    9800:	fdc42783          	lw	a5,-36(s0)
    9804:	fec42703          	lw	a4,-20(s0)
    9808:	c398                	sw	a4,0(a5)
        p_msg_q->tail_ptr = p_msg;
    980a:	fdc42783          	lw	a5,-36(s0)
    980e:	fec42703          	lw	a4,-20(s0)
    9812:	c3d8                	sw	a4,4(a5)
        p_msg_q->size_curr = 1u;
    9814:	fdc42783          	lw	a5,-36(s0)
    9818:	4705                	li	a4,1
    981a:	00e784a3          	sb	a4,9(a5)
        p_msg->next = NULL;
    981e:	fec42783          	lw	a5,-20(s0)
    9822:	0007a023          	sw	zero,0(a5)
    9826:	a83d                	j	9864 <os_msg_queue_put_dynamic+0x11e>
    }
    else
    {
        p_msg_tail = p_msg_q->tail_ptr;
    9828:	fdc42783          	lw	a5,-36(s0)
    982c:	43dc                	lw	a5,4(a5)
    982e:	fef42423          	sw	a5,-24(s0)
        p_msg_tail->next = p_msg;
    9832:	fe842783          	lw	a5,-24(s0)
    9836:	fec42703          	lw	a4,-20(s0)
    983a:	c398                	sw	a4,0(a5)
        p_msg_q->tail_ptr = p_msg;
    983c:	fdc42783          	lw	a5,-36(s0)
    9840:	fec42703          	lw	a4,-20(s0)
    9844:	c3d8                	sw	a4,4(a5)
        p_msg->next = NULL;
    9846:	fec42783          	lw	a5,-20(s0)
    984a:	0007a023          	sw	zero,0(a5)

        p_msg_q->size_curr++;
    984e:	fdc42783          	lw	a5,-36(s0)
    9852:	0097c783          	lbu	a5,9(a5)
    9856:	0785                	addi	a5,a5,1
    9858:	0ff7f713          	andi	a4,a5,255
    985c:	fdc42783          	lw	a5,-36(s0)
    9860:	00e784a3          	sb	a4,9(a5)
    }

    p_msg->type = MSG_TYPE_DYNAMIC;
    9864:	fec42783          	lw	a5,-20(s0)
    9868:	4705                	li	a4,1
    986a:	cb98                	sw	a4,16(a5)
    p_msg->sig = sig;
    986c:	fec42783          	lw	a5,-20(s0)
    9870:	fd842703          	lw	a4,-40(s0)
    9874:	c798                	sw	a4,8(a5)
    p_msg->size = size;
    9876:	fec42783          	lw	a5,-20(s0)
    987a:	fd344703          	lbu	a4,-45(s0)
    987e:	00e78223          	sb	a4,4(a5)
    p_msg->content_ptr = (uint8_t *)os_mem_malloc(size);
    9882:	fd344783          	lbu	a5,-45(s0)
    9886:	853e                	mv	a0,a5
    9888:	961ff0ef          	jal	ra,91e8 <os_mem_malloc>
    988c:	872a                	mv	a4,a0
    988e:	fec42783          	lw	a5,-20(s0)
    9892:	c7d8                	sw	a4,12(a5)
    memcpy(p_msg->content_ptr, p_content, size);
    9894:	fec42783          	lw	a5,-20(s0)
    9898:	47dc                	lw	a5,12(a5)
    989a:	fd344703          	lbu	a4,-45(s0)
    989e:	863a                	mv	a2,a4
    98a0:	fd442583          	lw	a1,-44(s0)
    98a4:	853e                	mv	a0,a5
    98a6:	050050ef          	jal	ra,e8f6 <memcpy>

    EXIT_CRITICAL();
    98aa:	d18ff0ef          	jal	ra,8dc2 <os_critical_exit>
}
    98ae:	50b2                	lw	ra,44(sp)
    98b0:	5422                	lw	s0,40(sp)
    98b2:	6145                	addi	sp,sp,48
    98b4:	8082                	ret

000098b6 <os_msg_queue_put_pure>:

void os_msg_queue_put_pure(msg_queue_t *p_msg_q, int32_t sig)
{
    98b6:	7179                	addi	sp,sp,-48
    98b8:	d606                	sw	ra,44(sp)
    98ba:	d422                	sw	s0,40(sp)
    98bc:	1800                	addi	s0,sp,48
    98be:	fca42e23          	sw	a0,-36(s0)
    98c2:	fcb42c23          	sw	a1,-40(s0)
    ENTER_CRITICAL();
    98c6:	cd0ff0ef          	jal	ra,8d96 <os_critical_enter>
    msg_t *p_msg;
    msg_t *p_msg_tail;
    if (p_msg_q->size_curr >= p_msg_q->size_max)
    98ca:	fdc42783          	lw	a5,-36(s0)
    98ce:	0097c703          	lbu	a4,9(a5)
    98d2:	fdc42783          	lw	a5,-36(s0)
    98d6:	0087c783          	lbu	a5,8(a5)
    98da:	02f76263          	bltu	a4,a5,98fe <os_msg_queue_put_pure+0x48>
    {
        // OSUniversalError = OS_ERR_MSG_QUEUE_IS_FULL;
        os_assert(0, "OS_ERR_MSG_QUEUE_IS_FULL");
    98de:	67bd                	lui	a5,0xf
    98e0:	c7c78693          	addi	a3,a5,-900 # ec7c <strlen+0x2a4>
    98e4:	07e00613          	li	a2,126
    98e8:	67bd                	lui	a5,0xf
    98ea:	c9878593          	addi	a1,a5,-872 # ec98 <strlen+0x2c0>
    98ee:	67bd                	lui	a5,0xf
    98f0:	cb478513          	addi	a0,a5,-844 # ecb4 <strlen+0x2dc>
    98f4:	69a020ef          	jal	ra,bf8e <xprintf>
        EXIT_CRITICAL();
    98f8:	ccaff0ef          	jal	ra,8dc2 <os_critical_exit>
        return;
    98fc:	a0d5                	j	99e0 <os_msg_queue_put_pure+0x12a>
    }
    if (msg_pool_used >= OS_CFG_MSG_POOL_SIZE)
    98fe:	200027b7          	lui	a5,0x20002
    9902:	9647c703          	lbu	a4,-1692(a5) # 20001964 <msg_pool_used>
    9906:	47fd                	li	a5,31
    9908:	02e7f263          	bgeu	a5,a4,992c <os_msg_queue_put_pure+0x76>
    {
        /* This states that u forget to free msg somewhere.*/
        // OSUniversalError = OS_ERR_MSG_POOL_IS_FULL;
        os_assert(0, "OS_ERR_MSG_POOL_IS_FULL");
    990c:	67bd                	lui	a5,0xf
    990e:	cdc78693          	addi	a3,a5,-804 # ecdc <strlen+0x304>
    9912:	08600613          	li	a2,134
    9916:	67bd                	lui	a5,0xf
    9918:	c9878593          	addi	a1,a5,-872 # ec98 <strlen+0x2c0>
    991c:	67bd                	lui	a5,0xf
    991e:	cb478513          	addi	a0,a5,-844 # ecb4 <strlen+0x2dc>
    9922:	66c020ef          	jal	ra,bf8e <xprintf>
        EXIT_CRITICAL();
    9926:	c9cff0ef          	jal	ra,8dc2 <os_critical_exit>
        return;
    992a:	a85d                	j	99e0 <os_msg_queue_put_pure+0x12a>
    }

    p_msg = free_list_msg_pool;
    992c:	200027b7          	lui	a5,0x20002
    9930:	9607a783          	lw	a5,-1696(a5) # 20001960 <free_list_msg_pool>
    9934:	fef42623          	sw	a5,-20(s0)
    free_list_msg_pool = p_msg->next;
    9938:	fec42783          	lw	a5,-20(s0)
    993c:	4398                	lw	a4,0(a5)
    993e:	200027b7          	lui	a5,0x20002
    9942:	96e7a023          	sw	a4,-1696(a5) # 20001960 <free_list_msg_pool>
    msg_pool_used++;
    9946:	200027b7          	lui	a5,0x20002
    994a:	9647c783          	lbu	a5,-1692(a5) # 20001964 <msg_pool_used>
    994e:	0785                	addi	a5,a5,1
    9950:	0ff7f713          	andi	a4,a5,255
    9954:	200027b7          	lui	a5,0x20002
    9958:	96e78223          	sb	a4,-1692(a5) # 20001964 <msg_pool_used>

    if (p_msg_q->size_curr == 0u) /* Is this first message placed in the queue? */
    995c:	fdc42783          	lw	a5,-36(s0)
    9960:	0097c783          	lbu	a5,9(a5)
    9964:	e78d                	bnez	a5,998e <os_msg_queue_put_pure+0xd8>
    {
        p_msg_q->head_ptr = p_msg; /* Yes */
    9966:	fdc42783          	lw	a5,-36(s0)
    996a:	fec42703          	lw	a4,-20(s0)
    996e:	c398                	sw	a4,0(a5)
        p_msg_q->tail_ptr = p_msg;
    9970:	fdc42783          	lw	a5,-36(s0)
    9974:	fec42703          	lw	a4,-20(s0)
    9978:	c3d8                	sw	a4,4(a5)
        p_msg_q->size_curr = 1u;
    997a:	fdc42783          	lw	a5,-36(s0)
    997e:	4705                	li	a4,1
    9980:	00e784a3          	sb	a4,9(a5)
        p_msg->next = NULL;
    9984:	fec42783          	lw	a5,-20(s0)
    9988:	0007a023          	sw	zero,0(a5)
    998c:	a83d                	j	99ca <os_msg_queue_put_pure+0x114>
    }
    else
    {
        p_msg_tail = p_msg_q->tail_ptr;
    998e:	fdc42783          	lw	a5,-36(s0)
    9992:	43dc                	lw	a5,4(a5)
    9994:	fef42423          	sw	a5,-24(s0)
        p_msg_tail->next = p_msg;
    9998:	fe842783          	lw	a5,-24(s0)
    999c:	fec42703          	lw	a4,-20(s0)
    99a0:	c398                	sw	a4,0(a5)
        p_msg_q->tail_ptr = p_msg;
    99a2:	fdc42783          	lw	a5,-36(s0)
    99a6:	fec42703          	lw	a4,-20(s0)
    99aa:	c3d8                	sw	a4,4(a5)
        p_msg->next = NULL;
    99ac:	fec42783          	lw	a5,-20(s0)
    99b0:	0007a023          	sw	zero,0(a5)

        p_msg_q->size_curr++;
    99b4:	fdc42783          	lw	a5,-36(s0)
    99b8:	0097c783          	lbu	a5,9(a5)
    99bc:	0785                	addi	a5,a5,1
    99be:	0ff7f713          	andi	a4,a5,255
    99c2:	fdc42783          	lw	a5,-36(s0)
    99c6:	00e784a3          	sb	a4,9(a5)
    }

    p_msg->type = MSG_TYPE_PURE;
    99ca:	fec42783          	lw	a5,-20(s0)
    99ce:	0007a823          	sw	zero,16(a5)
    p_msg->sig = sig;
    99d2:	fec42783          	lw	a5,-20(s0)
    99d6:	fd842703          	lw	a4,-40(s0)
    99da:	c798                	sw	a4,8(a5)

    EXIT_CRITICAL();
    99dc:	be6ff0ef          	jal	ra,8dc2 <os_critical_exit>
}
    99e0:	50b2                	lw	ra,44(sp)
    99e2:	5422                	lw	s0,40(sp)
    99e4:	6145                	addi	sp,sp,48
    99e6:	8082                	ret

000099e8 <os_msg_queue_get>:

msg_t *os_msg_queue_get(msg_queue_t *p_msg_q)
{
    99e8:	7179                	addi	sp,sp,-48
    99ea:	d622                	sw	s0,44(sp)
    99ec:	1800                	addi	s0,sp,48
    99ee:	fca42e23          	sw	a0,-36(s0)
    msg_t *p_msg;

    if (p_msg_q->size_curr == 0u)
    99f2:	fdc42783          	lw	a5,-36(s0)
    99f6:	0097c783          	lbu	a5,9(a5)
    99fa:	e399                	bnez	a5,9a00 <os_msg_queue_get+0x18>
    {
        // OSUniversalError = OS_ERR_MSG_QUEUE_IS_EMPTY;
        // os_assert(0);
        return NULL;
    99fc:	4781                	li	a5,0
    99fe:	a8a9                	j	9a58 <os_msg_queue_get+0x70>
    }

    p_msg = p_msg_q->head_ptr;
    9a00:	fdc42783          	lw	a5,-36(s0)
    9a04:	439c                	lw	a5,0(a5)
    9a06:	fef42623          	sw	a5,-20(s0)

    p_msg_q->head_ptr = p_msg->next;
    9a0a:	fec42783          	lw	a5,-20(s0)
    9a0e:	4398                	lw	a4,0(a5)
    9a10:	fdc42783          	lw	a5,-36(s0)
    9a14:	c398                	sw	a4,0(a5)

    if (p_msg_q->size_curr == 1u) /* Are there any more messages in the queue? */
    9a16:	fdc42783          	lw	a5,-36(s0)
    9a1a:	0097c703          	lbu	a4,9(a5)
    9a1e:	4785                	li	a5,1
    9a20:	00f71f63          	bne	a4,a5,9a3e <os_msg_queue_get+0x56>
    {
        p_msg_q->head_ptr = NULL;
    9a24:	fdc42783          	lw	a5,-36(s0)
    9a28:	0007a023          	sw	zero,0(a5)
        p_msg_q->tail_ptr = NULL;
    9a2c:	fdc42783          	lw	a5,-36(s0)
    9a30:	0007a223          	sw	zero,4(a5)
        p_msg_q->size_curr = 0u;
    9a34:	fdc42783          	lw	a5,-36(s0)
    9a38:	000784a3          	sb	zero,9(a5)
    9a3c:	a821                	j	9a54 <os_msg_queue_get+0x6c>
    }
    else
    {
        p_msg_q->size_curr--; /* Yes, One less message in the queue */
    9a3e:	fdc42783          	lw	a5,-36(s0)
    9a42:	0097c783          	lbu	a5,9(a5)
    9a46:	17fd                	addi	a5,a5,-1
    9a48:	0ff7f713          	andi	a4,a5,255
    9a4c:	fdc42783          	lw	a5,-36(s0)
    9a50:	00e784a3          	sb	a4,9(a5)
    }

    return (p_msg);
    9a54:	fec42783          	lw	a5,-20(s0)
}
    9a58:	853e                	mv	a0,a5
    9a5a:	5432                	lw	s0,44(sp)
    9a5c:	6145                	addi	sp,sp,48
    9a5e:	8082                	ret

00009a60 <os_msg_get_dynamic_data>:

void *os_msg_get_dynamic_data(msg_t *p_msg,
                              uint8_t *p_msg_size)
{
    9a60:	1101                	addi	sp,sp,-32
    9a62:	ce22                	sw	s0,28(sp)
    9a64:	1000                	addi	s0,sp,32
    9a66:	fea42623          	sw	a0,-20(s0)
    9a6a:	feb42423          	sw	a1,-24(s0)
    *p_msg_size = p_msg->size;
    9a6e:	fec42783          	lw	a5,-20(s0)
    9a72:	0047c703          	lbu	a4,4(a5)
    9a76:	fe842783          	lw	a5,-24(s0)
    9a7a:	00e78023          	sb	a4,0(a5)
    return p_msg->content_ptr;
    9a7e:	fec42783          	lw	a5,-20(s0)
    9a82:	47dc                	lw	a5,12(a5)
}
    9a84:	853e                	mv	a0,a5
    9a86:	4472                	lw	s0,28(sp)
    9a88:	6105                	addi	sp,sp,32
    9a8a:	8082                	ret

00009a8c <os_msg_queue_get_pure>:

msg_t *os_msg_queue_get_pure(msg_queue_t *p_msg_q)
{
    9a8c:	7179                	addi	sp,sp,-48
    9a8e:	d622                	sw	s0,44(sp)
    9a90:	1800                	addi	s0,sp,48
    9a92:	fca42e23          	sw	a0,-36(s0)
    msg_t *p_msg;

    if (p_msg_q->size_curr == 0u)
    9a96:	fdc42783          	lw	a5,-36(s0)
    9a9a:	0097c783          	lbu	a5,9(a5)
    9a9e:	e399                	bnez	a5,9aa4 <os_msg_queue_get_pure+0x18>
    {
        // OSUniversalError = OS_ERR_MSG_QUEUE_IS_EMPTY;
        // os_assert(0);
        return NULL;
    9aa0:	4781                	li	a5,0
    9aa2:	a8a9                	j	9afc <os_msg_queue_get_pure+0x70>
    }

    p_msg = p_msg_q->head_ptr;
    9aa4:	fdc42783          	lw	a5,-36(s0)
    9aa8:	439c                	lw	a5,0(a5)
    9aaa:	fef42623          	sw	a5,-20(s0)

    p_msg_q->head_ptr = p_msg->next;
    9aae:	fec42783          	lw	a5,-20(s0)
    9ab2:	4398                	lw	a4,0(a5)
    9ab4:	fdc42783          	lw	a5,-36(s0)
    9ab8:	c398                	sw	a4,0(a5)

    if (p_msg_q->size_curr == 1u) /* Are there any more messages in the queue? */
    9aba:	fdc42783          	lw	a5,-36(s0)
    9abe:	0097c703          	lbu	a4,9(a5)
    9ac2:	4785                	li	a5,1
    9ac4:	00f71f63          	bne	a4,a5,9ae2 <os_msg_queue_get_pure+0x56>
    {
        p_msg_q->head_ptr = NULL;
    9ac8:	fdc42783          	lw	a5,-36(s0)
    9acc:	0007a023          	sw	zero,0(a5)
        p_msg_q->tail_ptr = NULL;
    9ad0:	fdc42783          	lw	a5,-36(s0)
    9ad4:	0007a223          	sw	zero,4(a5)
        p_msg_q->size_curr = 0u;
    9ad8:	fdc42783          	lw	a5,-36(s0)
    9adc:	000784a3          	sb	zero,9(a5)
    9ae0:	a821                	j	9af8 <os_msg_queue_get_pure+0x6c>
    }
    else
    {
        p_msg_q->size_curr--; /* Yes, One less message in the queue */
    9ae2:	fdc42783          	lw	a5,-36(s0)
    9ae6:	0097c783          	lbu	a5,9(a5)
    9aea:	17fd                	addi	a5,a5,-1
    9aec:	0ff7f713          	andi	a4,a5,255
    9af0:	fdc42783          	lw	a5,-36(s0)
    9af4:	00e784a3          	sb	a4,9(a5)
    }

    return (p_msg);
    9af8:	fec42783          	lw	a5,-20(s0)
}
    9afc:	853e                	mv	a0,a5
    9afe:	5432                	lw	s0,44(sp)
    9b00:	6145                	addi	sp,sp,48
    9b02:	8082                	ret

00009b04 <os_msg_get_pure_data>:

int32_t os_msg_get_pure_data(msg_t *p_msg)
{
    9b04:	1101                	addi	sp,sp,-32
    9b06:	ce22                	sw	s0,28(sp)
    9b08:	1000                	addi	s0,sp,32
    9b0a:	fea42623          	sw	a0,-20(s0)
    return p_msg->sig;
    9b0e:	fec42783          	lw	a5,-20(s0)
    9b12:	479c                	lw	a5,8(a5)
    9b14:	853e                	mv	a0,a5
    9b16:	4472                	lw	s0,28(sp)
    9b18:	6105                	addi	sp,sp,32
    9b1a:	8082                	ret

00009b1c <os_prio_init>:
#include "os_prio.h"
static uint32_t prio_curr;
static uint8_t prio_tbl[OS_PRIO_TBL_SIZE];

void os_prio_init()
{
    9b1c:	1101                	addi	sp,sp,-32
    9b1e:	ce06                	sw	ra,28(sp)
    9b20:	cc22                	sw	s0,24(sp)
    9b22:	1000                	addi	s0,sp,32
    uint8_t i;
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++)
    9b24:	fe0407a3          	sb	zero,-17(s0)
    9b28:	a839                	j	9b46 <os_prio_init+0x2a>
    {
        prio_tbl[i] = 0u;
    9b2a:	fef44703          	lbu	a4,-17(s0)
    9b2e:	200027b7          	lui	a5,0x20002
    9b32:	96c78793          	addi	a5,a5,-1684 # 2000196c <prio_tbl>
    9b36:	97ba                	add	a5,a5,a4
    9b38:	00078023          	sb	zero,0(a5)
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++)
    9b3c:	fef44783          	lbu	a5,-17(s0)
    9b40:	0785                	addi	a5,a5,1
    9b42:	fef407a3          	sb	a5,-17(s0)
    9b46:	fef44783          	lbu	a5,-17(s0)
    9b4a:	d3e5                	beqz	a5,9b2a <os_prio_init+0xe>
    }
    /* OS_CFG_PRIO_MAX-1 is the lowest priority level and that is idle task's prio     */
    os_prio_insert(OS_CFG_PRIO_MAX - 1);
    9b4c:	451d                	li	a0,7
    9b4e:	2031                	jal	9b5a <os_prio_insert>
}
    9b50:	0001                	nop
    9b52:	40f2                	lw	ra,28(sp)
    9b54:	4462                	lw	s0,24(sp)
    9b56:	6105                	addi	sp,sp,32
    9b58:	8082                	ret

00009b5a <os_prio_insert>:

void os_prio_insert(uint32_t prio)
{
    9b5a:	7179                	addi	sp,sp,-48
    9b5c:	d622                	sw	s0,44(sp)
    9b5e:	1800                	addi	s0,sp,48
    9b60:	fca42e23          	sw	a0,-36(s0)
    uint8_t bit;
    uint8_t row;

    row = (uint32_t)(prio / (8u));
    9b64:	fdc42783          	lw	a5,-36(s0)
    9b68:	838d                	srli	a5,a5,0x3
    9b6a:	fef407a3          	sb	a5,-17(s0)
    bit = (uint8_t)prio & ((8u) - 1u);
    9b6e:	fdc42783          	lw	a5,-36(s0)
    9b72:	0ff7f793          	andi	a5,a5,255
    9b76:	8b9d                	andi	a5,a5,7
    9b78:	fef40723          	sb	a5,-18(s0)
    prio_tbl[row] |= (uint8_t)1u << (((8u) - 1u) - bit);
    9b7c:	fef44703          	lbu	a4,-17(s0)
    9b80:	200027b7          	lui	a5,0x20002
    9b84:	96c78793          	addi	a5,a5,-1684 # 2000196c <prio_tbl>
    9b88:	97ba                	add	a5,a5,a4
    9b8a:	0007c783          	lbu	a5,0(a5)
    9b8e:	01879713          	slli	a4,a5,0x18
    9b92:	8761                	srai	a4,a4,0x18
    9b94:	fee44783          	lbu	a5,-18(s0)
    9b98:	469d                	li	a3,7
    9b9a:	40f687b3          	sub	a5,a3,a5
    9b9e:	4685                	li	a3,1
    9ba0:	00f697b3          	sll	a5,a3,a5
    9ba4:	07e2                	slli	a5,a5,0x18
    9ba6:	87e1                	srai	a5,a5,0x18
    9ba8:	8fd9                	or	a5,a5,a4
    9baa:	07e2                	slli	a5,a5,0x18
    9bac:	87e1                	srai	a5,a5,0x18
    9bae:	fef44683          	lbu	a3,-17(s0)
    9bb2:	0ff7f713          	andi	a4,a5,255
    9bb6:	200027b7          	lui	a5,0x20002
    9bba:	96c78793          	addi	a5,a5,-1684 # 2000196c <prio_tbl>
    9bbe:	97b6                	add	a5,a5,a3
    9bc0:	00e78023          	sb	a4,0(a5)
}
    9bc4:	0001                	nop
    9bc6:	5432                	lw	s0,44(sp)
    9bc8:	6145                	addi	sp,sp,48
    9bca:	8082                	ret

00009bcc <os_prio_remove>:

void os_prio_remove(uint32_t prio)
{
    9bcc:	7179                	addi	sp,sp,-48
    9bce:	d622                	sw	s0,44(sp)
    9bd0:	1800                	addi	s0,sp,48
    9bd2:	fca42e23          	sw	a0,-36(s0)
    uint8_t bit;
    uint8_t row;

    row = (uint32_t)(prio / (8u));
    9bd6:	fdc42783          	lw	a5,-36(s0)
    9bda:	838d                	srli	a5,a5,0x3
    9bdc:	fef407a3          	sb	a5,-17(s0)
    bit = (uint8_t)prio & ((8u) - 1u);
    9be0:	fdc42783          	lw	a5,-36(s0)
    9be4:	0ff7f793          	andi	a5,a5,255
    9be8:	8b9d                	andi	a5,a5,7
    9bea:	fef40723          	sb	a5,-18(s0)
    prio_tbl[row] &= ~((uint8_t)1u << (((8u) - 1u) - bit));
    9bee:	fef44703          	lbu	a4,-17(s0)
    9bf2:	200027b7          	lui	a5,0x20002
    9bf6:	96c78793          	addi	a5,a5,-1684 # 2000196c <prio_tbl>
    9bfa:	97ba                	add	a5,a5,a4
    9bfc:	0007c783          	lbu	a5,0(a5)
    9c00:	01879713          	slli	a4,a5,0x18
    9c04:	8761                	srai	a4,a4,0x18
    9c06:	fee44783          	lbu	a5,-18(s0)
    9c0a:	469d                	li	a3,7
    9c0c:	40f687b3          	sub	a5,a3,a5
    9c10:	4685                	li	a3,1
    9c12:	00f697b3          	sll	a5,a3,a5
    9c16:	07e2                	slli	a5,a5,0x18
    9c18:	87e1                	srai	a5,a5,0x18
    9c1a:	fff7c793          	not	a5,a5
    9c1e:	07e2                	slli	a5,a5,0x18
    9c20:	87e1                	srai	a5,a5,0x18
    9c22:	8ff9                	and	a5,a5,a4
    9c24:	07e2                	slli	a5,a5,0x18
    9c26:	87e1                	srai	a5,a5,0x18
    9c28:	fef44683          	lbu	a3,-17(s0)
    9c2c:	0ff7f713          	andi	a4,a5,255
    9c30:	200027b7          	lui	a5,0x20002
    9c34:	96c78793          	addi	a5,a5,-1684 # 2000196c <prio_tbl>
    9c38:	97b6                	add	a5,a5,a3
    9c3a:	00e78023          	sb	a4,0(a5)
}
    9c3e:	0001                	nop
    9c40:	5432                	lw	s0,44(sp)
    9c42:	6145                	addi	sp,sp,48
    9c44:	8082                	ret

00009c46 <os_prio_get_highest>:

uint32_t os_prio_get_highest(void)
{
    9c46:	1101                	addi	sp,sp,-32
    9c48:	ce22                	sw	s0,28(sp)
    9c4a:	1000                	addi	s0,sp,32
    uint8_t *p_tbl;
    uint32_t prio;

    prio = 0u;
    9c4c:	fe042423          	sw	zero,-24(s0)
    p_tbl = &prio_tbl[0];
    9c50:	200027b7          	lui	a5,0x20002
    9c54:	96c78793          	addi	a5,a5,-1684 # 2000196c <prio_tbl>
    9c58:	fef42623          	sw	a5,-20(s0)
    while (*p_tbl == 0u)
    9c5c:	a819                	j	9c72 <os_prio_get_highest+0x2c>
    {                 /* Search the bitmap table for the highest priority     */
        prio += (8u); /* Compute the step of each CPU_DATA entry              */
    9c5e:	fe842783          	lw	a5,-24(s0)
    9c62:	07a1                	addi	a5,a5,8
    9c64:	fef42423          	sw	a5,-24(s0)
        p_tbl++;
    9c68:	fec42783          	lw	a5,-20(s0)
    9c6c:	0785                	addi	a5,a5,1
    9c6e:	fef42623          	sw	a5,-20(s0)
    while (*p_tbl == 0u)
    9c72:	fec42783          	lw	a5,-20(s0)
    9c76:	0007c783          	lbu	a5,0(a5)
    9c7a:	d3f5                	beqz	a5,9c5e <os_prio_get_highest+0x18>
    }

    uint8_t bit = (uint8_t)prio & ((8u) - 1u);
    9c7c:	fe842783          	lw	a5,-24(s0)
    9c80:	0ff7f793          	andi	a5,a5,255
    9c84:	8b9d                	andi	a5,a5,7
    9c86:	fef403a3          	sb	a5,-25(s0)
    while (!(*p_tbl & ((uint8_t)1u << (((8u) - 1u) - bit))))
    9c8a:	a829                	j	9ca4 <os_prio_get_highest+0x5e>
    {
        prio++;
    9c8c:	fe842783          	lw	a5,-24(s0)
    9c90:	0785                	addi	a5,a5,1
    9c92:	fef42423          	sw	a5,-24(s0)
        bit = (uint8_t)prio & ((8u) - 1u);
    9c96:	fe842783          	lw	a5,-24(s0)
    9c9a:	0ff7f793          	andi	a5,a5,255
    9c9e:	8b9d                	andi	a5,a5,7
    9ca0:	fef403a3          	sb	a5,-25(s0)
    while (!(*p_tbl & ((uint8_t)1u << (((8u) - 1u) - bit))))
    9ca4:	fec42783          	lw	a5,-20(s0)
    9ca8:	0007c783          	lbu	a5,0(a5)
    9cac:	86be                	mv	a3,a5
    9cae:	fe744783          	lbu	a5,-25(s0)
    9cb2:	471d                	li	a4,7
    9cb4:	40f707b3          	sub	a5,a4,a5
    9cb8:	40f6d7b3          	sra	a5,a3,a5
    9cbc:	8b85                	andi	a5,a5,1
    9cbe:	d7f9                	beqz	a5,9c8c <os_prio_get_highest+0x46>
    }
    return (prio);
    9cc0:	fe842783          	lw	a5,-24(s0)
}
    9cc4:	853e                	mv	a0,a5
    9cc6:	4472                	lw	s0,28(sp)
    9cc8:	6105                	addi	sp,sp,32
    9cca:	8082                	ret

00009ccc <os_prio_get_curr>:

uint32_t os_prio_get_curr(void)
{
    9ccc:	1141                	addi	sp,sp,-16
    9cce:	c622                	sw	s0,12(sp)
    9cd0:	0800                	addi	s0,sp,16
    return prio_curr;
    9cd2:	200027b7          	lui	a5,0x20002
    9cd6:	9687a783          	lw	a5,-1688(a5) # 20001968 <prio_curr>
    9cda:	853e                	mv	a0,a5
    9cdc:	4432                	lw	s0,12(sp)
    9cde:	0141                	addi	sp,sp,16
    9ce0:	8082                	ret

00009ce2 <os_task_get_tick>:
static volatile uint32_t next_tick_to_unblock   = (uint32_t)OS_CFG_DELAY_MAX; /* Initialised to portMAX_DELAY before the scheduler starts. */

static volatile uint8_t sched_is_running        = (uint8_t)OS_FALSE;

uint32_t os_task_get_tick(void)
{
    9ce2:	1141                	addi	sp,sp,-16
    9ce4:	c622                	sw	s0,12(sp)
    9ce6:	0800                	addi	s0,sp,16
    return tick_count;
    9ce8:	200027b7          	lui	a5,0x20002
    9cec:	ac47a783          	lw	a5,-1340(a5) # 20001ac4 <tick_count>
}
    9cf0:	853e                	mv	a0,a5
    9cf2:	4432                	lw	s0,12(sp)
    9cf4:	0141                	addi	sp,sp,16
    9cf6:	8082                	ret

00009cf8 <task_idle_func>:

static void task_idle_func(void *p_arg)
{
    9cf8:	1101                	addi	sp,sp,-32
    9cfa:	ce22                	sw	s0,28(sp)
    9cfc:	1000                	addi	s0,sp,32
    9cfe:	fea42623          	sw	a0,-20(s0)
    for (;;)
    9d02:	a001                	j	9d02 <task_idle_func+0xa>

00009d04 <task_timer_func>:
    {
    }
}

static void task_timer_func(void *p_arg)
{
    9d04:	1101                	addi	sp,sp,-32
    9d06:	ce06                	sw	ra,28(sp)
    9d08:	cc22                	sw	s0,24(sp)
    9d0a:	1000                	addi	s0,sp,32
    9d0c:	fea42623          	sw	a0,-20(s0)
    for (;;)
    {
        os_timer_processing();
    9d10:	1fa010ef          	jal	ra,af0a <os_timer_processing>
    9d14:	bff5                	j	9d10 <task_timer_func+0xc>

00009d16 <init_task_lists>:
    msg_queue_t msg_queue;
    task_state_t state;         /* States */
};

static void init_task_lists(void)
{
    9d16:	1101                	addi	sp,sp,-32
    9d18:	ce06                	sw	ra,28(sp)
    9d1a:	cc22                	sw	s0,24(sp)
    9d1c:	1000                	addi	s0,sp,32
    /* Initialize lists */
    uint8_t prio;
    for (prio = 0; prio < OS_CFG_PRIO_MAX; prio++)
    9d1e:	fe0407a3          	sb	zero,-17(s0)
    9d22:	a025                	j	9d4a <init_task_lists+0x34>
    {
        os_list_init(&(rdy_task_list[prio]));
    9d24:	fef44703          	lbu	a4,-17(s0)
    9d28:	87ba                	mv	a5,a4
    9d2a:	078e                	slli	a5,a5,0x3
    9d2c:	8f99                	sub	a5,a5,a4
    9d2e:	078a                	slli	a5,a5,0x2
    9d30:	20002737          	lui	a4,0x20002
    9d34:	98470713          	addi	a4,a4,-1660 # 20001984 <rdy_task_list>
    9d38:	97ba                	add	a5,a5,a4
    9d3a:	853e                	mv	a0,a5
    9d3c:	8f6ff0ef          	jal	ra,8e32 <os_list_init>
    for (prio = 0; prio < OS_CFG_PRIO_MAX; prio++)
    9d40:	fef44783          	lbu	a5,-17(s0)
    9d44:	0785                	addi	a5,a5,1
    9d46:	fef407a3          	sb	a5,-17(s0)
    9d4a:	fef44703          	lbu	a4,-17(s0)
    9d4e:	479d                	li	a5,7
    9d50:	fce7fae3          	bgeu	a5,a4,9d24 <init_task_lists+0xe>
    }
    os_list_init(&dly_task_list_1);
    9d54:	200027b7          	lui	a5,0x20002
    9d58:	a6478513          	addi	a0,a5,-1436 # 20001a64 <dly_task_list_1>
    9d5c:	8d6ff0ef          	jal	ra,8e32 <os_list_init>
    os_list_init(&dly_task_list_2);
    9d60:	200027b7          	lui	a5,0x20002
    9d64:	a8078513          	addi	a0,a5,-1408 # 20001a80 <dly_task_list_2>
    9d68:	8caff0ef          	jal	ra,8e32 <os_list_init>
    os_list_init(&suspended_task_list);
    9d6c:	200027b7          	lui	a5,0x20002
    9d70:	aa478513          	addi	a0,a5,-1372 # 20001aa4 <suspended_task_list>
    9d74:	8beff0ef          	jal	ra,8e32 <os_list_init>
    dly_task_list_ptr = &dly_task_list_1;
    9d78:	200027b7          	lui	a5,0x20002
    9d7c:	20002737          	lui	a4,0x20002
    9d80:	a6470713          	addi	a4,a4,-1436 # 20001a64 <dly_task_list_1>
    9d84:	a8e7ae23          	sw	a4,-1380(a5) # 20001a9c <dly_task_list_ptr>
    overflow_dly_task_list_ptr = &dly_task_list_2;
    9d88:	200027b7          	lui	a5,0x20002
    9d8c:	20002737          	lui	a4,0x20002
    9d90:	a8070713          	addi	a4,a4,-1408 # 20001a80 <dly_task_list_2>
    9d94:	aae7a023          	sw	a4,-1376(a5) # 20001aa0 <overflow_dly_task_list_ptr>
    /********************/
}
    9d98:	0001                	nop
    9d9a:	40f2                	lw	ra,28(sp)
    9d9c:	4462                	lw	s0,24(sp)
    9d9e:	6105                	addi	sp,sp,32
    9da0:	8082                	ret

00009da2 <task_switch_delay_lists>:

static void task_switch_delay_lists()
{
    9da2:	1101                	addi	sp,sp,-32
    9da4:	ce22                	sw	s0,28(sp)
    9da6:	1000                	addi	s0,sp,32
    list_t *p_list_temp;
    p_list_temp = dly_task_list_ptr;
    9da8:	200027b7          	lui	a5,0x20002
    9dac:	a9c7a783          	lw	a5,-1380(a5) # 20001a9c <dly_task_list_ptr>
    9db0:	fef42623          	sw	a5,-20(s0)
    dly_task_list_ptr = overflow_dly_task_list_ptr;
    9db4:	200027b7          	lui	a5,0x20002
    9db8:	aa07a703          	lw	a4,-1376(a5) # 20001aa0 <overflow_dly_task_list_ptr>
    9dbc:	200027b7          	lui	a5,0x20002
    9dc0:	a8e7ae23          	sw	a4,-1380(a5) # 20001a9c <dly_task_list_ptr>
    overflow_dly_task_list_ptr = p_list_temp;
    9dc4:	200027b7          	lui	a5,0x20002
    9dc8:	fec42703          	lw	a4,-20(s0)
    9dcc:	aae7a023          	sw	a4,-1376(a5) # 20001aa0 <overflow_dly_task_list_ptr>

    if (list_is_empty(dly_task_list_ptr) == OS_TRUE)
    9dd0:	200027b7          	lui	a5,0x20002
    9dd4:	a9c7a783          	lw	a5,-1380(a5) # 20001a9c <dly_task_list_ptr>
    9dd8:	0187d783          	lhu	a5,24(a5)
    9ddc:	e789                	bnez	a5,9de6 <task_switch_delay_lists+0x44>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        next_tick_to_unblock = OS_CFG_DELAY_MAX;
    9dde:	577d                	li	a4,-1
    9de0:	80e1aa23          	sw	a4,-2028(gp) # 20000034 <next_tick_to_unblock>
         * from the Blocked state. */
        task_tcb_t *p_tcb = list_get_owner_of_head_item(dly_task_list_ptr);
        uint32_t item_value = list_item_get_value(&(p_tcb->state_list_item));
        next_tick_to_unblock = item_value;
    }
}
    9de4:	a015                	j	9e08 <task_switch_delay_lists+0x66>
        task_tcb_t *p_tcb = list_get_owner_of_head_item(dly_task_list_ptr);
    9de6:	200027b7          	lui	a5,0x20002
    9dea:	a9c7a783          	lw	a5,-1380(a5) # 20001a9c <dly_task_list_ptr>
    9dee:	43dc                	lw	a5,4(a5)
    9df0:	47dc                	lw	a5,12(a5)
    9df2:	fef42423          	sw	a5,-24(s0)
        uint32_t item_value = list_item_get_value(&(p_tcb->state_list_item));
    9df6:	fe842783          	lw	a5,-24(s0)
    9dfa:	47dc                	lw	a5,12(a5)
    9dfc:	fef42223          	sw	a5,-28(s0)
        next_tick_to_unblock = item_value;
    9e00:	fe442703          	lw	a4,-28(s0)
    9e04:	80e1aa23          	sw	a4,-2028(gp) # 20000034 <next_tick_to_unblock>
}
    9e08:	0001                	nop
    9e0a:	4472                	lw	s0,28(sp)
    9e0c:	6105                	addi	sp,sp,32
    9e0e:	8082                	ret

00009e10 <add_new_task_to_rdy_list>:

static void add_new_task_to_rdy_list(task_tcb_t *p_tcb)
{
    9e10:	1101                	addi	sp,sp,-32
    9e12:	ce06                	sw	ra,28(sp)
    9e14:	cc22                	sw	s0,24(sp)
    9e16:	1000                	addi	s0,sp,32
    9e18:	fea42623          	sw	a0,-20(s0)
    ENTER_CRITICAL();
    9e1c:	f7bfe0ef          	jal	ra,8d96 <os_critical_enter>
    {
        num_of_tasks++;
    9e20:	200027b7          	lui	a5,0x20002
    9e24:	ac07d783          	lhu	a5,-1344(a5) # 20001ac0 <num_of_tasks>
    9e28:	07c2                	slli	a5,a5,0x10
    9e2a:	83c1                	srli	a5,a5,0x10
    9e2c:	0785                	addi	a5,a5,1
    9e2e:	01079713          	slli	a4,a5,0x10
    9e32:	8341                	srli	a4,a4,0x10
    9e34:	200027b7          	lui	a5,0x20002
    9e38:	ace79023          	sh	a4,-1344(a5) # 20001ac0 <num_of_tasks>
        if (num_of_tasks == 1)
    9e3c:	200027b7          	lui	a5,0x20002
    9e40:	ac07d783          	lhu	a5,-1344(a5) # 20001ac0 <num_of_tasks>
    9e44:	01079713          	slli	a4,a5,0x10
    9e48:	8341                	srli	a4,a4,0x10
    9e4a:	4785                	li	a5,1
    9e4c:	00f71a63          	bne	a4,a5,9e60 <add_new_task_to_rdy_list+0x50>
        {
            init_task_lists();
    9e50:	35d9                	jal	9d16 <init_task_lists>
            tcb_curr_ptr = p_tcb;
    9e52:	200027b7          	lui	a5,0x20002
    9e56:	fec42703          	lw	a4,-20(s0)
    9e5a:	cae7a623          	sw	a4,-852(a5) # 20001cac <tcb_curr_ptr>
    9e5e:	a01d                	j	9e84 <add_new_task_to_rdy_list+0x74>
        }
        else
        {
            if (tcb_curr_ptr->prio <= p_tcb->prio)
    9e60:	200027b7          	lui	a5,0x20002
    9e64:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    9e68:	02c7c703          	lbu	a4,44(a5)
    9e6c:	fec42783          	lw	a5,-20(s0)
    9e70:	02c7c783          	lbu	a5,44(a5)
    9e74:	00e7e863          	bltu	a5,a4,9e84 <add_new_task_to_rdy_list+0x74>
            {
                tcb_curr_ptr = p_tcb;
    9e78:	200027b7          	lui	a5,0x20002
    9e7c:	fec42703          	lw	a4,-20(s0)
    9e80:	cae7a623          	sw	a4,-852(a5) # 20001cac <tcb_curr_ptr>
            }
        }
        os_list_insert_end(&(rdy_task_list[p_tcb->prio]), &((p_tcb)->state_list_item));
    9e84:	fec42783          	lw	a5,-20(s0)
    9e88:	02c7c783          	lbu	a5,44(a5)
    9e8c:	873e                	mv	a4,a5
    9e8e:	87ba                	mv	a5,a4
    9e90:	078e                	slli	a5,a5,0x3
    9e92:	8f99                	sub	a5,a5,a4
    9e94:	078a                	slli	a5,a5,0x2
    9e96:	20002737          	lui	a4,0x20002
    9e9a:	98470713          	addi	a4,a4,-1660 # 20001984 <rdy_task_list>
    9e9e:	973e                	add	a4,a4,a5
    9ea0:	fec42783          	lw	a5,-20(s0)
    9ea4:	0791                	addi	a5,a5,4
    9ea6:	85be                	mv	a1,a5
    9ea8:	853a                	mv	a0,a4
    9eaa:	fe1fe0ef          	jal	ra,8e8a <os_list_insert_end>
        if (list_get_num_item(&(rdy_task_list[p_tcb->prio])) == 1u)
    9eae:	fec42783          	lw	a5,-20(s0)
    9eb2:	02c7c783          	lbu	a5,44(a5)
    9eb6:	86be                	mv	a3,a5
    9eb8:	200027b7          	lui	a5,0x20002
    9ebc:	98478713          	addi	a4,a5,-1660 # 20001984 <rdy_task_list>
    9ec0:	87b6                	mv	a5,a3
    9ec2:	078e                	slli	a5,a5,0x3
    9ec4:	8f95                	sub	a5,a5,a3
    9ec6:	078a                	slli	a5,a5,0x2
    9ec8:	97ba                	add	a5,a5,a4
    9eca:	0187d703          	lhu	a4,24(a5)
    9ece:	4785                	li	a5,1
    9ed0:	00f71863          	bne	a4,a5,9ee0 <add_new_task_to_rdy_list+0xd0>
        {
            os_prio_insert(p_tcb->prio);
    9ed4:	fec42783          	lw	a5,-20(s0)
    9ed8:	02c7c783          	lbu	a5,44(a5)
    9edc:	853e                	mv	a0,a5
    9ede:	39b5                	jal	9b5a <os_prio_insert>
        }
        /*Save state*/
        p_tcb->state = TASK_STATE_READY;
    9ee0:	fec42783          	lw	a5,-20(s0)
    9ee4:	4705                	li	a4,1
    9ee6:	c7b8                	sw	a4,72(a5)
    }
    EXIT_CRITICAL();
    9ee8:	edbfe0ef          	jal	ra,8dc2 <os_critical_exit>
}
    9eec:	0001                	nop
    9eee:	40f2                	lw	ra,28(sp)
    9ef0:	4462                	lw	s0,24(sp)
    9ef2:	6105                	addi	sp,sp,32
    9ef4:	8082                	ret

00009ef6 <add_task_to_rdy_list>:

static void add_task_to_rdy_list(task_tcb_t *p_tcb)
{
    9ef6:	1101                	addi	sp,sp,-32
    9ef8:	ce06                	sw	ra,28(sp)
    9efa:	cc22                	sw	s0,24(sp)
    9efc:	1000                	addi	s0,sp,32
    9efe:	fea42623          	sw	a0,-20(s0)
    os_list_insert_end(&(rdy_task_list[p_tcb->prio]), &((p_tcb)->state_list_item));
    9f02:	fec42783          	lw	a5,-20(s0)
    9f06:	02c7c783          	lbu	a5,44(a5)
    9f0a:	873e                	mv	a4,a5
    9f0c:	87ba                	mv	a5,a4
    9f0e:	078e                	slli	a5,a5,0x3
    9f10:	8f99                	sub	a5,a5,a4
    9f12:	078a                	slli	a5,a5,0x2
    9f14:	20002737          	lui	a4,0x20002
    9f18:	98470713          	addi	a4,a4,-1660 # 20001984 <rdy_task_list>
    9f1c:	973e                	add	a4,a4,a5
    9f1e:	fec42783          	lw	a5,-20(s0)
    9f22:	0791                	addi	a5,a5,4
    9f24:	85be                	mv	a1,a5
    9f26:	853a                	mv	a0,a4
    9f28:	f63fe0ef          	jal	ra,8e8a <os_list_insert_end>
    if (list_get_num_item(&(rdy_task_list[p_tcb->prio])) == 1u)
    9f2c:	fec42783          	lw	a5,-20(s0)
    9f30:	02c7c783          	lbu	a5,44(a5)
    9f34:	86be                	mv	a3,a5
    9f36:	200027b7          	lui	a5,0x20002
    9f3a:	98478713          	addi	a4,a5,-1660 # 20001984 <rdy_task_list>
    9f3e:	87b6                	mv	a5,a3
    9f40:	078e                	slli	a5,a5,0x3
    9f42:	8f95                	sub	a5,a5,a3
    9f44:	078a                	slli	a5,a5,0x2
    9f46:	97ba                	add	a5,a5,a4
    9f48:	0187d703          	lhu	a4,24(a5)
    9f4c:	4785                	li	a5,1
    9f4e:	00f71863          	bne	a4,a5,9f5e <add_task_to_rdy_list+0x68>
    {
        os_prio_insert(p_tcb->prio);
    9f52:	fec42783          	lw	a5,-20(s0)
    9f56:	02c7c783          	lbu	a5,44(a5)
    9f5a:	853e                	mv	a0,a5
    9f5c:	3efd                	jal	9b5a <os_prio_insert>
    }
    /*Save state*/
    p_tcb->state = TASK_STATE_READY;
    9f5e:	fec42783          	lw	a5,-20(s0)
    9f62:	4705                	li	a4,1
    9f64:	c7b8                	sw	a4,72(a5)
}
    9f66:	0001                	nop
    9f68:	40f2                	lw	ra,28(sp)
    9f6a:	4462                	lw	s0,24(sp)
    9f6c:	6105                	addi	sp,sp,32
    9f6e:	8082                	ret

00009f70 <add_curr_task_to_delay_list>:

static void add_curr_task_to_delay_list(uint32_t tick_to_delay, uint8_t can_block_indefinitely)
{
    9f70:	7179                	addi	sp,sp,-48
    9f72:	d606                	sw	ra,44(sp)
    9f74:	d422                	sw	s0,40(sp)
    9f76:	1800                	addi	s0,sp,48
    9f78:	fca42e23          	sw	a0,-36(s0)
    9f7c:	87ae                	mv	a5,a1
    9f7e:	fcf40da3          	sb	a5,-37(s0)
    uint32_t time_to_wake;
    const uint32_t const_tick = tick_count;
    9f82:	200027b7          	lui	a5,0x20002
    9f86:	ac47a783          	lw	a5,-1340(a5) # 20001ac4 <tick_count>
    9f8a:	fef42623          	sw	a5,-20(s0)
    if (os_list_remove(&(tcb_curr_ptr->state_list_item)) == 0u)
    9f8e:	200027b7          	lui	a5,0x20002
    9f92:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    9f96:	0791                	addi	a5,a5,4
    9f98:	853e                	mv	a0,a5
    9f9a:	8d0ff0ef          	jal	ra,906a <os_list_remove>
    9f9e:	87aa                	mv	a5,a0
    9fa0:	eb89                	bnez	a5,9fb2 <add_curr_task_to_delay_list+0x42>
    {
        os_prio_remove(tcb_curr_ptr->prio);
    9fa2:	200027b7          	lui	a5,0x20002
    9fa6:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    9faa:	02c7c783          	lbu	a5,44(a5)
    9fae:	853e                	mv	a0,a5
    9fb0:	3931                	jal	9bcc <os_prio_remove>
    }
    if ((tick_to_delay == OS_CFG_DELAY_MAX) && (can_block_indefinitely != OS_FALSE))
    9fb2:	fdc42703          	lw	a4,-36(s0)
    9fb6:	57fd                	li	a5,-1
    9fb8:	02f71863          	bne	a4,a5,9fe8 <add_curr_task_to_delay_list+0x78>
    9fbc:	fdb44783          	lbu	a5,-37(s0)
    9fc0:	c785                	beqz	a5,9fe8 <add_curr_task_to_delay_list+0x78>
    {
        /* Add the task to the suspended task list instead of a delayed task
         * list to ensure it is not woken by a timing event.  It will block
         * indefinitely. */
        os_list_insert_end(&suspended_task_list, &(tcb_curr_ptr->state_list_item));
    9fc2:	200027b7          	lui	a5,0x20002
    9fc6:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    9fca:	0791                	addi	a5,a5,4
    9fcc:	85be                	mv	a1,a5
    9fce:	200027b7          	lui	a5,0x20002
    9fd2:	aa478513          	addi	a0,a5,-1372 # 20001aa4 <suspended_task_list>
    9fd6:	eb5fe0ef          	jal	ra,8e8a <os_list_insert_end>
        /*Save state*/
        tcb_curr_ptr->state = TASK_STATE_SUSPENDED;
    9fda:	200027b7          	lui	a5,0x20002
    9fde:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    9fe2:	470d                	li	a4,3
    9fe4:	c7b8                	sw	a4,72(a5)
    9fe6:	a041                	j	a066 <add_curr_task_to_delay_list+0xf6>
    }
    else
    {
        time_to_wake = const_tick + tick_to_delay;
    9fe8:	fec42703          	lw	a4,-20(s0)
    9fec:	fdc42783          	lw	a5,-36(s0)
    9ff0:	97ba                	add	a5,a5,a4
    9ff2:	fef42423          	sw	a5,-24(s0)
        list_item_set_value(&(tcb_curr_ptr->state_list_item), time_to_wake);
    9ff6:	200027b7          	lui	a5,0x20002
    9ffa:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    9ffe:	fe842703          	lw	a4,-24(s0)
    a002:	c7d8                	sw	a4,12(a5)

        if (time_to_wake < const_tick)
    a004:	fe842703          	lw	a4,-24(s0)
    a008:	fec42783          	lw	a5,-20(s0)
    a00c:	02f77063          	bgeu	a4,a5,a02c <add_curr_task_to_delay_list+0xbc>
        {
            /* Wake time has overflowed.  Place this item in the overflow
             * list. */
            os_list_insert(overflow_dly_task_list_ptr, &(tcb_curr_ptr->state_list_item));
    a010:	200027b7          	lui	a5,0x20002
    a014:	aa07a703          	lw	a4,-1376(a5) # 20001aa0 <overflow_dly_task_list_ptr>
    a018:	200027b7          	lui	a5,0x20002
    a01c:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    a020:	0791                	addi	a5,a5,4
    a022:	85be                	mv	a1,a5
    a024:	853a                	mv	a0,a4
    a026:	f81fe0ef          	jal	ra,8fa6 <os_list_insert>
    a02a:	a805                	j	a05a <add_curr_task_to_delay_list+0xea>
        }
        else
        {
            /* The wake time has not overflowed, so the current block list
             * is used. */
            os_list_insert(dly_task_list_ptr, &(tcb_curr_ptr->state_list_item));
    a02c:	200027b7          	lui	a5,0x20002
    a030:	a9c7a703          	lw	a4,-1380(a5) # 20001a9c <dly_task_list_ptr>
    a034:	200027b7          	lui	a5,0x20002
    a038:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    a03c:	0791                	addi	a5,a5,4
    a03e:	85be                	mv	a1,a5
    a040:	853a                	mv	a0,a4
    a042:	f65fe0ef          	jal	ra,8fa6 <os_list_insert>

            /*Update next tick to block is important in order scheduler not to miss this stamp
            Just update next tick to block in this branch because overflow delay is just the background list
            */

            if (time_to_wake < next_tick_to_unblock)
    a046:	8141a783          	lw	a5,-2028(gp) # 20000034 <next_tick_to_unblock>
    a04a:	fe842703          	lw	a4,-24(s0)
    a04e:	00f77663          	bgeu	a4,a5,a05a <add_curr_task_to_delay_list+0xea>
            {
                next_tick_to_unblock = time_to_wake;
    a052:	fe842703          	lw	a4,-24(s0)
    a056:	80e1aa23          	sw	a4,-2028(gp) # 20000034 <next_tick_to_unblock>
            }
        }
        /*Save state*/
        tcb_curr_ptr->state = TASK_STATE_DELAYED;
    a05a:	200027b7          	lui	a5,0x20002
    a05e:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    a062:	4709                	li	a4,2
    a064:	c7b8                	sw	a4,72(a5)
    }
    uint8_t highest_prio = os_prio_get_highest();
    a066:	36c5                	jal	9c46 <os_prio_get_highest>
    a068:	87aa                	mv	a5,a0
    a06a:	fef403a3          	sb	a5,-25(s0)
    tcb_high_rdy_ptr = list_get_owner_of_head_item(&(rdy_task_list[highest_prio]));
    a06e:	fe744703          	lbu	a4,-25(s0)
    a072:	200027b7          	lui	a5,0x20002
    a076:	98478693          	addi	a3,a5,-1660 # 20001984 <rdy_task_list>
    a07a:	87ba                	mv	a5,a4
    a07c:	078e                	slli	a5,a5,0x3
    a07e:	8f99                	sub	a5,a5,a4
    a080:	078a                	slli	a5,a5,0x2
    a082:	97b6                	add	a5,a5,a3
    a084:	43dc                	lw	a5,4(a5)
    a086:	47d8                	lw	a4,12(a5)
    a088:	200027b7          	lui	a5,0x20002
    a08c:	cae7a423          	sw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>

    /*Save state*/
    tcb_high_rdy_ptr->state = TASK_STATE_RUNNING;
    a090:	200027b7          	lui	a5,0x20002
    a094:	ca87a783          	lw	a5,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
    a098:	0407a423          	sw	zero,72(a5)
}
    a09c:	0001                	nop
    a09e:	50b2                	lw	ra,44(sp)
    a0a0:	5422                	lw	s0,40(sp)
    a0a2:	6145                	addi	sp,sp,48
    a0a4:	8082                	ret

0000a0a6 <os_task_check_for_stack_overflow>:


void os_task_check_for_stack_overflow(void)
{
    a0a6:	1141                	addi	sp,sp,-16
    a0a8:	c622                	sw	s0,12(sp)
    a0aa:	0800                	addi	s0,sp,16
        {
            os_hook_stack_overflow(tcb_curr_ptr->id, i);
        }
    }  
#endif 
}
    a0ac:	0001                	nop
    a0ae:	4432                	lw	s0,12(sp)
    a0b0:	0141                	addi	sp,sp,16
    a0b2:	8082                	ret

0000a0b4 <os_task_create>:
                                  task_func_t pf_task,
                                  void *p_arg,
                                  uint8_t prio,
                                  size_t queue_size,
                                  size_t stack_size)
{
    a0b4:	7139                	addi	sp,sp,-64
    a0b6:	de06                	sw	ra,60(sp)
    a0b8:	dc22                	sw	s0,56(sp)
    a0ba:	0080                	addi	s0,sp,64
    a0bc:	fcb42c23          	sw	a1,-40(s0)
    a0c0:	fcc42a23          	sw	a2,-44(s0)
    a0c4:	fce42823          	sw	a4,-48(s0)
    a0c8:	fcf42623          	sw	a5,-52(s0)
    a0cc:	87aa                	mv	a5,a0
    a0ce:	fcf40fa3          	sb	a5,-33(s0)
    a0d2:	87b6                	mv	a5,a3
    a0d4:	fcf40f23          	sb	a5,-34(s0)
    if (sched_is_running == OS_TRUE)
    a0d8:	200027b7          	lui	a5,0x20002
    a0dc:	acc7c783          	lbu	a5,-1332(a5) # 20001acc <sched_is_running>
    a0e0:	0ff7f713          	andi	a4,a5,255
    a0e4:	4785                	li	a5,1
    a0e6:	02f71163          	bne	a4,a5,a108 <os_task_create+0x54>
    {
        // OSUniversalError = OS_ERR_SCHED_IS_RUNNING;
        os_assert(0, "OS_ERR_SCHED_IS_RUNNING");
    a0ea:	67bd                	lui	a5,0xf
    a0ec:	cf478693          	addi	a3,a5,-780 # ecf4 <strlen+0x31c>
    a0f0:	11800613          	li	a2,280
    a0f4:	67bd                	lui	a5,0xf
    a0f6:	d0c78593          	addi	a1,a5,-756 # ed0c <strlen+0x334>
    a0fa:	67bd                	lui	a5,0xf
    a0fc:	d2c78513          	addi	a0,a5,-724 # ed2c <strlen+0x354>
    a100:	68f010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    a104:	4781                	li	a5,0
    a106:	a275                	j	a2b2 <os_task_create+0x1fe>
    }
    if (prio > (OS_CFG_PRIO_MAX - 1U))
    a108:	fde44703          	lbu	a4,-34(s0)
    a10c:	479d                	li	a5,7
    a10e:	02e7f163          	bgeu	a5,a4,a130 <os_task_create+0x7c>
    {
        // OSUniversalError = OS_ERR_TCB_PRIO_INVALID;
        os_assert(0, "OS_ERR_TCB_PRIO_INVALID");
    a112:	67bd                	lui	a5,0xf
    a114:	d5478693          	addi	a3,a5,-684 # ed54 <strlen+0x37c>
    a118:	11e00613          	li	a2,286
    a11c:	67bd                	lui	a5,0xf
    a11e:	d0c78593          	addi	a1,a5,-756 # ed0c <strlen+0x334>
    a122:	67bd                	lui	a5,0xf
    a124:	d2c78513          	addi	a0,a5,-724 # ed2c <strlen+0x354>
    a128:	667010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    a12c:	4781                	li	a5,0
    a12e:	a251                	j	a2b2 <os_task_create+0x1fe>
    }
    if (pf_task == NULL)
    a130:	fd842783          	lw	a5,-40(s0)
    a134:	e385                	bnez	a5,a154 <os_task_create+0xa0>
    {
        // OSUniversalError = OS_ERR_TCB_FUNC_INVALID;
        os_assert(0, "OS_ERR_TCB_FUNC_INVALID");
    a136:	67bd                	lui	a5,0xf
    a138:	d6c78693          	addi	a3,a5,-660 # ed6c <strlen+0x394>
    a13c:	12400613          	li	a2,292
    a140:	67bd                	lui	a5,0xf
    a142:	d0c78593          	addi	a1,a5,-756 # ed0c <strlen+0x334>
    a146:	67bd                	lui	a5,0xf
    a148:	d2c78513          	addi	a0,a5,-724 # ed2c <strlen+0x354>
    a14c:	643010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    a150:	4781                	li	a5,0
    a152:	a285                	j	a2b2 <os_task_create+0x1fe>
    }
    if (stack_size < OS_CFG_TASK_STK_SIZE_MIN)
    a154:	fcc42703          	lw	a4,-52(s0)
    a158:	47fd                	li	a5,31
    a15a:	02e7e163          	bltu	a5,a4,a17c <os_task_create+0xc8>
    {
        // OSUniversalError = OS_ERR_TCB_STK_SIZE_INVALID;
        os_assert(0, "OS_ERR_TCB_STK_SIZE_INVALID");
    a15e:	67bd                	lui	a5,0xf
    a160:	d8478693          	addi	a3,a5,-636 # ed84 <strlen+0x3ac>
    a164:	12a00613          	li	a2,298
    a168:	67bd                	lui	a5,0xf
    a16a:	d0c78593          	addi	a1,a5,-756 # ed0c <strlen+0x334>
    a16e:	67bd                	lui	a5,0xf
    a170:	d2c78513          	addi	a0,a5,-724 # ed2c <strlen+0x354>
    a174:	61b010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    a178:	4781                	li	a5,0
    a17a:	aa25                	j	a2b2 <os_task_create+0x1fe>
    

    task_tcb_t *p_new_tcb;
    uint32_t *p_stack;

    p_stack = os_mem_malloc(stack_size * sizeof(uint32_t));
    a17c:	fcc42783          	lw	a5,-52(s0)
    a180:	078a                	slli	a5,a5,0x2
    a182:	853e                	mv	a0,a5
    a184:	864ff0ef          	jal	ra,91e8 <os_mem_malloc>
    a188:	fea42623          	sw	a0,-20(s0)
    if (p_stack != NULL)
    a18c:	fec42783          	lw	a5,-20(s0)
    a190:	10078363          	beqz	a5,a296 <os_task_create+0x1e2>
    {
        p_new_tcb = (task_tcb_t *)os_mem_malloc(SIZE_OF_TCB);
    a194:	04c00513          	li	a0,76
    a198:	850ff0ef          	jal	ra,91e8 <os_mem_malloc>
    a19c:	fea42423          	sw	a0,-24(s0)
        if (p_new_tcb != NULL)
    a1a0:	fe842783          	lw	a5,-24(s0)
    a1a4:	c7f1                	beqz	a5,a270 <os_task_create+0x1bc>
        {
            memset((void *)p_new_tcb, 0x00, SIZE_OF_TCB);
    a1a6:	04c00613          	li	a2,76
    a1aa:	4581                	li	a1,0
    a1ac:	fe842503          	lw	a0,-24(s0)
    a1b0:	262020ef          	jal	ra,c412 <memset>
    /* Fill the stack with a known value to assist debugging. */
    ( void ) memset( p_new_tcb->stk_limit_ptr, OS_CFG_TASK_STACK_FILL_BYTE, stack_size );
#endif

    /*Align stack frame*/
    p_stack_ptr = &p_stack[stack_size - (uint32_t)1];
    a1b4:	fcc42703          	lw	a4,-52(s0)
    a1b8:	400007b7          	lui	a5,0x40000
    a1bc:	17fd                	addi	a5,a5,-1
    a1be:	97ba                	add	a5,a5,a4
    a1c0:	078a                	slli	a5,a5,0x2
    a1c2:	fec42703          	lw	a4,-20(s0)
    a1c6:	97ba                	add	a5,a5,a4
    a1c8:	fef42223          	sw	a5,-28(s0)
    p_stack_ptr = (uint32_t *)(((uint32_t)p_stack_ptr) & (~((uint32_t)0x007))); /* Allign byte */
    a1cc:	fe442783          	lw	a5,-28(s0)
    a1d0:	9be1                	andi	a5,a5,-8
    a1d2:	fef42223          	sw	a5,-28(s0)

    /* Init stack frame */
    p_stack_ptr = os_cpu_init_stk_frame(p_stack_ptr, pf_task, p_arg);
    a1d6:	fd442603          	lw	a2,-44(s0)
    a1da:	fd842583          	lw	a1,-40(s0)
    a1de:	fe442503          	lw	a0,-28(s0)
    a1e2:	a8dfe0ef          	jal	ra,8c6e <os_cpu_init_stk_frame>
    a1e6:	fea42223          	sw	a0,-28(s0)

    /*Save top of stack (Stack pointer)*/
    p_new_tcb->stk_ptr = p_stack_ptr;
    a1ea:	fe842783          	lw	a5,-24(s0)
    a1ee:	fe442703          	lw	a4,-28(s0)
    a1f2:	c398                	sw	a4,0(a5)

    /*Save stack size*/
    p_new_tcb->stk_size = stack_size;
    a1f4:	fe842783          	lw	a5,-24(s0)
    a1f8:	fcc42703          	lw	a4,-52(s0)
    a1fc:	db98                	sw	a4,48(a5)

    /*Save ID*/
    p_new_tcb->id = id;
    a1fe:	fe842783          	lw	a5,-24(s0)
    a202:	fdf44703          	lbu	a4,-33(s0)
    a206:	02e78c23          	sb	a4,56(a5) # 40000038 <_eusrstack+0x1fffc038>

    /*Save prio*/
    p_new_tcb->prio = prio;
    a20a:	fe842783          	lw	a5,-24(s0)
    a20e:	fde44703          	lbu	a4,-34(s0)
    a212:	02e78623          	sb	a4,44(a5)
    // os_prio_insert(prio);

    os_msg_queue_init(&(p_new_tcb->msg_queue), queue_size);
    a216:	fe842783          	lw	a5,-24(s0)
    a21a:	03c78793          	addi	a5,a5,60
    a21e:	fd042703          	lw	a4,-48(s0)
    a222:	0ff77713          	andi	a4,a4,255
    a226:	85ba                	mv	a1,a4
    a228:	853e                	mv	a0,a5
    a22a:	ce0ff0ef          	jal	ra,970a <os_msg_queue_init>

    /* Init linked lists */
    os_list_item_init(&(p_new_tcb->state_list_item));
    a22e:	fe842783          	lw	a5,-24(s0)
    a232:	0791                	addi	a5,a5,4
    a234:	853e                	mv	a0,a5
    a236:	c3bfe0ef          	jal	ra,8e70 <os_list_item_init>
    os_list_item_init(&(p_new_tcb->event_list_item));
    a23a:	fe842783          	lw	a5,-24(s0)
    a23e:	07e1                	addi	a5,a5,24
    a240:	853e                	mv	a0,a5
    a242:	c2ffe0ef          	jal	ra,8e70 <os_list_item_init>

    list_item_set_owner(&(p_new_tcb->state_list_item), (void *)p_new_tcb);
    a246:	fe842783          	lw	a5,-24(s0)
    a24a:	fe842703          	lw	a4,-24(s0)
    a24e:	cb98                	sw	a4,16(a5)
    list_item_set_owner(&(p_new_tcb->event_list_item), (void *)p_new_tcb);
    a250:	fe842783          	lw	a5,-24(s0)
    a254:	fe842703          	lw	a4,-24(s0)
    a258:	d3d8                	sw	a4,36(a5)

    list_item_set_value(&(p_new_tcb->state_list_item), prio);
    a25a:	fde44703          	lbu	a4,-34(s0)
    a25e:	fe842783          	lw	a5,-24(s0)
    a262:	c7d8                	sw	a4,12(a5)

    add_new_task_to_rdy_list(p_new_tcb);
    a264:	fe842503          	lw	a0,-24(s0)
    a268:	3665                	jal	9e10 <add_new_task_to_rdy_list>

    return p_new_tcb;
    a26a:	fe842783          	lw	a5,-24(s0)
    a26e:	a091                	j	a2b2 <os_task_create+0x1fe>
            os_mem_free(p_stack);
    a270:	fec42503          	lw	a0,-20(s0)
    a274:	99aff0ef          	jal	ra,940e <os_mem_free>
            os_assert(0, "OS_ERR_TCB_NOT_ENOUGH_MEM_ALLOC");
    a278:	67bd                	lui	a5,0xf
    a27a:	da078693          	addi	a3,a5,-608 # eda0 <strlen+0x3c8>
    a27e:	14300613          	li	a2,323
    a282:	67bd                	lui	a5,0xf
    a284:	d0c78593          	addi	a1,a5,-756 # ed0c <strlen+0x334>
    a288:	67bd                	lui	a5,0xf
    a28a:	d2c78513          	addi	a0,a5,-724 # ed2c <strlen+0x354>
    a28e:	501010ef          	jal	ra,bf8e <xprintf>
            return NULL;
    a292:	4781                	li	a5,0
    a294:	a839                	j	a2b2 <os_task_create+0x1fe>
        os_assert(0, "OS_ERR_TCB_NOT_ENOUGH_MEM_ALLOC");
    a296:	67bd                	lui	a5,0xf
    a298:	da078693          	addi	a3,a5,-608 # eda0 <strlen+0x3c8>
    a29c:	14a00613          	li	a2,330
    a2a0:	67bd                	lui	a5,0xf
    a2a2:	d0c78593          	addi	a1,a5,-756 # ed0c <strlen+0x334>
    a2a6:	67bd                	lui	a5,0xf
    a2a8:	d2c78513          	addi	a0,a5,-724 # ed2c <strlen+0x354>
    a2ac:	4e3010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    a2b0:	4781                	li	a5,0
}
    a2b2:	853e                	mv	a0,a5
    a2b4:	50f2                	lw	ra,60(sp)
    a2b6:	5462                	lw	s0,56(sp)
    a2b8:	6121                	addi	sp,sp,64
    a2ba:	8082                	ret

0000a2bc <os_task_create_list>:

void os_task_create_list(task_t *task_tbl, uint8_t size)
{
    a2bc:	7179                	addi	sp,sp,-48
    a2be:	d606                	sw	ra,44(sp)
    a2c0:	d422                	sw	s0,40(sp)
    a2c2:	1800                	addi	s0,sp,48
    a2c4:	fca42e23          	sw	a0,-36(s0)
    a2c8:	87ae                	mv	a5,a1
    a2ca:	fcf40da3          	sb	a5,-37(s0)
    /* Keep system safe when the first stack is overflown */
    /* Then , the system will throw exception in function hook*/
#if OS_CFG_CHECK_FOR_STK_OVERFLOW == 1u
    os_mem_malloc(PADDING_FOR_SAFETY * sizeof(uint32_t));
#endif
    uint8_t idx = 0;
    a2ce:	fe0407a3          	sb	zero,-17(s0)
    task_tcb_t *p_tcb;
    while (idx < size)
    a2d2:	a0e9                	j	a39c <os_task_create_list+0xe0>
    {
        p_tcb = os_task_create((task_id_t)task_tbl[idx].id,
    a2d4:	fef44703          	lbu	a4,-17(s0)
    a2d8:	87ba                	mv	a5,a4
    a2da:	0786                	slli	a5,a5,0x1
    a2dc:	97ba                	add	a5,a5,a4
    a2de:	078e                	slli	a5,a5,0x3
    a2e0:	873e                	mv	a4,a5
    a2e2:	fdc42783          	lw	a5,-36(s0)
    a2e6:	97ba                	add	a5,a5,a4
    a2e8:	0007c503          	lbu	a0,0(a5)
                               (task_func_t)task_tbl[idx].pf_task,
    a2ec:	fef44703          	lbu	a4,-17(s0)
    a2f0:	87ba                	mv	a5,a4
    a2f2:	0786                	slli	a5,a5,0x1
    a2f4:	97ba                	add	a5,a5,a4
    a2f6:	078e                	slli	a5,a5,0x3
    a2f8:	873e                	mv	a4,a5
    a2fa:	fdc42783          	lw	a5,-36(s0)
    a2fe:	97ba                	add	a5,a5,a4
    a300:	43cc                	lw	a1,4(a5)
                               (void *)task_tbl[idx].p_arg,
    a302:	fef44703          	lbu	a4,-17(s0)
    a306:	87ba                	mv	a5,a4
    a308:	0786                	slli	a5,a5,0x1
    a30a:	97ba                	add	a5,a5,a4
    a30c:	078e                	slli	a5,a5,0x3
    a30e:	873e                	mv	a4,a5
    a310:	fdc42783          	lw	a5,-36(s0)
    a314:	97ba                	add	a5,a5,a4
        p_tcb = os_task_create((task_id_t)task_tbl[idx].id,
    a316:	4790                	lw	a2,8(a5)
                               (uint8_t)task_tbl[idx].prio,
    a318:	fef44703          	lbu	a4,-17(s0)
    a31c:	87ba                	mv	a5,a4
    a31e:	0786                	slli	a5,a5,0x1
    a320:	97ba                	add	a5,a5,a4
    a322:	078e                	slli	a5,a5,0x3
    a324:	873e                	mv	a4,a5
    a326:	fdc42783          	lw	a5,-36(s0)
    a32a:	97ba                	add	a5,a5,a4
    a32c:	00c7c683          	lbu	a3,12(a5)
                               (size_t)task_tbl[idx].queue_size,
    a330:	fef44703          	lbu	a4,-17(s0)
    a334:	87ba                	mv	a5,a4
    a336:	0786                	slli	a5,a5,0x1
    a338:	97ba                	add	a5,a5,a4
    a33a:	078e                	slli	a5,a5,0x3
    a33c:	873e                	mv	a4,a5
    a33e:	fdc42783          	lw	a5,-36(s0)
    a342:	97ba                	add	a5,a5,a4
    a344:	0107a803          	lw	a6,16(a5)
                               (size_t)task_tbl[idx].stack_size);
    a348:	fef44703          	lbu	a4,-17(s0)
    a34c:	87ba                	mv	a5,a4
    a34e:	0786                	slli	a5,a5,0x1
    a350:	97ba                	add	a5,a5,a4
    a352:	078e                	slli	a5,a5,0x3
    a354:	873e                	mv	a4,a5
    a356:	fdc42783          	lw	a5,-36(s0)
    a35a:	97ba                	add	a5,a5,a4
    a35c:	4bdc                	lw	a5,20(a5)
        p_tcb = os_task_create((task_id_t)task_tbl[idx].id,
    a35e:	8742                	mv	a4,a6
    a360:	3b91                	jal	a0b4 <os_task_create>
    a362:	fea42423          	sw	a0,-24(s0)
        task_tcb_list[task_tbl[idx].id] = p_tcb;
    a366:	fef44703          	lbu	a4,-17(s0)
    a36a:	87ba                	mv	a5,a4
    a36c:	0786                	slli	a5,a5,0x1
    a36e:	97ba                	add	a5,a5,a4
    a370:	078e                	slli	a5,a5,0x3
    a372:	873e                	mv	a4,a5
    a374:	fdc42783          	lw	a5,-36(s0)
    a378:	97ba                	add	a5,a5,a4
    a37a:	0007c783          	lbu	a5,0(a5)
    a37e:	873e                	mv	a4,a5
    a380:	200027b7          	lui	a5,0x20002
    a384:	070a                	slli	a4,a4,0x2
    a386:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a38a:	97ba                	add	a5,a5,a4
    a38c:	fe842703          	lw	a4,-24(s0)
    a390:	c398                	sw	a4,0(a5)
        idx++;
    a392:	fef44783          	lbu	a5,-17(s0)
    a396:	0785                	addi	a5,a5,1
    a398:	fef407a3          	sb	a5,-17(s0)
    while (idx < size)
    a39c:	fef44703          	lbu	a4,-17(s0)
    a3a0:	fdb44783          	lbu	a5,-37(s0)
    a3a4:	f2f768e3          	bltu	a4,a5,a2d4 <os_task_create_list+0x18>
    }
    p_tcb = os_task_create((task_id_t)TASK_TIMER_ID,
    a3a8:	06400793          	li	a5,100
    a3ac:	4721                	li	a4,8
    a3ae:	4681                	li	a3,0
    a3b0:	4601                	li	a2,0
    a3b2:	0000a5b7          	lui	a1,0xa
    a3b6:	d0458593          	addi	a1,a1,-764 # 9d04 <task_timer_func>
    a3ba:	450d                	li	a0,3
    a3bc:	39e5                	jal	a0b4 <os_task_create>
    a3be:	fea42423          	sw	a0,-24(s0)
                           (task_func_t)task_timer_func,
                           (void *)NULL,
                           (uint8_t)TASK_TIMER_PRI,
                           (size_t)(OS_CFG_TASK_MSG_Q_SIZE_NORMAL),
                           (size_t)TASK_TIMER_STK_SIZE);
    task_tcb_list[TASK_TIMER_ID] = p_tcb;
    a3c2:	200027b7          	lui	a5,0x20002
    a3c6:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a3ca:	fe842703          	lw	a4,-24(s0)
    a3ce:	c7d8                	sw	a4,12(a5)
                           (size_t)(OS_CFG_TASK_MSG_Q_SIZE_NORMAL),
                           (size_t)TASK_CLI_STK_SIZE);
    task_tcb_list[TASK_CLI_ID] = p_tcb;
#endif

    p_tcb = os_task_create((task_id_t)TASK_IDLE_ID,
    a3d0:	02000793          	li	a5,32
    a3d4:	4701                	li	a4,0
    a3d6:	469d                	li	a3,7
    a3d8:	4601                	li	a2,0
    a3da:	0000a5b7          	lui	a1,0xa
    a3de:	cf858593          	addi	a1,a1,-776 # 9cf8 <task_idle_func>
    a3e2:	4511                	li	a0,4
    a3e4:	39c1                	jal	a0b4 <os_task_create>
    a3e6:	fea42423          	sw	a0,-24(s0)
                           (task_func_t)task_idle_func,
                           (void *)NULL,
                           (uint8_t)TASK_IDLE_PRI,
                           (size_t)(0u),
                           (size_t)OS_CFG_TASK_STK_SIZE_MIN);
    task_tcb_list[TASK_IDLE_ID] = p_tcb;
    a3ea:	200027b7          	lui	a5,0x20002
    a3ee:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a3f2:	fe842703          	lw	a4,-24(s0)
    a3f6:	cb98                	sw	a4,16(a5)
}
    a3f8:	0001                	nop
    a3fa:	50b2                	lw	ra,44(sp)
    a3fc:	5422                	lw	s0,40(sp)
    a3fe:	6145                	addi	sp,sp,48
    a400:	8082                	ret

0000a402 <os_task_increment_tick>:

uint8_t os_task_increment_tick(void)
{
    a402:	7179                	addi	sp,sp,-48
    a404:	d606                	sw	ra,44(sp)
    a406:	d422                	sw	s0,40(sp)
    a408:	1800                	addi	s0,sp,48
    uint8_t is_switch_needed = OS_FALSE;
    a40a:	fe0407a3          	sb	zero,-17(s0)
    task_tcb_t *p_tcb;
    uint32_t item_value;

    const uint32_t const_tick = tick_count + (uint32_t)1;
    a40e:	200027b7          	lui	a5,0x20002
    a412:	ac47a783          	lw	a5,-1340(a5) # 20001ac4 <tick_count>
    a416:	0785                	addi	a5,a5,1
    a418:	fef42423          	sw	a5,-24(s0)

    /* Increment the RTOS tick, switching the delayed and overflowed
     * delayed lists if it wraps to 0. */
    tick_count = const_tick;
    a41c:	200027b7          	lui	a5,0x20002
    a420:	fe842703          	lw	a4,-24(s0)
    a424:	ace7a223          	sw	a4,-1340(a5) # 20001ac4 <tick_count>

    if (const_tick == (uint32_t)0U) /* Overflowed, switch delaylist*/
    a428:	fe842783          	lw	a5,-24(s0)
    a42c:	e391                	bnez	a5,a430 <os_task_increment_tick+0x2e>
    {
        task_switch_delay_lists();
    a42e:	3a95                	jal	9da2 <task_switch_delay_lists>
    }

    if (const_tick >= next_tick_to_unblock)
    a430:	8141a783          	lw	a5,-2028(gp) # 20000034 <next_tick_to_unblock>
    a434:	fe842703          	lw	a4,-24(s0)
    a438:	08f76e63          	bltu	a4,a5,a4d4 <os_task_increment_tick+0xd2>
    {
        for (;;)
        {
            if (list_is_empty(dly_task_list_ptr) == OS_TRUE)
    a43c:	200027b7          	lui	a5,0x20002
    a440:	a9c7a783          	lw	a5,-1380(a5) # 20001a9c <dly_task_list_ptr>
    a444:	0187d783          	lhu	a5,24(a5)
    a448:	e789                	bnez	a5,a452 <os_task_increment_tick+0x50>
            {
                next_tick_to_unblock = OS_CFG_DELAY_MAX;
    a44a:	577d                	li	a4,-1
    a44c:	80e1aa23          	sw	a4,-2028(gp) # 20000034 <next_tick_to_unblock>
                break;
    a450:	a051                	j	a4d4 <os_task_increment_tick+0xd2>
            }
            else
            {
                p_tcb = list_get_owner_of_head_item(dly_task_list_ptr);
    a452:	200027b7          	lui	a5,0x20002
    a456:	a9c7a783          	lw	a5,-1380(a5) # 20001a9c <dly_task_list_ptr>
    a45a:	43dc                	lw	a5,4(a5)
    a45c:	47dc                	lw	a5,12(a5)
    a45e:	fef42223          	sw	a5,-28(s0)
                item_value = list_item_get_value(&(p_tcb->state_list_item));
    a462:	fe442783          	lw	a5,-28(s0)
    a466:	47dc                	lw	a5,12(a5)
    a468:	fef42023          	sw	a5,-32(s0)
                if (item_value > const_tick)
    a46c:	fe042703          	lw	a4,-32(s0)
    a470:	fe842783          	lw	a5,-24(s0)
    a474:	00e7f763          	bgeu	a5,a4,a482 <os_task_increment_tick+0x80>
                {
                    /* Stop condition */
                    next_tick_to_unblock = item_value;
    a478:	fe042703          	lw	a4,-32(s0)
    a47c:	80e1aa23          	sw	a4,-2028(gp) # 20000034 <next_tick_to_unblock>
                    break;
    a480:	a891                	j	a4d4 <os_task_increment_tick+0xd2>
                }
                os_list_remove(&(p_tcb->state_list_item)); /*Remove from block state*/
    a482:	fe442783          	lw	a5,-28(s0)
    a486:	0791                	addi	a5,a5,4
    a488:	853e                	mv	a0,a5
    a48a:	be1fe0ef          	jal	ra,906a <os_list_remove>

                /* Is the task waiting on an event also?  If so remove
                 * it from the event list. */
                if (list_item_get_list_contain(&(p_tcb->event_list_item)) != NULL)
    a48e:	fe442783          	lw	a5,-28(s0)
    a492:	579c                	lw	a5,40(a5)
    a494:	c799                	beqz	a5,a4a2 <os_task_increment_tick+0xa0>
                {
                    os_list_remove(&(p_tcb->event_list_item));
    a496:	fe442783          	lw	a5,-28(s0)
    a49a:	07e1                	addi	a5,a5,24
    a49c:	853e                	mv	a0,a5
    a49e:	bcdfe0ef          	jal	ra,906a <os_list_remove>
                }
                add_task_to_rdy_list(p_tcb);
    a4a2:	fe442503          	lw	a0,-28(s0)
    a4a6:	3c81                	jal	9ef6 <add_task_to_rdy_list>
                if (p_tcb->prio < tcb_curr_ptr->prio)
    a4a8:	fe442783          	lw	a5,-28(s0)
    a4ac:	02c7c703          	lbu	a4,44(a5)
    a4b0:	200027b7          	lui	a5,0x20002
    a4b4:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    a4b8:	02c7c783          	lbu	a5,44(a5)
    a4bc:	f8f770e3          	bgeu	a4,a5,a43c <os_task_increment_tick+0x3a>
                {
                    tcb_high_rdy_ptr = p_tcb;
    a4c0:	200027b7          	lui	a5,0x20002
    a4c4:	fe442703          	lw	a4,-28(s0)
    a4c8:	cae7a423          	sw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
                    is_switch_needed = OS_TRUE;
    a4cc:	4785                	li	a5,1
    a4ce:	fef407a3          	sb	a5,-17(s0)
            if (list_is_empty(dly_task_list_ptr) == OS_TRUE)
    a4d2:	b7ad                	j	a43c <os_task_increment_tick+0x3a>
                }
            }
        }
    }

    uint8_t highest_prio = os_prio_get_highest();
    a4d4:	f72ff0ef          	jal	ra,9c46 <os_prio_get_highest>
    a4d8:	87aa                	mv	a5,a0
    a4da:	fcf40fa3          	sb	a5,-33(s0)
    if (list_get_num_item(&(rdy_task_list[highest_prio])) > 1u)
    a4de:	fdf44703          	lbu	a4,-33(s0)
    a4e2:	200027b7          	lui	a5,0x20002
    a4e6:	98478693          	addi	a3,a5,-1660 # 20001984 <rdy_task_list>
    a4ea:	87ba                	mv	a5,a4
    a4ec:	078e                	slli	a5,a5,0x3
    a4ee:	8f99                	sub	a5,a5,a4
    a4f0:	078a                	slli	a5,a5,0x2
    a4f2:	97b6                	add	a5,a5,a3
    a4f4:	0187d703          	lhu	a4,24(a5)
    a4f8:	4785                	li	a5,1
    a4fa:	02e7f863          	bgeu	a5,a4,a52a <os_task_increment_tick+0x128>
    {
        tcb_high_rdy_ptr = list_get_owner_of_next_item(&(rdy_task_list[highest_prio]));
    a4fe:	fdf44703          	lbu	a4,-33(s0)
    a502:	87ba                	mv	a5,a4
    a504:	078e                	slli	a5,a5,0x3
    a506:	8f99                	sub	a5,a5,a4
    a508:	078a                	slli	a5,a5,0x2
    a50a:	20002737          	lui	a4,0x20002
    a50e:	98470713          	addi	a4,a4,-1660 # 20001984 <rdy_task_list>
    a512:	97ba                	add	a5,a5,a4
    a514:	853e                	mv	a0,a5
    a516:	bcffe0ef          	jal	ra,90e4 <list_get_owner_of_next_item>
    a51a:	872a                	mv	a4,a0
    a51c:	200027b7          	lui	a5,0x20002
    a520:	cae7a423          	sw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
        is_switch_needed = OS_TRUE;
    a524:	4785                	li	a5,1
    a526:	fef407a3          	sb	a5,-17(s0)
    }
    /*Save state*/
    if(is_switch_needed == OS_TRUE) tcb_high_rdy_ptr->state = TASK_STATE_RUNNING;
    a52a:	fef44703          	lbu	a4,-17(s0)
    a52e:	4785                	li	a5,1
    a530:	00f71863          	bne	a4,a5,a540 <os_task_increment_tick+0x13e>
    a534:	200027b7          	lui	a5,0x20002
    a538:	ca87a783          	lw	a5,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
    a53c:	0407a423          	sw	zero,72(a5)
    
    return is_switch_needed;
    a540:	fef44783          	lbu	a5,-17(s0)
}
    a544:	853e                	mv	a0,a5
    a546:	50b2                	lw	ra,44(sp)
    a548:	5422                	lw	s0,40(sp)
    a54a:	6145                	addi	sp,sp,48
    a54c:	8082                	ret

0000a54e <os_task_delay>:

void os_task_delay(const uint32_t tick_to_delay)
{
    a54e:	1101                	addi	sp,sp,-32
    a550:	ce06                	sw	ra,28(sp)
    a552:	cc22                	sw	s0,24(sp)
    a554:	1000                	addi	s0,sp,32
    a556:	fea42623          	sw	a0,-20(s0)
    if (tick_to_delay > (uint32_t)0U)
    a55a:	fec42783          	lw	a5,-20(s0)
    a55e:	c395                	beqz	a5,a582 <os_task_delay+0x34>
    {
        ENTER_CRITICAL();
    a560:	837fe0ef          	jal	ra,8d96 <os_critical_enter>
        add_curr_task_to_delay_list(tick_to_delay, OS_FALSE);
    a564:	4581                	li	a1,0
    a566:	fec42503          	lw	a0,-20(s0)
    a56a:	3419                	jal	9f70 <add_curr_task_to_delay_list>
        os_cpu_trigger_PendSV();
    a56c:	e000f7b7          	lui	a5,0xe000f
    a570:	4394                	lw	a3,0(a5)
    a572:	e000f7b7          	lui	a5,0xe000f
    a576:	80000737          	lui	a4,0x80000
    a57a:	8f55                	or	a4,a4,a3
    a57c:	c398                	sw	a4,0(a5)
        EXIT_CRITICAL();
    a57e:	845fe0ef          	jal	ra,8dc2 <os_critical_exit>
    }
}
    a582:	0001                	nop
    a584:	40f2                	lw	ra,28(sp)
    a586:	4462                	lw	s0,24(sp)
    a588:	6105                	addi	sp,sp,32
    a58a:	8082                	ret

0000a58c <os_task_start>:

void os_task_start(void)
{
    a58c:	1141                	addi	sp,sp,-16
    a58e:	c606                	sw	ra,12(sp)
    a590:	c422                	sw	s0,8(sp)
    a592:	0800                	addi	s0,sp,16
    tcb_high_rdy_ptr = list_get_owner_of_head_item(&(rdy_task_list[os_prio_get_highest()]));
    a594:	eb2ff0ef          	jal	ra,9c46 <os_prio_get_highest>
    a598:	86aa                	mv	a3,a0
    a59a:	200027b7          	lui	a5,0x20002
    a59e:	98478713          	addi	a4,a5,-1660 # 20001984 <rdy_task_list>
    a5a2:	87b6                	mv	a5,a3
    a5a4:	078e                	slli	a5,a5,0x3
    a5a6:	8f95                	sub	a5,a5,a3
    a5a8:	078a                	slli	a5,a5,0x2
    a5aa:	97ba                	add	a5,a5,a4
    a5ac:	43dc                	lw	a5,4(a5)
    a5ae:	47d8                	lw	a4,12(a5)
    a5b0:	200027b7          	lui	a5,0x20002
    a5b4:	cae7a423          	sw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
    tcb_curr_ptr = tcb_high_rdy_ptr;
    a5b8:	200027b7          	lui	a5,0x20002
    a5bc:	ca87a703          	lw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
    a5c0:	200027b7          	lui	a5,0x20002
    a5c4:	cae7a623          	sw	a4,-852(a5) # 20001cac <tcb_curr_ptr>
    tick_count = 0u;
    a5c8:	200027b7          	lui	a5,0x20002
    a5cc:	ac07a223          	sw	zero,-1340(a5) # 20001ac4 <tick_count>
    next_tick_to_unblock = OS_CFG_DELAY_MAX;
    a5d0:	577d                	li	a4,-1
    a5d2:	80e1aa23          	sw	a4,-2028(gp) # 20000034 <next_tick_to_unblock>
    sched_is_running = OS_TRUE;
    a5d6:	200027b7          	lui	a5,0x20002
    a5da:	4705                	li	a4,1
    a5dc:	ace78623          	sb	a4,-1332(a5) # 20001acc <sched_is_running>
}
    a5e0:	0001                	nop
    a5e2:	40b2                	lw	ra,12(sp)
    a5e4:	4422                	lw	s0,8(sp)
    a5e6:	0141                	addi	sp,sp,16
    a5e8:	8082                	ret

0000a5ea <os_task_post_msg_dynamic>:

void os_task_post_msg_dynamic(uint8_t des_task_id, int32_t sig, void *p_content, uint8_t msg_size)
{
    a5ea:	1101                	addi	sp,sp,-32
    a5ec:	ce06                	sw	ra,28(sp)
    a5ee:	cc22                	sw	s0,24(sp)
    a5f0:	1000                	addi	s0,sp,32
    a5f2:	87aa                	mv	a5,a0
    a5f4:	feb42423          	sw	a1,-24(s0)
    a5f8:	fec42223          	sw	a2,-28(s0)
    a5fc:	8736                	mv	a4,a3
    a5fe:	fef407a3          	sb	a5,-17(s0)
    a602:	87ba                	mv	a5,a4
    a604:	fef40723          	sb	a5,-18(s0)
    ENTER_CRITICAL();
    a608:	f8efe0ef          	jal	ra,8d96 <os_critical_enter>
    if (task_tcb_list[des_task_id] == tcb_curr_ptr)
    a60c:	fef44703          	lbu	a4,-17(s0)
    a610:	200027b7          	lui	a5,0x20002
    a614:	070a                	slli	a4,a4,0x2
    a616:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a61a:	97ba                	add	a5,a5,a4
    a61c:	4398                	lw	a4,0(a5)
    a61e:	200027b7          	lui	a5,0x20002
    a622:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    a626:	02f71263          	bne	a4,a5,a64a <os_task_post_msg_dynamic+0x60>
    {
        // OSUniversalError = OS_ERR_TASK_POST_MSG_TO_ITSELF;
        os_assert(0, "OS_ERR_TASK_POST_MSG_TO_ITSELF");
    a62a:	67bd                	lui	a5,0xf
    a62c:	dc078693          	addi	a3,a5,-576 # edc0 <strlen+0x3e8>
    a630:	20500613          	li	a2,517
    a634:	67bd                	lui	a5,0xf
    a636:	d0c78593          	addi	a1,a5,-756 # ed0c <strlen+0x334>
    a63a:	67bd                	lui	a5,0xf
    a63c:	d2c78513          	addi	a0,a5,-724 # ed2c <strlen+0x354>
    a640:	14f010ef          	jal	ra,bf8e <xprintf>
        EXIT_CRITICAL();
    a644:	f7efe0ef          	jal	ra,8dc2 <os_critical_exit>
        return;
    a648:	aafd                	j	a846 <os_task_post_msg_dynamic+0x25c>
    }

    switch (task_tcb_list[des_task_id]->state)
    a64a:	fef44703          	lbu	a4,-17(s0)
    a64e:	200027b7          	lui	a5,0x20002
    a652:	070a                	slli	a4,a4,0x2
    a654:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a658:	97ba                	add	a5,a5,a4
    a65a:	439c                	lw	a5,0(a5)
    a65c:	47bc                	lw	a5,72(a5)
    a65e:	4711                	li	a4,4
    a660:	00e78663          	beq	a5,a4,a66c <os_task_post_msg_dynamic+0x82>
    a664:	4715                	li	a4,5
    a666:	0ce78d63          	beq	a5,a4,a740 <os_task_post_msg_dynamic+0x156>
    a66a:	a275                	j	a816 <os_task_post_msg_dynamic+0x22c>
    {
    case TASK_STATE_SUSPENDED_ON_MSG:
        os_msg_queue_put_dynamic(&(task_tcb_list[des_task_id]->msg_queue),
    a66c:	fef44703          	lbu	a4,-17(s0)
    a670:	200027b7          	lui	a5,0x20002
    a674:	070a                	slli	a4,a4,0x2
    a676:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a67a:	97ba                	add	a5,a5,a4
    a67c:	439c                	lw	a5,0(a5)
    a67e:	03c78793          	addi	a5,a5,60
    a682:	fee44703          	lbu	a4,-18(s0)
    a686:	86ba                	mv	a3,a4
    a688:	fe442603          	lw	a2,-28(s0)
    a68c:	fe842583          	lw	a1,-24(s0)
    a690:	853e                	mv	a0,a5
    a692:	8b4ff0ef          	jal	ra,9746 <os_msg_queue_put_dynamic>
                                 p_content,
                                 msg_size);

        /* Is the task waiting on an event ?  If so remove
         * it from the event list. */
        if (list_item_get_list_contain(&(task_tcb_list[des_task_id]->event_list_item)) != NULL)
    a696:	fef44703          	lbu	a4,-17(s0)
    a69a:	200027b7          	lui	a5,0x20002
    a69e:	070a                	slli	a4,a4,0x2
    a6a0:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a6a4:	97ba                	add	a5,a5,a4
    a6a6:	439c                	lw	a5,0(a5)
    a6a8:	579c                	lw	a5,40(a5)
    a6aa:	cf91                	beqz	a5,a6c6 <os_task_post_msg_dynamic+0xdc>
        {
            os_list_remove(&(task_tcb_list[des_task_id]->event_list_item));
    a6ac:	fef44703          	lbu	a4,-17(s0)
    a6b0:	200027b7          	lui	a5,0x20002
    a6b4:	070a                	slli	a4,a4,0x2
    a6b6:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a6ba:	97ba                	add	a5,a5,a4
    a6bc:	439c                	lw	a5,0(a5)
    a6be:	07e1                	addi	a5,a5,24
    a6c0:	853e                	mv	a0,a5
    a6c2:	9a9fe0ef          	jal	ra,906a <os_list_remove>
        }
        add_task_to_rdy_list(task_tcb_list[des_task_id]);
    a6c6:	fef44703          	lbu	a4,-17(s0)
    a6ca:	200027b7          	lui	a5,0x20002
    a6ce:	070a                	slli	a4,a4,0x2
    a6d0:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a6d4:	97ba                	add	a5,a5,a4
    a6d6:	439c                	lw	a5,0(a5)
    a6d8:	853e                	mv	a0,a5
    a6da:	3831                	jal	9ef6 <add_task_to_rdy_list>
        if (task_tcb_list[des_task_id]->prio < tcb_curr_ptr->prio)
    a6dc:	fef44703          	lbu	a4,-17(s0)
    a6e0:	200027b7          	lui	a5,0x20002
    a6e4:	070a                	slli	a4,a4,0x2
    a6e6:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a6ea:	97ba                	add	a5,a5,a4
    a6ec:	439c                	lw	a5,0(a5)
    a6ee:	02c7c703          	lbu	a4,44(a5)
    a6f2:	200027b7          	lui	a5,0x20002
    a6f6:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    a6fa:	02c7c783          	lbu	a5,44(a5)
    a6fe:	02f77e63          	bgeu	a4,a5,a73a <os_task_post_msg_dynamic+0x150>
        {
            tcb_high_rdy_ptr = task_tcb_list[des_task_id];
    a702:	fef44703          	lbu	a4,-17(s0)
    a706:	200027b7          	lui	a5,0x20002
    a70a:	070a                	slli	a4,a4,0x2
    a70c:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a710:	97ba                	add	a5,a5,a4
    a712:	4398                	lw	a4,0(a5)
    a714:	200027b7          	lui	a5,0x20002
    a718:	cae7a423          	sw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>

            /*Save state*/
            tcb_high_rdy_ptr->state = TASK_STATE_RUNNING;
    a71c:	200027b7          	lui	a5,0x20002
    a720:	ca87a783          	lw	a5,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
    a724:	0407a423          	sw	zero,72(a5)

            os_cpu_trigger_PendSV();
    a728:	e000f7b7          	lui	a5,0xe000f
    a72c:	4394                	lw	a3,0(a5)
    a72e:	e000f7b7          	lui	a5,0xe000f
    a732:	80000737          	lui	a4,0x80000
    a736:	8f55                	or	a4,a4,a3
    a738:	c398                	sw	a4,0(a5)
        }
        EXIT_CRITICAL();
    a73a:	e88fe0ef          	jal	ra,8dc2 <os_critical_exit>
        break;
    a73e:	a221                	j	a846 <os_task_post_msg_dynamic+0x25c>
    case TASK_STATE_DELAYED_ON_MSG:
        os_msg_queue_put_dynamic(&(task_tcb_list[des_task_id]->msg_queue),
    a740:	fef44703          	lbu	a4,-17(s0)
    a744:	200027b7          	lui	a5,0x20002
    a748:	070a                	slli	a4,a4,0x2
    a74a:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a74e:	97ba                	add	a5,a5,a4
    a750:	439c                	lw	a5,0(a5)
    a752:	03c78793          	addi	a5,a5,60
    a756:	fee44703          	lbu	a4,-18(s0)
    a75a:	86ba                	mv	a3,a4
    a75c:	fe442603          	lw	a2,-28(s0)
    a760:	fe842583          	lw	a1,-24(s0)
    a764:	853e                	mv	a0,a5
    a766:	fe1fe0ef          	jal	ra,9746 <os_msg_queue_put_dynamic>
                                 sig,
                                 p_content,
                                 msg_size);
        /* Is the task waiting on an event ?  If so remove
         * it from the event list. */
        if (list_item_get_list_contain(&(task_tcb_list[des_task_id]->state_list_item)) != NULL)
    a76a:	fef44703          	lbu	a4,-17(s0)
    a76e:	200027b7          	lui	a5,0x20002
    a772:	070a                	slli	a4,a4,0x2
    a774:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a778:	97ba                	add	a5,a5,a4
    a77a:	439c                	lw	a5,0(a5)
    a77c:	4bdc                	lw	a5,20(a5)
    a77e:	cf91                	beqz	a5,a79a <os_task_post_msg_dynamic+0x1b0>
        {
            os_list_remove(&(task_tcb_list[des_task_id]->state_list_item));
    a780:	fef44703          	lbu	a4,-17(s0)
    a784:	200027b7          	lui	a5,0x20002
    a788:	070a                	slli	a4,a4,0x2
    a78a:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a78e:	97ba                	add	a5,a5,a4
    a790:	439c                	lw	a5,0(a5)
    a792:	0791                	addi	a5,a5,4
    a794:	853e                	mv	a0,a5
    a796:	8d5fe0ef          	jal	ra,906a <os_list_remove>
        }

        add_task_to_rdy_list(task_tcb_list[des_task_id]);
    a79a:	fef44703          	lbu	a4,-17(s0)
    a79e:	200027b7          	lui	a5,0x20002
    a7a2:	070a                	slli	a4,a4,0x2
    a7a4:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a7a8:	97ba                	add	a5,a5,a4
    a7aa:	439c                	lw	a5,0(a5)
    a7ac:	853e                	mv	a0,a5
    a7ae:	f48ff0ef          	jal	ra,9ef6 <add_task_to_rdy_list>
        if (task_tcb_list[des_task_id]->prio < tcb_curr_ptr->prio)
    a7b2:	fef44703          	lbu	a4,-17(s0)
    a7b6:	200027b7          	lui	a5,0x20002
    a7ba:	070a                	slli	a4,a4,0x2
    a7bc:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a7c0:	97ba                	add	a5,a5,a4
    a7c2:	439c                	lw	a5,0(a5)
    a7c4:	02c7c703          	lbu	a4,44(a5)
    a7c8:	200027b7          	lui	a5,0x20002
    a7cc:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    a7d0:	02c7c783          	lbu	a5,44(a5)
    a7d4:	02f77e63          	bgeu	a4,a5,a810 <os_task_post_msg_dynamic+0x226>
        {
            tcb_high_rdy_ptr = task_tcb_list[des_task_id];
    a7d8:	fef44703          	lbu	a4,-17(s0)
    a7dc:	200027b7          	lui	a5,0x20002
    a7e0:	070a                	slli	a4,a4,0x2
    a7e2:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a7e6:	97ba                	add	a5,a5,a4
    a7e8:	4398                	lw	a4,0(a5)
    a7ea:	200027b7          	lui	a5,0x20002
    a7ee:	cae7a423          	sw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>

            /*Save state*/
            tcb_high_rdy_ptr->state = TASK_STATE_RUNNING;
    a7f2:	200027b7          	lui	a5,0x20002
    a7f6:	ca87a783          	lw	a5,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
    a7fa:	0407a423          	sw	zero,72(a5)

            os_cpu_trigger_PendSV();
    a7fe:	e000f7b7          	lui	a5,0xe000f
    a802:	4394                	lw	a3,0(a5)
    a804:	e000f7b7          	lui	a5,0xe000f
    a808:	80000737          	lui	a4,0x80000
    a80c:	8f55                	or	a4,a4,a3
    a80e:	c398                	sw	a4,0(a5)
        }
        EXIT_CRITICAL();
    a810:	db2fe0ef          	jal	ra,8dc2 <os_critical_exit>
        break;
    a814:	a80d                	j	a846 <os_task_post_msg_dynamic+0x25c>

    default:
        os_msg_queue_put_dynamic(&(task_tcb_list[des_task_id]->msg_queue),
    a816:	fef44703          	lbu	a4,-17(s0)
    a81a:	200027b7          	lui	a5,0x20002
    a81e:	070a                	slli	a4,a4,0x2
    a820:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a824:	97ba                	add	a5,a5,a4
    a826:	439c                	lw	a5,0(a5)
    a828:	03c78793          	addi	a5,a5,60
    a82c:	fee44703          	lbu	a4,-18(s0)
    a830:	86ba                	mv	a3,a4
    a832:	fe442603          	lw	a2,-28(s0)
    a836:	fe842583          	lw	a1,-24(s0)
    a83a:	853e                	mv	a0,a5
    a83c:	f0bfe0ef          	jal	ra,9746 <os_msg_queue_put_dynamic>
                                 sig,
                                 p_content,
                                 msg_size);
        EXIT_CRITICAL();
    a840:	d82fe0ef          	jal	ra,8dc2 <os_critical_exit>
        break;
    a844:	0001                	nop
    }
}
    a846:	40f2                	lw	ra,28(sp)
    a848:	4462                	lw	s0,24(sp)
    a84a:	6105                	addi	sp,sp,32
    a84c:	8082                	ret

0000a84e <os_task_post_msg_pure>:

void os_task_post_msg_pure(uint8_t des_task_id, int32_t sig)
{
    a84e:	1101                	addi	sp,sp,-32
    a850:	ce06                	sw	ra,28(sp)
    a852:	cc22                	sw	s0,24(sp)
    a854:	1000                	addi	s0,sp,32
    a856:	87aa                	mv	a5,a0
    a858:	feb42423          	sw	a1,-24(s0)
    a85c:	fef407a3          	sb	a5,-17(s0)
    ENTER_CRITICAL();
    a860:	d36fe0ef          	jal	ra,8d96 <os_critical_enter>
        os_assert(0, "OS_ERR_TASK_POST_MSG_TO_ITSELF");
        EXIT_CRITICAL();
        return;
    }
#endif
    switch (task_tcb_list[des_task_id]->state)
    a864:	fef44703          	lbu	a4,-17(s0)
    a868:	200027b7          	lui	a5,0x20002
    a86c:	070a                	slli	a4,a4,0x2
    a86e:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a872:	97ba                	add	a5,a5,a4
    a874:	439c                	lw	a5,0(a5)
    a876:	47bc                	lw	a5,72(a5)
    a878:	4711                	li	a4,4
    a87a:	00e78663          	beq	a5,a4,a886 <os_task_post_msg_pure+0x38>
    a87e:	4715                	li	a4,5
    a880:	0ce78963          	beq	a5,a4,a952 <os_task_post_msg_pure+0x104>
    a884:	a2e9                	j	aa4e <os_task_post_msg_pure+0x200>
    {
    case TASK_STATE_SUSPENDED_ON_MSG:
        os_msg_queue_put_pure(&(task_tcb_list[des_task_id]->msg_queue), sig);
    a886:	fef44703          	lbu	a4,-17(s0)
    a88a:	200027b7          	lui	a5,0x20002
    a88e:	070a                	slli	a4,a4,0x2
    a890:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a894:	97ba                	add	a5,a5,a4
    a896:	439c                	lw	a5,0(a5)
    a898:	03c78793          	addi	a5,a5,60
    a89c:	fe842583          	lw	a1,-24(s0)
    a8a0:	853e                	mv	a0,a5
    a8a2:	814ff0ef          	jal	ra,98b6 <os_msg_queue_put_pure>
        /* Is the task waiting on an event ?  If so remove
         * it from the event list. */
        if (list_item_get_list_contain(&(task_tcb_list[des_task_id]->event_list_item)) != NULL)
    a8a6:	fef44703          	lbu	a4,-17(s0)
    a8aa:	200027b7          	lui	a5,0x20002
    a8ae:	070a                	slli	a4,a4,0x2
    a8b0:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a8b4:	97ba                	add	a5,a5,a4
    a8b6:	439c                	lw	a5,0(a5)
    a8b8:	579c                	lw	a5,40(a5)
    a8ba:	cf91                	beqz	a5,a8d6 <os_task_post_msg_pure+0x88>
        {
            os_list_remove(&(task_tcb_list[des_task_id]->event_list_item));
    a8bc:	fef44703          	lbu	a4,-17(s0)
    a8c0:	200027b7          	lui	a5,0x20002
    a8c4:	070a                	slli	a4,a4,0x2
    a8c6:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a8ca:	97ba                	add	a5,a5,a4
    a8cc:	439c                	lw	a5,0(a5)
    a8ce:	07e1                	addi	a5,a5,24
    a8d0:	853e                	mv	a0,a5
    a8d2:	f98fe0ef          	jal	ra,906a <os_list_remove>
        }
        add_task_to_rdy_list(task_tcb_list[des_task_id]);
    a8d6:	fef44703          	lbu	a4,-17(s0)
    a8da:	200027b7          	lui	a5,0x20002
    a8de:	070a                	slli	a4,a4,0x2
    a8e0:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a8e4:	97ba                	add	a5,a5,a4
    a8e6:	439c                	lw	a5,0(a5)
    a8e8:	853e                	mv	a0,a5
    a8ea:	e0cff0ef          	jal	ra,9ef6 <add_task_to_rdy_list>
        if (task_tcb_list[des_task_id]->prio < tcb_curr_ptr->prio)
    a8ee:	fef44703          	lbu	a4,-17(s0)
    a8f2:	200027b7          	lui	a5,0x20002
    a8f6:	070a                	slli	a4,a4,0x2
    a8f8:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a8fc:	97ba                	add	a5,a5,a4
    a8fe:	439c                	lw	a5,0(a5)
    a900:	02c7c703          	lbu	a4,44(a5)
    a904:	200027b7          	lui	a5,0x20002
    a908:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    a90c:	02c7c783          	lbu	a5,44(a5)
    a910:	02f77e63          	bgeu	a4,a5,a94c <os_task_post_msg_pure+0xfe>
        {
            tcb_high_rdy_ptr = task_tcb_list[des_task_id];
    a914:	fef44703          	lbu	a4,-17(s0)
    a918:	200027b7          	lui	a5,0x20002
    a91c:	070a                	slli	a4,a4,0x2
    a91e:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a922:	97ba                	add	a5,a5,a4
    a924:	4398                	lw	a4,0(a5)
    a926:	200027b7          	lui	a5,0x20002
    a92a:	cae7a423          	sw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>

            /*Save state*/
            tcb_high_rdy_ptr->state = TASK_STATE_RUNNING;
    a92e:	200027b7          	lui	a5,0x20002
    a932:	ca87a783          	lw	a5,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
    a936:	0407a423          	sw	zero,72(a5)

            os_cpu_trigger_PendSV();
    a93a:	e000f7b7          	lui	a5,0xe000f
    a93e:	4394                	lw	a3,0(a5)
    a940:	e000f7b7          	lui	a5,0xe000f
    a944:	80000737          	lui	a4,0x80000
    a948:	8f55                	or	a4,a4,a3
    a94a:	c398                	sw	a4,0(a5)
        }
        EXIT_CRITICAL();
    a94c:	c76fe0ef          	jal	ra,8dc2 <os_critical_exit>
        break;
    a950:	a215                	j	aa74 <os_task_post_msg_pure+0x226>
    case TASK_STATE_DELAYED_ON_MSG:
        os_msg_queue_put_pure(&(task_tcb_list[des_task_id]->msg_queue), sig);
    a952:	fef44703          	lbu	a4,-17(s0)
    a956:	200027b7          	lui	a5,0x20002
    a95a:	070a                	slli	a4,a4,0x2
    a95c:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a960:	97ba                	add	a5,a5,a4
    a962:	439c                	lw	a5,0(a5)
    a964:	03c78793          	addi	a5,a5,60
    a968:	fe842583          	lw	a1,-24(s0)
    a96c:	853e                	mv	a0,a5
    a96e:	f49fe0ef          	jal	ra,98b6 <os_msg_queue_put_pure>
        /* Is the task waiting on an event ?  If so remove
         * it from the event list. */
        if (list_item_get_list_contain(&(task_tcb_list[des_task_id]->state_list_item)) != NULL)
    a972:	fef44703          	lbu	a4,-17(s0)
    a976:	200027b7          	lui	a5,0x20002
    a97a:	070a                	slli	a4,a4,0x2
    a97c:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a980:	97ba                	add	a5,a5,a4
    a982:	439c                	lw	a5,0(a5)
    a984:	4bdc                	lw	a5,20(a5)
    a986:	cf91                	beqz	a5,a9a2 <os_task_post_msg_pure+0x154>
        {
            os_list_remove(&(task_tcb_list[des_task_id]->state_list_item));
    a988:	fef44703          	lbu	a4,-17(s0)
    a98c:	200027b7          	lui	a5,0x20002
    a990:	070a                	slli	a4,a4,0x2
    a992:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a996:	97ba                	add	a5,a5,a4
    a998:	439c                	lw	a5,0(a5)
    a99a:	0791                	addi	a5,a5,4
    a99c:	853e                	mv	a0,a5
    a99e:	eccfe0ef          	jal	ra,906a <os_list_remove>
        }

        /* Is the task waiting on an event also?  If so remove
         * it from the event list. */
        if (list_item_get_list_contain(&(task_tcb_list[des_task_id]->event_list_item)) != NULL)
    a9a2:	fef44703          	lbu	a4,-17(s0)
    a9a6:	200027b7          	lui	a5,0x20002
    a9aa:	070a                	slli	a4,a4,0x2
    a9ac:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a9b0:	97ba                	add	a5,a5,a4
    a9b2:	439c                	lw	a5,0(a5)
    a9b4:	579c                	lw	a5,40(a5)
    a9b6:	cf91                	beqz	a5,a9d2 <os_task_post_msg_pure+0x184>
        {
            os_list_remove(&(task_tcb_list[des_task_id]->event_list_item));
    a9b8:	fef44703          	lbu	a4,-17(s0)
    a9bc:	200027b7          	lui	a5,0x20002
    a9c0:	070a                	slli	a4,a4,0x2
    a9c2:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a9c6:	97ba                	add	a5,a5,a4
    a9c8:	439c                	lw	a5,0(a5)
    a9ca:	07e1                	addi	a5,a5,24
    a9cc:	853e                	mv	a0,a5
    a9ce:	e9cfe0ef          	jal	ra,906a <os_list_remove>
        }

        add_task_to_rdy_list(task_tcb_list[des_task_id]);
    a9d2:	fef44703          	lbu	a4,-17(s0)
    a9d6:	200027b7          	lui	a5,0x20002
    a9da:	070a                	slli	a4,a4,0x2
    a9dc:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a9e0:	97ba                	add	a5,a5,a4
    a9e2:	439c                	lw	a5,0(a5)
    a9e4:	853e                	mv	a0,a5
    a9e6:	d10ff0ef          	jal	ra,9ef6 <add_task_to_rdy_list>
        if (task_tcb_list[des_task_id]->prio < tcb_curr_ptr->prio)
    a9ea:	fef44703          	lbu	a4,-17(s0)
    a9ee:	200027b7          	lui	a5,0x20002
    a9f2:	070a                	slli	a4,a4,0x2
    a9f4:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    a9f8:	97ba                	add	a5,a5,a4
    a9fa:	439c                	lw	a5,0(a5)
    a9fc:	02c7c703          	lbu	a4,44(a5)
    aa00:	200027b7          	lui	a5,0x20002
    aa04:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    aa08:	02c7c783          	lbu	a5,44(a5)
    aa0c:	02f77e63          	bgeu	a4,a5,aa48 <os_task_post_msg_pure+0x1fa>
        {
            tcb_high_rdy_ptr = task_tcb_list[des_task_id];
    aa10:	fef44703          	lbu	a4,-17(s0)
    aa14:	200027b7          	lui	a5,0x20002
    aa18:	070a                	slli	a4,a4,0x2
    aa1a:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    aa1e:	97ba                	add	a5,a5,a4
    aa20:	4398                	lw	a4,0(a5)
    aa22:	200027b7          	lui	a5,0x20002
    aa26:	cae7a423          	sw	a4,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>

            /*Save state*/
            tcb_high_rdy_ptr->state = TASK_STATE_RUNNING;
    aa2a:	200027b7          	lui	a5,0x20002
    aa2e:	ca87a783          	lw	a5,-856(a5) # 20001ca8 <tcb_high_rdy_ptr>
    aa32:	0407a423          	sw	zero,72(a5)

            os_cpu_trigger_PendSV();
    aa36:	e000f7b7          	lui	a5,0xe000f
    aa3a:	4394                	lw	a3,0(a5)
    aa3c:	e000f7b7          	lui	a5,0xe000f
    aa40:	80000737          	lui	a4,0x80000
    aa44:	8f55                	or	a4,a4,a3
    aa46:	c398                	sw	a4,0(a5)
        }
        EXIT_CRITICAL();
    aa48:	b7afe0ef          	jal	ra,8dc2 <os_critical_exit>
        break;
    aa4c:	a025                	j	aa74 <os_task_post_msg_pure+0x226>

    default: /*DELAYED, SUSPEND, RUNNING*/
        os_msg_queue_put_pure(&(task_tcb_list[des_task_id]->msg_queue), sig);
    aa4e:	fef44703          	lbu	a4,-17(s0)
    aa52:	200027b7          	lui	a5,0x20002
    aa56:	070a                	slli	a4,a4,0x2
    aa58:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    aa5c:	97ba                	add	a5,a5,a4
    aa5e:	439c                	lw	a5,0(a5)
    aa60:	03c78793          	addi	a5,a5,60
    aa64:	fe842583          	lw	a1,-24(s0)
    aa68:	853e                	mv	a0,a5
    aa6a:	e4dfe0ef          	jal	ra,98b6 <os_msg_queue_put_pure>
        EXIT_CRITICAL();
    aa6e:	b54fe0ef          	jal	ra,8dc2 <os_critical_exit>
        break;
    aa72:	0001                	nop
    }
}
    aa74:	0001                	nop
    aa76:	40f2                	lw	ra,28(sp)
    aa78:	4462                	lw	s0,24(sp)
    aa7a:	6105                	addi	sp,sp,32
    aa7c:	8082                	ret

0000aa7e <os_task_wait_for_msg>:

msg_t *os_task_wait_for_msg(uint32_t time_out)
{
    aa7e:	7179                	addi	sp,sp,-48
    aa80:	d606                	sw	ra,44(sp)
    aa82:	d422                	sw	s0,40(sp)
    aa84:	1800                	addi	s0,sp,48
    aa86:	fca42e23          	sw	a0,-36(s0)
    msg_t *p_msg = os_msg_queue_get(&(task_tcb_list[tcb_curr_ptr->id]->msg_queue));
    aa8a:	200027b7          	lui	a5,0x20002
    aa8e:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    aa92:	0387c783          	lbu	a5,56(a5)
    aa96:	873e                	mv	a4,a5
    aa98:	200027b7          	lui	a5,0x20002
    aa9c:	070a                	slli	a4,a4,0x2
    aa9e:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    aaa2:	97ba                	add	a5,a5,a4
    aaa4:	439c                	lw	a5,0(a5)
    aaa6:	03c78793          	addi	a5,a5,60
    aaaa:	853e                	mv	a0,a5
    aaac:	f3dfe0ef          	jal	ra,99e8 <os_msg_queue_get>
    aab0:	fea42623          	sw	a0,-20(s0)
    if (time_out > (uint32_t)0U && p_msg == NULL)
    aab4:	fdc42783          	lw	a5,-36(s0)
    aab8:	c3c1                	beqz	a5,ab38 <os_task_wait_for_msg+0xba>
    aaba:	fec42783          	lw	a5,-20(s0)
    aabe:	efad                	bnez	a5,ab38 <os_task_wait_for_msg+0xba>
    {
        ENTER_CRITICAL();
    aac0:	ad6fe0ef          	jal	ra,8d96 <os_critical_enter>
        add_curr_task_to_delay_list(time_out, OS_TRUE); // Can block indefinitely
    aac4:	4585                	li	a1,1
    aac6:	fdc42503          	lw	a0,-36(s0)
    aaca:	ca6ff0ef          	jal	ra,9f70 <add_curr_task_to_delay_list>
        if (time_out == OS_CFG_DELAY_MAX)
    aace:	fdc42703          	lw	a4,-36(s0)
    aad2:	57fd                	li	a5,-1
    aad4:	00f71963          	bne	a4,a5,aae6 <os_task_wait_for_msg+0x68>
        {
            tcb_curr_ptr->state = TASK_STATE_SUSPENDED_ON_MSG;
    aad8:	200027b7          	lui	a5,0x20002
    aadc:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    aae0:	4711                	li	a4,4
    aae2:	c7b8                	sw	a4,72(a5)
    aae4:	a039                	j	aaf2 <os_task_wait_for_msg+0x74>
        }
        else
        {
            tcb_curr_ptr->state = TASK_STATE_DELAYED_ON_MSG;
    aae6:	200027b7          	lui	a5,0x20002
    aaea:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    aaee:	4715                	li	a4,5
    aaf0:	c7b8                	sw	a4,72(a5)
        }
        os_cpu_trigger_PendSV();
    aaf2:	e000f7b7          	lui	a5,0xe000f
    aaf6:	4394                	lw	a3,0(a5)
    aaf8:	e000f7b7          	lui	a5,0xe000f
    aafc:	80000737          	lui	a4,0x80000
    ab00:	8f55                	or	a4,a4,a3
    ab02:	c398                	sw	a4,0(a5)
        EXIT_CRITICAL();
    ab04:	abefe0ef          	jal	ra,8dc2 <os_critical_exit>

        p_msg = os_msg_queue_get(&(task_tcb_list[tcb_curr_ptr->id]->msg_queue));
    ab08:	200027b7          	lui	a5,0x20002
    ab0c:	cac7a783          	lw	a5,-852(a5) # 20001cac <tcb_curr_ptr>
    ab10:	0387c783          	lbu	a5,56(a5)
    ab14:	873e                	mv	a4,a5
    ab16:	200027b7          	lui	a5,0x20002
    ab1a:	070a                	slli	a4,a4,0x2
    ab1c:	97078793          	addi	a5,a5,-1680 # 20001970 <task_tcb_list>
    ab20:	97ba                	add	a5,a5,a4
    ab22:	439c                	lw	a5,0(a5)
    ab24:	03c78793          	addi	a5,a5,60
    ab28:	853e                	mv	a0,a5
    ab2a:	ebffe0ef          	jal	ra,99e8 <os_msg_queue_get>
    ab2e:	fea42623          	sw	a0,-20(s0)
        return p_msg;
    ab32:	fec42783          	lw	a5,-20(s0)
    ab36:	a019                	j	ab3c <os_task_wait_for_msg+0xbe>
    }
    else
    {
        return p_msg;
    ab38:	fec42783          	lw	a5,-20(s0)
    }
    ab3c:	853e                	mv	a0,a5
    ab3e:	50b2                	lw	ra,44(sp)
    ab40:	5422                	lw	s0,40(sp)
    ab42:	6145                	addi	sp,sp,48
    ab44:	8082                	ret

0000ab46 <timer_pool_init>:
static list_t *volatile overflow_timer_list_ptr;

static volatile uint32_t next_tick_to_unblock_timer = (uint32_t)OS_CFG_DELAY_MAX;

static void timer_pool_init()
{
    ab46:	1101                	addi	sp,sp,-32
    ab48:	ce22                	sw	s0,28(sp)
    ab4a:	1000                	addi	s0,sp,32
    uint8_t index;

    free_list_timer_pool = (os_timer_t *)timer_pool;
    ab4c:	200027b7          	lui	a5,0x20002
    ab50:	20002737          	lui	a4,0x20002
    ab54:	ad070713          	addi	a4,a4,-1328 # 20001ad0 <timer_pool>
    ab58:	c4e7a823          	sw	a4,-944(a5) # 20001c50 <free_list_timer_pool>

    for (index = 0; index < OS_CFG_TIMER_POOL_SIZE; index++)
    ab5c:	fe0407a3          	sb	zero,-17(s0)
    ab60:	a095                	j	abc4 <timer_pool_init+0x7e>
    {
        if (index == (OS_CFG_TIMER_POOL_SIZE - 1))
    ab62:	fef44703          	lbu	a4,-17(s0)
    ab66:	479d                	li	a5,7
    ab68:	02f71063          	bne	a4,a5,ab88 <timer_pool_init+0x42>
        {
            timer_pool[index].next = NULL;
    ab6c:	fef44703          	lbu	a4,-17(s0)
    ab70:	200026b7          	lui	a3,0x20002
    ab74:	87ba                	mv	a5,a4
    ab76:	0786                	slli	a5,a5,0x1
    ab78:	97ba                	add	a5,a5,a4
    ab7a:	0792                	slli	a5,a5,0x4
    ab7c:	ad068713          	addi	a4,a3,-1328 # 20001ad0 <timer_pool>
    ab80:	97ba                	add	a5,a5,a4
    ab82:	0007a023          	sw	zero,0(a5)
    ab86:	a815                	j	abba <timer_pool_init+0x74>
        }
        else
        {
            timer_pool[index].next = (os_timer_t *)&timer_pool[index + 1];
    ab88:	fef44783          	lbu	a5,-17(s0)
    ab8c:	00178693          	addi	a3,a5,1
    ab90:	fef44703          	lbu	a4,-17(s0)
    ab94:	87b6                	mv	a5,a3
    ab96:	0786                	slli	a5,a5,0x1
    ab98:	97b6                	add	a5,a5,a3
    ab9a:	0792                	slli	a5,a5,0x4
    ab9c:	200026b7          	lui	a3,0x20002
    aba0:	ad068693          	addi	a3,a3,-1328 # 20001ad0 <timer_pool>
    aba4:	96be                	add	a3,a3,a5
    aba6:	20002637          	lui	a2,0x20002
    abaa:	87ba                	mv	a5,a4
    abac:	0786                	slli	a5,a5,0x1
    abae:	97ba                	add	a5,a5,a4
    abb0:	0792                	slli	a5,a5,0x4
    abb2:	ad060713          	addi	a4,a2,-1328 # 20001ad0 <timer_pool>
    abb6:	97ba                	add	a5,a5,a4
    abb8:	c394                	sw	a3,0(a5)
    for (index = 0; index < OS_CFG_TIMER_POOL_SIZE; index++)
    abba:	fef44783          	lbu	a5,-17(s0)
    abbe:	0785                	addi	a5,a5,1
    abc0:	fef407a3          	sb	a5,-17(s0)
    abc4:	fef44703          	lbu	a4,-17(s0)
    abc8:	479d                	li	a5,7
    abca:	f8e7fce3          	bgeu	a5,a4,ab62 <timer_pool_init+0x1c>
        }
    }

    timer_pool_used = 0;
    abce:	200027b7          	lui	a5,0x20002
    abd2:	c4078a23          	sb	zero,-940(a5) # 20001c54 <timer_pool_used>
}
    abd6:	0001                	nop
    abd8:	4472                	lw	s0,28(sp)
    abda:	6105                	addi	sp,sp,32
    abdc:	8082                	ret

0000abde <init_timer_lists>:

static void init_timer_lists(void)
{
    abde:	1141                	addi	sp,sp,-16
    abe0:	c606                	sw	ra,12(sp)
    abe2:	c422                	sw	s0,8(sp)
    abe4:	0800                	addi	s0,sp,16
    /* Initialize lists */
    os_list_init(&timer_list_1);
    abe6:	200027b7          	lui	a5,0x20002
    abea:	c5c78513          	addi	a0,a5,-932 # 20001c5c <timer_list_1>
    abee:	a44fe0ef          	jal	ra,8e32 <os_list_init>
    os_list_init(&timer_list_2);
    abf2:	200027b7          	lui	a5,0x20002
    abf6:	c7878513          	addi	a0,a5,-904 # 20001c78 <timer_list_2>
    abfa:	a38fe0ef          	jal	ra,8e32 <os_list_init>
    timer_list_ptr = &timer_list_1;
    abfe:	200027b7          	lui	a5,0x20002
    ac02:	20002737          	lui	a4,0x20002
    ac06:	c5c70713          	addi	a4,a4,-932 # 20001c5c <timer_list_1>
    ac0a:	c8e7aa23          	sw	a4,-876(a5) # 20001c94 <timer_list_ptr>
    overflow_timer_list_ptr = &timer_list_2;
    ac0e:	200027b7          	lui	a5,0x20002
    ac12:	20002737          	lui	a4,0x20002
    ac16:	c7870713          	addi	a4,a4,-904 # 20001c78 <timer_list_2>
    ac1a:	c8e7ac23          	sw	a4,-872(a5) # 20001c98 <overflow_timer_list_ptr>
    /********************/
}
    ac1e:	0001                	nop
    ac20:	40b2                	lw	ra,12(sp)
    ac22:	4422                	lw	s0,8(sp)
    ac24:	0141                	addi	sp,sp,16
    ac26:	8082                	ret

0000ac28 <timer_switch_lists>:

static void timer_switch_lists()
{
    ac28:	1101                	addi	sp,sp,-32
    ac2a:	ce22                	sw	s0,28(sp)
    ac2c:	1000                	addi	s0,sp,32
    list_t *p_list_temp;
    p_list_temp = timer_list_ptr;
    ac2e:	200027b7          	lui	a5,0x20002
    ac32:	c947a783          	lw	a5,-876(a5) # 20001c94 <timer_list_ptr>
    ac36:	fef42623          	sw	a5,-20(s0)
    timer_list_ptr = overflow_timer_list_ptr;
    ac3a:	200027b7          	lui	a5,0x20002
    ac3e:	c987a703          	lw	a4,-872(a5) # 20001c98 <overflow_timer_list_ptr>
    ac42:	200027b7          	lui	a5,0x20002
    ac46:	c8e7aa23          	sw	a4,-876(a5) # 20001c94 <timer_list_ptr>
    overflow_timer_list_ptr = p_list_temp;
    ac4a:	200027b7          	lui	a5,0x20002
    ac4e:	fec42703          	lw	a4,-20(s0)
    ac52:	c8e7ac23          	sw	a4,-872(a5) # 20001c98 <overflow_timer_list_ptr>

    if (list_is_empty(timer_list_ptr) == OS_TRUE)
    ac56:	200027b7          	lui	a5,0x20002
    ac5a:	c947a783          	lw	a5,-876(a5) # 20001c94 <timer_list_ptr>
    ac5e:	0187d783          	lhu	a5,24(a5)
    ac62:	e789                	bnez	a5,ac6c <timer_switch_lists+0x44>
    {
        next_tick_to_unblock_timer = OS_CFG_DELAY_MAX;
    ac64:	577d                	li	a4,-1
    ac66:	80e1ac23          	sw	a4,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
    }
    else
    {
        next_tick_to_unblock_timer = 0u;
    }
}
    ac6a:	a019                	j	ac70 <timer_switch_lists+0x48>
        next_tick_to_unblock_timer = 0u;
    ac6c:	8001ac23          	sw	zero,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
}
    ac70:	0001                	nop
    ac72:	4472                	lw	s0,28(sp)
    ac74:	6105                	addi	sp,sp,32
    ac76:	8082                	ret

0000ac78 <add_timer_to_list>:
static void add_timer_to_list(os_timer_t *p_timer)
{
    ac78:	7179                	addi	sp,sp,-48
    ac7a:	d606                	sw	ra,44(sp)
    ac7c:	d422                	sw	s0,40(sp)
    ac7e:	1800                	addi	s0,sp,48
    ac80:	fca42e23          	sw	a0,-36(s0)
    ENTER_CRITICAL();
    ac84:	912fe0ef          	jal	ra,8d96 <os_critical_enter>
    {
        const uint32_t const_tick = os_task_get_tick();
    ac88:	85aff0ef          	jal	ra,9ce2 <os_task_get_tick>
    ac8c:	fea42623          	sw	a0,-20(s0)
        uint32_t tick_to_trigger = list_item_get_value(&(p_timer->timer_list_item));
    ac90:	fdc42783          	lw	a5,-36(s0)
    ac94:	4b9c                	lw	a5,16(a5)
    ac96:	fef42423          	sw	a5,-24(s0)
        if (tick_to_trigger < const_tick)
    ac9a:	fe842703          	lw	a4,-24(s0)
    ac9e:	fec42783          	lw	a5,-20(s0)
    aca2:	00f77e63          	bgeu	a4,a5,acbe <add_timer_to_list+0x46>
        {
            /* Wake time has overflowed.  Place this item in the overflow
             * list. */
            os_list_insert(overflow_timer_list_ptr, &(p_timer->timer_list_item));
    aca6:	200027b7          	lui	a5,0x20002
    acaa:	c987a703          	lw	a4,-872(a5) # 20001c98 <overflow_timer_list_ptr>
    acae:	fdc42783          	lw	a5,-36(s0)
    acb2:	07a1                	addi	a5,a5,8
    acb4:	85be                	mv	a1,a5
    acb6:	853a                	mv	a0,a4
    acb8:	aeefe0ef          	jal	ra,8fa6 <os_list_insert>
    acbc:	a821                	j	acd4 <add_timer_to_list+0x5c>
        }
        else
        {
            /* The wake time has not overflowed, so the current block list
             * is used. */
            os_list_insert(timer_list_ptr, &(p_timer->timer_list_item));
    acbe:	200027b7          	lui	a5,0x20002
    acc2:	c947a703          	lw	a4,-876(a5) # 20001c94 <timer_list_ptr>
    acc6:	fdc42783          	lw	a5,-36(s0)
    acca:	07a1                	addi	a5,a5,8
    accc:	85be                	mv	a1,a5
    acce:	853a                	mv	a0,a4
    acd0:	ad6fe0ef          	jal	ra,8fa6 <os_list_insert>
        }
    }
    EXIT_CRITICAL();
    acd4:	8eefe0ef          	jal	ra,8dc2 <os_critical_exit>
}
    acd8:	0001                	nop
    acda:	50b2                	lw	ra,44(sp)
    acdc:	5422                	lw	s0,40(sp)
    acde:	6145                	addi	sp,sp,48
    ace0:	8082                	ret

0000ace2 <update_next_tick_to_unblock>:
static void update_next_tick_to_unblock()
{
    ace2:	1101                	addi	sp,sp,-32
    ace4:	ce22                	sw	s0,28(sp)
    ace6:	1000                	addi	s0,sp,32
    os_timer_t *p_timer;
    uint32_t item_value;
    if (list_is_empty(timer_list_ptr) == OS_TRUE)
    ace8:	200027b7          	lui	a5,0x20002
    acec:	c947a783          	lw	a5,-876(a5) # 20001c94 <timer_list_ptr>
    acf0:	0187d783          	lhu	a5,24(a5)
    acf4:	e789                	bnez	a5,acfe <update_next_tick_to_unblock+0x1c>
    {
        next_tick_to_unblock_timer = OS_CFG_DELAY_MAX;
    acf6:	577d                	li	a4,-1
    acf8:	80e1ac23          	sw	a4,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
        if (item_value < next_tick_to_unblock_timer)
        {
            next_tick_to_unblock_timer = item_value;
        }
    }
}
    acfc:	a805                	j	ad2c <update_next_tick_to_unblock+0x4a>
        p_timer = list_get_owner_of_head_item(timer_list_ptr);
    acfe:	200027b7          	lui	a5,0x20002
    ad02:	c947a783          	lw	a5,-876(a5) # 20001c94 <timer_list_ptr>
    ad06:	43dc                	lw	a5,4(a5)
    ad08:	47dc                	lw	a5,12(a5)
    ad0a:	fef42623          	sw	a5,-20(s0)
        item_value = list_item_get_value(&(p_timer->timer_list_item));
    ad0e:	fec42783          	lw	a5,-20(s0)
    ad12:	4b9c                	lw	a5,16(a5)
    ad14:	fef42423          	sw	a5,-24(s0)
        if (item_value < next_tick_to_unblock_timer)
    ad18:	8181a783          	lw	a5,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
    ad1c:	fe842703          	lw	a4,-24(s0)
    ad20:	00f77663          	bgeu	a4,a5,ad2c <update_next_tick_to_unblock+0x4a>
            next_tick_to_unblock_timer = item_value;
    ad24:	fe842703          	lw	a4,-24(s0)
    ad28:	80e1ac23          	sw	a4,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
}
    ad2c:	0001                	nop
    ad2e:	4472                	lw	s0,28(sp)
    ad30:	6105                	addi	sp,sp,32
    ad32:	8082                	ret

0000ad34 <os_timer_create>:

os_timer_t *os_timer_create(timer_id_t id, int32_t sig, timer_cb func_cb, uint8_t des_task_id, uint32_t period, timer_type_t type)
{
    ad34:	7139                	addi	sp,sp,-64
    ad36:	de06                	sw	ra,60(sp)
    ad38:	dc22                	sw	s0,56(sp)
    ad3a:	0080                	addi	s0,sp,64
    ad3c:	fcb42c23          	sw	a1,-40(s0)
    ad40:	fcc42a23          	sw	a2,-44(s0)
    ad44:	fce42823          	sw	a4,-48(s0)
    ad48:	fcf42623          	sw	a5,-52(s0)
    ad4c:	87aa                	mv	a5,a0
    ad4e:	fcf40fa3          	sb	a5,-33(s0)
    ad52:	87b6                	mv	a5,a3
    ad54:	fcf40f23          	sb	a5,-34(s0)
    /*It is important to set value for timer_list_item, because it holds time stamp*/
    if (des_task_id > (TASK_EOT_ID - 1U))
    ad58:	fde44703          	lbu	a4,-34(s0)
    ad5c:	4789                	li	a5,2
    ad5e:	02e7f163          	bgeu	a5,a4,ad80 <os_timer_create+0x4c>
    {
        // OSUniversalError = OS_ERR_DES_TASK_ID_INVALID;
        os_assert(0, "OS_ERR_DES_TASK_ID_INVALID");
    ad62:	67bd                	lui	a5,0xf
    ad64:	de078693          	addi	a3,a5,-544 # ede0 <strlen+0x408>
    ad68:	07500613          	li	a2,117
    ad6c:	67bd                	lui	a5,0xf
    ad6e:	dfc78593          	addi	a1,a5,-516 # edfc <strlen+0x424>
    ad72:	67bd                	lui	a5,0xf
    ad74:	e1c78513          	addi	a0,a5,-484 # ee1c <strlen+0x444>
    ad78:	216010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    ad7c:	4781                	li	a5,0
    ad7e:	a211                	j	ae82 <os_timer_create+0x14e>
    }
    if (des_task_id == REF_TASK_TIMER_ID)
    ad80:	fde44703          	lbu	a4,-34(s0)
    ad84:	478d                	li	a5,3
    ad86:	02f71163          	bne	a4,a5,ada8 <os_timer_create+0x74>
    {
        // OSUniversalError = OS_ERR_CAN_NOT_SET_DES_TO_ITSELF;
        os_assert(0, "OS_ERR_CAN_NOT_SET_DES_TO_ITSELF");
    ad8a:	67bd                	lui	a5,0xf
    ad8c:	e4478693          	addi	a3,a5,-444 # ee44 <strlen+0x46c>
    ad90:	07b00613          	li	a2,123
    ad94:	67bd                	lui	a5,0xf
    ad96:	dfc78593          	addi	a1,a5,-516 # edfc <strlen+0x424>
    ad9a:	67bd                	lui	a5,0xf
    ad9c:	e1c78513          	addi	a0,a5,-484 # ee1c <strlen+0x444>
    ada0:	1ee010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    ada4:	4781                	li	a5,0
    ada6:	a8f1                	j	ae82 <os_timer_create+0x14e>
    }
    if (timer_pool_used >= OS_CFG_TIMER_POOL_SIZE)
    ada8:	200027b7          	lui	a5,0x20002
    adac:	c547c703          	lbu	a4,-940(a5) # 20001c54 <timer_pool_used>
    adb0:	479d                	li	a5,7
    adb2:	02e7f163          	bgeu	a5,a4,add4 <os_timer_create+0xa0>
    {
        // OSUniversalError = OS_ERR_TIMER_POOL_IS_FULL;
        os_assert(0, "OS_ERR_TIMER_POOL_IS_FULL");
    adb6:	67bd                	lui	a5,0xf
    adb8:	e6878693          	addi	a3,a5,-408 # ee68 <strlen+0x490>
    adbc:	08100613          	li	a2,129
    adc0:	67bd                	lui	a5,0xf
    adc2:	dfc78593          	addi	a1,a5,-516 # edfc <strlen+0x424>
    adc6:	67bd                	lui	a5,0xf
    adc8:	e1c78513          	addi	a0,a5,-484 # ee1c <strlen+0x444>
    adcc:	1c2010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    add0:	4781                	li	a5,0
    add2:	a845                	j	ae82 <os_timer_create+0x14e>
    }
    if (period == 0u)
    add4:	fd042783          	lw	a5,-48(s0)
    add8:	e385                	bnez	a5,adf8 <os_timer_create+0xc4>
    {
        // OSUniversalError = OS_ERR_TIMER_NOT_ACECPT_ZERO_PERIOD;
        os_assert(0, "OS_ERR_TIMER_NOT_ACECPT_ZERO_PERIOD");
    adda:	67bd                	lui	a5,0xf
    addc:	e8478693          	addi	a3,a5,-380 # ee84 <strlen+0x4ac>
    ade0:	08700613          	li	a2,135
    ade4:	67bd                	lui	a5,0xf
    ade6:	dfc78593          	addi	a1,a5,-516 # edfc <strlen+0x424>
    adea:	67bd                	lui	a5,0xf
    adec:	e1c78513          	addi	a0,a5,-484 # ee1c <strlen+0x444>
    adf0:	19e010ef          	jal	ra,bf8e <xprintf>
        return NULL;
    adf4:	4781                	li	a5,0
    adf6:	a071                	j	ae82 <os_timer_create+0x14e>
    }
    os_timer_t *p_timer;
    p_timer = free_list_timer_pool;
    adf8:	200027b7          	lui	a5,0x20002
    adfc:	c507a783          	lw	a5,-944(a5) # 20001c50 <free_list_timer_pool>
    ae00:	fef42623          	sw	a5,-20(s0)
    free_list_timer_pool = p_timer->next;
    ae04:	fec42783          	lw	a5,-20(s0)
    ae08:	4398                	lw	a4,0(a5)
    ae0a:	200027b7          	lui	a5,0x20002
    ae0e:	c4e7a823          	sw	a4,-944(a5) # 20001c50 <free_list_timer_pool>
    timer_pool_used++;
    ae12:	200027b7          	lui	a5,0x20002
    ae16:	c547c783          	lbu	a5,-940(a5) # 20001c54 <timer_pool_used>
    ae1a:	0785                	addi	a5,a5,1
    ae1c:	0ff7f713          	andi	a4,a5,255
    ae20:	200027b7          	lui	a5,0x20002
    ae24:	c4e78a23          	sb	a4,-940(a5) # 20001c54 <timer_pool_used>

    p_timer->id = id;
    ae28:	fec42783          	lw	a5,-20(s0)
    ae2c:	fdf44703          	lbu	a4,-33(s0)
    ae30:	00e78223          	sb	a4,4(a5)
    p_timer->sig = sig;
    ae34:	fec42783          	lw	a5,-20(s0)
    ae38:	fd842703          	lw	a4,-40(s0)
    ae3c:	cfd8                	sw	a4,28(a5)
    p_timer->func_cb = func_cb;
    ae3e:	fec42783          	lw	a5,-20(s0)
    ae42:	fd442703          	lw	a4,-44(s0)
    ae46:	d3d8                	sw	a4,36(a5)
    p_timer->des_task_id = des_task_id;
    ae48:	fec42783          	lw	a5,-20(s0)
    ae4c:	fde44703          	lbu	a4,-34(s0)
    ae50:	02e78023          	sb	a4,32(a5)

    p_timer->type = type;
    ae54:	fec42783          	lw	a5,-20(s0)
    ae58:	fcc42703          	lw	a4,-52(s0)
    ae5c:	d7d8                	sw	a4,44(a5)

    p_timer->period = period;
    ae5e:	fec42783          	lw	a5,-20(s0)
    ae62:	fd042703          	lw	a4,-48(s0)
    ae66:	d798                	sw	a4,40(a5)

    /* Make connection */
    os_list_item_init(&(p_timer->timer_list_item));
    ae68:	fec42783          	lw	a5,-20(s0)
    ae6c:	07a1                	addi	a5,a5,8
    ae6e:	853e                	mv	a0,a5
    ae70:	800fe0ef          	jal	ra,8e70 <os_list_item_init>
    list_item_set_owner(&(p_timer->timer_list_item), (void *)p_timer);
    ae74:	fec42783          	lw	a5,-20(s0)
    ae78:	fec42703          	lw	a4,-20(s0)
    ae7c:	cbd8                	sw	a4,20(a5)

    // list_item_set_value(&(p_timer->timer_list_item), period + os_task_get_tick());
    // add_timer_to_list(p_timer);
    // update_next_tick_to_unblock();
    // os_task_post_msg_pure(OS_CFG_TIMER_TASK_ID, TIMER_CMD_UPDATE);
    return p_timer;
    ae7e:	fec42783          	lw	a5,-20(s0)
}
    ae82:	853e                	mv	a0,a5
    ae84:	50f2                	lw	ra,60(sp)
    ae86:	5462                	lw	s0,56(sp)
    ae88:	6121                	addi	sp,sp,64
    ae8a:	8082                	ret

0000ae8c <os_timer_remove>:
void os_timer_remove(os_timer_t *p_timer)
{
    ae8c:	1101                	addi	sp,sp,-32
    ae8e:	ce06                	sw	ra,28(sp)
    ae90:	cc22                	sw	s0,24(sp)
    ae92:	1000                	addi	s0,sp,32
    ae94:	fea42623          	sw	a0,-20(s0)
    ENTER_CRITICAL();
    ae98:	efffd0ef          	jal	ra,8d96 <os_critical_enter>

    p_timer->next = free_list_timer_pool;
    ae9c:	200027b7          	lui	a5,0x20002
    aea0:	c507a703          	lw	a4,-944(a5) # 20001c50 <free_list_timer_pool>
    aea4:	fec42783          	lw	a5,-20(s0)
    aea8:	c398                	sw	a4,0(a5)
    free_list_timer_pool = p_timer;
    aeaa:	200027b7          	lui	a5,0x20002
    aeae:	fec42703          	lw	a4,-20(s0)
    aeb2:	c4e7a823          	sw	a4,-944(a5) # 20001c50 <free_list_timer_pool>
    timer_pool_used--;
    aeb6:	200027b7          	lui	a5,0x20002
    aeba:	c547c783          	lbu	a5,-940(a5) # 20001c54 <timer_pool_used>
    aebe:	17fd                	addi	a5,a5,-1
    aec0:	0ff7f713          	andi	a4,a5,255
    aec4:	200027b7          	lui	a5,0x20002
    aec8:	c4e78a23          	sb	a4,-940(a5) # 20001c54 <timer_pool_used>

    if (list_item_get_list_contain(&(p_timer->timer_list_item)) != NULL)
    aecc:	fec42783          	lw	a5,-20(s0)
    aed0:	4f9c                	lw	a5,24(a5)
    aed2:	c799                	beqz	a5,aee0 <os_timer_remove+0x54>
        os_list_remove(&(p_timer->timer_list_item));
    aed4:	fec42783          	lw	a5,-20(s0)
    aed8:	07a1                	addi	a5,a5,8
    aeda:	853e                	mv	a0,a5
    aedc:	98efe0ef          	jal	ra,906a <os_list_remove>

    EXIT_CRITICAL();
    aee0:	ee3fd0ef          	jal	ra,8dc2 <os_critical_exit>
}
    aee4:	0001                	nop
    aee6:	40f2                	lw	ra,28(sp)
    aee8:	4462                	lw	s0,24(sp)
    aeea:	6105                	addi	sp,sp,32
    aeec:	8082                	ret

0000aeee <os_timer_init>:

void os_timer_init(void)
{
    aeee:	1141                	addi	sp,sp,-16
    aef0:	c606                	sw	ra,12(sp)
    aef2:	c422                	sw	s0,8(sp)
    aef4:	0800                	addi	s0,sp,16
    timer_pool_init();
    aef6:	3981                	jal	ab46 <timer_pool_init>
    init_timer_lists();
    aef8:	31dd                	jal	abde <init_timer_lists>
    next_tick_to_unblock_timer = OS_CFG_DELAY_MAX;
    aefa:	577d                	li	a4,-1
    aefc:	80e1ac23          	sw	a4,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
    /*TODO: Create a task for timer here, or maybe in os_task.c and call os_timer_processing*/
}
    af00:	0001                	nop
    af02:	40b2                	lw	ra,12(sp)
    af04:	4422                	lw	s0,8(sp)
    af06:	0141                	addi	sp,sp,16
    af08:	8082                	ret

0000af0a <os_timer_processing>:
void os_timer_processing()
{
    af0a:	1101                	addi	sp,sp,-32
    af0c:	ce06                	sw	ra,28(sp)
    af0e:	cc22                	sw	s0,24(sp)
    af10:	1000                	addi	s0,sp,32
    msg_t *p_msg;
    os_timer_t *p_timer;
    uint32_t item_value;
    static uint32_t last_time = (uint32_t)0U;
    uint32_t time_now = os_task_get_tick();
    af12:	dd1fe0ef          	jal	ra,9ce2 <os_task_get_tick>
    af16:	fea42623          	sw	a0,-20(s0)
    if (time_now < last_time)
    af1a:	200027b7          	lui	a5,0x20002
    af1e:	c9c7a783          	lw	a5,-868(a5) # 20001c9c <last_time.2838>
    af22:	fec42703          	lw	a4,-20(s0)
    af26:	00f77363          	bgeu	a4,a5,af2c <os_timer_processing+0x22>
    {
        /* Overflown */
        timer_switch_lists();
    af2a:	39fd                	jal	ac28 <timer_switch_lists>
    }
    if (time_now >= next_tick_to_unblock_timer)
    af2c:	8181a783          	lw	a5,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
    af30:	fec42703          	lw	a4,-20(s0)
    af34:	0af76b63          	bltu	a4,a5,afea <os_timer_processing+0xe0>
    {
        for (;;)
        {
            if (list_is_empty(timer_list_ptr) == OS_TRUE)
    af38:	200027b7          	lui	a5,0x20002
    af3c:	c947a783          	lw	a5,-876(a5) # 20001c94 <timer_list_ptr>
    af40:	0187d783          	lhu	a5,24(a5)
    af44:	e789                	bnez	a5,af4e <os_timer_processing+0x44>
            {
                next_tick_to_unblock_timer = OS_CFG_DELAY_MAX;
    af46:	577d                	li	a4,-1
    af48:	80e1ac23          	sw	a4,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
                break;
    af4c:	a879                	j	afea <os_timer_processing+0xe0>
            }
            else
            {
                p_timer = list_get_owner_of_head_item(timer_list_ptr);
    af4e:	200027b7          	lui	a5,0x20002
    af52:	c947a783          	lw	a5,-876(a5) # 20001c94 <timer_list_ptr>
    af56:	43dc                	lw	a5,4(a5)
    af58:	47dc                	lw	a5,12(a5)
    af5a:	fef42423          	sw	a5,-24(s0)
                item_value = list_item_get_value(&(p_timer->timer_list_item));
    af5e:	fe842783          	lw	a5,-24(s0)
    af62:	4b9c                	lw	a5,16(a5)
    af64:	fef42223          	sw	a5,-28(s0)
                if (item_value > time_now)
    af68:	fe442703          	lw	a4,-28(s0)
    af6c:	fec42783          	lw	a5,-20(s0)
    af70:	00e7f763          	bgeu	a5,a4,af7e <os_timer_processing+0x74>
                {
                    /* Stop condition */
                    next_tick_to_unblock_timer = item_value;
    af74:	fe442703          	lw	a4,-28(s0)
    af78:	80e1ac23          	sw	a4,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
                    break;
    af7c:	a0bd                	j	afea <os_timer_processing+0xe0>
                }
                os_list_remove(&(p_timer->timer_list_item));
    af7e:	fe842783          	lw	a5,-24(s0)
    af82:	07a1                	addi	a5,a5,8
    af84:	853e                	mv	a0,a5
    af86:	8e4fe0ef          	jal	ra,906a <os_list_remove>

                if (p_timer->func_cb != NULL)
    af8a:	fe842783          	lw	a5,-24(s0)
    af8e:	53dc                	lw	a5,36(a5)
    af90:	c791                	beqz	a5,af9c <os_timer_processing+0x92>
                    p_timer->func_cb();
    af92:	fe842783          	lw	a5,-24(s0)
    af96:	53dc                	lw	a5,36(a5)
    af98:	9782                	jalr	a5
    af9a:	a821                	j	afb2 <os_timer_processing+0xa8>
                else
                    os_task_post_msg_pure(p_timer->des_task_id, p_timer->sig);
    af9c:	fe842783          	lw	a5,-24(s0)
    afa0:	0207c703          	lbu	a4,32(a5)
    afa4:	fe842783          	lw	a5,-24(s0)
    afa8:	4fdc                	lw	a5,28(a5)
    afaa:	85be                	mv	a1,a5
    afac:	853a                	mv	a0,a4
    afae:	8a1ff0ef          	jal	ra,a84e <os_task_post_msg_pure>
                if (p_timer->type == TIMER_PERIODIC)
    afb2:	fe842783          	lw	a5,-24(s0)
    afb6:	57d8                	lw	a4,44(a5)
    afb8:	4785                	li	a5,1
    afba:	02f71363          	bne	a4,a5,afe0 <os_timer_processing+0xd6>
                {
                    ENTER_CRITICAL();
    afbe:	dd9fd0ef          	jal	ra,8d96 <os_critical_enter>
                    list_item_set_value(&(p_timer->timer_list_item), p_timer->period + time_now);
    afc2:	fe842783          	lw	a5,-24(s0)
    afc6:	5798                	lw	a4,40(a5)
    afc8:	fec42783          	lw	a5,-20(s0)
    afcc:	973e                	add	a4,a4,a5
    afce:	fe842783          	lw	a5,-24(s0)
    afd2:	cb98                	sw	a4,16(a5)
                    EXIT_CRITICAL();
    afd4:	deffd0ef          	jal	ra,8dc2 <os_critical_exit>
                    add_timer_to_list(p_timer);
    afd8:	fe842503          	lw	a0,-24(s0)
    afdc:	3971                	jal	ac78 <add_timer_to_list>
    afde:	a021                	j	afe6 <os_timer_processing+0xdc>
                }
                else
                    os_timer_remove(p_timer); /* One shot */
    afe0:	fe842503          	lw	a0,-24(s0)
    afe4:	3565                	jal	ae8c <os_timer_remove>
                update_next_tick_to_unblock();
    afe6:	39f5                	jal	ace2 <update_next_tick_to_unblock>
            if (list_is_empty(timer_list_ptr) == OS_TRUE)
    afe8:	bf81                	j	af38 <os_timer_processing+0x2e>
            }
        }
    }
    last_time = time_now;
    afea:	200027b7          	lui	a5,0x20002
    afee:	fec42703          	lw	a4,-20(s0)
    aff2:	c8e7ae23          	sw	a4,-868(a5) # 20001c9c <last_time.2838>
    p_msg = os_task_wait_for_msg(next_tick_to_unblock_timer - time_now);
    aff6:	8181a703          	lw	a4,-2024(gp) # 20000038 <next_tick_to_unblock_timer>
    affa:	fec42783          	lw	a5,-20(s0)
    affe:	40f707b3          	sub	a5,a4,a5
    b002:	853e                	mv	a0,a5
    b004:	a7bff0ef          	jal	ra,aa7e <os_task_wait_for_msg>
    b008:	fea42023          	sw	a0,-32(s0)
    if (p_msg != NULL)
    b00c:	fe042783          	lw	a5,-32(s0)
    b010:	c789                	beqz	a5,b01a <os_timer_processing+0x110>
        os_msg_free(p_msg);
    b012:	fe042503          	lw	a0,-32(s0)
    b016:	e90fe0ef          	jal	ra,96a6 <os_msg_free>
}
    b01a:	0001                	nop
    b01c:	40f2                	lw	ra,28(sp)
    b01e:	4462                	lw	s0,24(sp)
    b020:	6105                	addi	sp,sp,32
    b022:	8082                	ret

0000b024 <os_timer_start>:

void os_timer_start(os_timer_t *p_timer, uint32_t tick_to_wait)
{
    b024:	7179                	addi	sp,sp,-48
    b026:	d606                	sw	ra,44(sp)
    b028:	d422                	sw	s0,40(sp)
    b02a:	1800                	addi	s0,sp,48
    b02c:	fca42e23          	sw	a0,-36(s0)
    b030:	fcb42c23          	sw	a1,-40(s0)
    uint32_t time_now = os_task_get_tick();
    b034:	caffe0ef          	jal	ra,9ce2 <os_task_get_tick>
    b038:	fea42623          	sw	a0,-20(s0)

    switch (p_timer->type)
    b03c:	fdc42783          	lw	a5,-36(s0)
    b040:	57dc                	lw	a5,44(a5)
    b042:	c789                	beqz	a5,b04c <os_timer_start+0x28>
    b044:	4705                	li	a4,1
    b046:	02e78463          	beq	a5,a4,b06e <os_timer_start+0x4a>
    b04a:	a81d                	j	b080 <os_timer_start+0x5c>
    {
    case TIMER_ONE_SHOT:
        ENTER_CRITICAL();
    b04c:	d4bfd0ef          	jal	ra,8d96 <os_critical_enter>
        list_item_set_value(&(p_timer->timer_list_item), tick_to_wait + time_now + p_timer->period);
    b050:	fd842703          	lw	a4,-40(s0)
    b054:	fec42783          	lw	a5,-20(s0)
    b058:	973e                	add	a4,a4,a5
    b05a:	fdc42783          	lw	a5,-36(s0)
    b05e:	579c                	lw	a5,40(a5)
    b060:	973e                	add	a4,a4,a5
    b062:	fdc42783          	lw	a5,-36(s0)
    b066:	cb98                	sw	a4,16(a5)
        EXIT_CRITICAL();
    b068:	d5bfd0ef          	jal	ra,8dc2 <os_critical_exit>
        break;
    b06c:	a811                	j	b080 <os_timer_start+0x5c>
    case TIMER_PERIODIC:
        list_item_set_value(&(p_timer->timer_list_item), tick_to_wait + time_now);
    b06e:	fd842703          	lw	a4,-40(s0)
    b072:	fec42783          	lw	a5,-20(s0)
    b076:	973e                	add	a4,a4,a5
    b078:	fdc42783          	lw	a5,-36(s0)
    b07c:	cb98                	sw	a4,16(a5)
        break;
    b07e:	0001                	nop
    }

    add_timer_to_list(p_timer);
    b080:	fdc42503          	lw	a0,-36(s0)
    b084:	3ed5                	jal	ac78 <add_timer_to_list>
    update_next_tick_to_unblock();
    b086:	39b1                	jal	ace2 <update_next_tick_to_unblock>
    os_task_post_msg_pure(REF_TASK_TIMER_ID, 0); // Dummy signal
    b088:	4581                	li	a1,0
    b08a:	450d                	li	a0,3
    b08c:	fc2ff0ef          	jal	ra,a84e <os_task_post_msg_pure>
}
    b090:	0001                	nop
    b092:	50b2                	lw	ra,44(sp)
    b094:	5422                	lw	s0,40(sp)
    b096:	6145                	addi	sp,sp,48
    b098:	8082                	ret

0000b09a <os_timer_reset>:

void os_timer_reset(os_timer_t *p_timer)
{
    b09a:	7179                	addi	sp,sp,-48
    b09c:	d606                	sw	ra,44(sp)
    b09e:	d422                	sw	s0,40(sp)
    b0a0:	1800                	addi	s0,sp,48
    b0a2:	fca42e23          	sw	a0,-36(s0)
    if (list_item_get_list_contain(&(p_timer->timer_list_item)) == NULL)
    b0a6:	fdc42783          	lw	a5,-36(s0)
    b0aa:	4f9c                	lw	a5,24(a5)
    b0ac:	ef99                	bnez	a5,b0ca <os_timer_reset+0x30>
    {
        // OSUniversalError = OS_ERR_TIMER_IS_NOT_RUNNING;
        os_assert(0, "OS_ERR_TIMER_IS_NOT_RUNNING");
    b0ae:	67bd                	lui	a5,0xf
    b0b0:	ea878693          	addi	a3,a5,-344 # eea8 <strlen+0x4d0>
    b0b4:	10900613          	li	a2,265
    b0b8:	67bd                	lui	a5,0xf
    b0ba:	dfc78593          	addi	a1,a5,-516 # edfc <strlen+0x424>
    b0be:	67bd                	lui	a5,0xf
    b0c0:	e1c78513          	addi	a0,a5,-484 # ee1c <strlen+0x444>
    b0c4:	6cb000ef          	jal	ra,bf8e <xprintf>
        return;
    b0c8:	a081                	j	b108 <os_timer_reset+0x6e>
    }
    uint32_t time_now = os_task_get_tick();
    b0ca:	c19fe0ef          	jal	ra,9ce2 <os_task_get_tick>
    b0ce:	fea42623          	sw	a0,-20(s0)
    os_list_remove(&(p_timer->timer_list_item));
    b0d2:	fdc42783          	lw	a5,-36(s0)
    b0d6:	07a1                	addi	a5,a5,8
    b0d8:	853e                	mv	a0,a5
    b0da:	f91fd0ef          	jal	ra,906a <os_list_remove>

    ENTER_CRITICAL();
    b0de:	cb9fd0ef          	jal	ra,8d96 <os_critical_enter>
    list_item_set_value(&(p_timer->timer_list_item), time_now + p_timer->period);
    b0e2:	fdc42783          	lw	a5,-36(s0)
    b0e6:	5798                	lw	a4,40(a5)
    b0e8:	fec42783          	lw	a5,-20(s0)
    b0ec:	973e                	add	a4,a4,a5
    b0ee:	fdc42783          	lw	a5,-36(s0)
    b0f2:	cb98                	sw	a4,16(a5)
    EXIT_CRITICAL();
    b0f4:	ccffd0ef          	jal	ra,8dc2 <os_critical_exit>
    add_timer_to_list(p_timer);
    b0f8:	fdc42503          	lw	a0,-36(s0)
    b0fc:	3eb5                	jal	ac78 <add_timer_to_list>

    update_next_tick_to_unblock();
    b0fe:	36d5                	jal	ace2 <update_next_tick_to_unblock>
    os_task_post_msg_pure(REF_TASK_TIMER_ID, 0); // Dummy signal
    b100:	4581                	li	a1,0
    b102:	450d                	li	a0,3
    b104:	f4aff0ef          	jal	ra,a84e <os_task_post_msg_pure>
}
    b108:	50b2                	lw	ra,44(sp)
    b10a:	5422                	lw	s0,40(sp)
    b10c:	6145                	addi	sp,sp,48
    b10e:	8082                	ret

0000b110 <os_timer_set_period>:

void os_timer_set_period(os_timer_t *p_timer, uint32_t period)
{   
    b110:	1101                	addi	sp,sp,-32
    b112:	ce06                	sw	ra,28(sp)
    b114:	cc22                	sw	s0,24(sp)
    b116:	1000                	addi	s0,sp,32
    b118:	fea42623          	sw	a0,-20(s0)
    b11c:	feb42423          	sw	a1,-24(s0)
    ENTER_CRITICAL();
    b120:	c77fd0ef          	jal	ra,8d96 <os_critical_enter>
    p_timer->period = period;
    b124:	fec42783          	lw	a5,-20(s0)
    b128:	fe842703          	lw	a4,-24(s0)
    b12c:	d798                	sw	a4,40(a5)
    EXIT_CRITICAL();
    b12e:	c95fd0ef          	jal	ra,8dc2 <os_critical_exit>
    b132:	0001                	nop
    b134:	40f2                	lw	ra,28(sp)
    b136:	4462                	lw	s0,24(sp)
    b138:	6105                	addi	sp,sp,32
    b13a:	8082                	ret

0000b13c <ilog10>:
/*----------------------------------------------*/
#include <math.h>


static int ilog10 (double n)	/* Calculate log10(n) in integer output */
{
    b13c:	7179                	addi	sp,sp,-48
    b13e:	d606                	sw	ra,44(sp)
    b140:	d422                	sw	s0,40(sp)
    b142:	1800                	addi	s0,sp,48
    b144:	fca42c23          	sw	a0,-40(s0)
    b148:	fcb42e23          	sw	a1,-36(s0)
	int rv = 0;
    b14c:	fe042623          	sw	zero,-20(s0)

	while (n >= 10) {	/* Decimate digit in right shift */
    b150:	a8a5                	j	b1c8 <ilog10+0x8c>
		if (n >= 100000) {
    b152:	67bd                	lui	a5,0xf
    b154:	fa87a603          	lw	a2,-88(a5) # efa8 <strlen+0x5d0>
    b158:	fac7a683          	lw	a3,-84(a5)
    b15c:	fd842503          	lw	a0,-40(s0)
    b160:	fdc42583          	lw	a1,-36(s0)
    b164:	0b3020ef          	jal	ra,da16 <__gedf2>
    b168:	87aa                	mv	a5,a0
    b16a:	0207c963          	bltz	a5,b19c <ilog10+0x60>
			n /= 100000; rv += 5;
    b16e:	67bd                	lui	a5,0xf
    b170:	fa87a603          	lw	a2,-88(a5) # efa8 <strlen+0x5d0>
    b174:	fac7a683          	lw	a3,-84(a5)
    b178:	fd842503          	lw	a0,-40(s0)
    b17c:	fdc42583          	lw	a1,-36(s0)
    b180:	278020ef          	jal	ra,d3f8 <__divdf3>
    b184:	87aa                	mv	a5,a0
    b186:	882e                	mv	a6,a1
    b188:	fcf42c23          	sw	a5,-40(s0)
    b18c:	fd042e23          	sw	a6,-36(s0)
    b190:	fec42783          	lw	a5,-20(s0)
    b194:	0795                	addi	a5,a5,5
    b196:	fef42623          	sw	a5,-20(s0)
    b19a:	a03d                	j	b1c8 <ilog10+0x8c>
		} else {
			n /= 10; rv++;
    b19c:	67bd                	lui	a5,0xf
    b19e:	fb07a603          	lw	a2,-80(a5) # efb0 <strlen+0x5d8>
    b1a2:	fb47a683          	lw	a3,-76(a5)
    b1a6:	fd842503          	lw	a0,-40(s0)
    b1aa:	fdc42583          	lw	a1,-36(s0)
    b1ae:	24a020ef          	jal	ra,d3f8 <__divdf3>
    b1b2:	87aa                	mv	a5,a0
    b1b4:	882e                	mv	a6,a1
    b1b6:	fcf42c23          	sw	a5,-40(s0)
    b1ba:	fd042e23          	sw	a6,-36(s0)
    b1be:	fec42783          	lw	a5,-20(s0)
    b1c2:	0785                	addi	a5,a5,1
    b1c4:	fef42623          	sw	a5,-20(s0)
	while (n >= 10) {	/* Decimate digit in right shift */
    b1c8:	67bd                	lui	a5,0xf
    b1ca:	fb07a603          	lw	a2,-80(a5) # efb0 <strlen+0x5d8>
    b1ce:	fb47a683          	lw	a3,-76(a5)
    b1d2:	fd842503          	lw	a0,-40(s0)
    b1d6:	fdc42583          	lw	a1,-36(s0)
    b1da:	03d020ef          	jal	ra,da16 <__gedf2>
    b1de:	87aa                	mv	a5,a0
    b1e0:	f607d9e3          	bgez	a5,b152 <ilog10+0x16>
		}
	}
	while (n < 1) {		/* Decimate digit in left shift */
    b1e4:	a8a5                	j	b25c <ilog10+0x120>
		if (n < 0.00001) {
    b1e6:	67bd                	lui	a5,0xf
    b1e8:	fb87a603          	lw	a2,-72(a5) # efb8 <strlen+0x5e0>
    b1ec:	fbc7a683          	lw	a3,-68(a5)
    b1f0:	fd842503          	lw	a0,-40(s0)
    b1f4:	fdc42583          	lw	a1,-36(s0)
    b1f8:	0cd020ef          	jal	ra,dac4 <__ledf2>
    b1fc:	87aa                	mv	a5,a0
    b1fe:	0207d963          	bgez	a5,b230 <ilog10+0xf4>
			n *= 100000; rv -= 5;
    b202:	67bd                	lui	a5,0xf
    b204:	fa87a603          	lw	a2,-88(a5) # efa8 <strlen+0x5d0>
    b208:	fac7a683          	lw	a3,-84(a5)
    b20c:	fd842503          	lw	a0,-40(s0)
    b210:	fdc42583          	lw	a1,-36(s0)
    b214:	167020ef          	jal	ra,db7a <__muldf3>
    b218:	87aa                	mv	a5,a0
    b21a:	882e                	mv	a6,a1
    b21c:	fcf42c23          	sw	a5,-40(s0)
    b220:	fd042e23          	sw	a6,-36(s0)
    b224:	fec42783          	lw	a5,-20(s0)
    b228:	17ed                	addi	a5,a5,-5
    b22a:	fef42623          	sw	a5,-20(s0)
    b22e:	a03d                	j	b25c <ilog10+0x120>
		} else {
			n *= 10; rv--;
    b230:	67bd                	lui	a5,0xf
    b232:	fb07a603          	lw	a2,-80(a5) # efb0 <strlen+0x5d8>
    b236:	fb47a683          	lw	a3,-76(a5)
    b23a:	fd842503          	lw	a0,-40(s0)
    b23e:	fdc42583          	lw	a1,-36(s0)
    b242:	139020ef          	jal	ra,db7a <__muldf3>
    b246:	87aa                	mv	a5,a0
    b248:	882e                	mv	a6,a1
    b24a:	fcf42c23          	sw	a5,-40(s0)
    b24e:	fd042e23          	sw	a6,-36(s0)
    b252:	fec42783          	lw	a5,-20(s0)
    b256:	17fd                	addi	a5,a5,-1
    b258:	fef42623          	sw	a5,-20(s0)
	while (n < 1) {		/* Decimate digit in left shift */
    b25c:	67bd                	lui	a5,0xf
    b25e:	fc07a603          	lw	a2,-64(a5) # efc0 <strlen+0x5e8>
    b262:	fc47a683          	lw	a3,-60(a5)
    b266:	fd842503          	lw	a0,-40(s0)
    b26a:	fdc42583          	lw	a1,-36(s0)
    b26e:	057020ef          	jal	ra,dac4 <__ledf2>
    b272:	87aa                	mv	a5,a0
    b274:	f607c9e3          	bltz	a5,b1e6 <ilog10+0xaa>
		}
	}
	return rv;
    b278:	fec42783          	lw	a5,-20(s0)
}
    b27c:	853e                	mv	a0,a5
    b27e:	50b2                	lw	ra,44(sp)
    b280:	5422                	lw	s0,40(sp)
    b282:	6145                	addi	sp,sp,48
    b284:	8082                	ret

0000b286 <i10x>:


static double i10x (int n)	/* Calculate 10^n */
{
    b286:	7179                	addi	sp,sp,-48
    b288:	d606                	sw	ra,44(sp)
    b28a:	d422                	sw	s0,40(sp)
    b28c:	1800                	addi	s0,sp,48
    b28e:	fca42e23          	sw	a0,-36(s0)
	double rv = 1;
    b292:	67bd                	lui	a5,0xf
    b294:	fc47a803          	lw	a6,-60(a5) # efc4 <strlen+0x5ec>
    b298:	fc07a783          	lw	a5,-64(a5)
    b29c:	fef42423          	sw	a5,-24(s0)
    b2a0:	ff042623          	sw	a6,-20(s0)

	while (n > 0) {		/* Left shift */
    b2a4:	a09d                	j	b30a <i10x+0x84>
		if (n >= 5) {
    b2a6:	fdc42703          	lw	a4,-36(s0)
    b2aa:	4791                	li	a5,4
    b2ac:	02e7d963          	bge	a5,a4,b2de <i10x+0x58>
			rv *= 100000; n -= 5;
    b2b0:	67bd                	lui	a5,0xf
    b2b2:	fa87a603          	lw	a2,-88(a5) # efa8 <strlen+0x5d0>
    b2b6:	fac7a683          	lw	a3,-84(a5)
    b2ba:	fe842503          	lw	a0,-24(s0)
    b2be:	fec42583          	lw	a1,-20(s0)
    b2c2:	0b9020ef          	jal	ra,db7a <__muldf3>
    b2c6:	87aa                	mv	a5,a0
    b2c8:	882e                	mv	a6,a1
    b2ca:	fef42423          	sw	a5,-24(s0)
    b2ce:	ff042623          	sw	a6,-20(s0)
    b2d2:	fdc42783          	lw	a5,-36(s0)
    b2d6:	17ed                	addi	a5,a5,-5
    b2d8:	fcf42e23          	sw	a5,-36(s0)
    b2dc:	a03d                	j	b30a <i10x+0x84>
		} else {
			rv *= 10; n--;
    b2de:	67bd                	lui	a5,0xf
    b2e0:	fb07a603          	lw	a2,-80(a5) # efb0 <strlen+0x5d8>
    b2e4:	fb47a683          	lw	a3,-76(a5)
    b2e8:	fe842503          	lw	a0,-24(s0)
    b2ec:	fec42583          	lw	a1,-20(s0)
    b2f0:	08b020ef          	jal	ra,db7a <__muldf3>
    b2f4:	87aa                	mv	a5,a0
    b2f6:	882e                	mv	a6,a1
    b2f8:	fef42423          	sw	a5,-24(s0)
    b2fc:	ff042623          	sw	a6,-20(s0)
    b300:	fdc42783          	lw	a5,-36(s0)
    b304:	17fd                	addi	a5,a5,-1
    b306:	fcf42e23          	sw	a5,-36(s0)
	while (n > 0) {		/* Left shift */
    b30a:	fdc42783          	lw	a5,-36(s0)
    b30e:	f8f04ce3          	bgtz	a5,b2a6 <i10x+0x20>
		}
	}
	while (n < 0) {		/* Right shift */
    b312:	a09d                	j	b378 <i10x+0xf2>
		if (n <= -5) {
    b314:	fdc42703          	lw	a4,-36(s0)
    b318:	57f1                	li	a5,-4
    b31a:	02f75963          	bge	a4,a5,b34c <i10x+0xc6>
			rv /= 100000; n += 5;
    b31e:	67bd                	lui	a5,0xf
    b320:	fa87a603          	lw	a2,-88(a5) # efa8 <strlen+0x5d0>
    b324:	fac7a683          	lw	a3,-84(a5)
    b328:	fe842503          	lw	a0,-24(s0)
    b32c:	fec42583          	lw	a1,-20(s0)
    b330:	0c8020ef          	jal	ra,d3f8 <__divdf3>
    b334:	87aa                	mv	a5,a0
    b336:	882e                	mv	a6,a1
    b338:	fef42423          	sw	a5,-24(s0)
    b33c:	ff042623          	sw	a6,-20(s0)
    b340:	fdc42783          	lw	a5,-36(s0)
    b344:	0795                	addi	a5,a5,5
    b346:	fcf42e23          	sw	a5,-36(s0)
    b34a:	a03d                	j	b378 <i10x+0xf2>
		} else {
			rv /= 10; n++;
    b34c:	67bd                	lui	a5,0xf
    b34e:	fb07a603          	lw	a2,-80(a5) # efb0 <strlen+0x5d8>
    b352:	fb47a683          	lw	a3,-76(a5)
    b356:	fe842503          	lw	a0,-24(s0)
    b35a:	fec42583          	lw	a1,-20(s0)
    b35e:	09a020ef          	jal	ra,d3f8 <__divdf3>
    b362:	87aa                	mv	a5,a0
    b364:	882e                	mv	a6,a1
    b366:	fef42423          	sw	a5,-24(s0)
    b36a:	ff042623          	sw	a6,-20(s0)
    b36e:	fdc42783          	lw	a5,-36(s0)
    b372:	0785                	addi	a5,a5,1
    b374:	fcf42e23          	sw	a5,-36(s0)
	while (n < 0) {		/* Right shift */
    b378:	fdc42783          	lw	a5,-36(s0)
    b37c:	f807cce3          	bltz	a5,b314 <i10x+0x8e>
		}
	}
	return rv;
    b380:	fe842783          	lw	a5,-24(s0)
    b384:	fec42803          	lw	a6,-20(s0)
}
    b388:	853e                	mv	a0,a5
    b38a:	85c2                	mv	a1,a6
    b38c:	50b2                	lw	ra,44(sp)
    b38e:	5422                	lw	s0,40(sp)
    b390:	6145                	addi	sp,sp,48
    b392:	8082                	ret

0000b394 <ftoa>:
	char* buf,	/* Buffer to output the generated string */
	double val,	/* Real number to output */
	int prec,	/* Number of fractinal digits */
	char fmt	/* Notation */
)
{
    b394:	711d                	addi	sp,sp,-96
    b396:	ce86                	sw	ra,92(sp)
    b398:	cca2                	sw	s0,88(sp)
    b39a:	caa6                	sw	s1,84(sp)
    b39c:	c8ca                	sw	s2,80(sp)
    b39e:	c6ce                	sw	s3,76(sp)
    b3a0:	1080                	addi	s0,sp,96
    b3a2:	faa42e23          	sw	a0,-68(s0)
    b3a6:	fab42823          	sw	a1,-80(s0)
    b3aa:	fac42a23          	sw	a2,-76(s0)
    b3ae:	fad42c23          	sw	a3,-72(s0)
    b3b2:	87ba                	mv	a5,a4
    b3b4:	faf407a3          	sb	a5,-81(s0)
	int d;
	int e = 0, m = 0;
    b3b8:	fc042e23          	sw	zero,-36(s0)
    b3bc:	fc042c23          	sw	zero,-40(s0)
	char sign = 0;
    b3c0:	fc040ba3          	sb	zero,-41(s0)
	double w;
	const char *er = 0;
    b3c4:	fc042823          	sw	zero,-48(s0)


	if (isnan(val)) {			/* Not a number? */
    b3c8:	fb042603          	lw	a2,-80(s0)
    b3cc:	fb442683          	lw	a3,-76(s0)
    b3d0:	fb042503          	lw	a0,-80(s0)
    b3d4:	fb442583          	lw	a1,-76(s0)
    b3d8:	394030ef          	jal	ra,e76c <__unorddf2>
    b3dc:	87aa                	mv	a5,a0
    b3de:	c799                	beqz	a5,b3ec <ftoa+0x58>
		er = "NaN";
    b3e0:	67bd                	lui	a5,0xf
    b3e2:	ec878793          	addi	a5,a5,-312 # eec8 <strlen+0x4f0>
    b3e6:	fcf42823          	sw	a5,-48(s0)
    b3ea:	a661                	j	b772 <ftoa+0x3de>
	} else {
		if (prec < 0) prec = 6;	/* Default precision (6 fractional digits) */
    b3ec:	fb842783          	lw	a5,-72(s0)
    b3f0:	0007d563          	bgez	a5,b3fa <ftoa+0x66>
    b3f4:	4799                	li	a5,6
    b3f6:	faf42c23          	sw	a5,-72(s0)
		if (val < 0) {			/* Nagative value? */
    b3fa:	4601                	li	a2,0
    b3fc:	4681                	li	a3,0
    b3fe:	fb042503          	lw	a0,-80(s0)
    b402:	fb442583          	lw	a1,-76(s0)
    b406:	6be020ef          	jal	ra,dac4 <__ledf2>
    b40a:	87aa                	mv	a5,a0
    b40c:	0207d263          	bgez	a5,b430 <ftoa+0x9c>
			val = -val; sign = '-';
    b410:	fb042783          	lw	a5,-80(s0)
    b414:	faf42823          	sw	a5,-80(s0)
    b418:	fb442703          	lw	a4,-76(s0)
    b41c:	800007b7          	lui	a5,0x80000
    b420:	8fb9                	xor	a5,a5,a4
    b422:	faf42a23          	sw	a5,-76(s0)
    b426:	02d00793          	li	a5,45
    b42a:	fcf40ba3          	sb	a5,-41(s0)
    b42e:	a029                	j	b438 <ftoa+0xa4>
		} else {
			sign = '+';
    b430:	02b00793          	li	a5,43
    b434:	fcf40ba3          	sb	a5,-41(s0)
		}
		if (isinf(val)) {		/* Infinite? */
    b438:	fb042903          	lw	s2,-80(s0)
    b43c:	fb442703          	lw	a4,-76(s0)
    b440:	800007b7          	lui	a5,0x80000
    b444:	fff7c793          	not	a5,a5
    b448:	00f779b3          	and	s3,a4,a5
    b44c:	4485                	li	s1,1
    b44e:	67bd                	lui	a5,0xf
    b450:	fc87a603          	lw	a2,-56(a5) # efc8 <strlen+0x5f0>
    b454:	fcc7a683          	lw	a3,-52(a5)
    b458:	854a                	mv	a0,s2
    b45a:	85ce                	mv	a1,s3
    b45c:	310030ef          	jal	ra,e76c <__unorddf2>
    b460:	87aa                	mv	a5,a0
    b462:	ef91                	bnez	a5,b47e <ftoa+0xea>
    b464:	67bd                	lui	a5,0xf
    b466:	fc87a603          	lw	a2,-56(a5) # efc8 <strlen+0x5f0>
    b46a:	fcc7a683          	lw	a3,-52(a5)
    b46e:	854a                	mv	a0,s2
    b470:	85ce                	mv	a1,s3
    b472:	652020ef          	jal	ra,dac4 <__ledf2>
    b476:	87aa                	mv	a5,a0
    b478:	00f05363          	blez	a5,b47e <ftoa+0xea>
    b47c:	4481                	li	s1,0
    b47e:	0ff4f793          	andi	a5,s1,255
    b482:	0017c793          	xori	a5,a5,1
    b486:	0ff7f793          	andi	a5,a5,255
    b48a:	c799                	beqz	a5,b498 <ftoa+0x104>
			er = "INF";
    b48c:	67bd                	lui	a5,0xf
    b48e:	ecc78793          	addi	a5,a5,-308 # eecc <strlen+0x4f4>
    b492:	fcf42823          	sw	a5,-48(s0)
    b496:	a289                	j	b5d8 <ftoa+0x244>
		} else {
			if (fmt == 'f') {	/* Decimal notation? */
    b498:	faf44703          	lbu	a4,-81(s0)
    b49c:	06600793          	li	a5,102
    b4a0:	06f71a63          	bne	a4,a5,b514 <ftoa+0x180>
				val += i10x(-prec) / 2;	/* Round (nearest) */
    b4a4:	fb842783          	lw	a5,-72(s0)
    b4a8:	40f007b3          	neg	a5,a5
    b4ac:	853e                	mv	a0,a5
    b4ae:	3be1                	jal	b286 <i10x>
    b4b0:	67bd                	lui	a5,0xf
    b4b2:	fd07a603          	lw	a2,-48(a5) # efd0 <strlen+0x5f8>
    b4b6:	fd47a683          	lw	a3,-44(a5)
    b4ba:	73f010ef          	jal	ra,d3f8 <__divdf3>
    b4be:	87aa                	mv	a5,a0
    b4c0:	882e                	mv	a6,a1
    b4c2:	863e                	mv	a2,a5
    b4c4:	86c2                	mv	a3,a6
    b4c6:	fb042503          	lw	a0,-80(s0)
    b4ca:	fb442583          	lw	a1,-76(s0)
    b4ce:	7fa010ef          	jal	ra,ccc8 <__adddf3>
    b4d2:	87aa                	mv	a5,a0
    b4d4:	882e                	mv	a6,a1
    b4d6:	faf42823          	sw	a5,-80(s0)
    b4da:	fb042a23          	sw	a6,-76(s0)
				m = ilog10(val);
    b4de:	fb042503          	lw	a0,-80(s0)
    b4e2:	fb442583          	lw	a1,-76(s0)
    b4e6:	3999                	jal	b13c <ilog10>
    b4e8:	fca42c23          	sw	a0,-40(s0)
				if (m < 0) m = 0;
    b4ec:	fd842783          	lw	a5,-40(s0)
    b4f0:	0007d463          	bgez	a5,b4f8 <ftoa+0x164>
    b4f4:	fc042c23          	sw	zero,-40(s0)
				if (m + prec + 3 >= SZB_OUTPUT) er = "OV";	/* Buffer overflow? */
    b4f8:	fd842703          	lw	a4,-40(s0)
    b4fc:	fb842783          	lw	a5,-72(s0)
    b500:	973e                	add	a4,a4,a5
    b502:	47f1                	li	a5,28
    b504:	0ce7da63          	bge	a5,a4,b5d8 <ftoa+0x244>
    b508:	67bd                	lui	a5,0xf
    b50a:	ed078793          	addi	a5,a5,-304 # eed0 <strlen+0x4f8>
    b50e:	fcf42823          	sw	a5,-48(s0)
    b512:	a0d9                	j	b5d8 <ftoa+0x244>
			} else {			/* E notation */
				if (val != 0) {		/* Not a true zero? */
    b514:	4601                	li	a2,0
    b516:	4681                	li	a3,0
    b518:	fb042503          	lw	a0,-80(s0)
    b51c:	fb442583          	lw	a1,-76(s0)
    b520:	48c020ef          	jal	ra,d9ac <__eqdf2>
    b524:	87aa                	mv	a5,a0
    b526:	cbcd                	beqz	a5,b5d8 <ftoa+0x244>
					val += i10x(ilog10(val) - prec) / 2;	/* Round (nearest) */
    b528:	fb042503          	lw	a0,-80(s0)
    b52c:	fb442583          	lw	a1,-76(s0)
    b530:	3131                	jal	b13c <ilog10>
    b532:	872a                	mv	a4,a0
    b534:	fb842783          	lw	a5,-72(s0)
    b538:	40f707b3          	sub	a5,a4,a5
    b53c:	853e                	mv	a0,a5
    b53e:	33a1                	jal	b286 <i10x>
    b540:	67bd                	lui	a5,0xf
    b542:	fd07a603          	lw	a2,-48(a5) # efd0 <strlen+0x5f8>
    b546:	fd47a683          	lw	a3,-44(a5)
    b54a:	6af010ef          	jal	ra,d3f8 <__divdf3>
    b54e:	87aa                	mv	a5,a0
    b550:	882e                	mv	a6,a1
    b552:	863e                	mv	a2,a5
    b554:	86c2                	mv	a3,a6
    b556:	fb042503          	lw	a0,-80(s0)
    b55a:	fb442583          	lw	a1,-76(s0)
    b55e:	76a010ef          	jal	ra,ccc8 <__adddf3>
    b562:	87aa                	mv	a5,a0
    b564:	882e                	mv	a6,a1
    b566:	faf42823          	sw	a5,-80(s0)
    b56a:	fb042a23          	sw	a6,-76(s0)
					e = ilog10(val);
    b56e:	fb042503          	lw	a0,-80(s0)
    b572:	fb442583          	lw	a1,-76(s0)
    b576:	36d9                	jal	b13c <ilog10>
    b578:	fca42e23          	sw	a0,-36(s0)
					if (e > 99 || prec + 6 >= SZB_OUTPUT) {	/* Buffer overflow or E > +99? */
    b57c:	fdc42703          	lw	a4,-36(s0)
    b580:	06300793          	li	a5,99
    b584:	00e7c763          	blt	a5,a4,b592 <ftoa+0x1fe>
    b588:	fb842703          	lw	a4,-72(s0)
    b58c:	47e5                	li	a5,25
    b58e:	00e7d863          	bge	a5,a4,b59e <ftoa+0x20a>
						er = "OV";
    b592:	67bd                	lui	a5,0xf
    b594:	ed078793          	addi	a5,a5,-304 # eed0 <strlen+0x4f8>
    b598:	fcf42823          	sw	a5,-48(s0)
    b59c:	a835                	j	b5d8 <ftoa+0x244>
					} else {
						if (e < -99) e = -99;
    b59e:	fdc42703          	lw	a4,-36(s0)
    b5a2:	f9d00793          	li	a5,-99
    b5a6:	00f75663          	bge	a4,a5,b5b2 <ftoa+0x21e>
    b5aa:	f9d00793          	li	a5,-99
    b5ae:	fcf42e23          	sw	a5,-36(s0)
						val /= i10x(e);	/* Normalize */
    b5b2:	fdc42503          	lw	a0,-36(s0)
    b5b6:	39c1                	jal	b286 <i10x>
    b5b8:	87aa                	mv	a5,a0
    b5ba:	882e                	mv	a6,a1
    b5bc:	863e                	mv	a2,a5
    b5be:	86c2                	mv	a3,a6
    b5c0:	fb042503          	lw	a0,-80(s0)
    b5c4:	fb442583          	lw	a1,-76(s0)
    b5c8:	631010ef          	jal	ra,d3f8 <__divdf3>
    b5cc:	87aa                	mv	a5,a0
    b5ce:	882e                	mv	a6,a1
    b5d0:	faf42823          	sw	a5,-80(s0)
    b5d4:	fb042a23          	sw	a6,-76(s0)
					}
				}
			}
		}
		if (!er) {	/* Not error condition */
    b5d8:	fd042783          	lw	a5,-48(s0)
    b5dc:	18079b63          	bnez	a5,b772 <ftoa+0x3de>
			if (sign == '-') *buf++ = sign;	/* Add a - if negative value */
    b5e0:	fd744703          	lbu	a4,-41(s0)
    b5e4:	02d00793          	li	a5,45
    b5e8:	00f71c63          	bne	a4,a5,b600 <ftoa+0x26c>
    b5ec:	fbc42783          	lw	a5,-68(s0)
    b5f0:	00178713          	addi	a4,a5,1
    b5f4:	fae42e23          	sw	a4,-68(s0)
    b5f8:	fd744703          	lbu	a4,-41(s0)
    b5fc:	00e78023          	sb	a4,0(a5)
			do {				/* Put decimal number */
				w = i10x(m);				/* Snip the highest digit d */
    b600:	fd842503          	lw	a0,-40(s0)
    b604:	3149                	jal	b286 <i10x>
    b606:	fca42423          	sw	a0,-56(s0)
    b60a:	fcb42623          	sw	a1,-52(s0)
				d = val / w; val -= d * w;
    b60e:	fc842603          	lw	a2,-56(s0)
    b612:	fcc42683          	lw	a3,-52(s0)
    b616:	fb042503          	lw	a0,-80(s0)
    b61a:	fb442583          	lw	a1,-76(s0)
    b61e:	5db010ef          	jal	ra,d3f8 <__divdf3>
    b622:	87aa                	mv	a5,a0
    b624:	882e                	mv	a6,a1
    b626:	853e                	mv	a0,a5
    b628:	85c2                	mv	a1,a6
    b62a:	17e030ef          	jal	ra,e7a8 <__fixdfsi>
    b62e:	87aa                	mv	a5,a0
    b630:	fcf42223          	sw	a5,-60(s0)
    b634:	fc442503          	lw	a0,-60(s0)
    b638:	1d8030ef          	jal	ra,e810 <__floatsidf>
    b63c:	87aa                	mv	a5,a0
    b63e:	882e                	mv	a6,a1
    b640:	fc842603          	lw	a2,-56(s0)
    b644:	fcc42683          	lw	a3,-52(s0)
    b648:	853e                	mv	a0,a5
    b64a:	85c2                	mv	a1,a6
    b64c:	52e020ef          	jal	ra,db7a <__muldf3>
    b650:	87aa                	mv	a5,a0
    b652:	882e                	mv	a6,a1
    b654:	863e                	mv	a2,a5
    b656:	86c2                	mv	a3,a6
    b658:	fb042503          	lw	a0,-80(s0)
    b65c:	fb442583          	lw	a1,-76(s0)
    b660:	1d3020ef          	jal	ra,e032 <__subdf3>
    b664:	87aa                	mv	a5,a0
    b666:	882e                	mv	a6,a1
    b668:	faf42823          	sw	a5,-80(s0)
    b66c:	fb042a23          	sw	a6,-76(s0)
				if (m == -1) *buf++ = XF_DPC;	/* Insert a decimal separarot if get into fractional part */
    b670:	fd842703          	lw	a4,-40(s0)
    b674:	57fd                	li	a5,-1
    b676:	00f71c63          	bne	a4,a5,b68e <ftoa+0x2fa>
    b67a:	fbc42783          	lw	a5,-68(s0)
    b67e:	00178713          	addi	a4,a5,1
    b682:	fae42e23          	sw	a4,-68(s0)
    b686:	02e00713          	li	a4,46
    b68a:	00e78023          	sb	a4,0(a5)
				*buf++ = '0' + d;			/* Put the digit */
    b68e:	fc442783          	lw	a5,-60(s0)
    b692:	0ff7f713          	andi	a4,a5,255
    b696:	fbc42783          	lw	a5,-68(s0)
    b69a:	00178693          	addi	a3,a5,1
    b69e:	fad42e23          	sw	a3,-68(s0)
    b6a2:	03070713          	addi	a4,a4,48
    b6a6:	0ff77713          	andi	a4,a4,255
    b6aa:	00e78023          	sb	a4,0(a5)
			} while (--m >= -prec);			/* Output all digits specified by prec */
    b6ae:	fd842783          	lw	a5,-40(s0)
    b6b2:	17fd                	addi	a5,a5,-1
    b6b4:	fcf42c23          	sw	a5,-40(s0)
    b6b8:	fb842783          	lw	a5,-72(s0)
    b6bc:	40f007b3          	neg	a5,a5
    b6c0:	fd842703          	lw	a4,-40(s0)
    b6c4:	f2f75ee3          	bge	a4,a5,b600 <ftoa+0x26c>
			if (fmt != 'f') {	/* Put exponent if needed */
    b6c8:	faf44703          	lbu	a4,-81(s0)
    b6cc:	06600793          	li	a5,102
    b6d0:	0af70163          	beq	a4,a5,b772 <ftoa+0x3de>
				*buf++ = fmt;
    b6d4:	fbc42783          	lw	a5,-68(s0)
    b6d8:	00178713          	addi	a4,a5,1
    b6dc:	fae42e23          	sw	a4,-68(s0)
    b6e0:	faf44703          	lbu	a4,-81(s0)
    b6e4:	00e78023          	sb	a4,0(a5)
				if (e < 0) {
    b6e8:	fdc42783          	lw	a5,-36(s0)
    b6ec:	0207d363          	bgez	a5,b712 <ftoa+0x37e>
					e = -e; *buf++ = '-';
    b6f0:	fdc42783          	lw	a5,-36(s0)
    b6f4:	40f007b3          	neg	a5,a5
    b6f8:	fcf42e23          	sw	a5,-36(s0)
    b6fc:	fbc42783          	lw	a5,-68(s0)
    b700:	00178713          	addi	a4,a5,1
    b704:	fae42e23          	sw	a4,-68(s0)
    b708:	02d00713          	li	a4,45
    b70c:	00e78023          	sb	a4,0(a5)
    b710:	a819                	j	b726 <ftoa+0x392>
				} else {
					*buf++ = '+';
    b712:	fbc42783          	lw	a5,-68(s0)
    b716:	00178713          	addi	a4,a5,1
    b71a:	fae42e23          	sw	a4,-68(s0)
    b71e:	02b00713          	li	a4,43
    b722:	00e78023          	sb	a4,0(a5)
				}
				*buf++ = '0' + e / 10;
    b726:	fdc42703          	lw	a4,-36(s0)
    b72a:	47a9                	li	a5,10
    b72c:	02f747b3          	div	a5,a4,a5
    b730:	0ff7f713          	andi	a4,a5,255
    b734:	fbc42783          	lw	a5,-68(s0)
    b738:	00178693          	addi	a3,a5,1
    b73c:	fad42e23          	sw	a3,-68(s0)
    b740:	03070713          	addi	a4,a4,48
    b744:	0ff77713          	andi	a4,a4,255
    b748:	00e78023          	sb	a4,0(a5)
				*buf++ = '0' + e % 10;
    b74c:	fdc42703          	lw	a4,-36(s0)
    b750:	47a9                	li	a5,10
    b752:	02f767b3          	rem	a5,a4,a5
    b756:	0ff7f713          	andi	a4,a5,255
    b75a:	fbc42783          	lw	a5,-68(s0)
    b75e:	00178693          	addi	a3,a5,1
    b762:	fad42e23          	sw	a3,-68(s0)
    b766:	03070713          	addi	a4,a4,48
    b76a:	0ff77713          	andi	a4,a4,255
    b76e:	00e78023          	sb	a4,0(a5)
			}
		}
	}
	if (er) {	/* Error condition? */
    b772:	fd042783          	lw	a5,-48(s0)
    b776:	c3b9                	beqz	a5,b7bc <ftoa+0x428>
		if (sign) *buf++ = sign;		/* Add sign if needed */
    b778:	fd744783          	lbu	a5,-41(s0)
    b77c:	cb99                	beqz	a5,b792 <ftoa+0x3fe>
    b77e:	fbc42783          	lw	a5,-68(s0)
    b782:	00178713          	addi	a4,a5,1
    b786:	fae42e23          	sw	a4,-68(s0)
    b78a:	fd744703          	lbu	a4,-41(s0)
    b78e:	00e78023          	sb	a4,0(a5)
		do *buf++ = *er++; while (*er);	/* Put error symbol */
    b792:	fd042703          	lw	a4,-48(s0)
    b796:	00170793          	addi	a5,a4,1
    b79a:	fcf42823          	sw	a5,-48(s0)
    b79e:	fbc42783          	lw	a5,-68(s0)
    b7a2:	00178693          	addi	a3,a5,1
    b7a6:	fad42e23          	sw	a3,-68(s0)
    b7aa:	00074703          	lbu	a4,0(a4)
    b7ae:	00e78023          	sb	a4,0(a5)
    b7b2:	fd042783          	lw	a5,-48(s0)
    b7b6:	0007c783          	lbu	a5,0(a5)
    b7ba:	ffe1                	bnez	a5,b792 <ftoa+0x3fe>
	}
	*buf = 0;	/* Term */
    b7bc:	fbc42783          	lw	a5,-68(s0)
    b7c0:	00078023          	sb	zero,0(a5)
}
    b7c4:	0001                	nop
    b7c6:	40f6                	lw	ra,92(sp)
    b7c8:	4466                	lw	s0,88(sp)
    b7ca:	44d6                	lw	s1,84(sp)
    b7cc:	4946                	lw	s2,80(sp)
    b7ce:	49b6                	lw	s3,76(sp)
    b7d0:	6125                	addi	sp,sp,96
    b7d2:	8082                	ret

0000b7d4 <xputc>:
/*----------------------------------------------*/

void xputc (
	int chr				/* Character to be output */
)
{
    b7d4:	1101                	addi	sp,sp,-32
    b7d6:	ce06                	sw	ra,28(sp)
    b7d8:	cc22                	sw	s0,24(sp)
    b7da:	1000                	addi	s0,sp,32
    b7dc:	fea42623          	sw	a0,-20(s0)
	xfputc(xfunc_output, chr);	/* Output it to the default output device */
    b7e0:	200027b7          	lui	a5,0x20002
    b7e4:	cb07a783          	lw	a5,-848(a5) # 20001cb0 <xfunc_output>
    b7e8:	fec42583          	lw	a1,-20(s0)
    b7ec:	853e                	mv	a0,a5
    b7ee:	2031                	jal	b7fa <xfputc>
}
    b7f0:	0001                	nop
    b7f2:	40f2                	lw	ra,28(sp)
    b7f4:	4462                	lw	s0,24(sp)
    b7f6:	6105                	addi	sp,sp,32
    b7f8:	8082                	ret

0000b7fa <xfputc>:

void xfputc (			/* Put a character to the specified device */
	void(*func)(int),	/* Pointer to the output function (null:strptr) */
	int chr				/* Character to be output */
)
{
    b7fa:	1101                	addi	sp,sp,-32
    b7fc:	ce06                	sw	ra,28(sp)
    b7fe:	cc22                	sw	s0,24(sp)
    b800:	1000                	addi	s0,sp,32
    b802:	fea42623          	sw	a0,-20(s0)
    b806:	feb42423          	sw	a1,-24(s0)
	if (XF_CRLF && chr == '\n') xfputc(func, '\r');	/* CR -> CRLF */
    b80a:	fe842703          	lw	a4,-24(s0)
    b80e:	47a9                	li	a5,10
    b810:	00f71663          	bne	a4,a5,b81c <xfputc+0x22>
    b814:	45b5                	li	a1,13
    b816:	fec42503          	lw	a0,-20(s0)
    b81a:	37c5                	jal	b7fa <xfputc>

	if (func) {
    b81c:	fec42783          	lw	a5,-20(s0)
    b820:	c799                	beqz	a5,b82e <xfputc+0x34>
		func(chr);		/* Write a character to the output device */
    b822:	fec42783          	lw	a5,-20(s0)
    b826:	fe842503          	lw	a0,-24(s0)
    b82a:	9782                	jalr	a5
	} else if (strptr) {
		 *strptr++ = chr;	/* Write a character to the memory */
	}
}
    b82c:	a035                	j	b858 <xfputc+0x5e>
	} else if (strptr) {
    b82e:	200027b7          	lui	a5,0x20002
    b832:	ca07a783          	lw	a5,-864(a5) # 20001ca0 <strptr>
    b836:	c38d                	beqz	a5,b858 <xfputc+0x5e>
		 *strptr++ = chr;	/* Write a character to the memory */
    b838:	200027b7          	lui	a5,0x20002
    b83c:	ca07a783          	lw	a5,-864(a5) # 20001ca0 <strptr>
    b840:	00178693          	addi	a3,a5,1
    b844:	20002737          	lui	a4,0x20002
    b848:	cad72023          	sw	a3,-864(a4) # 20001ca0 <strptr>
    b84c:	fe842703          	lw	a4,-24(s0)
    b850:	0ff77713          	andi	a4,a4,255
    b854:	00e78023          	sb	a4,0(a5)
}
    b858:	0001                	nop
    b85a:	40f2                	lw	ra,28(sp)
    b85c:	4462                	lw	s0,24(sp)
    b85e:	6105                	addi	sp,sp,32
    b860:	8082                	ret

0000b862 <xputs>:
/*----------------------------------------------*/

void xputs (			/* Put a string to the default device */
	const char* str		/* Pointer to the string */
)
{
    b862:	1101                	addi	sp,sp,-32
    b864:	ce06                	sw	ra,28(sp)
    b866:	cc22                	sw	s0,24(sp)
    b868:	1000                	addi	s0,sp,32
    b86a:	fea42623          	sw	a0,-20(s0)
	xfputs(xfunc_output, str);
    b86e:	200027b7          	lui	a5,0x20002
    b872:	cb07a783          	lw	a5,-848(a5) # 20001cb0 <xfunc_output>
    b876:	fec42583          	lw	a1,-20(s0)
    b87a:	853e                	mv	a0,a5
    b87c:	2031                	jal	b888 <xfputs>
}
    b87e:	0001                	nop
    b880:	40f2                	lw	ra,28(sp)
    b882:	4462                	lw	s0,24(sp)
    b884:	6105                	addi	sp,sp,32
    b886:	8082                	ret

0000b888 <xfputs>:

void xfputs (			/* Put a string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	str		/* Pointer to the string */
)
{
    b888:	1101                	addi	sp,sp,-32
    b88a:	ce06                	sw	ra,28(sp)
    b88c:	cc22                	sw	s0,24(sp)
    b88e:	1000                	addi	s0,sp,32
    b890:	fea42623          	sw	a0,-20(s0)
    b894:	feb42423          	sw	a1,-24(s0)
	while (*str) {			/* Put the string */
    b898:	a829                	j	b8b2 <xfputs+0x2a>
		xfputc(func, *str++);
    b89a:	fe842783          	lw	a5,-24(s0)
    b89e:	00178713          	addi	a4,a5,1
    b8a2:	fee42423          	sw	a4,-24(s0)
    b8a6:	0007c783          	lbu	a5,0(a5)
    b8aa:	85be                	mv	a1,a5
    b8ac:	fec42503          	lw	a0,-20(s0)
    b8b0:	37a9                	jal	b7fa <xfputc>
	while (*str) {			/* Put the string */
    b8b2:	fe842783          	lw	a5,-24(s0)
    b8b6:	0007c783          	lbu	a5,0(a5)
    b8ba:	f3e5                	bnez	a5,b89a <xfputs+0x12>
	}
}
    b8bc:	0001                	nop
    b8be:	40f2                	lw	ra,28(sp)
    b8c0:	4462                	lw	s0,24(sp)
    b8c2:	6105                	addi	sp,sp,32
    b8c4:	8082                	ret

0000b8c6 <xvfprintf>:
static void xvfprintf (
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	va_list arp			/* Pointer to arguments */
)
{
    b8c6:	7135                	addi	sp,sp,-160
    b8c8:	cf06                	sw	ra,156(sp)
    b8ca:	cd22                	sw	s0,152(sp)
    b8cc:	cb4a                	sw	s2,148(sp)
    b8ce:	c94e                	sw	s3,144(sp)
    b8d0:	c752                	sw	s4,140(sp)
    b8d2:	c556                	sw	s5,136(sp)
    b8d4:	c35a                	sw	s6,132(sp)
    b8d6:	c15e                	sw	s7,128(sp)
    b8d8:	dee2                	sw	s8,124(sp)
    b8da:	dce6                	sw	s9,120(sp)
    b8dc:	1100                	addi	s0,sp,160
    b8de:	f6a42623          	sw	a0,-148(s0)
    b8e2:	f6b42423          	sw	a1,-152(s0)
    b8e6:	f6c42223          	sw	a2,-156(s0)
	long v;
	unsigned long uv;
#endif

	for (;;) {
		c = *fmt++;					/* Get a format character */
    b8ea:	f6842783          	lw	a5,-152(s0)
    b8ee:	00178713          	addi	a4,a5,1
    b8f2:	f6e42423          	sw	a4,-152(s0)
    b8f6:	0007c783          	lbu	a5,0(a5)
    b8fa:	faf409a3          	sb	a5,-77(s0)
		if (!c) break;				/* End of format? */
    b8fe:	fb344783          	lbu	a5,-77(s0)
    b902:	66078663          	beqz	a5,bf6e <xvfprintf+0x6a8>
		if (c != '%') {				/* Pass it through if not a % sequense */
    b906:	fb344703          	lbu	a4,-77(s0)
    b90a:	02500793          	li	a5,37
    b90e:	00f70963          	beq	a4,a5,b920 <xvfprintf+0x5a>
			xfputc(func, c); continue;
    b912:	fb344783          	lbu	a5,-77(s0)
    b916:	85be                	mv	a1,a5
    b918:	f6c42503          	lw	a0,-148(s0)
    b91c:	3df9                	jal	b7fa <xfputc>
    b91e:	a5b9                	j	bf6c <xvfprintf+0x6a6>
		}
		f = w = 0;			 		/* Clear parms */
    b920:	fc042023          	sw	zero,-64(s0)
    b924:	fc042783          	lw	a5,-64(s0)
    b928:	faf42e23          	sw	a5,-68(s0)
		pad = ' '; prec = -1;
    b92c:	02000793          	li	a5,32
    b930:	faf405a3          	sb	a5,-85(s0)
    b934:	57fd                	li	a5,-1
    b936:	faf42a23          	sw	a5,-76(s0)
		c = *fmt++;					/* Get first char of the sequense */
    b93a:	f6842783          	lw	a5,-152(s0)
    b93e:	00178713          	addi	a4,a5,1
    b942:	f6e42423          	sw	a4,-152(s0)
    b946:	0007c783          	lbu	a5,0(a5)
    b94a:	faf409a3          	sb	a5,-77(s0)
		if (c == '0') {				/* Flag: left '0' padded */
    b94e:	fb344703          	lbu	a4,-77(s0)
    b952:	03000793          	li	a5,48
    b956:	02f71163          	bne	a4,a5,b978 <xvfprintf+0xb2>
			pad = '0'; c = *fmt++;
    b95a:	03000793          	li	a5,48
    b95e:	faf405a3          	sb	a5,-85(s0)
    b962:	f6842783          	lw	a5,-152(s0)
    b966:	00178713          	addi	a4,a5,1
    b96a:	f6e42423          	sw	a4,-152(s0)
    b96e:	0007c783          	lbu	a5,0(a5)
    b972:	faf409a3          	sb	a5,-77(s0)
    b976:	a025                	j	b99e <xvfprintf+0xd8>
		} else {
			if (c == '-') {			/* Flag: left justified */
    b978:	fb344703          	lbu	a4,-77(s0)
    b97c:	02d00793          	li	a5,45
    b980:	00f71f63          	bne	a4,a5,b99e <xvfprintf+0xd8>
				f = 2; c = *fmt++;
    b984:	4789                	li	a5,2
    b986:	faf42e23          	sw	a5,-68(s0)
    b98a:	f6842783          	lw	a5,-152(s0)
    b98e:	00178713          	addi	a4,a5,1
    b992:	f6e42423          	sw	a4,-152(s0)
    b996:	0007c783          	lbu	a5,0(a5)
    b99a:	faf409a3          	sb	a5,-77(s0)
			}
		}
		if (c == '*') {				/* Minimum width from an argument */
    b99e:	fb344703          	lbu	a4,-77(s0)
    b9a2:	02a00793          	li	a5,42
    b9a6:	06f71f63          	bne	a4,a5,ba24 <xvfprintf+0x15e>
			n = va_arg(arp, int);
    b9aa:	f6442783          	lw	a5,-156(s0)
    b9ae:	00478713          	addi	a4,a5,4
    b9b2:	f6e42223          	sw	a4,-156(s0)
    b9b6:	439c                	lw	a5,0(a5)
    b9b8:	faf42c23          	sw	a5,-72(s0)
			if (n < 0) {			/* Flag: left justified */
    b9bc:	fb842783          	lw	a5,-72(s0)
    b9c0:	0007db63          	bgez	a5,b9d6 <xvfprintf+0x110>
				n = 0 - n; f = 2;
    b9c4:	fb842783          	lw	a5,-72(s0)
    b9c8:	40f007b3          	neg	a5,a5
    b9cc:	faf42c23          	sw	a5,-72(s0)
    b9d0:	4789                	li	a5,2
    b9d2:	faf42e23          	sw	a5,-68(s0)
			}
			w = n; c = *fmt++;
    b9d6:	fb842783          	lw	a5,-72(s0)
    b9da:	fcf42023          	sw	a5,-64(s0)
    b9de:	f6842783          	lw	a5,-152(s0)
    b9e2:	00178713          	addi	a4,a5,1
    b9e6:	f6e42423          	sw	a4,-152(s0)
    b9ea:	0007c783          	lbu	a5,0(a5)
    b9ee:	faf409a3          	sb	a5,-77(s0)
    b9f2:	a0a9                	j	ba3c <xvfprintf+0x176>
		} else {
			while (c >= '0' && c <= '9') {	/* Minimum width */
				w = w * 10 + c - '0';
    b9f4:	fc042703          	lw	a4,-64(s0)
    b9f8:	87ba                	mv	a5,a4
    b9fa:	078a                	slli	a5,a5,0x2
    b9fc:	97ba                	add	a5,a5,a4
    b9fe:	0786                	slli	a5,a5,0x1
    ba00:	873e                	mv	a4,a5
    ba02:	fb344783          	lbu	a5,-77(s0)
    ba06:	97ba                	add	a5,a5,a4
    ba08:	fd078793          	addi	a5,a5,-48
    ba0c:	fcf42023          	sw	a5,-64(s0)
				c = *fmt++;
    ba10:	f6842783          	lw	a5,-152(s0)
    ba14:	00178713          	addi	a4,a5,1
    ba18:	f6e42423          	sw	a4,-152(s0)
    ba1c:	0007c783          	lbu	a5,0(a5)
    ba20:	faf409a3          	sb	a5,-77(s0)
			while (c >= '0' && c <= '9') {	/* Minimum width */
    ba24:	fb344703          	lbu	a4,-77(s0)
    ba28:	02f00793          	li	a5,47
    ba2c:	00e7f863          	bgeu	a5,a4,ba3c <xvfprintf+0x176>
    ba30:	fb344703          	lbu	a4,-77(s0)
    ba34:	03900793          	li	a5,57
    ba38:	fae7fee3          	bgeu	a5,a4,b9f4 <xvfprintf+0x12e>
			}
		}
		if (c == '.') {				/* Precision */
    ba3c:	fb344703          	lbu	a4,-77(s0)
    ba40:	02e00793          	li	a5,46
    ba44:	08f71d63          	bne	a4,a5,bade <xvfprintf+0x218>
			c = *fmt++;
    ba48:	f6842783          	lw	a5,-152(s0)
    ba4c:	00178713          	addi	a4,a5,1
    ba50:	f6e42423          	sw	a4,-152(s0)
    ba54:	0007c783          	lbu	a5,0(a5)
    ba58:	faf409a3          	sb	a5,-77(s0)
			if (c == '*') {				/* Precision from an argument */
    ba5c:	fb344703          	lbu	a4,-77(s0)
    ba60:	02a00793          	li	a5,42
    ba64:	02f71663          	bne	a4,a5,ba90 <xvfprintf+0x1ca>
				prec = va_arg(arp, int);
    ba68:	f6442783          	lw	a5,-156(s0)
    ba6c:	00478713          	addi	a4,a5,4
    ba70:	f6e42223          	sw	a4,-156(s0)
    ba74:	439c                	lw	a5,0(a5)
    ba76:	faf42a23          	sw	a5,-76(s0)
				c = *fmt++;
    ba7a:	f6842783          	lw	a5,-152(s0)
    ba7e:	00178713          	addi	a4,a5,1
    ba82:	f6e42423          	sw	a4,-152(s0)
    ba86:	0007c783          	lbu	a5,0(a5)
    ba8a:	faf409a3          	sb	a5,-77(s0)
    ba8e:	a881                	j	bade <xvfprintf+0x218>
			} else {
				prec = 0;
    ba90:	fa042a23          	sw	zero,-76(s0)
				while (c >= '0' && c <= '9') {
    ba94:	a80d                	j	bac6 <xvfprintf+0x200>
					prec = prec * 10 + c - '0';
    ba96:	fb442703          	lw	a4,-76(s0)
    ba9a:	87ba                	mv	a5,a4
    ba9c:	078a                	slli	a5,a5,0x2
    ba9e:	97ba                	add	a5,a5,a4
    baa0:	0786                	slli	a5,a5,0x1
    baa2:	873e                	mv	a4,a5
    baa4:	fb344783          	lbu	a5,-77(s0)
    baa8:	97ba                	add	a5,a5,a4
    baaa:	fd078793          	addi	a5,a5,-48
    baae:	faf42a23          	sw	a5,-76(s0)
					c = *fmt++;
    bab2:	f6842783          	lw	a5,-152(s0)
    bab6:	00178713          	addi	a4,a5,1
    baba:	f6e42423          	sw	a4,-152(s0)
    babe:	0007c783          	lbu	a5,0(a5)
    bac2:	faf409a3          	sb	a5,-77(s0)
				while (c >= '0' && c <= '9') {
    bac6:	fb344703          	lbu	a4,-77(s0)
    baca:	02f00793          	li	a5,47
    bace:	00e7f863          	bgeu	a5,a4,bade <xvfprintf+0x218>
    bad2:	fb344703          	lbu	a4,-77(s0)
    bad6:	03900793          	li	a5,57
    bada:	fae7fee3          	bgeu	a5,a4,ba96 <xvfprintf+0x1d0>
				}
			}
		}
		if (c == 'l') {		/* Prefix: Size is long */
    bade:	fb344703          	lbu	a4,-77(s0)
    bae2:	06c00793          	li	a5,108
    bae6:	04f71863          	bne	a4,a5,bb36 <xvfprintf+0x270>
			f |= 4; c = *fmt++;
    baea:	fbc42783          	lw	a5,-68(s0)
    baee:	0047e793          	ori	a5,a5,4
    baf2:	faf42e23          	sw	a5,-68(s0)
    baf6:	f6842783          	lw	a5,-152(s0)
    bafa:	00178713          	addi	a4,a5,1
    bafe:	f6e42423          	sw	a4,-152(s0)
    bb02:	0007c783          	lbu	a5,0(a5)
    bb06:	faf409a3          	sb	a5,-77(s0)
#if XF_USE_LLI
			if (c == 'l') {	/* Prefix: Size is long long */
    bb0a:	fb344703          	lbu	a4,-77(s0)
    bb0e:	06c00793          	li	a5,108
    bb12:	02f71263          	bne	a4,a5,bb36 <xvfprintf+0x270>
				f |= 8; c = *fmt++;
    bb16:	fbc42783          	lw	a5,-68(s0)
    bb1a:	0087e793          	ori	a5,a5,8
    bb1e:	faf42e23          	sw	a5,-68(s0)
    bb22:	f6842783          	lw	a5,-152(s0)
    bb26:	00178713          	addi	a4,a5,1
    bb2a:	f6e42423          	sw	a4,-152(s0)
    bb2e:	0007c783          	lbu	a5,0(a5)
    bb32:	faf409a3          	sb	a5,-77(s0)
			}
#endif
		}
		if (!c) break;				/* End of format? */
    bb36:	fb344783          	lbu	a5,-77(s0)
    bb3a:	42078c63          	beqz	a5,bf72 <xvfprintf+0x6ac>
		switch (c) {				/* Type is... */
    bb3e:	fb344783          	lbu	a5,-77(s0)
    bb42:	fbb78793          	addi	a5,a5,-69
    bb46:	03300713          	li	a4,51
    bb4a:	1cf76563          	bltu	a4,a5,bd14 <xvfprintf+0x44e>
    bb4e:	00279713          	slli	a4,a5,0x2
    bb52:	67bd                	lui	a5,0xf
    bb54:	ed878793          	addi	a5,a5,-296 # eed8 <strlen+0x500>
    bb58:	97ba                	add	a5,a5,a4
    bb5a:	439c                	lw	a5,0(a5)
    bb5c:	8782                	jr	a5
		case 'b':					/* Unsigned binary */
			r = 2; break;
    bb5e:	4789                	li	a5,2
    bb60:	fcf42623          	sw	a5,-52(s0)
    bb64:	aa7d                	j	bd22 <xvfprintf+0x45c>
		case 'o':					/* Unsigned octal */
			r = 8; break;
    bb66:	47a1                	li	a5,8
    bb68:	fcf42623          	sw	a5,-52(s0)
    bb6c:	aa5d                	j	bd22 <xvfprintf+0x45c>
		case 'd':					/* Signed decimal */
		case 'u':					/* Unsigned decimal */
			r = 10; break;
    bb6e:	47a9                	li	a5,10
    bb70:	fcf42623          	sw	a5,-52(s0)
    bb74:	a27d                	j	bd22 <xvfprintf+0x45c>
		case 'x':					/* Hexdecimal (lower case) */
		case 'X':					/* Hexdecimal (upper case) */
			r = 16; break;
    bb76:	47c1                	li	a5,16
    bb78:	fcf42623          	sw	a5,-52(s0)
    bb7c:	a25d                	j	bd22 <xvfprintf+0x45c>
		case 'c':					/* A character */
			xfputc(func, (char)va_arg(arp, int)); continue;
    bb7e:	f6442783          	lw	a5,-156(s0)
    bb82:	00478713          	addi	a4,a5,4
    bb86:	f6e42223          	sw	a4,-156(s0)
    bb8a:	439c                	lw	a5,0(a5)
    bb8c:	0ff7f793          	andi	a5,a5,255
    bb90:	85be                	mv	a1,a5
    bb92:	f6c42503          	lw	a0,-148(s0)
    bb96:	3195                	jal	b7fa <xfputc>
    bb98:	aed1                	j	bf6c <xvfprintf+0x6a6>
		case 's':					/* String */
			p = va_arg(arp, char*);		/* Get a pointer argument */
    bb9a:	f6442783          	lw	a5,-156(s0)
    bb9e:	00478713          	addi	a4,a5,4
    bba2:	f6e42223          	sw	a4,-156(s0)
    bba6:	439c                	lw	a5,0(a5)
    bba8:	faf42623          	sw	a5,-84(s0)
			if (!p) p = "";				/* Null ptr generates a null string */
    bbac:	fac42783          	lw	a5,-84(s0)
    bbb0:	e791                	bnez	a5,bbbc <xvfprintf+0x2f6>
    bbb2:	67bd                	lui	a5,0xf
    bbb4:	ed478793          	addi	a5,a5,-300 # eed4 <strlen+0x4fc>
    bbb8:	faf42623          	sw	a5,-84(s0)
			j = strlen(p);
    bbbc:	fac42503          	lw	a0,-84(s0)
    bbc0:	619020ef          	jal	ra,e9d8 <strlen>
    bbc4:	fca42223          	sw	a0,-60(s0)
			if (prec >= 0 && j > (unsigned int)prec) j = prec;	/* Limited length of string body */
    bbc8:	fb442783          	lw	a5,-76(s0)
    bbcc:	0207c863          	bltz	a5,bbfc <xvfprintf+0x336>
    bbd0:	fb442783          	lw	a5,-76(s0)
    bbd4:	fc442703          	lw	a4,-60(s0)
    bbd8:	02e7f263          	bgeu	a5,a4,bbfc <xvfprintf+0x336>
    bbdc:	fb442783          	lw	a5,-76(s0)
    bbe0:	fcf42223          	sw	a5,-60(s0)
			for ( ; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
    bbe4:	a821                	j	bbfc <xvfprintf+0x336>
    bbe6:	fab44783          	lbu	a5,-85(s0)
    bbea:	85be                	mv	a1,a5
    bbec:	f6c42503          	lw	a0,-148(s0)
    bbf0:	3129                	jal	b7fa <xfputc>
    bbf2:	fc442783          	lw	a5,-60(s0)
    bbf6:	0785                	addi	a5,a5,1
    bbf8:	fcf42223          	sw	a5,-60(s0)
    bbfc:	fbc42783          	lw	a5,-68(s0)
    bc00:	8b89                	andi	a5,a5,2
    bc02:	e785                	bnez	a5,bc2a <xvfprintf+0x364>
    bc04:	fc442703          	lw	a4,-60(s0)
    bc08:	fc042783          	lw	a5,-64(s0)
    bc0c:	fcf76de3          	bltu	a4,a5,bbe6 <xvfprintf+0x320>
			while (*p && prec--) xfputc(func, *p++);/* String body */
    bc10:	a829                	j	bc2a <xvfprintf+0x364>
    bc12:	fac42783          	lw	a5,-84(s0)
    bc16:	00178713          	addi	a4,a5,1
    bc1a:	fae42623          	sw	a4,-84(s0)
    bc1e:	0007c783          	lbu	a5,0(a5)
    bc22:	85be                	mv	a1,a5
    bc24:	f6c42503          	lw	a0,-148(s0)
    bc28:	3ec9                	jal	b7fa <xfputc>
    bc2a:	fac42783          	lw	a5,-84(s0)
    bc2e:	0007c783          	lbu	a5,0(a5)
    bc32:	cf91                	beqz	a5,bc4e <xvfprintf+0x388>
    bc34:	fb442783          	lw	a5,-76(s0)
    bc38:	fff78713          	addi	a4,a5,-1
    bc3c:	fae42a23          	sw	a4,-76(s0)
    bc40:	fbe9                	bnez	a5,bc12 <xvfprintf+0x34c>
			while (j++ < w) xfputc(func, ' ');		/* Right pads */
    bc42:	a031                	j	bc4e <xvfprintf+0x388>
    bc44:	02000593          	li	a1,32
    bc48:	f6c42503          	lw	a0,-148(s0)
    bc4c:	367d                	jal	b7fa <xfputc>
    bc4e:	fc442783          	lw	a5,-60(s0)
    bc52:	00178713          	addi	a4,a5,1
    bc56:	fce42223          	sw	a4,-60(s0)
    bc5a:	fc042703          	lw	a4,-64(s0)
    bc5e:	fee7e3e3          	bltu	a5,a4,bc44 <xvfprintf+0x37e>
			continue;
    bc62:	a629                	j	bf6c <xvfprintf+0x6a6>
#if XF_USE_FP
		case 'f':					/* Float (decimal) */
		case 'e':					/* Float (e) */
		case 'E':					/* Float (E) */
			ftoa(p = str, va_arg(arp, double), prec, c);	/* Make fp string */
    bc64:	f7840793          	addi	a5,s0,-136
    bc68:	faf42623          	sw	a5,-84(s0)
    bc6c:	f6442783          	lw	a5,-156(s0)
    bc70:	079d                	addi	a5,a5,7
    bc72:	9be1                	andi	a5,a5,-8
    bc74:	00878713          	addi	a4,a5,8
    bc78:	f6e42223          	sw	a4,-156(s0)
    bc7c:	0047a803          	lw	a6,4(a5)
    bc80:	439c                	lw	a5,0(a5)
    bc82:	fb344703          	lbu	a4,-77(s0)
    bc86:	fb442683          	lw	a3,-76(s0)
    bc8a:	85be                	mv	a1,a5
    bc8c:	8642                	mv	a2,a6
    bc8e:	fac42503          	lw	a0,-84(s0)
    bc92:	f02ff0ef          	jal	ra,b394 <ftoa>
			for (j = strlen(p); !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
    bc96:	fac42503          	lw	a0,-84(s0)
    bc9a:	53f020ef          	jal	ra,e9d8 <strlen>
    bc9e:	fca42223          	sw	a0,-60(s0)
    bca2:	a821                	j	bcba <xvfprintf+0x3f4>
    bca4:	fab44783          	lbu	a5,-85(s0)
    bca8:	85be                	mv	a1,a5
    bcaa:	f6c42503          	lw	a0,-148(s0)
    bcae:	36b1                	jal	b7fa <xfputc>
    bcb0:	fc442783          	lw	a5,-60(s0)
    bcb4:	0785                	addi	a5,a5,1
    bcb6:	fcf42223          	sw	a5,-60(s0)
    bcba:	fbc42783          	lw	a5,-68(s0)
    bcbe:	8b89                	andi	a5,a5,2
    bcc0:	e785                	bnez	a5,bce8 <xvfprintf+0x422>
    bcc2:	fc442703          	lw	a4,-60(s0)
    bcc6:	fc042783          	lw	a5,-64(s0)
    bcca:	fcf76de3          	bltu	a4,a5,bca4 <xvfprintf+0x3de>
			while (*p) xfputc(func, *p++);		/* Value */
    bcce:	a829                	j	bce8 <xvfprintf+0x422>
    bcd0:	fac42783          	lw	a5,-84(s0)
    bcd4:	00178713          	addi	a4,a5,1
    bcd8:	fae42623          	sw	a4,-84(s0)
    bcdc:	0007c783          	lbu	a5,0(a5)
    bce0:	85be                	mv	a1,a5
    bce2:	f6c42503          	lw	a0,-148(s0)
    bce6:	3e11                	jal	b7fa <xfputc>
    bce8:	fac42783          	lw	a5,-84(s0)
    bcec:	0007c783          	lbu	a5,0(a5)
    bcf0:	f3e5                	bnez	a5,bcd0 <xvfprintf+0x40a>
			while (j++ < w) xfputc(func, ' ');	/* Right pads */
    bcf2:	a031                	j	bcfe <xvfprintf+0x438>
    bcf4:	02000593          	li	a1,32
    bcf8:	f6c42503          	lw	a0,-148(s0)
    bcfc:	3cfd                	jal	b7fa <xfputc>
    bcfe:	fc442783          	lw	a5,-60(s0)
    bd02:	00178713          	addi	a4,a5,1
    bd06:	fce42223          	sw	a4,-60(s0)
    bd0a:	fc042703          	lw	a4,-64(s0)
    bd0e:	fee7e3e3          	bltu	a5,a4,bcf4 <xvfprintf+0x42e>
			continue;
    bd12:	aca9                	j	bf6c <xvfprintf+0x6a6>
#endif
		default:					/* Unknown type (passthrough) */
			xfputc(func, c); continue;
    bd14:	fb344783          	lbu	a5,-77(s0)
    bd18:	85be                	mv	a1,a5
    bd1a:	f6c42503          	lw	a0,-148(s0)
    bd1e:	3cf1                	jal	b7fa <xfputc>
    bd20:	a4b1                	j	bf6c <xvfprintf+0x6a6>
		}

		/* Get an integer argument and put it in numeral */
#if XF_USE_LLI
		if (f & 8) {	/* long long argument? */
    bd22:	fbc42783          	lw	a5,-68(s0)
    bd26:	8ba1                	andi	a5,a5,8
    bd28:	c38d                	beqz	a5,bd4a <xvfprintf+0x484>
			v = (long long)va_arg(arp, long long);
    bd2a:	f6442783          	lw	a5,-156(s0)
    bd2e:	079d                	addi	a5,a5,7
    bd30:	9be1                	andi	a5,a5,-8
    bd32:	00878713          	addi	a4,a5,8
    bd36:	f6e42223          	sw	a4,-156(s0)
    bd3a:	0047a803          	lw	a6,4(a5)
    bd3e:	439c                	lw	a5,0(a5)
    bd40:	faf42023          	sw	a5,-96(s0)
    bd44:	fb042223          	sw	a6,-92(s0)
    bd48:	a051                	j	bdcc <xvfprintf+0x506>
		} else {
			if (f & 4) {	/* long argument? */
    bd4a:	fbc42783          	lw	a5,-68(s0)
    bd4e:	8b91                	andi	a5,a5,4
    bd50:	c3a1                	beqz	a5,bd90 <xvfprintf+0x4ca>
				v = (c == 'd') ? (long long)va_arg(arp, long) : (long long)va_arg(arp, unsigned long);
    bd52:	fb344703          	lbu	a4,-77(s0)
    bd56:	06400793          	li	a5,100
    bd5a:	00f71d63          	bne	a4,a5,bd74 <xvfprintf+0x4ae>
    bd5e:	f6442783          	lw	a5,-156(s0)
    bd62:	00478713          	addi	a4,a5,4
    bd66:	f6e42223          	sw	a4,-156(s0)
    bd6a:	439c                	lw	a5,0(a5)
    bd6c:	893e                	mv	s2,a5
    bd6e:	87fd                	srai	a5,a5,0x1f
    bd70:	89be                	mv	s3,a5
    bd72:	a811                	j	bd86 <xvfprintf+0x4c0>
    bd74:	f6442783          	lw	a5,-156(s0)
    bd78:	00478713          	addi	a4,a5,4
    bd7c:	f6e42223          	sw	a4,-156(s0)
    bd80:	439c                	lw	a5,0(a5)
    bd82:	893e                	mv	s2,a5
    bd84:	4981                	li	s3,0
    bd86:	fb242023          	sw	s2,-96(s0)
    bd8a:	fb342223          	sw	s3,-92(s0)
    bd8e:	a83d                	j	bdcc <xvfprintf+0x506>
			} else {		/* int/short/char argument */
				v = (c == 'd') ? (long long)va_arg(arp, int) : (long long)va_arg(arp, unsigned int);
    bd90:	fb344703          	lbu	a4,-77(s0)
    bd94:	06400793          	li	a5,100
    bd98:	00f71d63          	bne	a4,a5,bdb2 <xvfprintf+0x4ec>
    bd9c:	f6442783          	lw	a5,-156(s0)
    bda0:	00478713          	addi	a4,a5,4
    bda4:	f6e42223          	sw	a4,-156(s0)
    bda8:	439c                	lw	a5,0(a5)
    bdaa:	8a3e                	mv	s4,a5
    bdac:	87fd                	srai	a5,a5,0x1f
    bdae:	8abe                	mv	s5,a5
    bdb0:	a811                	j	bdc4 <xvfprintf+0x4fe>
    bdb2:	f6442783          	lw	a5,-156(s0)
    bdb6:	00478713          	addi	a4,a5,4
    bdba:	f6e42223          	sw	a4,-156(s0)
    bdbe:	439c                	lw	a5,0(a5)
    bdc0:	8a3e                	mv	s4,a5
    bdc2:	4a81                	li	s5,0
    bdc4:	fb442023          	sw	s4,-96(s0)
    bdc8:	fb542223          	sw	s5,-92(s0)
			v = (long)va_arg(arp, long);
		} else {		/* int/short/char argument */
			v = (c == 'd') ? (long)va_arg(arp, int) : (long)va_arg(arp, unsigned int);
		}
#endif
		if (c == 'd' && v < 0) {	/* Negative value? */
    bdcc:	fb344703          	lbu	a4,-77(s0)
    bdd0:	06400793          	li	a5,100
    bdd4:	04f71063          	bne	a4,a5,be14 <xvfprintf+0x54e>
    bdd8:	fa442783          	lw	a5,-92(s0)
    bddc:	0207dc63          	bgez	a5,be14 <xvfprintf+0x54e>
			v = 0 - v; f |= 1;
    bde0:	4681                	li	a3,0
    bde2:	4701                	li	a4,0
    bde4:	fa042583          	lw	a1,-96(s0)
    bde8:	fa442603          	lw	a2,-92(s0)
    bdec:	40b687b3          	sub	a5,a3,a1
    bdf0:	853e                	mv	a0,a5
    bdf2:	00a6b533          	sltu	a0,a3,a0
    bdf6:	40c70833          	sub	a6,a4,a2
    bdfa:	40a80733          	sub	a4,a6,a0
    bdfe:	883a                	mv	a6,a4
    be00:	faf42023          	sw	a5,-96(s0)
    be04:	fb042223          	sw	a6,-92(s0)
    be08:	fbc42783          	lw	a5,-68(s0)
    be0c:	0017e793          	ori	a5,a5,1
    be10:	faf42e23          	sw	a5,-68(s0)
		}
		i = 0; uv = v;
    be14:	fc042423          	sw	zero,-56(s0)
    be18:	fa042783          	lw	a5,-96(s0)
    be1c:	fa442803          	lw	a6,-92(s0)
    be20:	f8f42c23          	sw	a5,-104(s0)
    be24:	f9042e23          	sw	a6,-100(s0)
		do {	/* Make an integer number string */
			d = (char)(uv % r); uv /= r;
    be28:	fcc42783          	lw	a5,-52(s0)
    be2c:	8b3e                	mv	s6,a5
    be2e:	4b81                	li	s7,0
    be30:	f9842783          	lw	a5,-104(s0)
    be34:	f9c42803          	lw	a6,-100(s0)
    be38:	865a                	mv	a2,s6
    be3a:	86de                	mv	a3,s7
    be3c:	853e                	mv	a0,a5
    be3e:	85c2                	mv	a1,a6
    be40:	2fb000ef          	jal	ra,c93a <__umoddi3>
    be44:	87aa                	mv	a5,a0
    be46:	882e                	mv	a6,a1
    be48:	faf40923          	sb	a5,-78(s0)
    be4c:	fcc42783          	lw	a5,-52(s0)
    be50:	8c3e                	mv	s8,a5
    be52:	4c81                	li	s9,0
    be54:	8662                	mv	a2,s8
    be56:	86e6                	mv	a3,s9
    be58:	f9842503          	lw	a0,-104(s0)
    be5c:	f9c42583          	lw	a1,-100(s0)
    be60:	742000ef          	jal	ra,c5a2 <__udivdi3>
    be64:	87aa                	mv	a5,a0
    be66:	882e                	mv	a6,a1
    be68:	f8f42c23          	sw	a5,-104(s0)
    be6c:	f9042e23          	sw	a6,-100(s0)
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    be70:	fb244703          	lbu	a4,-78(s0)
    be74:	47a5                	li	a5,9
    be76:	02e7f163          	bgeu	a5,a4,be98 <xvfprintf+0x5d2>
    be7a:	fb344703          	lbu	a4,-77(s0)
    be7e:	07800793          	li	a5,120
    be82:	00f71563          	bne	a4,a5,be8c <xvfprintf+0x5c6>
    be86:	02700793          	li	a5,39
    be8a:	a011                	j	be8e <xvfprintf+0x5c8>
    be8c:	479d                	li	a5,7
    be8e:	fb244703          	lbu	a4,-78(s0)
    be92:	97ba                	add	a5,a5,a4
    be94:	faf40923          	sb	a5,-78(s0)
			str[i++] = d + '0';
    be98:	fc842783          	lw	a5,-56(s0)
    be9c:	00178713          	addi	a4,a5,1
    bea0:	fce42423          	sw	a4,-56(s0)
    bea4:	fb244703          	lbu	a4,-78(s0)
    bea8:	03070713          	addi	a4,a4,48
    beac:	0ff77713          	andi	a4,a4,255
    beb0:	fd040693          	addi	a3,s0,-48
    beb4:	97b6                	add	a5,a5,a3
    beb6:	fae78423          	sb	a4,-88(a5)
		} while (uv != 0 && i < sizeof str);
    beba:	f9842783          	lw	a5,-104(s0)
    bebe:	f9c42703          	lw	a4,-100(s0)
    bec2:	8fd9                	or	a5,a5,a4
    bec4:	c791                	beqz	a5,bed0 <xvfprintf+0x60a>
    bec6:	fc842703          	lw	a4,-56(s0)
    beca:	47fd                	li	a5,31
    becc:	f4e7fee3          	bgeu	a5,a4,be28 <xvfprintf+0x562>
		if (f & 1) str[i++] = '-';					/* Sign */
    bed0:	fbc42783          	lw	a5,-68(s0)
    bed4:	8b85                	andi	a5,a5,1
    bed6:	cf91                	beqz	a5,bef2 <xvfprintf+0x62c>
    bed8:	fc842783          	lw	a5,-56(s0)
    bedc:	00178713          	addi	a4,a5,1
    bee0:	fce42423          	sw	a4,-56(s0)
    bee4:	fd040713          	addi	a4,s0,-48
    bee8:	97ba                	add	a5,a5,a4
    beea:	02d00713          	li	a4,45
    beee:	fae78423          	sb	a4,-88(a5)
		for (j = i; !(f & 2) && j < w; j++) xfputc(func, pad);	/* Left pads */
    bef2:	fc842783          	lw	a5,-56(s0)
    bef6:	fcf42223          	sw	a5,-60(s0)
    befa:	a821                	j	bf12 <xvfprintf+0x64c>
    befc:	fab44783          	lbu	a5,-85(s0)
    bf00:	85be                	mv	a1,a5
    bf02:	f6c42503          	lw	a0,-148(s0)
    bf06:	38d5                	jal	b7fa <xfputc>
    bf08:	fc442783          	lw	a5,-60(s0)
    bf0c:	0785                	addi	a5,a5,1
    bf0e:	fcf42223          	sw	a5,-60(s0)
    bf12:	fbc42783          	lw	a5,-68(s0)
    bf16:	8b89                	andi	a5,a5,2
    bf18:	e799                	bnez	a5,bf26 <xvfprintf+0x660>
    bf1a:	fc442703          	lw	a4,-60(s0)
    bf1e:	fc042783          	lw	a5,-64(s0)
    bf22:	fcf76de3          	bltu	a4,a5,befc <xvfprintf+0x636>
		do xfputc(func, str[--i]); while (i != 0);	/* Value */
    bf26:	fc842783          	lw	a5,-56(s0)
    bf2a:	17fd                	addi	a5,a5,-1
    bf2c:	fcf42423          	sw	a5,-56(s0)
    bf30:	fc842783          	lw	a5,-56(s0)
    bf34:	fd040713          	addi	a4,s0,-48
    bf38:	97ba                	add	a5,a5,a4
    bf3a:	fa87c783          	lbu	a5,-88(a5)
    bf3e:	85be                	mv	a1,a5
    bf40:	f6c42503          	lw	a0,-148(s0)
    bf44:	385d                	jal	b7fa <xfputc>
    bf46:	fc842783          	lw	a5,-56(s0)
    bf4a:	fff1                	bnez	a5,bf26 <xvfprintf+0x660>
		while (j++ < w) xfputc(func, ' ');			/* Right pads */
    bf4c:	a031                	j	bf58 <xvfprintf+0x692>
    bf4e:	02000593          	li	a1,32
    bf52:	f6c42503          	lw	a0,-148(s0)
    bf56:	3055                	jal	b7fa <xfputc>
    bf58:	fc442783          	lw	a5,-60(s0)
    bf5c:	00178713          	addi	a4,a5,1
    bf60:	fce42223          	sw	a4,-60(s0)
    bf64:	fc042703          	lw	a4,-64(s0)
    bf68:	fee7e3e3          	bltu	a5,a4,bf4e <xvfprintf+0x688>
		c = *fmt++;					/* Get a format character */
    bf6c:	babd                	j	b8ea <xvfprintf+0x24>
		if (!c) break;				/* End of format? */
    bf6e:	0001                	nop
    bf70:	a011                	j	bf74 <xvfprintf+0x6ae>
		if (!c) break;				/* End of format? */
    bf72:	0001                	nop
	}
}
    bf74:	0001                	nop
    bf76:	40fa                	lw	ra,156(sp)
    bf78:	446a                	lw	s0,152(sp)
    bf7a:	495a                	lw	s2,148(sp)
    bf7c:	49ca                	lw	s3,144(sp)
    bf7e:	4a3a                	lw	s4,140(sp)
    bf80:	4aaa                	lw	s5,136(sp)
    bf82:	4b1a                	lw	s6,132(sp)
    bf84:	4b8a                	lw	s7,128(sp)
    bf86:	5c76                	lw	s8,124(sp)
    bf88:	5ce6                	lw	s9,120(sp)
    bf8a:	610d                	addi	sp,sp,160
    bf8c:	8082                	ret

0000bf8e <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
    bf8e:	715d                	addi	sp,sp,-80
    bf90:	d606                	sw	ra,44(sp)
    bf92:	d422                	sw	s0,40(sp)
    bf94:	1800                	addi	s0,sp,48
    bf96:	fca42e23          	sw	a0,-36(s0)
    bf9a:	c04c                	sw	a1,4(s0)
    bf9c:	c410                	sw	a2,8(s0)
    bf9e:	c454                	sw	a3,12(s0)
    bfa0:	c818                	sw	a4,16(s0)
    bfa2:	c85c                	sw	a5,20(s0)
    bfa4:	01042c23          	sw	a6,24(s0)
    bfa8:	01142e23          	sw	a7,28(s0)
	va_list arp;
	va_start(arp, fmt);
    bfac:	02040793          	addi	a5,s0,32
    bfb0:	1791                	addi	a5,a5,-28
    bfb2:	fef42623          	sw	a5,-20(s0)
	xvfprintf(xfunc_output, fmt, arp);
    bfb6:	200027b7          	lui	a5,0x20002
    bfba:	cb07a783          	lw	a5,-848(a5) # 20001cb0 <xfunc_output>
    bfbe:	fec42703          	lw	a4,-20(s0)
    bfc2:	863a                	mv	a2,a4
    bfc4:	fdc42583          	lw	a1,-36(s0)
    bfc8:	853e                	mv	a0,a5
    bfca:	38f5                	jal	b8c6 <xvfprintf>
	va_end(arp);
}
    bfcc:	0001                	nop
    bfce:	50b2                	lw	ra,44(sp)
    bfd0:	5422                	lw	s0,40(sp)
    bfd2:	6161                	addi	sp,sp,80
    bfd4:	8082                	ret

0000bfd6 <xfprintf>:
void xfprintf (			/* Put a formatted string to the specified device */
	void(*func)(int),	/* Pointer to the output function */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
    bfd6:	715d                	addi	sp,sp,-80
    bfd8:	d606                	sw	ra,44(sp)
    bfda:	d422                	sw	s0,40(sp)
    bfdc:	1800                	addi	s0,sp,48
    bfde:	fca42e23          	sw	a0,-36(s0)
    bfe2:	fcb42c23          	sw	a1,-40(s0)
    bfe6:	c410                	sw	a2,8(s0)
    bfe8:	c454                	sw	a3,12(s0)
    bfea:	c818                	sw	a4,16(s0)
    bfec:	c85c                	sw	a5,20(s0)
    bfee:	01042c23          	sw	a6,24(s0)
    bff2:	01142e23          	sw	a7,28(s0)
	va_list arp;


	va_start(arp, fmt);
    bff6:	02040793          	addi	a5,s0,32
    bffa:	17a1                	addi	a5,a5,-24
    bffc:	fef42623          	sw	a5,-20(s0)
	xvfprintf(func, fmt, arp);
    c000:	fec42783          	lw	a5,-20(s0)
    c004:	863e                	mv	a2,a5
    c006:	fd842583          	lw	a1,-40(s0)
    c00a:	fdc42503          	lw	a0,-36(s0)
    c00e:	3865                	jal	b8c6 <xvfprintf>
	va_end(arp);
}
    c010:	0001                	nop
    c012:	50b2                	lw	ra,44(sp)
    c014:	5422                	lw	s0,40(sp)
    c016:	6161                	addi	sp,sp,80
    c018:	8082                	ret

0000c01a <xsprintf>:
void xsprintf (			/* Put a formatted string to the memory */
	char* buff,			/* Pointer to the output buffer */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
    c01a:	715d                	addi	sp,sp,-80
    c01c:	d606                	sw	ra,44(sp)
    c01e:	d422                	sw	s0,40(sp)
    c020:	1800                	addi	s0,sp,48
    c022:	fca42e23          	sw	a0,-36(s0)
    c026:	fcb42c23          	sw	a1,-40(s0)
    c02a:	c410                	sw	a2,8(s0)
    c02c:	c454                	sw	a3,12(s0)
    c02e:	c818                	sw	a4,16(s0)
    c030:	c85c                	sw	a5,20(s0)
    c032:	01042c23          	sw	a6,24(s0)
    c036:	01142e23          	sw	a7,28(s0)
	va_list arp;


	strptr = buff;		/* Enable destination for memory */
    c03a:	200027b7          	lui	a5,0x20002
    c03e:	fdc42703          	lw	a4,-36(s0)
    c042:	cae7a023          	sw	a4,-864(a5) # 20001ca0 <strptr>
	va_start(arp, fmt);
    c046:	02040793          	addi	a5,s0,32
    c04a:	17a1                	addi	a5,a5,-24
    c04c:	fef42623          	sw	a5,-20(s0)
	xvfprintf(0, fmt, arp);
    c050:	fec42783          	lw	a5,-20(s0)
    c054:	863e                	mv	a2,a5
    c056:	fd842583          	lw	a1,-40(s0)
    c05a:	4501                	li	a0,0
    c05c:	30ad                	jal	b8c6 <xvfprintf>
	va_end(arp);
	*strptr = 0;		/* Terminate output string */
    c05e:	200027b7          	lui	a5,0x20002
    c062:	ca07a783          	lw	a5,-864(a5) # 20001ca0 <strptr>
    c066:	00078023          	sb	zero,0(a5)
	strptr = 0;			/* Disable destination for memory */
    c06a:	200027b7          	lui	a5,0x20002
    c06e:	ca07a023          	sw	zero,-864(a5) # 20001ca0 <strptr>
}
    c072:	0001                	nop
    c074:	50b2                	lw	ra,44(sp)
    c076:	5422                	lw	s0,40(sp)
    c078:	6161                	addi	sp,sp,80
    c07a:	8082                	ret

0000c07c <bsp_console_send_char>:
#include "bsp_cfg.h"
#include "ch32x035_usart.h"

static void bsp_console_send_char(uint8_t c)
{
    c07c:	1101                	addi	sp,sp,-32
    c07e:	ce06                	sw	ra,28(sp)
    c080:	cc22                	sw	s0,24(sp)
    c082:	1000                	addi	s0,sp,32
    c084:	87aa                	mv	a5,a0
    c086:	fef407a3          	sb	a5,-17(s0)
      /* wait last transmission completed */
      while (USART_GetFlagStatus(USART2, USART_FLAG_TXE) == RESET);
    c08a:	0001                	nop
    c08c:	08000593          	li	a1,128
    c090:	400047b7          	lui	a5,0x40004
    c094:	40078513          	addi	a0,a5,1024 # 40004400 <_eusrstack+0x20000400>
    c098:	eacfc0ef          	jal	ra,8744 <USART_GetFlagStatus>
    c09c:	87aa                	mv	a5,a0
    c09e:	d7fd                	beqz	a5,c08c <bsp_console_send_char+0x10>

      /* put transnission data */
      USART_SendData(USART2, (uint8_t)c);
    c0a0:	fef44783          	lbu	a5,-17(s0)
    c0a4:	07c2                	slli	a5,a5,0x10
    c0a6:	83c1                	srli	a5,a5,0x10
    c0a8:	85be                	mv	a1,a5
    c0aa:	400047b7          	lui	a5,0x40004
    c0ae:	40078513          	addi	a0,a5,1024 # 40004400 <_eusrstack+0x20000400>
    c0b2:	b98fc0ef          	jal	ra,844a <USART_SendData>

      /* wait transmission completed */
      while (USART_GetFlagStatus(USART2, USART_FLAG_TC) == RESET);
    c0b6:	0001                	nop
    c0b8:	04000593          	li	a1,64
    c0bc:	400047b7          	lui	a5,0x40004
    c0c0:	40078513          	addi	a0,a5,1024 # 40004400 <_eusrstack+0x20000400>
    c0c4:	e80fc0ef          	jal	ra,8744 <USART_GetFlagStatus>
    c0c8:	87aa                	mv	a5,a0
    c0ca:	d7fd                	beqz	a5,c0b8 <bsp_console_send_char+0x3c>
}
    c0cc:	0001                	nop
    c0ce:	40f2                	lw	ra,28(sp)
    c0d0:	4462                	lw	s0,24(sp)
    c0d2:	6105                	addi	sp,sp,32
    c0d4:	8082                	ret

0000c0d6 <bsp_console_init>:

void bsp_console_init(void)
{
    c0d6:	7179                	addi	sp,sp,-48
    c0d8:	d606                	sw	ra,44(sp)
    c0da:	d422                	sw	s0,40(sp)
    c0dc:	1800                	addi	s0,sp,48
      GPIO_InitTypeDef GPIO_InitStructure;
      USART_InitTypeDef USART_InitStructure;

      RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
    c0de:	4585                	li	a1,1
    c0e0:	00020537          	lui	a0,0x20
    c0e4:	a1bf80ef          	jal	ra,4afe <RCC_APB1PeriphClockCmd>
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
    c0e8:	4585                	li	a1,1
    c0ea:	4511                	li	a0,4
    c0ec:	9cdf80ef          	jal	ra,4ab8 <RCC_APB2PeriphClockCmd>

      GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    c0f0:	4791                	li	a5,4
    c0f2:	fef42223          	sw	a5,-28(s0)
      GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c0f6:	4785                	li	a5,1
    c0f8:	fef42423          	sw	a5,-24(s0)
      GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    c0fc:	47e1                	li	a5,24
    c0fe:	fef42623          	sw	a5,-20(s0)
      GPIO_Init(GPIOA, &GPIO_InitStructure);
    c102:	fe440793          	addi	a5,s0,-28
    c106:	85be                	mv	a1,a5
    c108:	400117b7          	lui	a5,0x40011
    c10c:	80078513          	addi	a0,a5,-2048 # 40010800 <_eusrstack+0x2000c800>
    c110:	b7ef60ef          	jal	ra,248e <GPIO_Init>

      USART_InitStructure.USART_BaudRate = 115200;
    c114:	67f1                	lui	a5,0x1c
    c116:	20078793          	addi	a5,a5,512 # 1c200 <_data_lma+0xcff4>
    c11a:	fcf42a23          	sw	a5,-44(s0)
      USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    c11e:	fc041c23          	sh	zero,-40(s0)
      USART_InitStructure.USART_StopBits = USART_StopBits_1;
    c122:	fc041d23          	sh	zero,-38(s0)
      USART_InitStructure.USART_Parity = USART_Parity_No;
    c126:	fc041e23          	sh	zero,-36(s0)
      USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    c12a:	fe041023          	sh	zero,-32(s0)
      USART_InitStructure.USART_Mode = USART_Mode_Tx;
    c12e:	47a1                	li	a5,8
    c130:	fcf41f23          	sh	a5,-34(s0)

      USART_Init(USART2, &USART_InitStructure);
    c134:	fd440793          	addi	a5,s0,-44
    c138:	85be                	mv	a1,a5
    c13a:	400047b7          	lui	a5,0x40004
    c13e:	40078513          	addi	a0,a5,1024 # 40004400 <_eusrstack+0x20000400>
    c142:	cd9fb0ef          	jal	ra,7e1a <USART_Init>
      USART_Cmd(USART2, ENABLE);
    c146:	4585                	li	a1,1
    c148:	400047b7          	lui	a5,0x40004
    c14c:	40078513          	addi	a0,a5,1024 # 40004400 <_eusrstack+0x20000400>
    c150:	f9ffb0ef          	jal	ra,80ee <USART_Cmd>

      xfunc_output = (void (*)(int))bsp_console_send_char;
    c154:	200027b7          	lui	a5,0x20002
    c158:	0000c737          	lui	a4,0xc
    c15c:	07c70713          	addi	a4,a4,124 # c07c <bsp_console_send_char>
    c160:	cae7a823          	sw	a4,-848(a5) # 20001cb0 <xfunc_output>
}
    c164:	0001                	nop
    c166:	50b2                	lw	ra,44(sp)
    c168:	5422                	lw	s0,40(sp)
    c16a:	6145                	addi	sp,sp,48
    c16c:	8082                	ret

0000c16e <_Z17systick_init_testm>:
#include "bsp_cfg.h"

static volatile uint32_t val = SysTick->CNT;

void systick_init_test(uint32_t cpu_freq)
{
    c16e:	7179                	addi	sp,sp,-48
    c170:	d622                	sw	s0,44(sp)
    c172:	1800                	addi	s0,sp,48
    c174:	fca42e23          	sw	a0,-36(s0)
    volatile uint32_t ticks = cpu_freq / 1000;
    c178:	fdc42683          	lw	a3,-36(s0)
    c17c:	3e800713          	li	a4,1000
    c180:	02e6d733          	divu	a4,a3,a4
    c184:	fee42623          	sw	a4,-20(s0)
    /* Clear counting flag status */
    SysTick->SR &= ~(1 << 0);
    c188:	e000f737          	lui	a4,0xe000f
    c18c:	4354                	lw	a3,4(a4)
    c18e:	e000f737          	lui	a4,0xe000f
    c192:	9af9                	andi	a3,a3,-2
    c194:	c354                	sw	a3,4(a4)
    /* Couting up init, auto-reload enable */
    SysTick->CTLR |= (1 << 5) | (1 << 4) | (1 << 3);
    c196:	e000f737          	lui	a4,0xe000f
    c19a:	4314                	lw	a3,0(a4)
    c19c:	e000f737          	lui	a4,0xe000f
    c1a0:	0386e693          	ori	a3,a3,56
    c1a4:	c314                	sw	a3,0(a4)
    /* HCLK as clock source */
    SysTick->CTLR |= (1 << 2);
    c1a6:	e000f737          	lui	a4,0xe000f
    c1aa:	4314                	lw	a3,0(a4)
    c1ac:	e000f737          	lui	a4,0xe000f
    c1b0:	0046e693          	ori	a3,a3,4
    c1b4:	c314                	sw	a3,0(a4)
    /* Reset counter */
    SysTick->CNT = (uint32_t) 0;
    c1b6:	e000f737          	lui	a4,0xe000f
    c1ba:	4601                	li	a2,0
    c1bc:	4681                	li	a3,0
    c1be:	c710                	sw	a2,8(a4)
    c1c0:	c754                	sw	a3,12(a4)
    /* Set compare value */
    SysTick->CMP = (uint32_t) ticks - 1;
    c1c2:	fec42703          	lw	a4,-20(s0)
    c1c6:	fff70693          	addi	a3,a4,-1 # e000efff <_eusrstack+0xc000afff>
    c1ca:	e000f737          	lui	a4,0xe000f
    c1ce:	87b6                	mv	a5,a3
    c1d0:	4801                	li	a6,0
    c1d2:	cb1c                	sw	a5,16(a4)
    c1d4:	01072a23          	sw	a6,20(a4) # e000f014 <_eusrstack+0xc000b014>
    /* Software interrupt disable */
    SysTick->CTLR &= ~(1 << 31);
    c1d8:	e000f7b7          	lui	a5,0xe000f
    c1dc:	4394                	lw	a3,0(a5)
    c1de:	e000f7b7          	lui	a5,0xe000f
    c1e2:	80000737          	lui	a4,0x80000
    c1e6:	fff74713          	not	a4,a4
    c1ea:	8f75                	and	a4,a4,a3
    c1ec:	c398                	sw	a4,0(a5)
    /* Timer interrupt enable */
    SysTick->CTLR |= (1 << 1);
    c1ee:	e000f7b7          	lui	a5,0xe000f
    c1f2:	4398                	lw	a4,0(a5)
    c1f4:	e000f7b7          	lui	a5,0xe000f
    c1f8:	00276713          	ori	a4,a4,2
    c1fc:	c398                	sw	a4,0(a5)
    /* Start systick timer */
    SysTick->CTLR |= (1 << 0);
    c1fe:	e000f7b7          	lui	a5,0xe000f
    c202:	4398                	lw	a4,0(a5)
    c204:	e000f7b7          	lui	a5,0xe000f
    c208:	00176713          	ori	a4,a4,1
    c20c:	c398                	sw	a4,0(a5)
}
    c20e:	0001                	nop
    c210:	5432                	lw	s0,44(sp)
    c212:	6145                	addi	sp,sp,48
    c214:	8082                	ret

0000c216 <_Z6task_1Pv>:
// }
// #endif


void task_1(void *p_arg)
{
    c216:	1101                	addi	sp,sp,-32
    c218:	ce06                	sw	ra,28(sp)
    c21a:	cc22                	sw	s0,24(sp)
    c21c:	1000                	addi	s0,sp,32
    c21e:	fea42623          	sw	a0,-20(s0)
    while (1)
    {
        BSP_PRINT("Task 1 \r\n");
    c222:	67bd                	lui	a5,0xf
    c224:	02078513          	addi	a0,a5,32 # f020 <app_task_table+0x48>
    c228:	d67ff0ef          	jal	ra,bf8e <xprintf>
        os_task_delay(1000);
    c22c:	3e800513          	li	a0,1000
    c230:	b1efe0ef          	jal	ra,a54e <os_task_delay>
        BSP_PRINT("Task 1 \r\n");
    c234:	b7fd                	j	c222 <_Z6task_1Pv+0xc>

0000c236 <_Z6task_2Pv>:
    }
}
void task_2(void *p_arg)
{
    c236:	1101                	addi	sp,sp,-32
    c238:	ce06                	sw	ra,28(sp)
    c23a:	cc22                	sw	s0,24(sp)
    c23c:	1000                	addi	s0,sp,32
    c23e:	fea42623          	sw	a0,-20(s0)
    while (1)
    {
        BSP_PRINT("\tTask 2 \r\n");
    c242:	67bd                	lui	a5,0xf
    c244:	02c78513          	addi	a0,a5,44 # f02c <app_task_table+0x54>
    c248:	d47ff0ef          	jal	ra,bf8e <xprintf>
        os_task_delay(600);
    c24c:	25800513          	li	a0,600
    c250:	afefe0ef          	jal	ra,a54e <os_task_delay>
        BSP_PRINT("\tTask 2 \r\n");
    c254:	b7fd                	j	c242 <_Z6task_2Pv+0xc>

0000c256 <_Z6task_3Pv>:
    }   
}
void task_3(void *p_arg)
{
    c256:	1101                	addi	sp,sp,-32
    c258:	ce06                	sw	ra,28(sp)
    c25a:	cc22                	sw	s0,24(sp)
    c25c:	1000                	addi	s0,sp,32
    c25e:	fea42623          	sw	a0,-20(s0)
    while (1)
    {
        BSP_PRINT("\t\tTask 3 \r\n");
    c262:	67bd                	lui	a5,0xf
    c264:	03878513          	addi	a0,a5,56 # f038 <app_task_table+0x60>
    c268:	d27ff0ef          	jal	ra,bf8e <xprintf>
        os_task_delay(200);
    c26c:	0c800513          	li	a0,200
    c270:	adefe0ef          	jal	ra,a54e <os_task_delay>
        BSP_PRINT("\t\tTask 3 \r\n");
    c274:	b7fd                	j	c262 <_Z6task_3Pv+0xc>

0000c276 <main>:
    }   
}

int main()
{  
    c276:	1101                	addi	sp,sp,-32
    c278:	ce06                	sw	ra,28(sp)
    c27a:	cc22                	sw	s0,24(sp)
    c27c:	1000                	addi	s0,sp,32
    GPIO_InitTypeDef GPIO_InitStructure = {0};
    c27e:	fe042223          	sw	zero,-28(s0)
    c282:	fe042423          	sw	zero,-24(s0)
    c286:	fe042623          	sw	zero,-20(s0)

    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
    c28a:	4585                	li	a1,1
    c28c:	4521                	li	a0,8
    c28e:	82bf80ef          	jal	ra,4ab8 <RCC_APB2PeriphClockCmd>
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
    c292:	6785                	lui	a5,0x1
    c294:	fef42223          	sw	a5,-28(s0)
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    c298:	47c1                	li	a5,16
    c29a:	fef42623          	sw	a5,-20(s0)
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    c29e:	4785                	li	a5,1
    c2a0:	fef42423          	sw	a5,-24(s0)
    GPIO_Init(GPIOB, &GPIO_InitStructure);
    c2a4:	fe440793          	addi	a5,s0,-28
    c2a8:	85be                	mv	a1,a5
    c2aa:	400117b7          	lui	a5,0x40011
    c2ae:	c0078513          	addi	a0,a5,-1024 # 40010c00 <_eusrstack+0x2000cc00>
    c2b2:	9dcf60ef          	jal	ra,248e <GPIO_Init>

    bsp_console_init();
    c2b6:	e21ff0ef          	jal	ra,c0d6 <bsp_console_init>
    // ENABLE_INTERRUPTS
    // systick_init_test(SystemCoreClock);
    // NVIC_SetPriority(SysTick_IRQn, 1);
    // NVIC_EnableIRQ(SysTick_IRQn);

    BSP_PRINT("Hello \n");
    c2ba:	67bd                	lui	a5,0xf
    c2bc:	04478513          	addi	a0,a5,68 # f044 <app_task_table+0x6c>
    c2c0:	ccfff0ef          	jal	ra,bf8e <xprintf>
    os_init();
    c2c4:	b35fc0ef          	jal	ra,8df8 <os_init>
	os_task_create_list((task_t*)app_task_table, TASK_EOT_ID);
    c2c8:	458d                	li	a1,3
    c2ca:	67bd                	lui	a5,0xf
    c2cc:	fd878513          	addi	a0,a5,-40 # efd8 <app_task_table>
    c2d0:	fedfd0ef          	jal	ra,a2bc <os_task_create_list>
	os_run();
    c2d4:	b47fc0ef          	jal	ra,8e1a <os_run>

    while(1)
    c2d8:	a001                	j	c2d8 <main+0x62>

0000c2da <_Z41__static_initialization_and_destruction_0ii>:
    {
        // BSP_PRINT("Hello \n");
        // for(volatile int i = 0; i < 100000; i++);
        // GPIOB->OUTDR ^= (1 << 12);
    }
    c2da:	1101                	addi	sp,sp,-32
    c2dc:	ce22                	sw	s0,28(sp)
    c2de:	1000                	addi	s0,sp,32
    c2e0:	fea42623          	sw	a0,-20(s0)
    c2e4:	feb42423          	sw	a1,-24(s0)
    c2e8:	fec42703          	lw	a4,-20(s0)
    c2ec:	4785                	li	a5,1
    c2ee:	02f71263          	bne	a4,a5,c312 <_Z41__static_initialization_and_destruction_0ii+0x38>
    c2f2:	fe842703          	lw	a4,-24(s0)
    c2f6:	67c1                	lui	a5,0x10
    c2f8:	17fd                	addi	a5,a5,-1
    c2fa:	00f71c63          	bne	a4,a5,c312 <_Z41__static_initialization_and_destruction_0ii+0x38>
static volatile uint32_t val = SysTick->CNT;
    c2fe:	e000f7b7          	lui	a5,0xe000f
    c302:	00c7a803          	lw	a6,12(a5) # e000f00c <_eusrstack+0xc000b00c>
    c306:	479c                	lw	a5,8(a5)
    c308:	873e                	mv	a4,a5
    c30a:	200027b7          	lui	a5,0x20002
    c30e:	cae7a223          	sw	a4,-860(a5) # 20001ca4 <_ZL3val>
    c312:	0001                	nop
    c314:	4472                	lw	s0,28(sp)
    c316:	6105                	addi	sp,sp,32
    c318:	8082                	ret

0000c31a <_GLOBAL__sub_I__Z17systick_init_testm>:
    c31a:	1141                	addi	sp,sp,-16
    c31c:	c606                	sw	ra,12(sp)
    c31e:	c422                	sw	s0,8(sp)
    c320:	0800                	addi	s0,sp,16
    c322:	67c1                	lui	a5,0x10
    c324:	fff78593          	addi	a1,a5,-1 # ffff <_data_lma+0xdf3>
    c328:	4505                	li	a0,1
    c32a:	3f45                	jal	c2da <_Z41__static_initialization_and_destruction_0ii>
    c32c:	40b2                	lw	ra,12(sp)
    c32e:	4422                	lw	s0,8(sp)
    c330:	0141                	addi	sp,sp,16
    c332:	8082                	ret

0000c334 <os_cpu_start_first_task>:
.text
.align 2
.type os_cpu_start_first_task, %function
os_cpu_start_first_task:

      lw t0, tcb_curr_ptr        # Load current task control block pointer
    c334:	1fff6297          	auipc	t0,0x1fff6
    c338:	9782a283          	lw	t0,-1672(t0) # 20001cac <tcb_curr_ptr>
      lw sp, 0x00(t0)            # Load stack pointer from TCB
    c33c:	0002a103          	lw	sp,0(t0)

      j       restore_context
    c340:	a011                	j	c344 <restore_context>
    c342:	0001                	nop

0000c344 <restore_context>:

.align 2
.type restore_context, %function
restore_context:

      lw t0, 0x00(sp)            # t0 = sp
    c344:	4282                	lw	t0,0(sp)
      csrw mepc, t0              # pc = *sp
    c346:	34129073          	csrw	mepc,t0
      lw t0, 0x04(sp)            # t0 = sp
    c34a:	4292                	lw	t0,4(sp)
      csrw mstatus, t0              # mstatus = *sp
    c34c:	30029073          	csrw	mstatus,t0

      # Load registers from stack
      lw x1, 0x08(sp)            # Load x1 from offset 0x08
    c350:	40a2                	lw	ra,8(sp)
      lw x3, 0x0C(sp)            # Load x3 from offset 0x0C
    c352:	41b2                	lw	gp,12(sp)
      lw x4, 0x10(sp)            # Load x4 from offset 0x10
    c354:	4242                	lw	tp,16(sp)
      lw x5, 0x14(sp)            # Load x5 from offset 0x14
    c356:	42d2                	lw	t0,20(sp)
      lw x6, 0x18(sp)            # Load x6 from offset 0x18
    c358:	4362                	lw	t1,24(sp)
      lw x7, 0x1C(sp)            # Load x7 from offset 0x1C
    c35a:	43f2                	lw	t2,28(sp)
      lw x8, 0x20(sp)            # Load x8 from offset 0x20
    c35c:	5402                	lw	s0,32(sp)
      lw x9, 0x24(sp)            # Load x9 from offset 0x24
    c35e:	5492                	lw	s1,36(sp)
      lw x10, 0x28(sp)           # Load x10 from offset 0x28
    c360:	5522                	lw	a0,40(sp)
      lw x11, 0x2C(sp)           # Load x11 from offset 0x2C
    c362:	55b2                	lw	a1,44(sp)
      lw x12, 0x30(sp)           # Load x12 from offset 0x30
    c364:	5642                	lw	a2,48(sp)
      lw x13, 0x34(sp)           # Load x13 from offset 0x34
    c366:	56d2                	lw	a3,52(sp)
      lw x14, 0x38(sp)           # Load x14 from offset 0x38
    c368:	5762                	lw	a4,56(sp)
      lw x15, 0x3C(sp)           # Load x15 from offset 0x3C
    c36a:	57f2                	lw	a5,60(sp)
      lw x16, 0x40(sp)           # Load x16 from offset 0x40
    c36c:	4806                	lw	a6,64(sp)
      lw x17, 0x44(sp)           # Load x17 from offset 0x44
    c36e:	4896                	lw	a7,68(sp)
      lw x18, 0x48(sp)           # Load x18 from offset 0x48
    c370:	4926                	lw	s2,72(sp)
      lw x19, 0x4C(sp)           # Load x19 from offset 0x4C
    c372:	49b6                	lw	s3,76(sp)
      lw x20, 0x50(sp)           # Load x20 from offset 0x50
    c374:	4a46                	lw	s4,80(sp)
      lw x21, 0x54(sp)           # Load x21 from offset 0x54
    c376:	4ad6                	lw	s5,84(sp)
      lw x22, 0x58(sp)           # Load x22 from offset 0x58
    c378:	4b66                	lw	s6,88(sp)
      lw x23, 0x5C(sp)           # Load x23 from offset 0x5C
    c37a:	4bf6                	lw	s7,92(sp)
      lw x24, 0x60(sp)           # Load x24 from offset 0x60
    c37c:	5c06                	lw	s8,96(sp)
      lw x25, 0x64(sp)           # Load x25 from offset 0x64
    c37e:	5c96                	lw	s9,100(sp)
      lw x26, 0x68(sp)           # Load x26 from offset 0x68
    c380:	5d26                	lw	s10,104(sp)
      lw x27, 0x6C(sp)           # Load x27 from offset 0x6C
    c382:	5db6                	lw	s11,108(sp)
      lw x28, 0x70(sp)           # Load x28 from offset 0x70
    c384:	5e46                	lw	t3,112(sp)
      lw x29, 0x74(sp)           # Load x29 from offset 0x74
    c386:	5ed6                	lw	t4,116(sp)
      lw x30, 0x78(sp)           # Load x30 from offset 0x78
    c388:	5f66                	lw	t5,120(sp)
      lw x31, 0x7C(sp)           # Load x31 from offset 0x7C
    c38a:	5ff6                	lw	t6,124(sp)

      add sp, sp, 128            # Adjust stack pointer
    c38c:	6109                	addi	sp,sp,128

      mret                       # Return from machine mode
    c38e:	30200073          	mret
    c392:	0001                	nop

0000c394 <SW_Handler>:
.global SW_Handler
SW_Handler:
      # li t0, 0x1800              # Load immediate value into t1
      # csrw mstatus, t0           # Disable interrupts

    addi sp, sp, -128            # Allocate space on the stack (128 bytes)
    c394:	7119                	addi	sp,sp,-128

    csrr t0, mstatus              # Read mstatus into t0
    c396:	300022f3          	csrr	t0,mstatus
    sw   t0, 0x04(sp)             # Save mstatus to the stack at offset for mstatus (0x04)
    c39a:	c216                	sw	t0,4(sp)

    csrr t0, mepc                 # Read mepc into t0
    c39c:	341022f3          	csrr	t0,mepc
    sw   t0, 0x00(sp)             # Save mepc to the stack at offset for mepc (0x00)
    c3a0:	c016                	sw	t0,0(sp)

    # Load registers from stack
    sw   x1, 0x08(sp)             # Save x1 to the stack at offset for x1 (0x08)
    c3a2:	c406                	sw	ra,8(sp)
    sw   x3, 0x0C(sp)             # Save x3 to the stack at offset for x3 (0x0C)
    c3a4:	c60e                	sw	gp,12(sp)
    sw   x4, 0x10(sp)             # Save x4 to the stack at offset for x4 (0x10)
    c3a6:	c812                	sw	tp,16(sp)
    sw   x5, 0x14(sp)             # Save x5 to the stack at offset for x5 (0x14)
    c3a8:	ca16                	sw	t0,20(sp)
    sw   x6, 0x18(sp)             # Save x6 to the stack at offset for x6 (0x18)
    c3aa:	cc1a                	sw	t1,24(sp)
    sw   x7, 0x1C(sp)             # Save x7 to the stack at offset for x7 (0x1C)
    c3ac:	ce1e                	sw	t2,28(sp)
    sw   x8, 0x20(sp)             # Save x8 to the stack at offset for x8 (0x20)
    c3ae:	d022                	sw	s0,32(sp)
    sw   x9, 0x24(sp)             # Save x9 to the stack at offset for x9 (0x24)
    c3b0:	d226                	sw	s1,36(sp)
    sw   x10, 0x28(sp)            # Save x10 to the stack at offset for x10 (0x28)
    c3b2:	d42a                	sw	a0,40(sp)
    sw   x11, 0x2C(sp)            # Save x11 to the stack at offset for x11 (0x2C)
    c3b4:	d62e                	sw	a1,44(sp)
    sw   x12, 0x30(sp)            # Save x12 to the stack at offset for x12 (0x30)
    c3b6:	d832                	sw	a2,48(sp)
    sw   x13, 0x34(sp)            # Save x13 to the stack at offset for x13 (0x34)
    c3b8:	da36                	sw	a3,52(sp)
    sw   x14, 0x38(sp)            # Save x14 to the stack at offset for x14 (0x38)
    c3ba:	dc3a                	sw	a4,56(sp)
    sw   x15, 0x3C(sp)            # Save x15 to the stack at offset for x15 (0x3C)
    c3bc:	de3e                	sw	a5,60(sp)
    sw   x16, 0x40(sp)            # Save x16 to the stack at offset for x16 (0x40)
    c3be:	c0c2                	sw	a6,64(sp)
    sw   x17, 0x44(sp)            # Save x17 to the stack at offset for x17 (0x44)
    c3c0:	c2c6                	sw	a7,68(sp)
    sw   x18, 0x48(sp)            # Save x18 to the stack at offset for x18 (0x48)
    c3c2:	c4ca                	sw	s2,72(sp)
    sw   x19, 0x4C(sp)            # Save x19 to the stack at offset for x19 (0x4C)
    c3c4:	c6ce                	sw	s3,76(sp)
    sw   x20, 0x50(sp)            # Save x20 to the stack at offset for x20 (0x50)
    c3c6:	c8d2                	sw	s4,80(sp)
    sw   x21, 0x54(sp)            # Save x21 to the stack at offset for x21 (0x54)
    c3c8:	cad6                	sw	s5,84(sp)
    sw   x22, 0x58(sp)            # Save x22 to the stack at offset for x22 (0x58)
    c3ca:	ccda                	sw	s6,88(sp)
    sw   x23, 0x5C(sp)            # Save x23 to the stack at offset for x23 (0x5C)
    c3cc:	cede                	sw	s7,92(sp)
    sw   x24, 0x60(sp)            # Save x24 to the stack at offset for x24 (0x60)
    c3ce:	d0e2                	sw	s8,96(sp)
    sw   x25, 0x64(sp)            # Save x25 to the stack at offset for x25 (0x64)
    c3d0:	d2e6                	sw	s9,100(sp)
    sw   x26, 0x68(sp)            # Save x26 to the stack at offset for x26 (0x68)
    c3d2:	d4ea                	sw	s10,104(sp)
    sw   x27, 0x6C(sp)            # Save x27 to the stack at offset for x27 (0x6C)
    c3d4:	d6ee                	sw	s11,108(sp)
    sw   x28, 0x70(sp)            # Save x28 to the stack at offset for x28 (0x70)
    c3d6:	d8f2                	sw	t3,112(sp)
    sw   x29, 0x74(sp)            # Save x29 to the stack at offset for x29 (0x74)
    c3d8:	daf6                	sw	t4,116(sp)
    sw   x30, 0x78(sp)            # Save x30 to the stack at offset for x30 (0x78)
    c3da:	dcfa                	sw	t5,120(sp)
    sw   x31, 0x7C(sp)            # Save x31 to the stack at offset for x31 (0x7C)
    c3dc:	defe                	sw	t6,124(sp)
#     call os_cpu_clear_sw_irq             # Call function to clear pending interrupts

#     # Resume old stack pointer
#     lw sp, 0(sp)                  # Restore old stack pointer

    csrrw sp,mscratch,sp // pop isr stack pointer
    c3de:	34011173          	csrrw	sp,mscratch,sp
    jal os_cpu_clear_sw_irq
    c3e2:	ee8fc0ef          	jal	ra,8aca <os_cpu_clear_sw_irq>
    csrrw sp,mscratch,sp // push isr stack pointer
    c3e6:	34011173          	csrrw	sp,mscratch,sp

    la t0, tcb_curr_ptr             # Load address of current task into t0
    c3ea:	1fff6297          	auipc	t0,0x1fff6
    c3ee:	8c228293          	addi	t0,t0,-1854 # 20001cac <tcb_curr_ptr>
    la t1, tcb_high_rdy_ptr         # Load address of next task into t1
    c3f2:	1fff6317          	auipc	t1,0x1fff6
    c3f6:	8b630313          	addi	t1,t1,-1866 # 20001ca8 <tcb_high_rdy_ptr>

    # Save sp to tcb_curr_ptr.sp
    lw t2, (t0)                   # Load current task pointer into t2
    c3fa:	0002a383          	lw	t2,0(t0)
    sw sp, (t2)                   # Save current stack pointer to current task
    c3fe:	0023a023          	sw	sp,0(t2)

    # Switch task
    lw t1, (t1)                   # Load next task pointer into t1
    c402:	00032303          	lw	t1,0(t1)
    sw t1, (t0)                   # Set current task to next task
    c406:	0062a023          	sw	t1,0(t0)

    # Load new task stack pointer
    lw sp, (t1)                   # Load new task stack pointer from next task
    c40a:	00032103          	lw	sp,0(t1)

    c40e:	bf1d                	j	c344 <restore_context>
	...

0000c412 <memset>:
    c412:	433d                	li	t1,15
    c414:	872a                	mv	a4,a0
    c416:	02c37363          	bgeu	t1,a2,c43c <memset+0x2a>
    c41a:	00f77793          	andi	a5,a4,15
    c41e:	efbd                	bnez	a5,c49c <memset+0x8a>
    c420:	e5ad                	bnez	a1,c48a <memset+0x78>
    c422:	ff067693          	andi	a3,a2,-16
    c426:	8a3d                	andi	a2,a2,15
    c428:	96ba                	add	a3,a3,a4
    c42a:	c30c                	sw	a1,0(a4)
    c42c:	c34c                	sw	a1,4(a4)
    c42e:	c70c                	sw	a1,8(a4)
    c430:	c74c                	sw	a1,12(a4)
    c432:	0741                	addi	a4,a4,16
    c434:	fed76be3          	bltu	a4,a3,c42a <memset+0x18>
    c438:	e211                	bnez	a2,c43c <memset+0x2a>
    c43a:	8082                	ret
    c43c:	40c306b3          	sub	a3,t1,a2
    c440:	068a                	slli	a3,a3,0x2
    c442:	00000297          	auipc	t0,0x0
    c446:	9696                	add	a3,a3,t0
    c448:	00a68067          	jr	10(a3)
    c44c:	00b70723          	sb	a1,14(a4) # 8000000e <_eusrstack+0x5fffc00e>
    c450:	00b706a3          	sb	a1,13(a4)
    c454:	00b70623          	sb	a1,12(a4)
    c458:	00b705a3          	sb	a1,11(a4)
    c45c:	00b70523          	sb	a1,10(a4)
    c460:	00b704a3          	sb	a1,9(a4)
    c464:	00b70423          	sb	a1,8(a4)
    c468:	00b703a3          	sb	a1,7(a4)
    c46c:	00b70323          	sb	a1,6(a4)
    c470:	00b702a3          	sb	a1,5(a4)
    c474:	00b70223          	sb	a1,4(a4)
    c478:	00b701a3          	sb	a1,3(a4)
    c47c:	00b70123          	sb	a1,2(a4)
    c480:	00b700a3          	sb	a1,1(a4)
    c484:	00b70023          	sb	a1,0(a4)
    c488:	8082                	ret
    c48a:	0ff5f593          	andi	a1,a1,255
    c48e:	00859693          	slli	a3,a1,0x8
    c492:	8dd5                	or	a1,a1,a3
    c494:	01059693          	slli	a3,a1,0x10
    c498:	8dd5                	or	a1,a1,a3
    c49a:	b761                	j	c422 <memset+0x10>
    c49c:	00279693          	slli	a3,a5,0x2
    c4a0:	00000297          	auipc	t0,0x0
    c4a4:	9696                	add	a3,a3,t0
    c4a6:	8286                	mv	t0,ra
    c4a8:	fa8680e7          	jalr	-88(a3)
    c4ac:	8096                	mv	ra,t0
    c4ae:	17c1                	addi	a5,a5,-16
    c4b0:	8f1d                	sub	a4,a4,a5
    c4b2:	963e                	add	a2,a2,a5
    c4b4:	f8c374e3          	bgeu	t1,a2,c43c <memset+0x2a>
    c4b8:	b7a5                	j	c420 <memset+0xe>

0000c4ba <NMI_Handler>:
    .weak   TIM2_CC_IRQHandler         /* TIM2 Capture Compare */
    .weak   TIM2_TRG_COM_IRQHandler    /* TIM2 Trigger and Commutation */
    .weak   TIM2_BRK_IRQHandler        /* TIM2 Break */
    .weak   TIM3_IRQHandler            /* TIM3 */

NMI_Handler:  1:  j 1b
    c4ba:	a001                	j	c4ba <NMI_Handler>

0000c4bc <HardFault_Handler>:
HardFault_Handler:  1:  j 1b
    c4bc:	a001                	j	c4bc <HardFault_Handler>

0000c4be <Ecall_M_Mode_Handler>:
Ecall_M_Mode_Handler:  1:  j 1b
    c4be:	a001                	j	c4be <Ecall_M_Mode_Handler>

0000c4c0 <Ecall_U_Mode_Handler>:
Ecall_U_Mode_Handler:  1:  j 1b
    c4c0:	a001                	j	c4c0 <Ecall_U_Mode_Handler>

0000c4c2 <Break_Point_Handler>:
Break_Point_Handler:  1:  j 1b
    c4c2:	a001                	j	c4c2 <Break_Point_Handler>
SysTick_Handler:  1:  j 1b
    c4c4:	a001                	j	c4c4 <Break_Point_Handler+0x2>
SW_Handler:  1:  j 1b
    c4c6:	a001                	j	c4c6 <Break_Point_Handler+0x4>

0000c4c8 <WWDG_IRQHandler>:
WWDG_IRQHandler:  1:  j 1b
    c4c8:	a001                	j	c4c8 <WWDG_IRQHandler>

0000c4ca <PVD_IRQHandler>:
PVD_IRQHandler:  1:  j 1b
    c4ca:	a001                	j	c4ca <PVD_IRQHandler>

0000c4cc <FLASH_IRQHandler>:
FLASH_IRQHandler:  1:  j 1b
    c4cc:	a001                	j	c4cc <FLASH_IRQHandler>

0000c4ce <EXTI7_0_IRQHandler>:
EXTI7_0_IRQHandler:  1:  j 1b
    c4ce:	a001                	j	c4ce <EXTI7_0_IRQHandler>

0000c4d0 <AWU_IRQHandler>:
AWU_IRQHandler:  1:  j 1b
    c4d0:	a001                	j	c4d0 <AWU_IRQHandler>

0000c4d2 <DMA1_Channel1_IRQHandler>:
DMA1_Channel1_IRQHandler:  1:  j 1b
    c4d2:	a001                	j	c4d2 <DMA1_Channel1_IRQHandler>

0000c4d4 <DMA1_Channel2_IRQHandler>:
DMA1_Channel2_IRQHandler:  1:  j 1b
    c4d4:	a001                	j	c4d4 <DMA1_Channel2_IRQHandler>

0000c4d6 <DMA1_Channel3_IRQHandler>:
DMA1_Channel3_IRQHandler:  1:  j 1b
    c4d6:	a001                	j	c4d6 <DMA1_Channel3_IRQHandler>

0000c4d8 <DMA1_Channel4_IRQHandler>:
DMA1_Channel4_IRQHandler:  1:  j 1b
    c4d8:	a001                	j	c4d8 <DMA1_Channel4_IRQHandler>

0000c4da <DMA1_Channel5_IRQHandler>:
DMA1_Channel5_IRQHandler:  1:  j 1b
    c4da:	a001                	j	c4da <DMA1_Channel5_IRQHandler>

0000c4dc <DMA1_Channel6_IRQHandler>:
DMA1_Channel6_IRQHandler:  1:  j 1b
    c4dc:	a001                	j	c4dc <DMA1_Channel6_IRQHandler>

0000c4de <DMA1_Channel7_IRQHandler>:
DMA1_Channel7_IRQHandler:  1:  j 1b
    c4de:	a001                	j	c4de <DMA1_Channel7_IRQHandler>

0000c4e0 <ADC1_IRQHandler>:
ADC1_IRQHandler:  1:  j 1b
    c4e0:	a001                	j	c4e0 <ADC1_IRQHandler>

0000c4e2 <I2C1_EV_IRQHandler>:
I2C1_EV_IRQHandler:  1:  j 1b
    c4e2:	a001                	j	c4e2 <I2C1_EV_IRQHandler>

0000c4e4 <I2C1_ER_IRQHandler>:
I2C1_ER_IRQHandler:  1:  j 1b
    c4e4:	a001                	j	c4e4 <I2C1_ER_IRQHandler>

0000c4e6 <USART1_IRQHandler>:
USART1_IRQHandler:  1:  j 1b
    c4e6:	a001                	j	c4e6 <USART1_IRQHandler>

0000c4e8 <SPI1_IRQHandler>:
SPI1_IRQHandler:  1:  j 1b
    c4e8:	a001                	j	c4e8 <SPI1_IRQHandler>

0000c4ea <TIM1_BRK_IRQHandler>:
TIM1_BRK_IRQHandler:  1:  j 1b
    c4ea:	a001                	j	c4ea <TIM1_BRK_IRQHandler>

0000c4ec <TIM1_UP_IRQHandler>:
TIM1_UP_IRQHandler:  1:  j 1b
    c4ec:	a001                	j	c4ec <TIM1_UP_IRQHandler>

0000c4ee <TIM1_TRG_COM_IRQHandler>:
TIM1_TRG_COM_IRQHandler:  1:  j 1b
    c4ee:	a001                	j	c4ee <TIM1_TRG_COM_IRQHandler>

0000c4f0 <TIM1_CC_IRQHandler>:
TIM1_CC_IRQHandler:  1:  j 1b
    c4f0:	a001                	j	c4f0 <TIM1_CC_IRQHandler>

0000c4f2 <TIM2_UP_IRQHandler>:
TIM2_UP_IRQHandler:  1:  j 1b
    c4f2:	a001                	j	c4f2 <TIM2_UP_IRQHandler>

0000c4f4 <USART2_IRQHandler>:
USART2_IRQHandler:  1:  j 1b
    c4f4:	a001                	j	c4f4 <USART2_IRQHandler>

0000c4f6 <EXTI15_8_IRQHandler>:
EXTI15_8_IRQHandler:  1:  j 1b
    c4f6:	a001                	j	c4f6 <EXTI15_8_IRQHandler>

0000c4f8 <EXTI25_16_IRQHandler>:
EXTI25_16_IRQHandler:  1:  j 1b
    c4f8:	a001                	j	c4f8 <EXTI25_16_IRQHandler>

0000c4fa <USART3_IRQHandler>:
USART3_IRQHandler:  1:  j 1b
    c4fa:	a001                	j	c4fa <USART3_IRQHandler>

0000c4fc <USART4_IRQHandler>:
USART4_IRQHandler:  1:  j 1b
    c4fc:	a001                	j	c4fc <USART4_IRQHandler>

0000c4fe <DMA1_Channel8_IRQHandler>:
DMA1_Channel8_IRQHandler:  1:  j 1b
    c4fe:	a001                	j	c4fe <DMA1_Channel8_IRQHandler>

0000c500 <USBFS_IRQHandler>:
USBFS_IRQHandler:  1:  j 1b
    c500:	a001                	j	c500 <USBFS_IRQHandler>

0000c502 <USBFSWakeUp_IRQHandler>:
USBFSWakeUp_IRQHandler:  1:  j 1b
    c502:	a001                	j	c502 <USBFSWakeUp_IRQHandler>

0000c504 <PIOC_IRQHandler>:
PIOC_IRQHandler:  1:  j 1b
    c504:	a001                	j	c504 <PIOC_IRQHandler>

0000c506 <OPA_IRQHandler>:
OPA_IRQHandler:  1:  j 1b
    c506:	a001                	j	c506 <OPA_IRQHandler>

0000c508 <USBPD_IRQHandler>:
USBPD_IRQHandler:  1:  j 1b
    c508:	a001                	j	c508 <USBPD_IRQHandler>

0000c50a <USBPDWakeUp_IRQHandler>:
USBPDWakeUp_IRQHandler:  1:  j 1b
    c50a:	a001                	j	c50a <USBPDWakeUp_IRQHandler>

0000c50c <TIM2_CC_IRQHandler>:
TIM2_CC_IRQHandler:  1:  j 1b
    c50c:	a001                	j	c50c <TIM2_CC_IRQHandler>

0000c50e <TIM2_TRG_COM_IRQHandler>:
TIM2_TRG_COM_IRQHandler:  1:  j 1b
    c50e:	a001                	j	c50e <TIM2_TRG_COM_IRQHandler>

0000c510 <TIM2_BRK_IRQHandler>:
TIM2_BRK_IRQHandler:  1:  j 1b
    c510:	a001                	j	c510 <TIM2_BRK_IRQHandler>

0000c512 <TIM3_IRQHandler>:
TIM3_IRQHandler:  1:  j 1b
    c512:	a001                	j	c512 <TIM3_IRQHandler>

0000c514 <handle_reset>:
	.weak	handle_reset
	.align	1
handle_reset:
.option push 
.option	norelax 
	la gp, __global_pointer$
    c514:	1fff4197          	auipc	gp,0x1fff4
    c518:	30c18193          	addi	gp,gp,780 # 20000820 <__global_pointer$>
.option	pop 
1:
	la sp, _eusrstack 
    c51c:	1fff8117          	auipc	sp,0x1fff8
    c520:	ae410113          	addi	sp,sp,-1308 # 20004000 <_eusrstack>
2:
	/* Load data section from flash to RAM */
	la a0, _data_lma
    c524:	00003517          	auipc	a0,0x3
    c528:	ce850513          	addi	a0,a0,-792 # f20c <_data_lma>
	la a1, _data_vma
    c52c:	1fff4597          	auipc	a1,0x1fff4
    c530:	ad458593          	addi	a1,a1,-1324 # 20000000 <_data_vma>
	la a2, _edata
    c534:	82018613          	addi	a2,gp,-2016 # 20000040 <_edata>
	bgeu a1, a2, 2f
    c538:	00c5fa63          	bgeu	a1,a2,c54c <handle_reset+0x38>
1:
	lw t0, (a0)
    c53c:	00052283          	lw	t0,0(a0)
	sw t0, (a1)
    c540:	0055a023          	sw	t0,0(a1)
	addi a0, a0, 4
    c544:	0511                	addi	a0,a0,4
	addi a1, a1, 4
    c546:	0591                	addi	a1,a1,4
	bltu a1, a2, 1b
    c548:	fec5eae3          	bltu	a1,a2,c53c <handle_reset+0x28>
2:
	/* Clear bss section */
	la a0, _sbss
    c54c:	82018513          	addi	a0,gp,-2016 # 20000040 <_edata>
	la a1, _ebss
    c550:	1fff5597          	auipc	a1,0x1fff5
    c554:	76458593          	addi	a1,a1,1892 # 20001cb4 <_ebss>
	bgeu a0, a1, 2f
    c558:	00b57763          	bgeu	a0,a1,c566 <handle_reset+0x52>
1:
	sw zero, (a0)
    c55c:	00052023          	sw	zero,0(a0)
	addi a0, a0, 4
    c560:	0511                	addi	a0,a0,4
	bltu a0, a1, 1b
    c562:	feb56de3          	bltu	a0,a1,c55c <handle_reset+0x48>
2:
    li t0, 0x1f
    c566:	42fd                	li	t0,31
    csrw 0xbc0, t0
    c568:	bc029073          	csrw	0xbc0,t0

    /* Enable nested and disable hardware stack INTSYSCR*/
	li t0, 0x2
    c56c:	4289                	li	t0,2
	csrw 0x804, t0
    c56e:	80429073          	csrw	0x804,t0

/* Enable global interrupt and configure privileged mode */
   	li t0, 0x1800               
    c572:	000022b7          	lui	t0,0x2
    c576:	80028293          	addi	t0,t0,-2048 # 1800 <EXTI_Init+0x8c>
   	csrw mstatus, t0
    c57a:	30029073          	csrw	mstatus,t0

 	la t0, _vector_base
    c57e:	ffff4297          	auipc	t0,0xffff4
    c582:	a8628293          	addi	t0,t0,-1402 # 4 <_einit>
    ori t0, t0, 3           
    c586:	0032e293          	ori	t0,t0,3
	csrw mtvec, t0
    c58a:	30529073          	csrw	mtvec,t0

    jal  SystemInit
    c58e:	d5ff30ef          	jal	ra,2ec <SystemInit>
	la t0, main
    c592:	00000297          	auipc	t0,0x0
    c596:	ce428293          	addi	t0,t0,-796 # c276 <main>
	csrw mepc, t0
    c59a:	34129073          	csrw	mepc,t0
	mret
    c59e:	30200073          	mret

0000c5a2 <__udivdi3>:
    c5a2:	87b6                	mv	a5,a3
    c5a4:	88b2                	mv	a7,a2
    c5a6:	832a                	mv	t1,a0
    c5a8:	882e                	mv	a6,a1
    c5aa:	14069d63          	bnez	a3,c704 <__udivdi3+0x162>
    c5ae:	0ac5f963          	bgeu	a1,a2,c660 <__udivdi3+0xbe>
    c5b2:	6741                	lui	a4,0x10
    c5b4:	1ae66e63          	bltu	a2,a4,c770 <__udivdi3+0x1ce>
    c5b8:	010007b7          	lui	a5,0x1000
    c5bc:	34f66363          	bltu	a2,a5,c902 <__udivdi3+0x360>
    c5c0:	01865693          	srli	a3,a2,0x18
    c5c4:	47e1                	li	a5,24
    c5c6:	00003717          	auipc	a4,0x3
    c5ca:	b0670713          	addi	a4,a4,-1274 # f0cc <__clz_tab>
    c5ce:	9736                	add	a4,a4,a3
    c5d0:	00074703          	lbu	a4,0(a4)
    c5d4:	97ba                	add	a5,a5,a4
    c5d6:	02000713          	li	a4,32
    c5da:	8f1d                	sub	a4,a4,a5
    c5dc:	cb19                	beqz	a4,c5f2 <__udivdi3+0x50>
    c5de:	00e59833          	sll	a6,a1,a4
    c5e2:	00f557b3          	srl	a5,a0,a5
    c5e6:	00e618b3          	sll	a7,a2,a4
    c5ea:	0107e833          	or	a6,a5,a6
    c5ee:	00e51333          	sll	t1,a0,a4
    c5f2:	0108d613          	srli	a2,a7,0x10
    c5f6:	02c85533          	divu	a0,a6,a2
    c5fa:	01089693          	slli	a3,a7,0x10
    c5fe:	82c1                	srli	a3,a3,0x10
    c600:	01035793          	srli	a5,t1,0x10
    c604:	02c87733          	remu	a4,a6,a2
    c608:	02a685b3          	mul	a1,a3,a0
    c60c:	0742                	slli	a4,a4,0x10
    c60e:	00f76833          	or	a6,a4,a5
    c612:	00b87a63          	bgeu	a6,a1,c626 <__udivdi3+0x84>
    c616:	9846                	add	a6,a6,a7
    c618:	fff50793          	addi	a5,a0,-1
    c61c:	01186463          	bltu	a6,a7,c624 <__udivdi3+0x82>
    c620:	30b86763          	bltu	a6,a1,c92e <__udivdi3+0x38c>
    c624:	853e                	mv	a0,a5
    c626:	40b80833          	sub	a6,a6,a1
    c62a:	02c85733          	divu	a4,a6,a2
    c62e:	0342                	slli	t1,t1,0x10
    c630:	01035313          	srli	t1,t1,0x10
    c634:	02c87833          	remu	a6,a6,a2
    c638:	02e686b3          	mul	a3,a3,a4
    c63c:	0842                	slli	a6,a6,0x10
    c63e:	00686833          	or	a6,a6,t1
    c642:	00d87b63          	bgeu	a6,a3,c658 <__udivdi3+0xb6>
    c646:	9846                	add	a6,a6,a7
    c648:	fff70793          	addi	a5,a4,-1
    c64c:	01186563          	bltu	a6,a7,c656 <__udivdi3+0xb4>
    c650:	1779                	addi	a4,a4,-2
    c652:	00d86363          	bltu	a6,a3,c658 <__udivdi3+0xb6>
    c656:	873e                	mv	a4,a5
    c658:	0542                	slli	a0,a0,0x10
    c65a:	8d59                	or	a0,a0,a4
    c65c:	4581                	li	a1,0
    c65e:	8082                	ret
    c660:	e601                	bnez	a2,c668 <__udivdi3+0xc6>
    c662:	4705                	li	a4,1
    c664:	02c758b3          	divu	a7,a4,a2
    c668:	6741                	lui	a4,0x10
    c66a:	0ee8ea63          	bltu	a7,a4,c75e <__udivdi3+0x1bc>
    c66e:	010007b7          	lui	a5,0x1000
    c672:	28f8ec63          	bltu	a7,a5,c90a <__udivdi3+0x368>
    c676:	0188d693          	srli	a3,a7,0x18
    c67a:	47e1                	li	a5,24
    c67c:	00003717          	auipc	a4,0x3
    c680:	a5070713          	addi	a4,a4,-1456 # f0cc <__clz_tab>
    c684:	9736                	add	a4,a4,a3
    c686:	00074683          	lbu	a3,0(a4)
    c68a:	96be                	add	a3,a3,a5
    c68c:	02000793          	li	a5,32
    c690:	8f95                	sub	a5,a5,a3
    c692:	ebe5                	bnez	a5,c782 <__udivdi3+0x1e0>
    c694:	01089e93          	slli	t4,a7,0x10
    c698:	41158733          	sub	a4,a1,a7
    c69c:	0108df13          	srli	t5,a7,0x10
    c6a0:	010ede93          	srli	t4,t4,0x10
    c6a4:	4585                	li	a1,1
    c6a6:	01035793          	srli	a5,t1,0x10
    c6aa:	03e75533          	divu	a0,a4,t5
    c6ae:	03e77733          	remu	a4,a4,t5
    c6b2:	03d506b3          	mul	a3,a0,t4
    c6b6:	0742                	slli	a4,a4,0x10
    c6b8:	8fd9                	or	a5,a5,a4
    c6ba:	00d7fa63          	bgeu	a5,a3,c6ce <__udivdi3+0x12c>
    c6be:	97c6                	add	a5,a5,a7
    c6c0:	fff50713          	addi	a4,a0,-1
    c6c4:	0117e463          	bltu	a5,a7,c6cc <__udivdi3+0x12a>
    c6c8:	26d7e663          	bltu	a5,a3,c934 <__udivdi3+0x392>
    c6cc:	853a                	mv	a0,a4
    c6ce:	8f95                	sub	a5,a5,a3
    c6d0:	03e7d733          	divu	a4,a5,t5
    c6d4:	0342                	slli	t1,t1,0x10
    c6d6:	01035313          	srli	t1,t1,0x10
    c6da:	03e7f7b3          	remu	a5,a5,t5
    c6de:	03d70eb3          	mul	t4,a4,t4
    c6e2:	07c2                	slli	a5,a5,0x10
    c6e4:	0067e7b3          	or	a5,a5,t1
    c6e8:	01d7fb63          	bgeu	a5,t4,c6fe <__udivdi3+0x15c>
    c6ec:	97c6                	add	a5,a5,a7
    c6ee:	fff70693          	addi	a3,a4,-1
    c6f2:	0117e563          	bltu	a5,a7,c6fc <__udivdi3+0x15a>
    c6f6:	1779                	addi	a4,a4,-2
    c6f8:	01d7e363          	bltu	a5,t4,c6fe <__udivdi3+0x15c>
    c6fc:	8736                	mv	a4,a3
    c6fe:	0542                	slli	a0,a0,0x10
    c700:	8d59                	or	a0,a0,a4
    c702:	8082                	ret
    c704:	04d5e263          	bltu	a1,a3,c748 <__udivdi3+0x1a6>
    c708:	67c1                	lui	a5,0x10
    c70a:	04f6e263          	bltu	a3,a5,c74e <__udivdi3+0x1ac>
    c70e:	010007b7          	lui	a5,0x1000
    c712:	1ef6e463          	bltu	a3,a5,c8fa <__udivdi3+0x358>
    c716:	0186d713          	srli	a4,a3,0x18
    c71a:	4861                	li	a6,24
    c71c:	00003797          	auipc	a5,0x3
    c720:	9b078793          	addi	a5,a5,-1616 # f0cc <__clz_tab>
    c724:	97ba                	add	a5,a5,a4
    c726:	0007c703          	lbu	a4,0(a5)
    c72a:	02000e13          	li	t3,32
    c72e:	9742                	add	a4,a4,a6
    c730:	40ee0e33          	sub	t3,t3,a4
    c734:	0c0e1a63          	bnez	t3,c808 <__udivdi3+0x266>
    c738:	1cb6ed63          	bltu	a3,a1,c912 <__udivdi3+0x370>
    c73c:	00c53533          	sltu	a0,a0,a2
    c740:	00154513          	xori	a0,a0,1
    c744:	4581                	li	a1,0
    c746:	8082                	ret
    c748:	4581                	li	a1,0
    c74a:	4501                	li	a0,0
    c74c:	8082                	ret
    c74e:	0ff00793          	li	a5,255
    c752:	1cd7f363          	bgeu	a5,a3,c918 <__udivdi3+0x376>
    c756:	0086d713          	srli	a4,a3,0x8
    c75a:	4821                	li	a6,8
    c75c:	b7c1                	j	c71c <__udivdi3+0x17a>
    c75e:	0ff00713          	li	a4,255
    c762:	86c6                	mv	a3,a7
    c764:	f1177ce3          	bgeu	a4,a7,c67c <__udivdi3+0xda>
    c768:	0088d693          	srli	a3,a7,0x8
    c76c:	47a1                	li	a5,8
    c76e:	b739                	j	c67c <__udivdi3+0xda>
    c770:	0ff00713          	li	a4,255
    c774:	86b2                	mv	a3,a2
    c776:	e4c778e3          	bgeu	a4,a2,c5c6 <__udivdi3+0x24>
    c77a:	00865693          	srli	a3,a2,0x8
    c77e:	47a1                	li	a5,8
    c780:	b599                	j	c5c6 <__udivdi3+0x24>
    c782:	00f898b3          	sll	a7,a7,a5
    c786:	00d5d633          	srl	a2,a1,a3
    c78a:	0108df13          	srli	t5,a7,0x10
    c78e:	03e65e33          	divu	t3,a2,t5
    c792:	00f59733          	sll	a4,a1,a5
    c796:	00d556b3          	srl	a3,a0,a3
    c79a:	8f55                	or	a4,a4,a3
    c79c:	01089e93          	slli	t4,a7,0x10
    c7a0:	010ede93          	srli	t4,t4,0x10
    c7a4:	00f51333          	sll	t1,a0,a5
    c7a8:	01075593          	srli	a1,a4,0x10
    c7ac:	03e676b3          	remu	a3,a2,t5
    c7b0:	03ce87b3          	mul	a5,t4,t3
    c7b4:	06c2                	slli	a3,a3,0x10
    c7b6:	8ecd                	or	a3,a3,a1
    c7b8:	00f6fb63          	bgeu	a3,a5,c7ce <__udivdi3+0x22c>
    c7bc:	96c6                	add	a3,a3,a7
    c7be:	fffe0613          	addi	a2,t3,-1
    c7c2:	1716e463          	bltu	a3,a7,c92a <__udivdi3+0x388>
    c7c6:	16f6f263          	bgeu	a3,a5,c92a <__udivdi3+0x388>
    c7ca:	1e79                	addi	t3,t3,-2
    c7cc:	96c6                	add	a3,a3,a7
    c7ce:	8e9d                	sub	a3,a3,a5
    c7d0:	03e6d633          	divu	a2,a3,t5
    c7d4:	01071793          	slli	a5,a4,0x10
    c7d8:	83c1                	srli	a5,a5,0x10
    c7da:	03e6f6b3          	remu	a3,a3,t5
    c7de:	02ce8533          	mul	a0,t4,a2
    c7e2:	01069713          	slli	a4,a3,0x10
    c7e6:	8f5d                	or	a4,a4,a5
    c7e8:	00a77b63          	bgeu	a4,a0,c7fe <__udivdi3+0x25c>
    c7ec:	9746                	add	a4,a4,a7
    c7ee:	fff60793          	addi	a5,a2,-1
    c7f2:	13176863          	bltu	a4,a7,c922 <__udivdi3+0x380>
    c7f6:	12a77663          	bgeu	a4,a0,c922 <__udivdi3+0x380>
    c7fa:	1679                	addi	a2,a2,-2
    c7fc:	9746                	add	a4,a4,a7
    c7fe:	010e1593          	slli	a1,t3,0x10
    c802:	8f09                	sub	a4,a4,a0
    c804:	8dd1                	or	a1,a1,a2
    c806:	b545                	j	c6a6 <__udivdi3+0x104>
    c808:	00e657b3          	srl	a5,a2,a4
    c80c:	01c696b3          	sll	a3,a3,t3
    c810:	8edd                	or	a3,a3,a5
    c812:	00e5d333          	srl	t1,a1,a4
    c816:	0106df13          	srli	t5,a3,0x10
    c81a:	03e357b3          	divu	a5,t1,t5
    c81e:	01069e93          	slli	t4,a3,0x10
    c822:	010ede93          	srli	t4,t4,0x10
    c826:	01c59833          	sll	a6,a1,t3
    c82a:	00e55733          	srl	a4,a0,a4
    c82e:	01076833          	or	a6,a4,a6
    c832:	01085893          	srli	a7,a6,0x10
    c836:	01c61633          	sll	a2,a2,t3
    c83a:	03e37333          	remu	t1,t1,t5
    c83e:	02fe85b3          	mul	a1,t4,a5
    c842:	0342                	slli	t1,t1,0x10
    c844:	011368b3          	or	a7,t1,a7
    c848:	00b8fb63          	bgeu	a7,a1,c85e <__udivdi3+0x2bc>
    c84c:	98b6                	add	a7,a7,a3
    c84e:	fff78713          	addi	a4,a5,-1
    c852:	0cd8ea63          	bltu	a7,a3,c926 <__udivdi3+0x384>
    c856:	0cb8f863          	bgeu	a7,a1,c926 <__udivdi3+0x384>
    c85a:	17f9                	addi	a5,a5,-2
    c85c:	98b6                	add	a7,a7,a3
    c85e:	40b888b3          	sub	a7,a7,a1
    c862:	03e8d733          	divu	a4,a7,t5
    c866:	0842                	slli	a6,a6,0x10
    c868:	01085813          	srli	a6,a6,0x10
    c86c:	03e8f8b3          	remu	a7,a7,t5
    c870:	02ee8333          	mul	t1,t4,a4
    c874:	08c2                	slli	a7,a7,0x10
    c876:	0108e5b3          	or	a1,a7,a6
    c87a:	0065fb63          	bgeu	a1,t1,c890 <__udivdi3+0x2ee>
    c87e:	95b6                	add	a1,a1,a3
    c880:	fff70813          	addi	a6,a4,-1
    c884:	08d5ed63          	bltu	a1,a3,c91e <__udivdi3+0x37c>
    c888:	0865fb63          	bgeu	a1,t1,c91e <__udivdi3+0x37c>
    c88c:	1779                	addi	a4,a4,-2
    c88e:	95b6                	add	a1,a1,a3
    c890:	07c2                	slli	a5,a5,0x10
    c892:	6f41                	lui	t5,0x10
    c894:	8fd9                	or	a5,a5,a4
    c896:	ffff0713          	addi	a4,t5,-1 # ffff <_data_lma+0xdf3>
    c89a:	00e7f6b3          	and	a3,a5,a4
    c89e:	0107d893          	srli	a7,a5,0x10
    c8a2:	8f71                	and	a4,a4,a2
    c8a4:	8241                	srli	a2,a2,0x10
    c8a6:	02e68eb3          	mul	t4,a3,a4
    c8aa:	406585b3          	sub	a1,a1,t1
    c8ae:	02c686b3          	mul	a3,a3,a2
    c8b2:	010ed813          	srli	a6,t4,0x10
    c8b6:	02e88733          	mul	a4,a7,a4
    c8ba:	96ba                	add	a3,a3,a4
    c8bc:	96c2                	add	a3,a3,a6
    c8be:	02c88633          	mul	a2,a7,a2
    c8c2:	00e6f363          	bgeu	a3,a4,c8c8 <__udivdi3+0x326>
    c8c6:	967a                	add	a2,a2,t5
    c8c8:	0106d893          	srli	a7,a3,0x10
    c8cc:	9646                	add	a2,a2,a7
    c8ce:	02c5e263          	bltu	a1,a2,c8f2 <__udivdi3+0x350>
    c8d2:	00c58563          	beq	a1,a2,c8dc <__udivdi3+0x33a>
    c8d6:	853e                	mv	a0,a5
    c8d8:	4581                	li	a1,0
    c8da:	8082                	ret
    c8dc:	6741                	lui	a4,0x10
    c8de:	177d                	addi	a4,a4,-1
    c8e0:	8ef9                	and	a3,a3,a4
    c8e2:	06c2                	slli	a3,a3,0x10
    c8e4:	00eefeb3          	and	t4,t4,a4
    c8e8:	01c51533          	sll	a0,a0,t3
    c8ec:	96f6                	add	a3,a3,t4
    c8ee:	fed574e3          	bgeu	a0,a3,c8d6 <__udivdi3+0x334>
    c8f2:	fff78513          	addi	a0,a5,-1
    c8f6:	4581                	li	a1,0
    c8f8:	8082                	ret
    c8fa:	0106d713          	srli	a4,a3,0x10
    c8fe:	4841                	li	a6,16
    c900:	bd31                	j	c71c <__udivdi3+0x17a>
    c902:	01065693          	srli	a3,a2,0x10
    c906:	47c1                	li	a5,16
    c908:	b97d                	j	c5c6 <__udivdi3+0x24>
    c90a:	0108d693          	srli	a3,a7,0x10
    c90e:	47c1                	li	a5,16
    c910:	b3b5                	j	c67c <__udivdi3+0xda>
    c912:	4581                	li	a1,0
    c914:	4505                	li	a0,1
    c916:	8082                	ret
    c918:	8736                	mv	a4,a3
    c91a:	4801                	li	a6,0
    c91c:	b501                	j	c71c <__udivdi3+0x17a>
    c91e:	8742                	mv	a4,a6
    c920:	bf85                	j	c890 <__udivdi3+0x2ee>
    c922:	863e                	mv	a2,a5
    c924:	bde9                	j	c7fe <__udivdi3+0x25c>
    c926:	87ba                	mv	a5,a4
    c928:	bf1d                	j	c85e <__udivdi3+0x2bc>
    c92a:	8e32                	mv	t3,a2
    c92c:	b54d                	j	c7ce <__udivdi3+0x22c>
    c92e:	1579                	addi	a0,a0,-2
    c930:	9846                	add	a6,a6,a7
    c932:	b9d5                	j	c626 <__udivdi3+0x84>
    c934:	1579                	addi	a0,a0,-2
    c936:	97c6                	add	a5,a5,a7
    c938:	bb59                	j	c6ce <__udivdi3+0x12c>

0000c93a <__umoddi3>:
    c93a:	87b6                	mv	a5,a3
    c93c:	8832                	mv	a6,a2
    c93e:	832a                	mv	t1,a0
    c940:	872e                	mv	a4,a1
    c942:	8e2e                	mv	t3,a1
    c944:	14069363          	bnez	a3,ca8a <__umoddi3+0x150>
    c948:	0ac5f163          	bgeu	a1,a2,c9ea <__umoddi3+0xb0>
    c94c:	6741                	lui	a4,0x10
    c94e:	1ae67863          	bgeu	a2,a4,cafe <__umoddi3+0x1c4>
    c952:	0ff00713          	li	a4,255
    c956:	86b2                	mv	a3,a2
    c958:	00c77563          	bgeu	a4,a2,c962 <__umoddi3+0x28>
    c95c:	00865693          	srli	a3,a2,0x8
    c960:	47a1                	li	a5,8
    c962:	00002717          	auipc	a4,0x2
    c966:	76a70713          	addi	a4,a4,1898 # f0cc <__clz_tab>
    c96a:	9736                	add	a4,a4,a3
    c96c:	00074703          	lbu	a4,0(a4)
    c970:	02000893          	li	a7,32
    c974:	97ba                	add	a5,a5,a4
    c976:	40f888b3          	sub	a7,a7,a5
    c97a:	00088c63          	beqz	a7,c992 <__umoddi3+0x58>
    c97e:	011595b3          	sll	a1,a1,a7
    c982:	00f557b3          	srl	a5,a0,a5
    c986:	01161833          	sll	a6,a2,a7
    c98a:	00b7ee33          	or	t3,a5,a1
    c98e:	01151333          	sll	t1,a0,a7
    c992:	01085613          	srli	a2,a6,0x10
    c996:	02ce57b3          	divu	a5,t3,a2
    c99a:	01081513          	slli	a0,a6,0x10
    c99e:	8141                	srli	a0,a0,0x10
    c9a0:	01035693          	srli	a3,t1,0x10
    c9a4:	02ce7e33          	remu	t3,t3,a2
    c9a8:	02f507b3          	mul	a5,a0,a5
    c9ac:	0e42                	slli	t3,t3,0x10
    c9ae:	00de6733          	or	a4,t3,a3
    c9b2:	00f77863          	bgeu	a4,a5,c9c2 <__umoddi3+0x88>
    c9b6:	9742                	add	a4,a4,a6
    c9b8:	01076563          	bltu	a4,a6,c9c2 <__umoddi3+0x88>
    c9bc:	00f77363          	bgeu	a4,a5,c9c2 <__umoddi3+0x88>
    c9c0:	9742                	add	a4,a4,a6
    c9c2:	8f1d                	sub	a4,a4,a5
    c9c4:	02c756b3          	divu	a3,a4,a2
    c9c8:	01031793          	slli	a5,t1,0x10
    c9cc:	83c1                	srli	a5,a5,0x10
    c9ce:	02c77733          	remu	a4,a4,a2
    c9d2:	02d50533          	mul	a0,a0,a3
    c9d6:	0742                	slli	a4,a4,0x10
    c9d8:	8fd9                	or	a5,a5,a4
    c9da:	08a7ec63          	bltu	a5,a0,ca72 <__umoddi3+0x138>
    c9de:	40a78533          	sub	a0,a5,a0
    c9e2:	01155533          	srl	a0,a0,a7
    c9e6:	4581                	li	a1,0
    c9e8:	8082                	ret
    c9ea:	e601                	bnez	a2,c9f2 <__umoddi3+0xb8>
    c9ec:	4705                	li	a4,1
    c9ee:	02c75833          	divu	a6,a4,a2
    c9f2:	6741                	lui	a4,0x10
    c9f4:	0ee86c63          	bltu	a6,a4,caec <__umoddi3+0x1b2>
    c9f8:	010007b7          	lui	a5,0x1000
    c9fc:	2af86563          	bltu	a6,a5,cca6 <__umoddi3+0x36c>
    ca00:	01885693          	srli	a3,a6,0x18
    ca04:	47e1                	li	a5,24
    ca06:	00002717          	auipc	a4,0x2
    ca0a:	6c670713          	addi	a4,a4,1734 # f0cc <__clz_tab>
    ca0e:	9736                	add	a4,a4,a3
    ca10:	00074703          	lbu	a4,0(a4)
    ca14:	02000893          	li	a7,32
    ca18:	97ba                	add	a5,a5,a4
    ca1a:	40f888b3          	sub	a7,a7,a5
    ca1e:	1e089a63          	bnez	a7,cc12 <__umoddi3+0x2d8>
    ca22:	01081e13          	slli	t3,a6,0x10
    ca26:	410585b3          	sub	a1,a1,a6
    ca2a:	01085613          	srli	a2,a6,0x10
    ca2e:	010e5e13          	srli	t3,t3,0x10
    ca32:	01035713          	srli	a4,t1,0x10
    ca36:	02c5d6b3          	divu	a3,a1,a2
    ca3a:	02c5f5b3          	remu	a1,a1,a2
    ca3e:	03c686b3          	mul	a3,a3,t3
    ca42:	05c2                	slli	a1,a1,0x10
    ca44:	8f4d                	or	a4,a4,a1
    ca46:	00d77763          	bgeu	a4,a3,ca54 <__umoddi3+0x11a>
    ca4a:	9742                	add	a4,a4,a6
    ca4c:	01076463          	bltu	a4,a6,ca54 <__umoddi3+0x11a>
    ca50:	26d76a63          	bltu	a4,a3,ccc4 <__umoddi3+0x38a>
    ca54:	8f15                	sub	a4,a4,a3
    ca56:	02c75533          	divu	a0,a4,a2
    ca5a:	0342                	slli	t1,t1,0x10
    ca5c:	01035313          	srli	t1,t1,0x10
    ca60:	02c77733          	remu	a4,a4,a2
    ca64:	03c50533          	mul	a0,a0,t3
    ca68:	0742                	slli	a4,a4,0x10
    ca6a:	006767b3          	or	a5,a4,t1
    ca6e:	00a7f863          	bgeu	a5,a0,ca7e <__umoddi3+0x144>
    ca72:	97c2                	add	a5,a5,a6
    ca74:	0107e563          	bltu	a5,a6,ca7e <__umoddi3+0x144>
    ca78:	00a7f363          	bgeu	a5,a0,ca7e <__umoddi3+0x144>
    ca7c:	97c2                	add	a5,a5,a6
    ca7e:	40a78533          	sub	a0,a5,a0
    ca82:	01155533          	srl	a0,a0,a7
    ca86:	4581                	li	a1,0
    ca88:	8082                	ret
    ca8a:	882a                	mv	a6,a0
    ca8c:	f4d5eee3          	bltu	a1,a3,c9e8 <__umoddi3+0xae>
    ca90:	67c1                	lui	a5,0x10
    ca92:	04f6e563          	bltu	a3,a5,cadc <__umoddi3+0x1a2>
    ca96:	010007b7          	lui	a5,0x1000
    ca9a:	20f6e263          	bltu	a3,a5,cc9e <__umoddi3+0x364>
    ca9e:	0186d313          	srli	t1,a3,0x18
    caa2:	48e1                	li	a7,24
    caa4:	00002797          	auipc	a5,0x2
    caa8:	62878793          	addi	a5,a5,1576 # f0cc <__clz_tab>
    caac:	979a                	add	a5,a5,t1
    caae:	0007ce03          	lbu	t3,0(a5)
    cab2:	02000313          	li	t1,32
    cab6:	9e46                	add	t3,t3,a7
    cab8:	41c30333          	sub	t1,t1,t3
    cabc:	04031963          	bnez	t1,cb0e <__umoddi3+0x1d4>
    cac0:	00b6e463          	bltu	a3,a1,cac8 <__umoddi3+0x18e>
    cac4:	00c56963          	bltu	a0,a2,cad6 <__umoddi3+0x19c>
    cac8:	40c50833          	sub	a6,a0,a2
    cacc:	8d95                	sub	a1,a1,a3
    cace:	01053733          	sltu	a4,a0,a6
    cad2:	40e58733          	sub	a4,a1,a4
    cad6:	8542                	mv	a0,a6
    cad8:	85ba                	mv	a1,a4
    cada:	8082                	ret
    cadc:	0ff00793          	li	a5,255
    cae0:	1cd7fb63          	bgeu	a5,a3,ccb6 <__umoddi3+0x37c>
    cae4:	0086d313          	srli	t1,a3,0x8
    cae8:	48a1                	li	a7,8
    caea:	bf6d                	j	caa4 <__umoddi3+0x16a>
    caec:	0ff00713          	li	a4,255
    caf0:	86c2                	mv	a3,a6
    caf2:	f1077ae3          	bgeu	a4,a6,ca06 <__umoddi3+0xcc>
    caf6:	00885693          	srli	a3,a6,0x8
    cafa:	47a1                	li	a5,8
    cafc:	b729                	j	ca06 <__umoddi3+0xcc>
    cafe:	010007b7          	lui	a5,0x1000
    cb02:	1af66663          	bltu	a2,a5,ccae <__umoddi3+0x374>
    cb06:	01865693          	srli	a3,a2,0x18
    cb0a:	47e1                	li	a5,24
    cb0c:	bd99                	j	c962 <__umoddi3+0x28>
    cb0e:	01c657b3          	srl	a5,a2,t3
    cb12:	006696b3          	sll	a3,a3,t1
    cb16:	8edd                	or	a3,a3,a5
    cb18:	01c5d8b3          	srl	a7,a1,t3
    cb1c:	0106d713          	srli	a4,a3,0x10
    cb20:	02e8deb3          	divu	t4,a7,a4
    cb24:	01069f13          	slli	t5,a3,0x10
    cb28:	01c557b3          	srl	a5,a0,t3
    cb2c:	010f5f13          	srli	t5,t5,0x10
    cb30:	006595b3          	sll	a1,a1,t1
    cb34:	8ddd                	or	a1,a1,a5
    cb36:	0105d813          	srli	a6,a1,0x10
    cb3a:	00661633          	sll	a2,a2,t1
    cb3e:	00651533          	sll	a0,a0,t1
    cb42:	02e8f8b3          	remu	a7,a7,a4
    cb46:	03df07b3          	mul	a5,t5,t4
    cb4a:	08c2                	slli	a7,a7,0x10
    cb4c:	0108e833          	or	a6,a7,a6
    cb50:	00f87b63          	bgeu	a6,a5,cb66 <__umoddi3+0x22c>
    cb54:	9836                	add	a6,a6,a3
    cb56:	fffe8893          	addi	a7,t4,-1
    cb5a:	16d86363          	bltu	a6,a3,ccc0 <__umoddi3+0x386>
    cb5e:	16f87163          	bgeu	a6,a5,ccc0 <__umoddi3+0x386>
    cb62:	1ef9                	addi	t4,t4,-2
    cb64:	9836                	add	a6,a6,a3
    cb66:	40f80833          	sub	a6,a6,a5
    cb6a:	02e857b3          	divu	a5,a6,a4
    cb6e:	05c2                	slli	a1,a1,0x10
    cb70:	81c1                	srli	a1,a1,0x10
    cb72:	02e87833          	remu	a6,a6,a4
    cb76:	02ff0f33          	mul	t5,t5,a5
    cb7a:	01081713          	slli	a4,a6,0x10
    cb7e:	8f4d                	or	a4,a4,a1
    cb80:	01e77b63          	bgeu	a4,t5,cb96 <__umoddi3+0x25c>
    cb84:	9736                	add	a4,a4,a3
    cb86:	fff78593          	addi	a1,a5,-1 # ffffff <_data_lma+0xff0df3>
    cb8a:	12d76963          	bltu	a4,a3,ccbc <__umoddi3+0x382>
    cb8e:	13e77763          	bgeu	a4,t5,ccbc <__umoddi3+0x382>
    cb92:	17f9                	addi	a5,a5,-2
    cb94:	9736                	add	a4,a4,a3
    cb96:	0ec2                	slli	t4,t4,0x10
    cb98:	62c1                	lui	t0,0x10
    cb9a:	00feeeb3          	or	t4,t4,a5
    cb9e:	fff28813          	addi	a6,t0,-1 # ffff <_data_lma+0xdf3>
    cba2:	010ef8b3          	and	a7,t4,a6
    cba6:	01065593          	srli	a1,a2,0x10
    cbaa:	010ede93          	srli	t4,t4,0x10
    cbae:	01067833          	and	a6,a2,a6
    cbb2:	03088fb3          	mul	t6,a7,a6
    cbb6:	41e70733          	sub	a4,a4,t5
    cbba:	030e8833          	mul	a6,t4,a6
    cbbe:	010fd793          	srli	a5,t6,0x10
    cbc2:	02b888b3          	mul	a7,a7,a1
    cbc6:	98c2                	add	a7,a7,a6
    cbc8:	97c6                	add	a5,a5,a7
    cbca:	02be8eb3          	mul	t4,t4,a1
    cbce:	0107f363          	bgeu	a5,a6,cbd4 <__umoddi3+0x29a>
    cbd2:	9e96                	add	t4,t4,t0
    cbd4:	6841                	lui	a6,0x10
    cbd6:	187d                	addi	a6,a6,-1
    cbd8:	0107d593          	srli	a1,a5,0x10
    cbdc:	0107f7b3          	and	a5,a5,a6
    cbe0:	07c2                	slli	a5,a5,0x10
    cbe2:	010fffb3          	and	t6,t6,a6
    cbe6:	95f6                	add	a1,a1,t4
    cbe8:	97fe                	add	a5,a5,t6
    cbea:	0ab76263          	bltu	a4,a1,cc8e <__umoddi3+0x354>
    cbee:	08b70e63          	beq	a4,a1,cc8a <__umoddi3+0x350>
    cbf2:	40f507b3          	sub	a5,a0,a5
    cbf6:	00f53533          	sltu	a0,a0,a5
    cbfa:	40b705b3          	sub	a1,a4,a1
    cbfe:	8d89                	sub	a1,a1,a0
    cc00:	01c59e33          	sll	t3,a1,t3
    cc04:	0067d533          	srl	a0,a5,t1
    cc08:	00ae6533          	or	a0,t3,a0
    cc0c:	0065d5b3          	srl	a1,a1,t1
    cc10:	8082                	ret
    cc12:	01181833          	sll	a6,a6,a7
    cc16:	00f5d733          	srl	a4,a1,a5
    cc1a:	01085613          	srli	a2,a6,0x10
    cc1e:	02c756b3          	divu	a3,a4,a2
    cc22:	01081e13          	slli	t3,a6,0x10
    cc26:	00f557b3          	srl	a5,a0,a5
    cc2a:	010e5e13          	srli	t3,t3,0x10
    cc2e:	011595b3          	sll	a1,a1,a7
    cc32:	8ddd                	or	a1,a1,a5
    cc34:	0105de93          	srli	t4,a1,0x10
    cc38:	01151333          	sll	t1,a0,a7
    cc3c:	02c77733          	remu	a4,a4,a2
    cc40:	02de07b3          	mul	a5,t3,a3
    cc44:	01071693          	slli	a3,a4,0x10
    cc48:	01d6e6b3          	or	a3,a3,t4
    cc4c:	00f6f863          	bgeu	a3,a5,cc5c <__umoddi3+0x322>
    cc50:	96c2                	add	a3,a3,a6
    cc52:	0106e563          	bltu	a3,a6,cc5c <__umoddi3+0x322>
    cc56:	00f6f363          	bgeu	a3,a5,cc5c <__umoddi3+0x322>
    cc5a:	96c2                	add	a3,a3,a6
    cc5c:	8e9d                	sub	a3,a3,a5
    cc5e:	02c6d733          	divu	a4,a3,a2
    cc62:	01059793          	slli	a5,a1,0x10
    cc66:	83c1                	srli	a5,a5,0x10
    cc68:	02c6f6b3          	remu	a3,a3,a2
    cc6c:	02ee0733          	mul	a4,t3,a4
    cc70:	01069593          	slli	a1,a3,0x10
    cc74:	8ddd                	or	a1,a1,a5
    cc76:	00e5f863          	bgeu	a1,a4,cc86 <__umoddi3+0x34c>
    cc7a:	95c2                	add	a1,a1,a6
    cc7c:	0105e563          	bltu	a1,a6,cc86 <__umoddi3+0x34c>
    cc80:	00e5f363          	bgeu	a1,a4,cc86 <__umoddi3+0x34c>
    cc84:	95c2                	add	a1,a1,a6
    cc86:	8d99                	sub	a1,a1,a4
    cc88:	b36d                	j	ca32 <__umoddi3+0xf8>
    cc8a:	f6f574e3          	bgeu	a0,a5,cbf2 <__umoddi3+0x2b8>
    cc8e:	40c78633          	sub	a2,a5,a2
    cc92:	00c7b7b3          	sltu	a5,a5,a2
    cc96:	97b6                	add	a5,a5,a3
    cc98:	8d9d                	sub	a1,a1,a5
    cc9a:	87b2                	mv	a5,a2
    cc9c:	bf99                	j	cbf2 <__umoddi3+0x2b8>
    cc9e:	0106d313          	srli	t1,a3,0x10
    cca2:	48c1                	li	a7,16
    cca4:	b501                	j	caa4 <__umoddi3+0x16a>
    cca6:	01085693          	srli	a3,a6,0x10
    ccaa:	47c1                	li	a5,16
    ccac:	bba9                	j	ca06 <__umoddi3+0xcc>
    ccae:	01065693          	srli	a3,a2,0x10
    ccb2:	47c1                	li	a5,16
    ccb4:	b17d                	j	c962 <__umoddi3+0x28>
    ccb6:	8336                	mv	t1,a3
    ccb8:	4881                	li	a7,0
    ccba:	b3ed                	j	caa4 <__umoddi3+0x16a>
    ccbc:	87ae                	mv	a5,a1
    ccbe:	bde1                	j	cb96 <__umoddi3+0x25c>
    ccc0:	8ec6                	mv	t4,a7
    ccc2:	b555                	j	cb66 <__umoddi3+0x22c>
    ccc4:	9742                	add	a4,a4,a6
    ccc6:	b379                	j	ca54 <__umoddi3+0x11a>

0000ccc8 <__adddf3>:
    ccc8:	00100837          	lui	a6,0x100
    cccc:	1101                	addi	sp,sp,-32
    ccce:	187d                	addi	a6,a6,-1
    ccd0:	00b87733          	and	a4,a6,a1
    ccd4:	ca26                	sw	s1,20(sp)
    ccd6:	00d87833          	and	a6,a6,a3
    ccda:	0145d493          	srli	s1,a1,0x14
    ccde:	0146d313          	srli	t1,a3,0x14
    cce2:	00371e13          	slli	t3,a4,0x3
    cce6:	c64e                	sw	s3,12(sp)
    cce8:	01d55713          	srli	a4,a0,0x1d
    ccec:	080e                	slli	a6,a6,0x3
    ccee:	01d65793          	srli	a5,a2,0x1d
    ccf2:	7ff4f493          	andi	s1,s1,2047
    ccf6:	7ff37313          	andi	t1,t1,2047
    ccfa:	ce06                	sw	ra,28(sp)
    ccfc:	cc22                	sw	s0,24(sp)
    ccfe:	c84a                	sw	s2,16(sp)
    cd00:	01f5d993          	srli	s3,a1,0x1f
    cd04:	01f6de93          	srli	t4,a3,0x1f
    cd08:	01c76733          	or	a4,a4,t3
    cd0c:	00351f13          	slli	t5,a0,0x3
    cd10:	0107e833          	or	a6,a5,a6
    cd14:	00361f93          	slli	t6,a2,0x3
    cd18:	40648e33          	sub	t3,s1,t1
    cd1c:	19d98063          	beq	s3,t4,ce9c <__adddf3+0x1d4>
    cd20:	13c05663          	blez	t3,ce4c <__adddf3+0x184>
    cd24:	1c030463          	beqz	t1,ceec <__adddf3+0x224>
    cd28:	008006b7          	lui	a3,0x800
    cd2c:	7ff00793          	li	a5,2047
    cd30:	00d86833          	or	a6,a6,a3
    cd34:	36f48f63          	beq	s1,a5,d0b2 <__adddf3+0x3ea>
    cd38:	03800793          	li	a5,56
    cd3c:	35c7c063          	blt	a5,t3,d07c <__adddf3+0x3b4>
    cd40:	47fd                	li	a5,31
    cd42:	47c7cd63          	blt	a5,t3,d1bc <__adddf3+0x4f4>
    cd46:	02000513          	li	a0,32
    cd4a:	41c50533          	sub	a0,a0,t3
    cd4e:	01cfd7b3          	srl	a5,t6,t3
    cd52:	00a816b3          	sll	a3,a6,a0
    cd56:	00af9933          	sll	s2,t6,a0
    cd5a:	8edd                	or	a3,a3,a5
    cd5c:	01203933          	snez	s2,s2
    cd60:	01c857b3          	srl	a5,a6,t3
    cd64:	0126e933          	or	s2,a3,s2
    cd68:	8f1d                	sub	a4,a4,a5
    cd6a:	412f0933          	sub	s2,t5,s2
    cd6e:	012f37b3          	sltu	a5,t5,s2
    cd72:	40f70633          	sub	a2,a4,a5
    cd76:	00861793          	slli	a5,a2,0x8
    cd7a:	2407d463          	bgez	a5,cfc2 <__adddf3+0x2fa>
    cd7e:	00800737          	lui	a4,0x800
    cd82:	177d                	addi	a4,a4,-1
    cd84:	00e67433          	and	s0,a2,a4
    cd88:	2c040c63          	beqz	s0,d060 <__adddf3+0x398>
    cd8c:	8522                	mv	a0,s0
    cd8e:	2f3010ef          	jal	ra,e880 <__clzsi2>
    cd92:	ff850713          	addi	a4,a0,-8
    cd96:	02000793          	li	a5,32
    cd9a:	8f99                	sub	a5,a5,a4
    cd9c:	00f957b3          	srl	a5,s2,a5
    cda0:	00e41633          	sll	a2,s0,a4
    cda4:	8fd1                	or	a5,a5,a2
    cda6:	00e91933          	sll	s2,s2,a4
    cdaa:	2a974163          	blt	a4,s1,d04c <__adddf3+0x384>
    cdae:	40970533          	sub	a0,a4,s1
    cdb2:	00150613          	addi	a2,a0,1
    cdb6:	477d                	li	a4,31
    cdb8:	38c74d63          	blt	a4,a2,d152 <__adddf3+0x48a>
    cdbc:	02000713          	li	a4,32
    cdc0:	8f11                	sub	a4,a4,a2
    cdc2:	00c956b3          	srl	a3,s2,a2
    cdc6:	00e91933          	sll	s2,s2,a4
    cdca:	00e79733          	sll	a4,a5,a4
    cdce:	8f55                	or	a4,a4,a3
    cdd0:	01203933          	snez	s2,s2
    cdd4:	01276933          	or	s2,a4,s2
    cdd8:	00c7d633          	srl	a2,a5,a2
    cddc:	4481                	li	s1,0
    cdde:	00797793          	andi	a5,s2,7
    cde2:	cf81                	beqz	a5,cdfa <__adddf3+0x132>
    cde4:	00f97713          	andi	a4,s2,15
    cde8:	4791                	li	a5,4
    cdea:	00f70863          	beq	a4,a5,cdfa <__adddf3+0x132>
    cdee:	00490713          	addi	a4,s2,4
    cdf2:	01273933          	sltu	s2,a4,s2
    cdf6:	964a                	add	a2,a2,s2
    cdf8:	893a                	mv	s2,a4
    cdfa:	00861793          	slli	a5,a2,0x8
    cdfe:	1c07d663          	bgez	a5,cfca <__adddf3+0x302>
    ce02:	00148513          	addi	a0,s1,1
    ce06:	7ff00793          	li	a5,2047
    ce0a:	85ce                	mv	a1,s3
    ce0c:	20f50463          	beq	a0,a5,d014 <__adddf3+0x34c>
    ce10:	ff8007b7          	lui	a5,0xff800
    ce14:	17fd                	addi	a5,a5,-1
    ce16:	8ff1                	and	a5,a5,a2
    ce18:	01d79893          	slli	a7,a5,0x1d
    ce1c:	00395913          	srli	s2,s2,0x3
    ce20:	07a6                	slli	a5,a5,0x9
    ce22:	0128e8b3          	or	a7,a7,s2
    ce26:	83b1                	srli	a5,a5,0xc
    ce28:	7ff57513          	andi	a0,a0,2047
    ce2c:	00c79693          	slli	a3,a5,0xc
    ce30:	0552                	slli	a0,a0,0x14
    ce32:	40f2                	lw	ra,28(sp)
    ce34:	4462                	lw	s0,24(sp)
    ce36:	82b1                	srli	a3,a3,0xc
    ce38:	05fe                	slli	a1,a1,0x1f
    ce3a:	8ec9                	or	a3,a3,a0
    ce3c:	8ecd                	or	a3,a3,a1
    ce3e:	44d2                	lw	s1,20(sp)
    ce40:	4942                	lw	s2,16(sp)
    ce42:	49b2                	lw	s3,12(sp)
    ce44:	8546                	mv	a0,a7
    ce46:	85b6                	mv	a1,a3
    ce48:	6105                	addi	sp,sp,32
    ce4a:	8082                	ret
    ce4c:	0a0e1e63          	bnez	t3,cf08 <__adddf3+0x240>
    ce50:	00148313          	addi	t1,s1,1
    ce54:	7fe37313          	andi	t1,t1,2046
    ce58:	22031763          	bnez	t1,d086 <__adddf3+0x3be>
    ce5c:	01e767b3          	or	a5,a4,t5
    ce60:	01f868b3          	or	a7,a6,t6
    ce64:	1a049d63          	bnez	s1,d01e <__adddf3+0x356>
    ce68:	40078763          	beqz	a5,d276 <__adddf3+0x5ae>
    ce6c:	44088663          	beqz	a7,d2b8 <__adddf3+0x5f0>
    ce70:	41ff0933          	sub	s2,t5,t6
    ce74:	410707b3          	sub	a5,a4,a6
    ce78:	012f3633          	sltu	a2,t5,s2
    ce7c:	40c78633          	sub	a2,a5,a2
    ce80:	00861793          	slli	a5,a2,0x8
    ce84:	4c07d663          	bgez	a5,d350 <__adddf3+0x688>
    ce88:	41ef8933          	sub	s2,t6,t5
    ce8c:	40e807b3          	sub	a5,a6,a4
    ce90:	012fb633          	sltu	a2,t6,s2
    ce94:	40c78633          	sub	a2,a5,a2
    ce98:	89f6                	mv	s3,t4
    ce9a:	b791                	j	cdde <__adddf3+0x116>
    ce9c:	0fc05063          	blez	t3,cf7c <__adddf3+0x2b4>
    cea0:	0c030063          	beqz	t1,cf60 <__adddf3+0x298>
    cea4:	008006b7          	lui	a3,0x800
    cea8:	7ff00793          	li	a5,2047
    ceac:	00d86833          	or	a6,a6,a3
    ceb0:	3af48a63          	beq	s1,a5,d264 <__adddf3+0x59c>
    ceb4:	03800793          	li	a5,56
    ceb8:	13c7cb63          	blt	a5,t3,cfee <__adddf3+0x326>
    cebc:	47fd                	li	a5,31
    cebe:	35c7df63          	bge	a5,t3,d21c <__adddf3+0x554>
    cec2:	fe0e0913          	addi	s2,t3,-32
    cec6:	02000793          	li	a5,32
    ceca:	012856b3          	srl	a3,a6,s2
    cece:	00fe0a63          	beq	t3,a5,cee2 <__adddf3+0x21a>
    ced2:	04000913          	li	s2,64
    ced6:	41c90933          	sub	s2,s2,t3
    ceda:	01281933          	sll	s2,a6,s2
    cede:	012fefb3          	or	t6,t6,s2
    cee2:	01f03933          	snez	s2,t6
    cee6:	00d96933          	or	s2,s2,a3
    ceea:	a231                	j	cff6 <__adddf3+0x32e>
    ceec:	01f867b3          	or	a5,a6,t6
    cef0:	1c078a63          	beqz	a5,d0c4 <__adddf3+0x3fc>
    cef4:	fffe0793          	addi	a5,t3,-1
    cef8:	38078c63          	beqz	a5,d290 <__adddf3+0x5c8>
    cefc:	7ff00693          	li	a3,2047
    cf00:	1ade0963          	beq	t3,a3,d0b2 <__adddf3+0x3ea>
    cf04:	8e3e                	mv	t3,a5
    cf06:	bd0d                	j	cd38 <__adddf3+0x70>
    cf08:	409305b3          	sub	a1,t1,s1
    cf0c:	22049163          	bnez	s1,d12e <__adddf3+0x466>
    cf10:	01e767b3          	or	a5,a4,t5
    cf14:	32078763          	beqz	a5,d242 <__adddf3+0x57a>
    cf18:	fff58793          	addi	a5,a1,-1
    cf1c:	44078163          	beqz	a5,d35e <__adddf3+0x696>
    cf20:	7ff00693          	li	a3,2047
    cf24:	20d58c63          	beq	a1,a3,d13c <__adddf3+0x474>
    cf28:	85be                	mv	a1,a5
    cf2a:	03800793          	li	a5,56
    cf2e:	2ab7cc63          	blt	a5,a1,d1e6 <__adddf3+0x51e>
    cf32:	47fd                	li	a5,31
    cf34:	3cb7cf63          	blt	a5,a1,d312 <__adddf3+0x64a>
    cf38:	02000793          	li	a5,32
    cf3c:	8f8d                	sub	a5,a5,a1
    cf3e:	00f71933          	sll	s2,a4,a5
    cf42:	00bf56b3          	srl	a3,t5,a1
    cf46:	00ff17b3          	sll	a5,t5,a5
    cf4a:	00d96933          	or	s2,s2,a3
    cf4e:	00f037b3          	snez	a5,a5
    cf52:	00b75733          	srl	a4,a4,a1
    cf56:	00f96933          	or	s2,s2,a5
    cf5a:	40e80833          	sub	a6,a6,a4
    cf5e:	ac41                	j	d1ee <__adddf3+0x526>
    cf60:	01f867b3          	or	a5,a6,t6
    cf64:	34078063          	beqz	a5,d2a4 <__adddf3+0x5dc>
    cf68:	fffe0793          	addi	a5,t3,-1
    cf6c:	20078a63          	beqz	a5,d180 <__adddf3+0x4b8>
    cf70:	7ff00693          	li	a3,2047
    cf74:	2ede0863          	beq	t3,a3,d264 <__adddf3+0x59c>
    cf78:	8e3e                	mv	t3,a5
    cf7a:	bf2d                	j	ceb4 <__adddf3+0x1ec>
    cf7c:	140e1e63          	bnez	t3,d0d8 <__adddf3+0x410>
    cf80:	00148693          	addi	a3,s1,1
    cf84:	7fe6f793          	andi	a5,a3,2046
    cf88:	34079163          	bnez	a5,d2ca <__adddf3+0x602>
    cf8c:	01e767b3          	or	a5,a4,t5
    cf90:	2c049563          	bnez	s1,d25a <__adddf3+0x592>
    cf94:	3e078063          	beqz	a5,d374 <__adddf3+0x6ac>
    cf98:	01f867b3          	or	a5,a6,t6
    cf9c:	30078e63          	beqz	a5,d2b8 <__adddf3+0x5f0>
    cfa0:	01ff0933          	add	s2,t5,t6
    cfa4:	010707b3          	add	a5,a4,a6
    cfa8:	01e93f33          	sltu	t5,s2,t5
    cfac:	01e78633          	add	a2,a5,t5
    cfb0:	00861793          	slli	a5,a2,0x8
    cfb4:	0007d763          	bgez	a5,cfc2 <__adddf3+0x2fa>
    cfb8:	ff8007b7          	lui	a5,0xff800
    cfbc:	17fd                	addi	a5,a5,-1
    cfbe:	8e7d                	and	a2,a2,a5
    cfc0:	4485                	li	s1,1
    cfc2:	00797793          	andi	a5,s2,7
    cfc6:	e0079fe3          	bnez	a5,cde4 <__adddf3+0x11c>
    cfca:	01d61793          	slli	a5,a2,0x1d
    cfce:	00395893          	srli	a7,s2,0x3
    cfd2:	00f8e8b3          	or	a7,a7,a5
    cfd6:	00365793          	srli	a5,a2,0x3
    cfda:	7ff00713          	li	a4,2047
    cfde:	04e48d63          	beq	s1,a4,d038 <__adddf3+0x370>
    cfe2:	07b2                	slli	a5,a5,0xc
    cfe4:	83b1                	srli	a5,a5,0xc
    cfe6:	7ff4f513          	andi	a0,s1,2047
    cfea:	85ce                	mv	a1,s3
    cfec:	b581                	j	ce2c <__adddf3+0x164>
    cfee:	01f86933          	or	s2,a6,t6
    cff2:	01203933          	snez	s2,s2
    cff6:	997a                	add	s2,s2,t5
    cff8:	01e937b3          	sltu	a5,s2,t5
    cffc:	00e78633          	add	a2,a5,a4
    d000:	00861793          	slli	a5,a2,0x8
    d004:	fa07dfe3          	bgez	a5,cfc2 <__adddf3+0x2fa>
    d008:	0485                	addi	s1,s1,1
    d00a:	7ff00793          	li	a5,2047
    d00e:	18f49663          	bne	s1,a5,d19a <__adddf3+0x4d2>
    d012:	85ce                	mv	a1,s3
    d014:	7ff00513          	li	a0,2047
    d018:	4781                	li	a5,0
    d01a:	4881                	li	a7,0
    d01c:	bd01                	j	ce2c <__adddf3+0x164>
    d01e:	ebc1                	bnez	a5,d0ae <__adddf3+0x3e6>
    d020:	3a088463          	beqz	a7,d3c8 <__adddf3+0x700>
    d024:	00361693          	slli	a3,a2,0x3
    d028:	01d81793          	slli	a5,a6,0x1d
    d02c:	828d                	srli	a3,a3,0x3
    d02e:	00d7e8b3          	or	a7,a5,a3
    d032:	89f6                	mv	s3,t4
    d034:	00385793          	srli	a5,a6,0x3
    d038:	00f8e7b3          	or	a5,a7,a5
    d03c:	dbf9                	beqz	a5,d012 <__adddf3+0x34a>
    d03e:	4581                	li	a1,0
    d040:	7ff00513          	li	a0,2047
    d044:	000807b7          	lui	a5,0x80
    d048:	4881                	li	a7,0
    d04a:	b3cd                	j	ce2c <__adddf3+0x164>
    d04c:	ff800637          	lui	a2,0xff800
    d050:	167d                	addi	a2,a2,-1
    d052:	8e7d                	and	a2,a2,a5
    d054:	00797793          	andi	a5,s2,7
    d058:	8c99                	sub	s1,s1,a4
    d05a:	d80795e3          	bnez	a5,cde4 <__adddf3+0x11c>
    d05e:	b7b5                	j	cfca <__adddf3+0x302>
    d060:	854a                	mv	a0,s2
    d062:	01f010ef          	jal	ra,e880 <__clzsi2>
    d066:	01850713          	addi	a4,a0,24
    d06a:	47fd                	li	a5,31
    d06c:	d2e7d5e3          	bge	a5,a4,cd96 <__adddf3+0xce>
    d070:	ff850613          	addi	a2,a0,-8
    d074:	00c917b3          	sll	a5,s2,a2
    d078:	4901                	li	s2,0
    d07a:	bb05                	j	cdaa <__adddf3+0xe2>
    d07c:	01f86933          	or	s2,a6,t6
    d080:	01203933          	snez	s2,s2
    d084:	b1dd                	j	cd6a <__adddf3+0xa2>
    d086:	41ff0933          	sub	s2,t5,t6
    d08a:	41070633          	sub	a2,a4,a6
    d08e:	012f3433          	sltu	s0,t5,s2
    d092:	40860433          	sub	s0,a2,s0
    d096:	00841793          	slli	a5,s0,0x8
    d09a:	2407cd63          	bltz	a5,d2f4 <__adddf3+0x62c>
    d09e:	008968b3          	or	a7,s2,s0
    d0a2:	ce0893e3          	bnez	a7,cd88 <__adddf3+0xc0>
    d0a6:	4781                	li	a5,0
    d0a8:	4981                	li	s3,0
    d0aa:	4481                	li	s1,0
    d0ac:	bf1d                	j	cfe2 <__adddf3+0x31a>
    d0ae:	f80898e3          	bnez	a7,d03e <__adddf3+0x376>
    d0b2:	050e                	slli	a0,a0,0x3
    d0b4:	01d71793          	slli	a5,a4,0x1d
    d0b8:	810d                	srli	a0,a0,0x3
    d0ba:	00a7e8b3          	or	a7,a5,a0
    d0be:	00375793          	srli	a5,a4,0x3
    d0c2:	bf9d                	j	d038 <__adddf3+0x370>
    d0c4:	050e                	slli	a0,a0,0x3
    d0c6:	01d71793          	slli	a5,a4,0x1d
    d0ca:	810d                	srli	a0,a0,0x3
    d0cc:	00a7e8b3          	or	a7,a5,a0
    d0d0:	84f2                	mv	s1,t3
    d0d2:	00375793          	srli	a5,a4,0x3
    d0d6:	b711                	j	cfda <__adddf3+0x312>
    d0d8:	40930533          	sub	a0,t1,s1
    d0dc:	12048263          	beqz	s1,d200 <__adddf3+0x538>
    d0e0:	008006b7          	lui	a3,0x800
    d0e4:	7ff00793          	li	a5,2047
    d0e8:	8f55                	or	a4,a4,a3
    d0ea:	2ef30d63          	beq	t1,a5,d3e4 <__adddf3+0x71c>
    d0ee:	03800793          	li	a5,56
    d0f2:	20a7cb63          	blt	a5,a0,d308 <__adddf3+0x640>
    d0f6:	47fd                	li	a5,31
    d0f8:	2aa7c363          	blt	a5,a0,d39e <__adddf3+0x6d6>
    d0fc:	02000793          	li	a5,32
    d100:	8f89                	sub	a5,a5,a0
    d102:	00f71933          	sll	s2,a4,a5
    d106:	00af56b3          	srl	a3,t5,a0
    d10a:	00ff17b3          	sll	a5,t5,a5
    d10e:	00d96933          	or	s2,s2,a3
    d112:	00f037b3          	snez	a5,a5
    d116:	00a75733          	srl	a4,a4,a0
    d11a:	00f96933          	or	s2,s2,a5
    d11e:	983a                	add	a6,a6,a4
    d120:	997e                	add	s2,s2,t6
    d122:	01f937b3          	sltu	a5,s2,t6
    d126:	01078633          	add	a2,a5,a6
    d12a:	849a                	mv	s1,t1
    d12c:	bdd1                	j	d000 <__adddf3+0x338>
    d12e:	008006b7          	lui	a3,0x800
    d132:	7ff00793          	li	a5,2047
    d136:	8f55                	or	a4,a4,a3
    d138:	def319e3          	bne	t1,a5,cf2a <__adddf3+0x262>
    d13c:	00361793          	slli	a5,a2,0x3
    d140:	838d                	srli	a5,a5,0x3
    d142:	01d81893          	slli	a7,a6,0x1d
    d146:	0117e8b3          	or	a7,a5,a7
    d14a:	89f6                	mv	s3,t4
    d14c:	00385793          	srli	a5,a6,0x3
    d150:	b5e5                	j	d038 <__adddf3+0x370>
    d152:	fe150713          	addi	a4,a0,-31
    d156:	02000693          	li	a3,32
    d15a:	00e7d733          	srl	a4,a5,a4
    d15e:	00d60a63          	beq	a2,a3,d172 <__adddf3+0x4aa>
    d162:	04000693          	li	a3,64
    d166:	40c68633          	sub	a2,a3,a2
    d16a:	00c79633          	sll	a2,a5,a2
    d16e:	00c96933          	or	s2,s2,a2
    d172:	01203933          	snez	s2,s2
    d176:	00e96933          	or	s2,s2,a4
    d17a:	4601                	li	a2,0
    d17c:	4481                	li	s1,0
    d17e:	b591                	j	cfc2 <__adddf3+0x2fa>
    d180:	01ff0933          	add	s2,t5,t6
    d184:	010707b3          	add	a5,a4,a6
    d188:	01e93633          	sltu	a2,s2,t5
    d18c:	963e                	add	a2,a2,a5
    d18e:	00861793          	slli	a5,a2,0x8
    d192:	4485                	li	s1,1
    d194:	e207d7e3          	bgez	a5,cfc2 <__adddf3+0x2fa>
    d198:	4489                	li	s1,2
    d19a:	ff8007b7          	lui	a5,0xff800
    d19e:	17fd                	addi	a5,a5,-1
    d1a0:	8ff1                	and	a5,a5,a2
    d1a2:	00195713          	srli	a4,s2,0x1
    d1a6:	00197913          	andi	s2,s2,1
    d1aa:	01276933          	or	s2,a4,s2
    d1ae:	01f79893          	slli	a7,a5,0x1f
    d1b2:	0128e933          	or	s2,a7,s2
    d1b6:	0017d613          	srli	a2,a5,0x1
    d1ba:	b115                	j	cdde <__adddf3+0x116>
    d1bc:	fe0e0913          	addi	s2,t3,-32
    d1c0:	02000793          	li	a5,32
    d1c4:	012856b3          	srl	a3,a6,s2
    d1c8:	00fe0a63          	beq	t3,a5,d1dc <__adddf3+0x514>
    d1cc:	04000913          	li	s2,64
    d1d0:	41c90933          	sub	s2,s2,t3
    d1d4:	01281933          	sll	s2,a6,s2
    d1d8:	012fefb3          	or	t6,t6,s2
    d1dc:	01f03933          	snez	s2,t6
    d1e0:	00d96933          	or	s2,s2,a3
    d1e4:	b659                	j	cd6a <__adddf3+0xa2>
    d1e6:	01e76933          	or	s2,a4,t5
    d1ea:	01203933          	snez	s2,s2
    d1ee:	412f8933          	sub	s2,t6,s2
    d1f2:	012fb7b3          	sltu	a5,t6,s2
    d1f6:	40f80633          	sub	a2,a6,a5
    d1fa:	849a                	mv	s1,t1
    d1fc:	89f6                	mv	s3,t4
    d1fe:	bea5                	j	cd76 <__adddf3+0xae>
    d200:	01e767b3          	or	a5,a4,t5
    d204:	18078263          	beqz	a5,d388 <__adddf3+0x6c0>
    d208:	fff50793          	addi	a5,a0,-1
    d20c:	1c078463          	beqz	a5,d3d4 <__adddf3+0x70c>
    d210:	7ff00693          	li	a3,2047
    d214:	12d50463          	beq	a0,a3,d33c <__adddf3+0x674>
    d218:	853e                	mv	a0,a5
    d21a:	bdd1                	j	d0ee <__adddf3+0x426>
    d21c:	02000793          	li	a5,32
    d220:	41c787b3          	sub	a5,a5,t3
    d224:	00f816b3          	sll	a3,a6,a5
    d228:	00ff9933          	sll	s2,t6,a5
    d22c:	01cfd633          	srl	a2,t6,t3
    d230:	8ed1                	or	a3,a3,a2
    d232:	01203933          	snez	s2,s2
    d236:	01c857b3          	srl	a5,a6,t3
    d23a:	0126e933          	or	s2,a3,s2
    d23e:	973e                	add	a4,a4,a5
    d240:	bb5d                	j	cff6 <__adddf3+0x32e>
    d242:	00361793          	slli	a5,a2,0x3
    d246:	838d                	srli	a5,a5,0x3
    d248:	01d81893          	slli	a7,a6,0x1d
    d24c:	0117e8b3          	or	a7,a5,a7
    d250:	84ae                	mv	s1,a1
    d252:	00385793          	srli	a5,a6,0x3
    d256:	89f6                	mv	s3,t4
    d258:	b349                	j	cfda <__adddf3+0x312>
    d25a:	c3ed                	beqz	a5,d33c <__adddf3+0x674>
    d25c:	01f86933          	or	s2,a6,t6
    d260:	dc091fe3          	bnez	s2,d03e <__adddf3+0x376>
    d264:	050e                	slli	a0,a0,0x3
    d266:	01d71793          	slli	a5,a4,0x1d
    d26a:	810d                	srli	a0,a0,0x3
    d26c:	00f568b3          	or	a7,a0,a5
    d270:	00375793          	srli	a5,a4,0x3
    d274:	b3d1                	j	d038 <__adddf3+0x370>
    d276:	0e088163          	beqz	a7,d358 <__adddf3+0x690>
    d27a:	00361693          	slli	a3,a2,0x3
    d27e:	01d81793          	slli	a5,a6,0x1d
    d282:	828d                	srli	a3,a3,0x3
    d284:	00d7e8b3          	or	a7,a5,a3
    d288:	89f6                	mv	s3,t4
    d28a:	00385793          	srli	a5,a6,0x3
    d28e:	bb91                	j	cfe2 <__adddf3+0x31a>
    d290:	41ff0933          	sub	s2,t5,t6
    d294:	410707b3          	sub	a5,a4,a6
    d298:	012f3f33          	sltu	t5,t5,s2
    d29c:	41e78633          	sub	a2,a5,t5
    d2a0:	4485                	li	s1,1
    d2a2:	bcd1                	j	cd76 <__adddf3+0xae>
    d2a4:	050e                	slli	a0,a0,0x3
    d2a6:	01d71793          	slli	a5,a4,0x1d
    d2aa:	810d                	srli	a0,a0,0x3
    d2ac:	00f568b3          	or	a7,a0,a5
    d2b0:	84f2                	mv	s1,t3
    d2b2:	00375793          	srli	a5,a4,0x3
    d2b6:	b315                	j	cfda <__adddf3+0x312>
    d2b8:	050e                	slli	a0,a0,0x3
    d2ba:	01d71793          	slli	a5,a4,0x1d
    d2be:	810d                	srli	a0,a0,0x3
    d2c0:	00a7e8b3          	or	a7,a5,a0
    d2c4:	00375793          	srli	a5,a4,0x3
    d2c8:	bb29                	j	cfe2 <__adddf3+0x31a>
    d2ca:	7ff00793          	li	a5,2047
    d2ce:	d4f682e3          	beq	a3,a5,d012 <__adddf3+0x34a>
    d2d2:	01ff0933          	add	s2,t5,t6
    d2d6:	01e93633          	sltu	a2,s2,t5
    d2da:	010707b3          	add	a5,a4,a6
    d2de:	97b2                	add	a5,a5,a2
    d2e0:	01f79893          	slli	a7,a5,0x1f
    d2e4:	00195913          	srli	s2,s2,0x1
    d2e8:	0128e933          	or	s2,a7,s2
    d2ec:	0017d613          	srli	a2,a5,0x1
    d2f0:	84b6                	mv	s1,a3
    d2f2:	b9c1                	j	cfc2 <__adddf3+0x2fa>
    d2f4:	41ef8933          	sub	s2,t6,t5
    d2f8:	40e80733          	sub	a4,a6,a4
    d2fc:	012fb633          	sltu	a2,t6,s2
    d300:	40c70433          	sub	s0,a4,a2
    d304:	89f6                	mv	s3,t4
    d306:	b449                	j	cd88 <__adddf3+0xc0>
    d308:	01e76933          	or	s2,a4,t5
    d30c:	01203933          	snez	s2,s2
    d310:	bd01                	j	d120 <__adddf3+0x458>
    d312:	fe058793          	addi	a5,a1,-32
    d316:	02000693          	li	a3,32
    d31a:	00f757b3          	srl	a5,a4,a5
    d31e:	00d58a63          	beq	a1,a3,d332 <__adddf3+0x66a>
    d322:	04000693          	li	a3,64
    d326:	40b685b3          	sub	a1,a3,a1
    d32a:	00b71733          	sll	a4,a4,a1
    d32e:	00ef6f33          	or	t5,t5,a4
    d332:	01e03933          	snez	s2,t5
    d336:	00f96933          	or	s2,s2,a5
    d33a:	bd55                	j	d1ee <__adddf3+0x526>
    d33c:	00361793          	slli	a5,a2,0x3
    d340:	838d                	srli	a5,a5,0x3
    d342:	01d81893          	slli	a7,a6,0x1d
    d346:	0117e8b3          	or	a7,a5,a7
    d34a:	00385793          	srli	a5,a6,0x3
    d34e:	b1ed                	j	d038 <__adddf3+0x370>
    d350:	00c968b3          	or	a7,s2,a2
    d354:	c60897e3          	bnez	a7,cfc2 <__adddf3+0x2fa>
    d358:	4781                	li	a5,0
    d35a:	4981                	li	s3,0
    d35c:	b159                	j	cfe2 <__adddf3+0x31a>
    d35e:	41ef8933          	sub	s2,t6,t5
    d362:	40e807b3          	sub	a5,a6,a4
    d366:	012fb633          	sltu	a2,t6,s2
    d36a:	40c78633          	sub	a2,a5,a2
    d36e:	89f6                	mv	s3,t4
    d370:	4485                	li	s1,1
    d372:	b411                	j	cd76 <__adddf3+0xae>
    d374:	00361693          	slli	a3,a2,0x3
    d378:	01d81793          	slli	a5,a6,0x1d
    d37c:	828d                	srli	a3,a3,0x3
    d37e:	00d7e8b3          	or	a7,a5,a3
    d382:	00385793          	srli	a5,a6,0x3
    d386:	b9b1                	j	cfe2 <__adddf3+0x31a>
    d388:	00361693          	slli	a3,a2,0x3
    d38c:	01d81793          	slli	a5,a6,0x1d
    d390:	828d                	srli	a3,a3,0x3
    d392:	00d7e8b3          	or	a7,a5,a3
    d396:	84aa                	mv	s1,a0
    d398:	00385793          	srli	a5,a6,0x3
    d39c:	b93d                	j	cfda <__adddf3+0x312>
    d39e:	fe050793          	addi	a5,a0,-32
    d3a2:	02000693          	li	a3,32
    d3a6:	00f757b3          	srl	a5,a4,a5
    d3aa:	00d50a63          	beq	a0,a3,d3be <__adddf3+0x6f6>
    d3ae:	04000693          	li	a3,64
    d3b2:	40a68533          	sub	a0,a3,a0
    d3b6:	00a71733          	sll	a4,a4,a0
    d3ba:	00ef6f33          	or	t5,t5,a4
    d3be:	01e03933          	snez	s2,t5
    d3c2:	00f96933          	or	s2,s2,a5
    d3c6:	bba9                	j	d120 <__adddf3+0x458>
    d3c8:	4581                	li	a1,0
    d3ca:	7ff00513          	li	a0,2047
    d3ce:	000807b7          	lui	a5,0x80
    d3d2:	bca9                	j	ce2c <__adddf3+0x164>
    d3d4:	01ff0933          	add	s2,t5,t6
    d3d8:	010707b3          	add	a5,a4,a6
    d3dc:	01f93633          	sltu	a2,s2,t6
    d3e0:	963e                	add	a2,a2,a5
    d3e2:	b375                	j	d18e <__adddf3+0x4c6>
    d3e4:	00361693          	slli	a3,a2,0x3
    d3e8:	01d81793          	slli	a5,a6,0x1d
    d3ec:	828d                	srli	a3,a3,0x3
    d3ee:	00d7e8b3          	or	a7,a5,a3
    d3f2:	00385793          	srli	a5,a6,0x3
    d3f6:	b189                	j	d038 <__adddf3+0x370>

0000d3f8 <__divdf3>:
    d3f8:	7139                	addi	sp,sp,-64
    d3fa:	0145d793          	srli	a5,a1,0x14
    d3fe:	dc22                	sw	s0,56(sp)
    d400:	d84a                	sw	s2,48(sp)
    d402:	d256                	sw	s5,36(sp)
    d404:	892a                	mv	s2,a0
    d406:	00c59413          	slli	s0,a1,0xc
    d40a:	de06                	sw	ra,60(sp)
    d40c:	da26                	sw	s1,52(sp)
    d40e:	d64e                	sw	s3,44(sp)
    d410:	d452                	sw	s4,40(sp)
    d412:	d05a                	sw	s6,32(sp)
    d414:	ce5e                	sw	s7,28(sp)
    d416:	7ff7f513          	andi	a0,a5,2047
    d41a:	8031                	srli	s0,s0,0xc
    d41c:	01f5da93          	srli	s5,a1,0x1f
    d420:	10050b63          	beqz	a0,d536 <__divdf3+0x13e>
    d424:	7ff00793          	li	a5,2047
    d428:	14f50b63          	beq	a0,a5,d57e <__divdf3+0x186>
    d42c:	01d95a13          	srli	s4,s2,0x1d
    d430:	040e                	slli	s0,s0,0x3
    d432:	008a6433          	or	s0,s4,s0
    d436:	00800a37          	lui	s4,0x800
    d43a:	01446a33          	or	s4,s0,s4
    d43e:	00391b13          	slli	s6,s2,0x3
    d442:	c0150493          	addi	s1,a0,-1023
    d446:	4401                	li	s0,0
    d448:	4b81                	li	s7,0
    d44a:	0146d813          	srli	a6,a3,0x14
    d44e:	00c69913          	slli	s2,a3,0xc
    d452:	7ff87813          	andi	a6,a6,2047
    d456:	88b2                	mv	a7,a2
    d458:	00c95913          	srli	s2,s2,0xc
    d45c:	01f6d993          	srli	s3,a3,0x1f
    d460:	08080e63          	beqz	a6,d4fc <__divdf3+0x104>
    d464:	7ff00793          	li	a5,2047
    d468:	04f80063          	beq	a6,a5,d4a8 <__divdf3+0xb0>
    d46c:	01d65713          	srli	a4,a2,0x1d
    d470:	090e                	slli	s2,s2,0x3
    d472:	01276933          	or	s2,a4,s2
    d476:	c0180813          	addi	a6,a6,-1023 # ffc01 <_data_lma+0xf09f5>
    d47a:	008007b7          	lui	a5,0x800
    d47e:	00f96733          	or	a4,s2,a5
    d482:	00361893          	slli	a7,a2,0x3
    d486:	410484b3          	sub	s1,s1,a6
    d48a:	4581                	li	a1,0
    d48c:	47bd                	li	a5,15
    d48e:	013ac833          	xor	a6,s5,s3
    d492:	1a87e463          	bltu	a5,s0,d63a <__divdf3+0x242>
    d496:	00002797          	auipc	a5,0x2
    d49a:	bb678793          	addi	a5,a5,-1098 # f04c <app_task_table+0x74>
    d49e:	040a                	slli	s0,s0,0x2
    d4a0:	943e                	add	s0,s0,a5
    d4a2:	4010                	lw	a2,0(s0)
    d4a4:	963e                	add	a2,a2,a5
    d4a6:	8602                	jr	a2
    d4a8:	00c96733          	or	a4,s2,a2
    d4ac:	80148493          	addi	s1,s1,-2047
    d4b0:	10071263          	bnez	a4,d5b4 <__divdf3+0x1bc>
    d4b4:	00246413          	ori	s0,s0,2
    d4b8:	4881                	li	a7,0
    d4ba:	4589                	li	a1,2
    d4bc:	bfc1                	j	d48c <__divdf3+0x94>
    d4be:	7ff00613          	li	a2,2047
    d4c2:	4781                	li	a5,0
    d4c4:	4701                	li	a4,0
    d4c6:	07b2                	slli	a5,a5,0xc
    d4c8:	50f2                	lw	ra,60(sp)
    d4ca:	5462                	lw	s0,56(sp)
    d4cc:	0652                	slli	a2,a2,0x14
    d4ce:	83b1                	srli	a5,a5,0xc
    d4d0:	087e                	slli	a6,a6,0x1f
    d4d2:	8fd1                	or	a5,a5,a2
    d4d4:	0107e7b3          	or	a5,a5,a6
    d4d8:	54d2                	lw	s1,52(sp)
    d4da:	5942                	lw	s2,48(sp)
    d4dc:	59b2                	lw	s3,44(sp)
    d4de:	5a22                	lw	s4,40(sp)
    d4e0:	5a92                	lw	s5,36(sp)
    d4e2:	5b02                	lw	s6,32(sp)
    d4e4:	4bf2                	lw	s7,28(sp)
    d4e6:	853a                	mv	a0,a4
    d4e8:	85be                	mv	a1,a5
    d4ea:	6121                	addi	sp,sp,64
    d4ec:	8082                	ret
    d4ee:	4801                	li	a6,0
    d4f0:	7ff00613          	li	a2,2047
    d4f4:	000807b7          	lui	a5,0x80
    d4f8:	4701                	li	a4,0
    d4fa:	b7f1                	j	d4c6 <__divdf3+0xce>
    d4fc:	00c96733          	or	a4,s2,a2
    d500:	c74d                	beqz	a4,d5aa <__divdf3+0x1b2>
    d502:	30090863          	beqz	s2,d812 <__divdf3+0x41a>
    d506:	854a                	mv	a0,s2
    d508:	c432                	sw	a2,8(sp)
    d50a:	376010ef          	jal	ra,e880 <__clzsi2>
    d50e:	4622                	lw	a2,8(sp)
    d510:	ff550713          	addi	a4,a0,-11
    d514:	47f5                	li	a5,29
    d516:	ff850693          	addi	a3,a0,-8
    d51a:	8f99                	sub	a5,a5,a4
    d51c:	00d91933          	sll	s2,s2,a3
    d520:	00f657b3          	srl	a5,a2,a5
    d524:	0127e733          	or	a4,a5,s2
    d528:	00d618b3          	sll	a7,a2,a3
    d52c:	9526                	add	a0,a0,s1
    d52e:	3f350493          	addi	s1,a0,1011
    d532:	4581                	li	a1,0
    d534:	bfa1                	j	d48c <__divdf3+0x94>
    d536:	01246a33          	or	s4,s0,s2
    d53a:	060a0363          	beqz	s4,d5a0 <__divdf3+0x1a8>
    d53e:	c636                	sw	a3,12(sp)
    d540:	c432                	sw	a2,8(sp)
    d542:	2a040663          	beqz	s0,d7ee <__divdf3+0x3f6>
    d546:	8522                	mv	a0,s0
    d548:	338010ef          	jal	ra,e880 <__clzsi2>
    d54c:	4622                	lw	a2,8(sp)
    d54e:	46b2                	lw	a3,12(sp)
    d550:	84aa                	mv	s1,a0
    d552:	ff550713          	addi	a4,a0,-11
    d556:	4a75                	li	s4,29
    d558:	ff848b13          	addi	s6,s1,-8
    d55c:	40ea0a33          	sub	s4,s4,a4
    d560:	01641433          	sll	s0,s0,s6
    d564:	01495a33          	srl	s4,s2,s4
    d568:	008a6a33          	or	s4,s4,s0
    d56c:	01691b33          	sll	s6,s2,s6
    d570:	c0d00513          	li	a0,-1011
    d574:	409504b3          	sub	s1,a0,s1
    d578:	4401                	li	s0,0
    d57a:	4b81                	li	s7,0
    d57c:	b5f9                	j	d44a <__divdf3+0x52>
    d57e:	01246a33          	or	s4,s0,s2
    d582:	000a1863          	bnez	s4,d592 <__divdf3+0x19a>
    d586:	4421                	li	s0,8
    d588:	4b01                	li	s6,0
    d58a:	7ff00493          	li	s1,2047
    d58e:	4b89                	li	s7,2
    d590:	bd6d                	j	d44a <__divdf3+0x52>
    d592:	8a22                	mv	s4,s0
    d594:	8b4a                	mv	s6,s2
    d596:	4431                	li	s0,12
    d598:	7ff00493          	li	s1,2047
    d59c:	4b8d                	li	s7,3
    d59e:	b575                	j	d44a <__divdf3+0x52>
    d5a0:	4411                	li	s0,4
    d5a2:	4b01                	li	s6,0
    d5a4:	4481                	li	s1,0
    d5a6:	4b85                	li	s7,1
    d5a8:	b54d                	j	d44a <__divdf3+0x52>
    d5aa:	00146413          	ori	s0,s0,1
    d5ae:	4881                	li	a7,0
    d5b0:	4585                	li	a1,1
    d5b2:	bde9                	j	d48c <__divdf3+0x94>
    d5b4:	00346413          	ori	s0,s0,3
    d5b8:	874a                	mv	a4,s2
    d5ba:	458d                	li	a1,3
    d5bc:	bdc1                	j	d48c <__divdf3+0x94>
    d5be:	2e050a63          	beqz	a0,d8b2 <__divdf3+0x4ba>
    d5c2:	4785                	li	a5,1
    d5c4:	8f89                	sub	a5,a5,a0
    d5c6:	03800693          	li	a3,56
    d5ca:	32f6dd63          	bge	a3,a5,d904 <__divdf3+0x50c>
    d5ce:	4601                	li	a2,0
    d5d0:	4781                	li	a5,0
    d5d2:	4701                	li	a4,0
    d5d4:	bdcd                	j	d4c6 <__divdf3+0xce>
    d5d6:	86ce                	mv	a3,s3
    d5d8:	4789                	li	a5,2
    d5da:	3af58d63          	beq	a1,a5,d994 <__divdf3+0x59c>
    d5de:	478d                	li	a5,3
    d5e0:	f0f587e3          	beq	a1,a5,d4ee <__divdf3+0xf6>
    d5e4:	4785                	li	a5,1
    d5e6:	8836                	mv	a6,a3
    d5e8:	fef583e3          	beq	a1,a5,d5ce <__divdf3+0x1d6>
    d5ec:	3ff48513          	addi	a0,s1,1023
    d5f0:	fca057e3          	blez	a0,d5be <__divdf3+0x1c6>
    d5f4:	0078f793          	andi	a5,a7,7
    d5f8:	28079663          	bnez	a5,d884 <__divdf3+0x48c>
    d5fc:	0038d693          	srli	a3,a7,0x3
    d600:	00771793          	slli	a5,a4,0x7
    d604:	0007d863          	bgez	a5,d614 <__divdf3+0x21c>
    d608:	ff0007b7          	lui	a5,0xff000
    d60c:	17fd                	addi	a5,a5,-1
    d60e:	8f7d                	and	a4,a4,a5
    d610:	40048513          	addi	a0,s1,1024
    d614:	7fe00793          	li	a5,2046
    d618:	eaa7c3e3          	blt	a5,a0,d4be <__divdf3+0xc6>
    d61c:	01d71613          	slli	a2,a4,0x1d
    d620:	00971793          	slli	a5,a4,0x9
    d624:	83b1                	srli	a5,a5,0xc
    d626:	00d66733          	or	a4,a2,a3
    d62a:	7ff57613          	andi	a2,a0,2047
    d62e:	bd61                	j	d4c6 <__divdf3+0xce>
    d630:	86d6                	mv	a3,s5
    d632:	8752                	mv	a4,s4
    d634:	88da                	mv	a7,s6
    d636:	85de                	mv	a1,s7
    d638:	b745                	j	d5d8 <__divdf3+0x1e0>
    d63a:	23476163          	bltu	a4,s4,d85c <__divdf3+0x464>
    d63e:	20ea0d63          	beq	s4,a4,d858 <__divdf3+0x460>
    d642:	86da                	mv	a3,s6
    d644:	14fd                	addi	s1,s1,-1
    d646:	8452                	mv	s0,s4
    d648:	4b01                	li	s6,0
    d64a:	00871793          	slli	a5,a4,0x8
    d64e:	0188d313          	srli	t1,a7,0x18
    d652:	00f36333          	or	t1,t1,a5
    d656:	01035e93          	srli	t4,t1,0x10
    d65a:	03d457b3          	divu	a5,s0,t4
    d65e:	01031f13          	slli	t5,t1,0x10
    d662:	010f5f13          	srli	t5,t5,0x10
    d666:	0106d593          	srli	a1,a3,0x10
    d66a:	00889e13          	slli	t3,a7,0x8
    d66e:	03d47433          	remu	s0,s0,t4
    d672:	02ff0733          	mul	a4,t5,a5
    d676:	0442                	slli	s0,s0,0x10
    d678:	8dc1                	or	a1,a1,s0
    d67a:	00e5fb63          	bgeu	a1,a4,d690 <__divdf3+0x298>
    d67e:	959a                	add	a1,a1,t1
    d680:	fff78613          	addi	a2,a5,-1 # feffffff <_eusrstack+0xdeffbfff>
    d684:	2665ee63          	bltu	a1,t1,d900 <__divdf3+0x508>
    d688:	26e5fc63          	bgeu	a1,a4,d900 <__divdf3+0x508>
    d68c:	17f9                	addi	a5,a5,-2
    d68e:	959a                	add	a1,a1,t1
    d690:	8d99                	sub	a1,a1,a4
    d692:	03d5d733          	divu	a4,a1,t4
    d696:	06c2                	slli	a3,a3,0x10
    d698:	82c1                	srli	a3,a3,0x10
    d69a:	03d5f5b3          	remu	a1,a1,t4
    d69e:	02ef0633          	mul	a2,t5,a4
    d6a2:	05c2                	slli	a1,a1,0x10
    d6a4:	8dd5                	or	a1,a1,a3
    d6a6:	00c5fb63          	bgeu	a1,a2,d6bc <__divdf3+0x2c4>
    d6aa:	959a                	add	a1,a1,t1
    d6ac:	fff70693          	addi	a3,a4,-1 # 7fffff <_data_lma+0x7f0df3>
    d6b0:	2465e663          	bltu	a1,t1,d8fc <__divdf3+0x504>
    d6b4:	24c5f463          	bgeu	a1,a2,d8fc <__divdf3+0x504>
    d6b8:	1779                	addi	a4,a4,-2
    d6ba:	959a                	add	a1,a1,t1
    d6bc:	07c2                	slli	a5,a5,0x10
    d6be:	6441                	lui	s0,0x10
    d6c0:	8f5d                	or	a4,a4,a5
    d6c2:	fff40793          	addi	a5,s0,-1 # ffff <_data_lma+0xdf3>
    d6c6:	00f77533          	and	a0,a4,a5
    d6ca:	01075893          	srli	a7,a4,0x10
    d6ce:	010e5f93          	srli	t6,t3,0x10
    d6d2:	00fe77b3          	and	a5,t3,a5
    d6d6:	02f502b3          	mul	t0,a0,a5
    d6da:	40c586b3          	sub	a3,a1,a2
    d6de:	02f883b3          	mul	t2,a7,a5
    d6e2:	0102d593          	srli	a1,t0,0x10
    d6e6:	02af8633          	mul	a2,t6,a0
    d6ea:	961e                	add	a2,a2,t2
    d6ec:	962e                	add	a2,a2,a1
    d6ee:	03f88533          	mul	a0,a7,t6
    d6f2:	00767363          	bgeu	a2,t2,d6f8 <__divdf3+0x300>
    d6f6:	9522                	add	a0,a0,s0
    d6f8:	68c1                	lui	a7,0x10
    d6fa:	18fd                	addi	a7,a7,-1
    d6fc:	01065593          	srli	a1,a2,0x10
    d700:	01167633          	and	a2,a2,a7
    d704:	0642                	slli	a2,a2,0x10
    d706:	0112f8b3          	and	a7,t0,a7
    d70a:	95aa                	add	a1,a1,a0
    d70c:	9646                	add	a2,a2,a7
    d70e:	12b6e663          	bltu	a3,a1,d83a <__divdf3+0x442>
    d712:	12b68263          	beq	a3,a1,d836 <__divdf3+0x43e>
    d716:	40cb0633          	sub	a2,s6,a2
    d71a:	8e8d                	sub	a3,a3,a1
    d71c:	00cb3b33          	sltu	s6,s6,a2
    d720:	41668b33          	sub	s6,a3,s6
    d724:	3ff48513          	addi	a0,s1,1023
    d728:	17630c63          	beq	t1,s6,d8a0 <__divdf3+0x4a8>
    d72c:	03db58b3          	divu	a7,s6,t4
    d730:	01065593          	srli	a1,a2,0x10
    d734:	03db7b33          	remu	s6,s6,t4
    d738:	031f06b3          	mul	a3,t5,a7
    d73c:	0b42                	slli	s6,s6,0x10
    d73e:	0165eb33          	or	s6,a1,s6
    d742:	00db7b63          	bgeu	s6,a3,d758 <__divdf3+0x360>
    d746:	9b1a                	add	s6,s6,t1
    d748:	fff88593          	addi	a1,a7,-1 # ffff <_data_lma+0xdf3>
    d74c:	206b6d63          	bltu	s6,t1,d966 <__divdf3+0x56e>
    d750:	20db7b63          	bgeu	s6,a3,d966 <__divdf3+0x56e>
    d754:	18f9                	addi	a7,a7,-2
    d756:	9b1a                	add	s6,s6,t1
    d758:	40db0b33          	sub	s6,s6,a3
    d75c:	03db56b3          	divu	a3,s6,t4
    d760:	0642                	slli	a2,a2,0x10
    d762:	8241                	srli	a2,a2,0x10
    d764:	03db7b33          	remu	s6,s6,t4
    d768:	02df0f33          	mul	t5,t5,a3
    d76c:	0b42                	slli	s6,s6,0x10
    d76e:	01666633          	or	a2,a2,s6
    d772:	01e67b63          	bgeu	a2,t5,d788 <__divdf3+0x390>
    d776:	961a                	add	a2,a2,t1
    d778:	fff68593          	addi	a1,a3,-1 # 7fffff <_data_lma+0x7f0df3>
    d77c:	1e666763          	bltu	a2,t1,d96a <__divdf3+0x572>
    d780:	1fe67563          	bgeu	a2,t5,d96a <__divdf3+0x572>
    d784:	16f9                	addi	a3,a3,-2
    d786:	961a                	add	a2,a2,t1
    d788:	08c2                	slli	a7,a7,0x10
    d78a:	00d8e8b3          	or	a7,a7,a3
    d78e:	01089593          	slli	a1,a7,0x10
    d792:	0108d293          	srli	t0,a7,0x10
    d796:	81c1                	srli	a1,a1,0x10
    d798:	02f58eb3          	mul	t4,a1,a5
    d79c:	41e60633          	sub	a2,a2,t5
    d7a0:	02bf85b3          	mul	a1,t6,a1
    d7a4:	010ed693          	srli	a3,t4,0x10
    d7a8:	02f287b3          	mul	a5,t0,a5
    d7ac:	95be                	add	a1,a1,a5
    d7ae:	96ae                	add	a3,a3,a1
    d7b0:	025f8fb3          	mul	t6,t6,t0
    d7b4:	00f6f463          	bgeu	a3,a5,d7bc <__divdf3+0x3c4>
    d7b8:	67c1                	lui	a5,0x10
    d7ba:	9fbe                	add	t6,t6,a5
    d7bc:	65c1                	lui	a1,0x10
    d7be:	15fd                	addi	a1,a1,-1
    d7c0:	0106d793          	srli	a5,a3,0x10
    d7c4:	8eed                	and	a3,a3,a1
    d7c6:	06c2                	slli	a3,a3,0x10
    d7c8:	00befeb3          	and	t4,t4,a1
    d7cc:	9fbe                	add	t6,t6,a5
    d7ce:	96f6                	add	a3,a3,t4
    d7d0:	09f67f63          	bgeu	a2,t6,d86e <__divdf3+0x476>
    d7d4:	961a                	add	a2,a2,t1
    d7d6:	fff88793          	addi	a5,a7,-1
    d7da:	1a666963          	bltu	a2,t1,d98c <__divdf3+0x594>
    d7de:	19f66863          	bltu	a2,t6,d96e <__divdf3+0x576>
    d7e2:	1bf60f63          	beq	a2,t6,d9a0 <__divdf3+0x5a8>
    d7e6:	88be                	mv	a7,a5
    d7e8:	0018e893          	ori	a7,a7,1
    d7ec:	b511                	j	d5f0 <__divdf3+0x1f8>
    d7ee:	854a                	mv	a0,s2
    d7f0:	090010ef          	jal	ra,e880 <__clzsi2>
    d7f4:	01550713          	addi	a4,a0,21
    d7f8:	45f1                	li	a1,28
    d7fa:	02050493          	addi	s1,a0,32
    d7fe:	4622                	lw	a2,8(sp)
    d800:	46b2                	lw	a3,12(sp)
    d802:	d4e5dae3          	bge	a1,a4,d556 <__divdf3+0x15e>
    d806:	ff850413          	addi	s0,a0,-8
    d80a:	00891a33          	sll	s4,s2,s0
    d80e:	4b01                	li	s6,0
    d810:	b385                	j	d570 <__divdf3+0x178>
    d812:	8532                	mv	a0,a2
    d814:	c432                	sw	a2,8(sp)
    d816:	06a010ef          	jal	ra,e880 <__clzsi2>
    d81a:	01550713          	addi	a4,a0,21
    d81e:	46f1                	li	a3,28
    d820:	87aa                	mv	a5,a0
    d822:	4622                	lw	a2,8(sp)
    d824:	02050513          	addi	a0,a0,32
    d828:	cee6d6e3          	bge	a3,a4,d514 <__divdf3+0x11c>
    d82c:	17e1                	addi	a5,a5,-8
    d82e:	00f61733          	sll	a4,a2,a5
    d832:	4881                	li	a7,0
    d834:	b9e5                	j	d52c <__divdf3+0x134>
    d836:	eecb70e3          	bgeu	s6,a2,d716 <__divdf3+0x31e>
    d83a:	9b72                	add	s6,s6,t3
    d83c:	01cb3533          	sltu	a0,s6,t3
    d840:	951a                	add	a0,a0,t1
    d842:	96aa                	add	a3,a3,a0
    d844:	fff70513          	addi	a0,a4,-1
    d848:	02d37863          	bgeu	t1,a3,d878 <__divdf3+0x480>
    d84c:	10b6e663          	bltu	a3,a1,d958 <__divdf3+0x560>
    d850:	10d58263          	beq	a1,a3,d954 <__divdf3+0x55c>
    d854:	872a                	mv	a4,a0
    d856:	b5c1                	j	d716 <__divdf3+0x31e>
    d858:	df1b65e3          	bltu	s6,a7,d642 <__divdf3+0x24a>
    d85c:	001b5593          	srli	a1,s6,0x1
    d860:	01fa1693          	slli	a3,s4,0x1f
    d864:	001a5413          	srli	s0,s4,0x1
    d868:	8ecd                	or	a3,a3,a1
    d86a:	0b7e                	slli	s6,s6,0x1f
    d86c:	bbf9                	j	d64a <__divdf3+0x252>
    d86e:	f7f61de3          	bne	a2,t6,d7e8 <__divdf3+0x3f0>
    d872:	d6068fe3          	beqz	a3,d5f0 <__divdf3+0x1f8>
    d876:	bfb9                	j	d7d4 <__divdf3+0x3dc>
    d878:	fcd31ee3          	bne	t1,a3,d854 <__divdf3+0x45c>
    d87c:	fdcb78e3          	bgeu	s6,t3,d84c <__divdf3+0x454>
    d880:	872a                	mv	a4,a0
    d882:	bd51                	j	d716 <__divdf3+0x31e>
    d884:	00f8f793          	andi	a5,a7,15
    d888:	4691                	li	a3,4
    d88a:	d6d789e3          	beq	a5,a3,d5fc <__divdf3+0x204>
    d88e:	ffc8b793          	sltiu	a5,a7,-4
    d892:	00488693          	addi	a3,a7,4
    d896:	0017c793          	xori	a5,a5,1
    d89a:	828d                	srli	a3,a3,0x3
    d89c:	973e                	add	a4,a4,a5
    d89e:	b38d                	j	d600 <__divdf3+0x208>
    d8a0:	4681                	li	a3,0
    d8a2:	4785                	li	a5,1
    d8a4:	fea04ce3          	bgtz	a0,d89c <__divdf3+0x4a4>
    d8a8:	58fd                	li	a7,-1
    d8aa:	d0051ce3          	bnez	a0,d5c2 <__divdf3+0x1ca>
    d8ae:	c0100493          	li	s1,-1023
    d8b2:	4785                	li	a5,1
    d8b4:	41e48513          	addi	a0,s1,1054
    d8b8:	00a716b3          	sll	a3,a4,a0
    d8bc:	00f8d633          	srl	a2,a7,a5
    d8c0:	00a89533          	sll	a0,a7,a0
    d8c4:	8ed1                	or	a3,a3,a2
    d8c6:	00a03533          	snez	a0,a0
    d8ca:	8ec9                	or	a3,a3,a0
    d8cc:	0076f613          	andi	a2,a3,7
    d8d0:	00f75733          	srl	a4,a4,a5
    d8d4:	ce01                	beqz	a2,d8ec <__divdf3+0x4f4>
    d8d6:	00f6f793          	andi	a5,a3,15
    d8da:	4611                	li	a2,4
    d8dc:	00c78863          	beq	a5,a2,d8ec <__divdf3+0x4f4>
    d8e0:	00468793          	addi	a5,a3,4
    d8e4:	00d7b6b3          	sltu	a3,a5,a3
    d8e8:	9736                	add	a4,a4,a3
    d8ea:	86be                	mv	a3,a5
    d8ec:	00871793          	slli	a5,a4,0x8
    d8f0:	0407d863          	bgez	a5,d940 <__divdf3+0x548>
    d8f4:	4605                	li	a2,1
    d8f6:	4781                	li	a5,0
    d8f8:	4701                	li	a4,0
    d8fa:	b6f1                	j	d4c6 <__divdf3+0xce>
    d8fc:	8736                	mv	a4,a3
    d8fe:	bb7d                	j	d6bc <__divdf3+0x2c4>
    d900:	87b2                	mv	a5,a2
    d902:	b379                	j	d690 <__divdf3+0x298>
    d904:	46fd                	li	a3,31
    d906:	faf6d7e3          	bge	a3,a5,d8b4 <__divdf3+0x4bc>
    d90a:	5605                	li	a2,-31
    d90c:	8e09                	sub	a2,a2,a0
    d90e:	02000693          	li	a3,32
    d912:	00c75633          	srl	a2,a4,a2
    d916:	00d78863          	beq	a5,a3,d926 <__divdf3+0x52e>
    d91a:	43e48793          	addi	a5,s1,1086
    d91e:	00f717b3          	sll	a5,a4,a5
    d922:	00f8e8b3          	or	a7,a7,a5
    d926:	011036b3          	snez	a3,a7
    d92a:	8ed1                	or	a3,a3,a2
    d92c:	0076f613          	andi	a2,a3,7
    d930:	4781                	li	a5,0
    d932:	ce01                	beqz	a2,d94a <__divdf3+0x552>
    d934:	00f6f793          	andi	a5,a3,15
    d938:	4611                	li	a2,4
    d93a:	4701                	li	a4,0
    d93c:	fac792e3          	bne	a5,a2,d8e0 <__divdf3+0x4e8>
    d940:	00971793          	slli	a5,a4,0x9
    d944:	01d71613          	slli	a2,a4,0x1d
    d948:	83b1                	srli	a5,a5,0xc
    d94a:	0036d713          	srli	a4,a3,0x3
    d94e:	8f51                	or	a4,a4,a2
    d950:	4601                	li	a2,0
    d952:	be95                	j	d4c6 <__divdf3+0xce>
    d954:	f0cb70e3          	bgeu	s6,a2,d854 <__divdf3+0x45c>
    d958:	9b72                	add	s6,s6,t3
    d95a:	01cb3533          	sltu	a0,s6,t3
    d95e:	951a                	add	a0,a0,t1
    d960:	1779                	addi	a4,a4,-2
    d962:	96aa                	add	a3,a3,a0
    d964:	bb4d                	j	d716 <__divdf3+0x31e>
    d966:	88ae                	mv	a7,a1
    d968:	bbc5                	j	d758 <__divdf3+0x360>
    d96a:	86ae                	mv	a3,a1
    d96c:	bd31                	j	d788 <__divdf3+0x390>
    d96e:	001e1793          	slli	a5,t3,0x1
    d972:	01c7be33          	sltu	t3,a5,t3
    d976:	9372                	add	t1,t1,t3
    d978:	961a                	add	a2,a2,t1
    d97a:	18f9                	addi	a7,a7,-2
    d97c:	8e3e                	mv	t3,a5
    d97e:	e7f615e3          	bne	a2,t6,d7e8 <__divdf3+0x3f0>
    d982:	c6de07e3          	beq	t3,a3,d5f0 <__divdf3+0x1f8>
    d986:	0018e893          	ori	a7,a7,1
    d98a:	b19d                	j	d5f0 <__divdf3+0x1f8>
    d98c:	88be                	mv	a7,a5
    d98e:	fff60ae3          	beq	a2,t6,d982 <__divdf3+0x58a>
    d992:	bd99                	j	d7e8 <__divdf3+0x3f0>
    d994:	8836                	mv	a6,a3
    d996:	7ff00613          	li	a2,2047
    d99a:	4781                	li	a5,0
    d99c:	4701                	li	a4,0
    d99e:	b625                	j	d4c6 <__divdf3+0xce>
    d9a0:	fcde67e3          	bltu	t3,a3,d96e <__divdf3+0x576>
    d9a4:	88be                	mv	a7,a5
    d9a6:	fede10e3          	bne	t3,a3,d986 <__divdf3+0x58e>
    d9aa:	b199                	j	d5f0 <__divdf3+0x1f8>

0000d9ac <__eqdf2>:
    d9ac:	0145d713          	srli	a4,a1,0x14
    d9b0:	001007b7          	lui	a5,0x100
    d9b4:	17fd                	addi	a5,a5,-1
    d9b6:	0146d813          	srli	a6,a3,0x14
    d9ba:	7ff77713          	andi	a4,a4,2047
    d9be:	7ff00893          	li	a7,2047
    d9c2:	00b7fe33          	and	t3,a5,a1
    d9c6:	8eaa                	mv	t4,a0
    d9c8:	8ff5                	and	a5,a5,a3
    d9ca:	81fd                	srli	a1,a1,0x1f
    d9cc:	8f32                	mv	t5,a2
    d9ce:	7ff87813          	andi	a6,a6,2047
    d9d2:	82fd                	srli	a3,a3,0x1f
    d9d4:	01170b63          	beq	a4,a7,d9ea <__eqdf2+0x3e>
    d9d8:	4305                	li	t1,1
    d9da:	01180663          	beq	a6,a7,d9e6 <__eqdf2+0x3a>
    d9de:	01071463          	bne	a4,a6,d9e6 <__eqdf2+0x3a>
    d9e2:	00fe0d63          	beq	t3,a5,d9fc <__eqdf2+0x50>
    d9e6:	851a                	mv	a0,t1
    d9e8:	8082                	ret
    d9ea:	00ae68b3          	or	a7,t3,a0
    d9ee:	4305                	li	t1,1
    d9f0:	fe089be3          	bnez	a7,d9e6 <__eqdf2+0x3a>
    d9f4:	fee819e3          	bne	a6,a4,d9e6 <__eqdf2+0x3a>
    d9f8:	8fd1                	or	a5,a5,a2
    d9fa:	f7f5                	bnez	a5,d9e6 <__eqdf2+0x3a>
    d9fc:	4305                	li	t1,1
    d9fe:	ffee94e3          	bne	t4,t5,d9e6 <__eqdf2+0x3a>
    da02:	4301                	li	t1,0
    da04:	fed581e3          	beq	a1,a3,d9e6 <__eqdf2+0x3a>
    da08:	4305                	li	t1,1
    da0a:	ff71                	bnez	a4,d9e6 <__eqdf2+0x3a>
    da0c:	00ae6533          	or	a0,t3,a0
    da10:	00a03333          	snez	t1,a0
    da14:	bfc9                	j	d9e6 <__eqdf2+0x3a>

0000da16 <__gedf2>:
    da16:	0145d713          	srli	a4,a1,0x14
    da1a:	001007b7          	lui	a5,0x100
    da1e:	17fd                	addi	a5,a5,-1
    da20:	0146d813          	srli	a6,a3,0x14
    da24:	7ff77713          	andi	a4,a4,2047
    da28:	7ff00893          	li	a7,2047
    da2c:	00b7f333          	and	t1,a5,a1
    da30:	8e2a                	mv	t3,a0
    da32:	8ff5                	and	a5,a5,a3
    da34:	81fd                	srli	a1,a1,0x1f
    da36:	8eb2                	mv	t4,a2
    da38:	7ff87813          	andi	a6,a6,2047
    da3c:	82fd                	srli	a3,a3,0x1f
    da3e:	03170863          	beq	a4,a7,da6e <__gedf2+0x58>
    da42:	03180063          	beq	a6,a7,da62 <__gedf2+0x4c>
    da46:	eb0d                	bnez	a4,da78 <__gedf2+0x62>
    da48:	00a368b3          	or	a7,t1,a0
    da4c:	00081463          	bnez	a6,da54 <__gedf2+0x3e>
    da50:	8e5d                	or	a2,a2,a5
    da52:	ca29                	beqz	a2,daa4 <__gedf2+0x8e>
    da54:	04088563          	beqz	a7,da9e <__gedf2+0x88>
    da58:	02d58863          	beq	a1,a3,da88 <__gedf2+0x72>
    da5c:	4505                	li	a0,1
    da5e:	ed95                	bnez	a1,da9a <__gedf2+0x84>
    da60:	8082                	ret
    da62:	00c7e8b3          	or	a7,a5,a2
    da66:	fe0880e3          	beqz	a7,da46 <__gedf2+0x30>
    da6a:	5579                	li	a0,-2
    da6c:	8082                	ret
    da6e:	00a36533          	or	a0,t1,a0
    da72:	fd65                	bnez	a0,da6a <__gedf2+0x54>
    da74:	02e80c63          	beq	a6,a4,daac <__gedf2+0x96>
    da78:	00081463          	bnez	a6,da80 <__gedf2+0x6a>
    da7c:	8e5d                	or	a2,a2,a5
    da7e:	de79                	beqz	a2,da5c <__gedf2+0x46>
    da80:	fcd59ee3          	bne	a1,a3,da5c <__gedf2+0x46>
    da84:	fce84ce3          	blt	a6,a4,da5c <__gedf2+0x46>
    da88:	01074863          	blt	a4,a6,da98 <__gedf2+0x82>
    da8c:	fc67e8e3          	bltu	a5,t1,da5c <__gedf2+0x46>
    da90:	02f30363          	beq	t1,a5,dab6 <__gedf2+0xa0>
    da94:	00f37f63          	bgeu	t1,a5,dab2 <__gedf2+0x9c>
    da98:	e581                	bnez	a1,daa0 <__gedf2+0x8a>
    da9a:	557d                	li	a0,-1
    da9c:	8082                	ret
    da9e:	def5                	beqz	a3,da9a <__gedf2+0x84>
    daa0:	4505                	li	a0,1
    daa2:	8082                	ret
    daa4:	4501                	li	a0,0
    daa6:	fa089be3          	bnez	a7,da5c <__gedf2+0x46>
    daaa:	8082                	ret
    daac:	8e5d                	or	a2,a2,a5
    daae:	da69                	beqz	a2,da80 <__gedf2+0x6a>
    dab0:	bf6d                	j	da6a <__gedf2+0x54>
    dab2:	4501                	li	a0,0
    dab4:	8082                	ret
    dab6:	fbcee3e3          	bltu	t4,t3,da5c <__gedf2+0x46>
    daba:	4501                	li	a0,0
    dabc:	fbde72e3          	bgeu	t3,t4,da60 <__gedf2+0x4a>
    dac0:	f1e5                	bnez	a1,daa0 <__gedf2+0x8a>
    dac2:	bfe1                	j	da9a <__gedf2+0x84>

0000dac4 <__ledf2>:
    dac4:	0145d713          	srli	a4,a1,0x14
    dac8:	001007b7          	lui	a5,0x100
    dacc:	17fd                	addi	a5,a5,-1
    dace:	0146d813          	srli	a6,a3,0x14
    dad2:	7ff77713          	andi	a4,a4,2047
    dad6:	7ff00893          	li	a7,2047
    dada:	00b7fe33          	and	t3,a5,a1
    dade:	8eaa                	mv	t4,a0
    dae0:	8ff5                	and	a5,a5,a3
    dae2:	81fd                	srli	a1,a1,0x1f
    dae4:	8f32                	mv	t5,a2
    dae6:	7ff87813          	andi	a6,a6,2047
    daea:	82fd                	srli	a3,a3,0x1f
    daec:	03170e63          	beq	a4,a7,db28 <__ledf2+0x64>
    daf0:	01180d63          	beq	a6,a7,db0a <__ledf2+0x46>
    daf4:	e329                	bnez	a4,db36 <__ledf2+0x72>
    daf6:	00ae68b3          	or	a7,t3,a0
    dafa:	00081f63          	bnez	a6,db18 <__ledf2+0x54>
    dafe:	8e5d                	or	a2,a2,a5
    db00:	ee01                	bnez	a2,db18 <__ledf2+0x54>
    db02:	4301                	li	t1,0
    db04:	04088c63          	beqz	a7,db5c <__ledf2+0x98>
    db08:	a821                	j	db20 <__ledf2+0x5c>
    db0a:	00c7e8b3          	or	a7,a5,a2
    db0e:	4309                	li	t1,2
    db10:	04089663          	bnez	a7,db5c <__ledf2+0x98>
    db14:	d36d                	beqz	a4,daf6 <__ledf2+0x32>
    db16:	a005                	j	db36 <__ledf2+0x72>
    db18:	04088463          	beqz	a7,db60 <__ledf2+0x9c>
    db1c:	02d58563          	beq	a1,a3,db46 <__ledf2+0x82>
    db20:	4305                	li	t1,1
    db22:	cd8d                	beqz	a1,db5c <__ledf2+0x98>
    db24:	537d                	li	t1,-1
    db26:	a81d                	j	db5c <__ledf2+0x98>
    db28:	00ae68b3          	or	a7,t3,a0
    db2c:	4309                	li	t1,2
    db2e:	02089763          	bnez	a7,db5c <__ledf2+0x98>
    db32:	02e80a63          	beq	a6,a4,db66 <__ledf2+0xa2>
    db36:	00081463          	bnez	a6,db3e <__ledf2+0x7a>
    db3a:	8e5d                	or	a2,a2,a5
    db3c:	d275                	beqz	a2,db20 <__ledf2+0x5c>
    db3e:	fed591e3          	bne	a1,a3,db20 <__ledf2+0x5c>
    db42:	fce84fe3          	blt	a6,a4,db20 <__ledf2+0x5c>
    db46:	01074963          	blt	a4,a6,db58 <__ledf2+0x94>
    db4a:	fdc7ebe3          	bltu	a5,t3,db20 <__ledf2+0x5c>
    db4e:	00fe0f63          	beq	t3,a5,db6c <__ledf2+0xa8>
    db52:	4301                	li	t1,0
    db54:	00fe7463          	bgeu	t3,a5,db5c <__ledf2+0x98>
    db58:	d5f1                	beqz	a1,db24 <__ledf2+0x60>
    db5a:	4305                	li	t1,1
    db5c:	851a                	mv	a0,t1
    db5e:	8082                	ret
    db60:	feed                	bnez	a3,db5a <__ledf2+0x96>
    db62:	537d                	li	t1,-1
    db64:	bfe5                	j	db5c <__ledf2+0x98>
    db66:	8e5d                	or	a2,a2,a5
    db68:	da79                	beqz	a2,db3e <__ledf2+0x7a>
    db6a:	bfcd                	j	db5c <__ledf2+0x98>
    db6c:	fbdf6ae3          	bltu	t5,t4,db20 <__ledf2+0x5c>
    db70:	4301                	li	t1,0
    db72:	ffeef5e3          	bgeu	t4,t5,db5c <__ledf2+0x98>
    db76:	f1f5                	bnez	a1,db5a <__ledf2+0x96>
    db78:	b775                	j	db24 <__ledf2+0x60>

0000db7a <__muldf3>:
    db7a:	7139                	addi	sp,sp,-64
    db7c:	d84a                	sw	s2,48(sp)
    db7e:	0145d913          	srli	s2,a1,0x14
    db82:	d64e                	sw	s3,44(sp)
    db84:	d452                	sw	s4,40(sp)
    db86:	d256                	sw	s5,36(sp)
    db88:	00c59993          	slli	s3,a1,0xc
    db8c:	de06                	sw	ra,60(sp)
    db8e:	dc22                	sw	s0,56(sp)
    db90:	da26                	sw	s1,52(sp)
    db92:	d05a                	sw	s6,32(sp)
    db94:	ce5e                	sw	s7,28(sp)
    db96:	7ff97913          	andi	s2,s2,2047
    db9a:	8a2a                	mv	s4,a0
    db9c:	00c9d993          	srli	s3,s3,0xc
    dba0:	01f5da93          	srli	s5,a1,0x1f
    dba4:	0e090d63          	beqz	s2,dc9e <__muldf3+0x124>
    dba8:	7ff00793          	li	a5,2047
    dbac:	18f90663          	beq	s2,a5,dd38 <__muldf3+0x1be>
    dbb0:	01d55413          	srli	s0,a0,0x1d
    dbb4:	098e                	slli	s3,s3,0x3
    dbb6:	013469b3          	or	s3,s0,s3
    dbba:	00800437          	lui	s0,0x800
    dbbe:	0089e433          	or	s0,s3,s0
    dbc2:	00351493          	slli	s1,a0,0x3
    dbc6:	c0190913          	addi	s2,s2,-1023
    dbca:	4981                	li	s3,0
    dbcc:	4b81                	li	s7,0
    dbce:	0146d713          	srli	a4,a3,0x14
    dbd2:	00c69a13          	slli	s4,a3,0xc
    dbd6:	7ff77713          	andi	a4,a4,2047
    dbda:	85b2                	mv	a1,a2
    dbdc:	00ca5a13          	srli	s4,s4,0xc
    dbe0:	01f6db13          	srli	s6,a3,0x1f
    dbe4:	10070b63          	beqz	a4,dcfa <__muldf3+0x180>
    dbe8:	7ff00793          	li	a5,2047
    dbec:	04f70363          	beq	a4,a5,dc32 <__muldf3+0xb8>
    dbf0:	01d65793          	srli	a5,a2,0x1d
    dbf4:	0a0e                	slli	s4,s4,0x3
    dbf6:	0147ea33          	or	s4,a5,s4
    dbfa:	c0170713          	addi	a4,a4,-1023
    dbfe:	008007b7          	lui	a5,0x800
    dc02:	00fa67b3          	or	a5,s4,a5
    dc06:	00361593          	slli	a1,a2,0x3
    dc0a:	993a                	add	s2,s2,a4
    dc0c:	4881                	li	a7,0
    dc0e:	016ac733          	xor	a4,s5,s6
    dc12:	46bd                	li	a3,15
    dc14:	853a                	mv	a0,a4
    dc16:	00190813          	addi	a6,s2,1
    dc1a:	1736e863          	bltu	a3,s3,dd8a <__muldf3+0x210>
    dc1e:	00001617          	auipc	a2,0x1
    dc22:	46e60613          	addi	a2,a2,1134 # f08c <app_task_table+0xb4>
    dc26:	098a                	slli	s3,s3,0x2
    dc28:	99b2                	add	s3,s3,a2
    dc2a:	0009a683          	lw	a3,0(s3)
    dc2e:	96b2                	add	a3,a3,a2
    dc30:	8682                	jr	a3
    dc32:	00ca67b3          	or	a5,s4,a2
    dc36:	7ff90913          	addi	s2,s2,2047
    dc3a:	12079963          	bnez	a5,dd6c <__muldf3+0x1f2>
    dc3e:	0029e993          	ori	s3,s3,2
    dc42:	4581                	li	a1,0
    dc44:	4889                	li	a7,2
    dc46:	b7e1                	j	dc0e <__muldf3+0x94>
    dc48:	4701                	li	a4,0
    dc4a:	7ff00793          	li	a5,2047
    dc4e:	00080437          	lui	s0,0x80
    dc52:	4481                	li	s1,0
    dc54:	0432                	slli	s0,s0,0xc
    dc56:	07d2                	slli	a5,a5,0x14
    dc58:	8031                	srli	s0,s0,0xc
    dc5a:	077e                	slli	a4,a4,0x1f
    dc5c:	8c5d                	or	s0,s0,a5
    dc5e:	8c59                	or	s0,s0,a4
    dc60:	85a2                	mv	a1,s0
    dc62:	50f2                	lw	ra,60(sp)
    dc64:	5462                	lw	s0,56(sp)
    dc66:	8526                	mv	a0,s1
    dc68:	5942                	lw	s2,48(sp)
    dc6a:	54d2                	lw	s1,52(sp)
    dc6c:	59b2                	lw	s3,44(sp)
    dc6e:	5a22                	lw	s4,40(sp)
    dc70:	5a92                	lw	s5,36(sp)
    dc72:	5b02                	lw	s6,32(sp)
    dc74:	4bf2                	lw	s7,28(sp)
    dc76:	6121                	addi	sp,sp,64
    dc78:	8082                	ret
    dc7a:	855a                	mv	a0,s6
    dc7c:	843e                	mv	s0,a5
    dc7e:	84ae                	mv	s1,a1
    dc80:	8bc6                	mv	s7,a7
    dc82:	4789                	li	a5,2
    dc84:	0efb8d63          	beq	s7,a5,dd7e <__muldf3+0x204>
    dc88:	478d                	li	a5,3
    dc8a:	fafb8fe3          	beq	s7,a5,dc48 <__muldf3+0xce>
    dc8e:	4785                	li	a5,1
    dc90:	872a                	mv	a4,a0
    dc92:	38fb9e63          	bne	s7,a5,e02e <__muldf3+0x4b4>
    dc96:	4781                	li	a5,0
    dc98:	4401                	li	s0,0
    dc9a:	4481                	li	s1,0
    dc9c:	bf65                	j	dc54 <__muldf3+0xda>
    dc9e:	00a9e433          	or	s0,s3,a0
    dca2:	c061                	beqz	s0,dd62 <__muldf3+0x1e8>
    dca4:	c636                	sw	a3,12(sp)
    dca6:	c432                	sw	a2,8(sp)
    dca8:	2a098c63          	beqz	s3,df60 <__muldf3+0x3e6>
    dcac:	854e                	mv	a0,s3
    dcae:	3d3000ef          	jal	ra,e880 <__clzsi2>
    dcb2:	4622                	lw	a2,8(sp)
    dcb4:	46b2                	lw	a3,12(sp)
    dcb6:	87aa                	mv	a5,a0
    dcb8:	ff550713          	addi	a4,a0,-11
    dcbc:	4475                	li	s0,29
    dcbe:	ff878493          	addi	s1,a5,-8 # 7ffff8 <_data_lma+0x7f0dec>
    dcc2:	8c19                	sub	s0,s0,a4
    dcc4:	009999b3          	sll	s3,s3,s1
    dcc8:	008a5433          	srl	s0,s4,s0
    dccc:	01346433          	or	s0,s0,s3
    dcd0:	009a14b3          	sll	s1,s4,s1
    dcd4:	0146d713          	srli	a4,a3,0x14
    dcd8:	c0d00913          	li	s2,-1011
    dcdc:	00c69a13          	slli	s4,a3,0xc
    dce0:	7ff77713          	andi	a4,a4,2047
    dce4:	40f90933          	sub	s2,s2,a5
    dce8:	4981                	li	s3,0
    dcea:	4b81                	li	s7,0
    dcec:	85b2                	mv	a1,a2
    dcee:	00ca5a13          	srli	s4,s4,0xc
    dcf2:	01f6db13          	srli	s6,a3,0x1f
    dcf6:	ee0719e3          	bnez	a4,dbe8 <__muldf3+0x6e>
    dcfa:	00ca67b3          	or	a5,s4,a2
    dcfe:	c7b1                	beqz	a5,dd4a <__muldf3+0x1d0>
    dd00:	220a0f63          	beqz	s4,df3e <__muldf3+0x3c4>
    dd04:	8552                	mv	a0,s4
    dd06:	c432                	sw	a2,8(sp)
    dd08:	379000ef          	jal	ra,e880 <__clzsi2>
    dd0c:	4622                	lw	a2,8(sp)
    dd0e:	872a                	mv	a4,a0
    dd10:	ff550693          	addi	a3,a0,-11
    dd14:	47f5                	li	a5,29
    dd16:	ff870593          	addi	a1,a4,-8
    dd1a:	8f95                	sub	a5,a5,a3
    dd1c:	00ba1a33          	sll	s4,s4,a1
    dd20:	00f657b3          	srl	a5,a2,a5
    dd24:	0147e7b3          	or	a5,a5,s4
    dd28:	00b615b3          	sll	a1,a2,a1
    dd2c:	40e90933          	sub	s2,s2,a4
    dd30:	c0d90913          	addi	s2,s2,-1011
    dd34:	4881                	li	a7,0
    dd36:	bde1                	j	dc0e <__muldf3+0x94>
    dd38:	00a9e433          	or	s0,s3,a0
    dd3c:	ec01                	bnez	s0,dd54 <__muldf3+0x1da>
    dd3e:	49a1                	li	s3,8
    dd40:	4481                	li	s1,0
    dd42:	7ff00913          	li	s2,2047
    dd46:	4b89                	li	s7,2
    dd48:	b559                	j	dbce <__muldf3+0x54>
    dd4a:	0019e993          	ori	s3,s3,1
    dd4e:	4581                	li	a1,0
    dd50:	4885                	li	a7,1
    dd52:	bd75                	j	dc0e <__muldf3+0x94>
    dd54:	844e                	mv	s0,s3
    dd56:	84aa                	mv	s1,a0
    dd58:	49b1                	li	s3,12
    dd5a:	7ff00913          	li	s2,2047
    dd5e:	4b8d                	li	s7,3
    dd60:	b5bd                	j	dbce <__muldf3+0x54>
    dd62:	4991                	li	s3,4
    dd64:	4481                	li	s1,0
    dd66:	4901                	li	s2,0
    dd68:	4b85                	li	s7,1
    dd6a:	b595                	j	dbce <__muldf3+0x54>
    dd6c:	0039e993          	ori	s3,s3,3
    dd70:	87d2                	mv	a5,s4
    dd72:	488d                	li	a7,3
    dd74:	bd69                	j	dc0e <__muldf3+0x94>
    dd76:	4789                	li	a5,2
    dd78:	8556                	mv	a0,s5
    dd7a:	f0fb97e3          	bne	s7,a5,dc88 <__muldf3+0x10e>
    dd7e:	872a                	mv	a4,a0
    dd80:	7ff00793          	li	a5,2047
    dd84:	4401                	li	s0,0
    dd86:	4481                	li	s1,0
    dd88:	b5f1                	j	dc54 <__muldf3+0xda>
    dd8a:	6ec1                	lui	t4,0x10
    dd8c:	fffe8613          	addi	a2,t4,-1 # ffff <_data_lma+0xdf3>
    dd90:	0104d693          	srli	a3,s1,0x10
    dd94:	0105de13          	srli	t3,a1,0x10
    dd98:	8cf1                	and	s1,s1,a2
    dd9a:	8df1                	and	a1,a1,a2
    dd9c:	02958633          	mul	a2,a1,s1
    dda0:	02b68333          	mul	t1,a3,a1
    dda4:	01065893          	srli	a7,a2,0x10
    dda8:	029e0533          	mul	a0,t3,s1
    ddac:	951a                	add	a0,a0,t1
    ddae:	98aa                	add	a7,a7,a0
    ddb0:	03c682b3          	mul	t0,a3,t3
    ddb4:	0068f363          	bgeu	a7,t1,ddba <__muldf3+0x240>
    ddb8:	92f6                	add	t0,t0,t4
    ddba:	6fc1                	lui	t6,0x10
    ddbc:	ffff8313          	addi	t1,t6,-1 # ffff <_data_lma+0xdf3>
    ddc0:	0067f533          	and	a0,a5,t1
    ddc4:	0107d393          	srli	t2,a5,0x10
    ddc8:	0068f7b3          	and	a5,a7,t1
    ddcc:	07c2                	slli	a5,a5,0x10
    ddce:	00667333          	and	t1,a2,t1
    ddd2:	933e                	add	t1,t1,a5
    ddd4:	02950633          	mul	a2,a0,s1
    ddd8:	0108d893          	srli	a7,a7,0x10
    dddc:	02a687b3          	mul	a5,a3,a0
    dde0:	01065f13          	srli	t5,a2,0x10
    dde4:	029384b3          	mul	s1,t2,s1
    dde8:	94be                	add	s1,s1,a5
    ddea:	94fa                	add	s1,s1,t5
    ddec:	02768eb3          	mul	t4,a3,t2
    ddf0:	00f4f363          	bgeu	s1,a5,ddf6 <__muldf3+0x27c>
    ddf4:	9efe                	add	t4,t4,t6
    ddf6:	6a41                	lui	s4,0x10
    ddf8:	fffa0793          	addi	a5,s4,-1 # ffff <_data_lma+0xdf3>
    ddfc:	01045f93          	srli	t6,s0,0x10
    de00:	00f476b3          	and	a3,s0,a5
    de04:	00f4f9b3          	and	s3,s1,a5
    de08:	8e7d                	and	a2,a2,a5
    de0a:	80c1                	srli	s1,s1,0x10
    de0c:	02d58433          	mul	s0,a1,a3
    de10:	09c2                	slli	s3,s3,0x10
    de12:	01d48f33          	add	t5,s1,t4
    de16:	99b2                	add	s3,s3,a2
    de18:	98ce                	add	a7,a7,s3
    de1a:	02de07b3          	mul	a5,t3,a3
    de1e:	01045e93          	srli	t4,s0,0x10
    de22:	02bf85b3          	mul	a1,t6,a1
    de26:	97ae                	add	a5,a5,a1
    de28:	9ebe                	add	t4,t4,a5
    de2a:	03fe0e33          	mul	t3,t3,t6
    de2e:	00bef363          	bgeu	t4,a1,de34 <__muldf3+0x2ba>
    de32:	9e52                	add	t3,t3,s4
    de34:	67c1                	lui	a5,0x10
    de36:	fff78593          	addi	a1,a5,-1 # ffff <_data_lma+0xdf3>
    de3a:	00bef633          	and	a2,t4,a1
    de3e:	8c6d                	and	s0,s0,a1
    de40:	0642                	slli	a2,a2,0x10
    de42:	9622                	add	a2,a2,s0
    de44:	010ede93          	srli	t4,t4,0x10
    de48:	02d505b3          	mul	a1,a0,a3
    de4c:	9e76                	add	t3,t3,t4
    de4e:	02af8533          	mul	a0,t6,a0
    de52:	0105d413          	srli	s0,a1,0x10
    de56:	02d386b3          	mul	a3,t2,a3
    de5a:	96aa                	add	a3,a3,a0
    de5c:	96a2                	add	a3,a3,s0
    de5e:	03f38fb3          	mul	t6,t2,t6
    de62:	00a6f363          	bgeu	a3,a0,de68 <__muldf3+0x2ee>
    de66:	9fbe                	add	t6,t6,a5
    de68:	6541                	lui	a0,0x10
    de6a:	157d                	addi	a0,a0,-1
    de6c:	00a6f7b3          	and	a5,a3,a0
    de70:	07c2                	slli	a5,a5,0x10
    de72:	8d6d                	and	a0,a0,a1
    de74:	97aa                	add	a5,a5,a0
    de76:	005885b3          	add	a1,a7,t0
    de7a:	0135b9b3          	sltu	s3,a1,s3
    de7e:	97fa                	add	a5,a5,t5
    de80:	95b2                	add	a1,a1,a2
    de82:	01378433          	add	s0,a5,s3
    de86:	00c5b633          	sltu	a2,a1,a2
    de8a:	01c40eb3          	add	t4,s0,t3
    de8e:	00ce8533          	add	a0,t4,a2
    de92:	01343433          	sltu	s0,s0,s3
    de96:	01e7b7b3          	sltu	a5,a5,t5
    de9a:	8fc1                	or	a5,a5,s0
    de9c:	01cebe33          	sltu	t3,t4,t3
    dea0:	0106d413          	srli	s0,a3,0x10
    dea4:	00c53633          	sltu	a2,a0,a2
    dea8:	943e                	add	s0,s0,a5
    deaa:	00ce6633          	or	a2,t3,a2
    deae:	00959493          	slli	s1,a1,0x9
    deb2:	9432                	add	s0,s0,a2
    deb4:	947e                	add	s0,s0,t6
    deb6:	0064e4b3          	or	s1,s1,t1
    deba:	0426                	slli	s0,s0,0x9
    debc:	01755693          	srli	a3,a0,0x17
    dec0:	009034b3          	snez	s1,s1
    dec4:	81dd                	srli	a1,a1,0x17
    dec6:	00951793          	slli	a5,a0,0x9
    deca:	8ccd                	or	s1,s1,a1
    decc:	8c55                	or	s0,s0,a3
    dece:	8cdd                	or	s1,s1,a5
    ded0:	00741793          	slli	a5,s0,0x7
    ded4:	0007db63          	bgez	a5,deea <__muldf3+0x370>
    ded8:	0014d793          	srli	a5,s1,0x1
    dedc:	8885                	andi	s1,s1,1
    dede:	01f41693          	slli	a3,s0,0x1f
    dee2:	8cdd                	or	s1,s1,a5
    dee4:	8cd5                	or	s1,s1,a3
    dee6:	8005                	srli	s0,s0,0x1
    dee8:	8942                	mv	s2,a6
    deea:	3ff90793          	addi	a5,s2,1023
    deee:	08f05963          	blez	a5,df80 <__muldf3+0x406>
    def2:	0074f693          	andi	a3,s1,7
    def6:	ce81                	beqz	a3,df0e <__muldf3+0x394>
    def8:	00f4f693          	andi	a3,s1,15
    defc:	4611                	li	a2,4
    defe:	00c68863          	beq	a3,a2,df0e <__muldf3+0x394>
    df02:	00448693          	addi	a3,s1,4
    df06:	0096b4b3          	sltu	s1,a3,s1
    df0a:	9426                	add	s0,s0,s1
    df0c:	84b6                	mv	s1,a3
    df0e:	00741693          	slli	a3,s0,0x7
    df12:	0006d863          	bgez	a3,df22 <__muldf3+0x3a8>
    df16:	ff0007b7          	lui	a5,0xff000
    df1a:	17fd                	addi	a5,a5,-1
    df1c:	8c7d                	and	s0,s0,a5
    df1e:	40090793          	addi	a5,s2,1024
    df22:	7fe00693          	li	a3,2046
    df26:	0ef6cf63          	blt	a3,a5,e024 <__muldf3+0x4aa>
    df2a:	0034d693          	srli	a3,s1,0x3
    df2e:	01d41493          	slli	s1,s0,0x1d
    df32:	0426                	slli	s0,s0,0x9
    df34:	8cd5                	or	s1,s1,a3
    df36:	8031                	srli	s0,s0,0xc
    df38:	7ff7f793          	andi	a5,a5,2047
    df3c:	bb21                	j	dc54 <__muldf3+0xda>
    df3e:	8532                	mv	a0,a2
    df40:	c432                	sw	a2,8(sp)
    df42:	13f000ef          	jal	ra,e880 <__clzsi2>
    df46:	01550693          	addi	a3,a0,21 # 10015 <_data_lma+0xe09>
    df4a:	47f1                	li	a5,28
    df4c:	02050713          	addi	a4,a0,32
    df50:	4622                	lw	a2,8(sp)
    df52:	dcd7d1e3          	bge	a5,a3,dd14 <__muldf3+0x19a>
    df56:	1561                	addi	a0,a0,-8
    df58:	00a617b3          	sll	a5,a2,a0
    df5c:	4581                	li	a1,0
    df5e:	b3f9                	j	dd2c <__muldf3+0x1b2>
    df60:	121000ef          	jal	ra,e880 <__clzsi2>
    df64:	01550713          	addi	a4,a0,21
    df68:	45f1                	li	a1,28
    df6a:	02050793          	addi	a5,a0,32
    df6e:	4622                	lw	a2,8(sp)
    df70:	46b2                	lw	a3,12(sp)
    df72:	d4e5d5e3          	bge	a1,a4,dcbc <__muldf3+0x142>
    df76:	1561                	addi	a0,a0,-8
    df78:	00aa1433          	sll	s0,s4,a0
    df7c:	4481                	li	s1,0
    df7e:	bb99                	j	dcd4 <__muldf3+0x15a>
    df80:	4685                	li	a3,1
    df82:	8e9d                	sub	a3,a3,a5
    df84:	e7b1                	bnez	a5,dfd0 <__muldf3+0x456>
    df86:	41e90913          	addi	s2,s2,1054
    df8a:	012497b3          	sll	a5,s1,s2
    df8e:	00d4d4b3          	srl	s1,s1,a3
    df92:	01241933          	sll	s2,s0,s2
    df96:	00f037b3          	snez	a5,a5
    df9a:	009964b3          	or	s1,s2,s1
    df9e:	8cdd                	or	s1,s1,a5
    dfa0:	0074f793          	andi	a5,s1,7
    dfa4:	00d456b3          	srl	a3,s0,a3
    dfa8:	cf81                	beqz	a5,dfc0 <__muldf3+0x446>
    dfaa:	00f4f793          	andi	a5,s1,15
    dfae:	4611                	li	a2,4
    dfb0:	00c78863          	beq	a5,a2,dfc0 <__muldf3+0x446>
    dfb4:	00448793          	addi	a5,s1,4
    dfb8:	0097b4b3          	sltu	s1,a5,s1
    dfbc:	96a6                	add	a3,a3,s1
    dfbe:	84be                	mv	s1,a5
    dfc0:	00869793          	slli	a5,a3,0x8
    dfc4:	0407d863          	bgez	a5,e014 <__muldf3+0x49a>
    dfc8:	4785                	li	a5,1
    dfca:	4401                	li	s0,0
    dfcc:	4481                	li	s1,0
    dfce:	b159                	j	dc54 <__muldf3+0xda>
    dfd0:	03800613          	li	a2,56
    dfd4:	ccd641e3          	blt	a2,a3,dc96 <__muldf3+0x11c>
    dfd8:	467d                	li	a2,31
    dfda:	fad656e3          	bge	a2,a3,df86 <__muldf3+0x40c>
    dfde:	5605                	li	a2,-31
    dfe0:	40f607b3          	sub	a5,a2,a5
    dfe4:	02000593          	li	a1,32
    dfe8:	00f45633          	srl	a2,s0,a5
    dfec:	00b68763          	beq	a3,a1,dffa <__muldf3+0x480>
    dff0:	43e90913          	addi	s2,s2,1086
    dff4:	012417b3          	sll	a5,s0,s2
    dff8:	8cdd                	or	s1,s1,a5
    dffa:	009034b3          	snez	s1,s1
    dffe:	8cd1                	or	s1,s1,a2
    e000:	0074f693          	andi	a3,s1,7
    e004:	4401                	li	s0,0
    e006:	ca99                	beqz	a3,e01c <__muldf3+0x4a2>
    e008:	00f4f793          	andi	a5,s1,15
    e00c:	4611                	li	a2,4
    e00e:	4681                	li	a3,0
    e010:	fac792e3          	bne	a5,a2,dfb4 <__muldf3+0x43a>
    e014:	00969413          	slli	s0,a3,0x9
    e018:	8031                	srli	s0,s0,0xc
    e01a:	06f6                	slli	a3,a3,0x1d
    e01c:	808d                	srli	s1,s1,0x3
    e01e:	8cd5                	or	s1,s1,a3
    e020:	4781                	li	a5,0
    e022:	b90d                	j	dc54 <__muldf3+0xda>
    e024:	7ff00793          	li	a5,2047
    e028:	4401                	li	s0,0
    e02a:	4481                	li	s1,0
    e02c:	b125                	j	dc54 <__muldf3+0xda>
    e02e:	8942                	mv	s2,a6
    e030:	bd6d                	j	deea <__muldf3+0x370>

0000e032 <__subdf3>:
    e032:	00100737          	lui	a4,0x100
    e036:	177d                	addi	a4,a4,-1
    e038:	1101                	addi	sp,sp,-32
    e03a:	00b77333          	and	t1,a4,a1
    e03e:	0146d893          	srli	a7,a3,0x14
    e042:	8f75                	and	a4,a4,a3
    e044:	01d65e93          	srli	t4,a2,0x1d
    e048:	cc22                	sw	s0,24(sp)
    e04a:	ca26                	sw	s1,20(sp)
    e04c:	030e                	slli	t1,t1,0x3
    e04e:	0145d493          	srli	s1,a1,0x14
    e052:	01d55793          	srli	a5,a0,0x1d
    e056:	070e                	slli	a4,a4,0x3
    e058:	ce06                	sw	ra,28(sp)
    e05a:	c84a                	sw	s2,16(sp)
    e05c:	c64e                	sw	s3,12(sp)
    e05e:	7ff8f893          	andi	a7,a7,2047
    e062:	7ff00e13          	li	t3,2047
    e066:	00eee733          	or	a4,t4,a4
    e06a:	7ff4f493          	andi	s1,s1,2047
    e06e:	01f5d413          	srli	s0,a1,0x1f
    e072:	0067e333          	or	t1,a5,t1
    e076:	00351f13          	slli	t5,a0,0x3
    e07a:	82fd                	srli	a3,a3,0x1f
    e07c:	00361e93          	slli	t4,a2,0x3
    e080:	17c88f63          	beq	a7,t3,e1fe <__subdf3+0x1cc>
    e084:	0016c693          	xori	a3,a3,1
    e088:	411485b3          	sub	a1,s1,a7
    e08c:	12d40463          	beq	s0,a3,e1b4 <__subdf3+0x182>
    e090:	18b05063          	blez	a1,e210 <__subdf3+0x1de>
    e094:	1a088a63          	beqz	a7,e248 <__subdf3+0x216>
    e098:	008007b7          	lui	a5,0x800
    e09c:	8f5d                	or	a4,a4,a5
    e09e:	57c48f63          	beq	s1,t3,e61c <__subdf3+0x5ea>
    e0a2:	03800793          	li	a5,56
    e0a6:	34b7c263          	blt	a5,a1,e3ea <__subdf3+0x3b8>
    e0aa:	47fd                	li	a5,31
    e0ac:	48b7c363          	blt	a5,a1,e532 <__subdf3+0x500>
    e0b0:	02000793          	li	a5,32
    e0b4:	8f8d                	sub	a5,a5,a1
    e0b6:	00bed9b3          	srl	s3,t4,a1
    e0ba:	00f71833          	sll	a6,a4,a5
    e0be:	00fe9eb3          	sll	t4,t4,a5
    e0c2:	01386833          	or	a6,a6,s3
    e0c6:	00b75733          	srl	a4,a4,a1
    e0ca:	01d039b3          	snez	s3,t4
    e0ce:	01386833          	or	a6,a6,s3
    e0d2:	40e30333          	sub	t1,t1,a4
    e0d6:	410f09b3          	sub	s3,t5,a6
    e0da:	013f37b3          	sltu	a5,t5,s3
    e0de:	40f30633          	sub	a2,t1,a5
    e0e2:	00861793          	slli	a5,a2,0x8
    e0e6:	2407d263          	bgez	a5,e32a <__subdf3+0x2f8>
    e0ea:	00800937          	lui	s2,0x800
    e0ee:	197d                	addi	s2,s2,-1
    e0f0:	01267933          	and	s2,a2,s2
    e0f4:	2c090e63          	beqz	s2,e3d0 <__subdf3+0x39e>
    e0f8:	854a                	mv	a0,s2
    e0fa:	2759                	jal	e880 <__clzsi2>
    e0fc:	ff850713          	addi	a4,a0,-8
    e100:	02000793          	li	a5,32
    e104:	8f99                	sub	a5,a5,a4
    e106:	00f9d7b3          	srl	a5,s3,a5
    e10a:	00e91633          	sll	a2,s2,a4
    e10e:	8fd1                	or	a5,a5,a2
    e110:	00e999b3          	sll	s3,s3,a4
    e114:	2a974463          	blt	a4,s1,e3bc <__subdf3+0x38a>
    e118:	8f05                	sub	a4,a4,s1
    e11a:	00170613          	addi	a2,a4,1 # 100001 <_data_lma+0xf0df5>
    e11e:	46fd                	li	a3,31
    e120:	3ac6c463          	blt	a3,a2,e4c8 <__subdf3+0x496>
    e124:	02000713          	li	a4,32
    e128:	8f11                	sub	a4,a4,a2
    e12a:	00c9d6b3          	srl	a3,s3,a2
    e12e:	00e99833          	sll	a6,s3,a4
    e132:	00e79733          	sll	a4,a5,a4
    e136:	8f55                	or	a4,a4,a3
    e138:	01003833          	snez	a6,a6
    e13c:	010769b3          	or	s3,a4,a6
    e140:	00c7d633          	srl	a2,a5,a2
    e144:	4481                	li	s1,0
    e146:	0079f793          	andi	a5,s3,7
    e14a:	cf81                	beqz	a5,e162 <__subdf3+0x130>
    e14c:	00f9f693          	andi	a3,s3,15
    e150:	4791                	li	a5,4
    e152:	00f68863          	beq	a3,a5,e162 <__subdf3+0x130>
    e156:	00498693          	addi	a3,s3,4
    e15a:	0136b833          	sltu	a6,a3,s3
    e15e:	9642                	add	a2,a2,a6
    e160:	89b6                	mv	s3,a3
    e162:	00861793          	slli	a5,a2,0x8
    e166:	1c07d663          	bgez	a5,e332 <__subdf3+0x300>
    e16a:	00148713          	addi	a4,s1,1
    e16e:	7ff00793          	li	a5,2047
    e172:	8805                	andi	s0,s0,1
    e174:	20f70663          	beq	a4,a5,e380 <__subdf3+0x34e>
    e178:	ff8007b7          	lui	a5,0xff800
    e17c:	17fd                	addi	a5,a5,-1
    e17e:	8ff1                	and	a5,a5,a2
    e180:	01d79813          	slli	a6,a5,0x1d
    e184:	0039d993          	srli	s3,s3,0x3
    e188:	07a6                	slli	a5,a5,0x9
    e18a:	01386833          	or	a6,a6,s3
    e18e:	83b1                	srli	a5,a5,0xc
    e190:	7ff77713          	andi	a4,a4,2047
    e194:	00c79693          	slli	a3,a5,0xc
    e198:	0752                	slli	a4,a4,0x14
    e19a:	82b1                	srli	a3,a3,0xc
    e19c:	047e                	slli	s0,s0,0x1f
    e19e:	8ed9                	or	a3,a3,a4
    e1a0:	8ec1                	or	a3,a3,s0
    e1a2:	40f2                	lw	ra,28(sp)
    e1a4:	4462                	lw	s0,24(sp)
    e1a6:	44d2                	lw	s1,20(sp)
    e1a8:	4942                	lw	s2,16(sp)
    e1aa:	49b2                	lw	s3,12(sp)
    e1ac:	8542                	mv	a0,a6
    e1ae:	85b6                	mv	a1,a3
    e1b0:	6105                	addi	sp,sp,32
    e1b2:	8082                	ret
    e1b4:	0ab05663          	blez	a1,e260 <__subdf3+0x22e>
    e1b8:	12088a63          	beqz	a7,e2ec <__subdf3+0x2ba>
    e1bc:	008007b7          	lui	a5,0x800
    e1c0:	8f5d                	or	a4,a4,a5
    e1c2:	2dc48663          	beq	s1,t3,e48e <__subdf3+0x45c>
    e1c6:	03800793          	li	a5,56
    e1ca:	18b7c763          	blt	a5,a1,e358 <__subdf3+0x326>
    e1ce:	47fd                	li	a5,31
    e1d0:	3cb7d163          	bge	a5,a1,e592 <__subdf3+0x560>
    e1d4:	fe058813          	addi	a6,a1,-32 # ffe0 <_data_lma+0xdd4>
    e1d8:	02000793          	li	a5,32
    e1dc:	010759b3          	srl	s3,a4,a6
    e1e0:	00f58a63          	beq	a1,a5,e1f4 <__subdf3+0x1c2>
    e1e4:	04000793          	li	a5,64
    e1e8:	40b785b3          	sub	a1,a5,a1
    e1ec:	00b71733          	sll	a4,a4,a1
    e1f0:	00eeeeb3          	or	t4,t4,a4
    e1f4:	01d03833          	snez	a6,t4
    e1f8:	01386833          	or	a6,a6,s3
    e1fc:	a295                	j	e360 <__subdf3+0x32e>
    e1fe:	01d767b3          	or	a5,a4,t4
    e202:	80148593          	addi	a1,s1,-2047
    e206:	e399                	bnez	a5,e20c <__subdf3+0x1da>
    e208:	0016c693          	xori	a3,a3,1
    e20c:	04d40a63          	beq	s0,a3,e260 <__subdf3+0x22e>
    e210:	e1d1                	bnez	a1,e294 <__subdf3+0x262>
    e212:	00148793          	addi	a5,s1,1
    e216:	7fe7f793          	andi	a5,a5,2046
    e21a:	1e079863          	bnez	a5,e40a <__subdf3+0x3d8>
    e21e:	01e367b3          	or	a5,t1,t5
    e222:	01d76833          	or	a6,a4,t4
    e226:	16049263          	bnez	s1,e38a <__subdf3+0x358>
    e22a:	3c078163          	beqz	a5,e5ec <__subdf3+0x5ba>
    e22e:	42081563          	bnez	a6,e658 <__subdf3+0x626>
    e232:	00351813          	slli	a6,a0,0x3
    e236:	01d31693          	slli	a3,t1,0x1d
    e23a:	00385813          	srli	a6,a6,0x3
    e23e:	0106e833          	or	a6,a3,a6
    e242:	00335793          	srli	a5,t1,0x3
    e246:	a219                	j	e34c <__subdf3+0x31a>
    e248:	01d767b3          	or	a5,a4,t4
    e24c:	1a078463          	beqz	a5,e3f4 <__subdf3+0x3c2>
    e250:	fff58793          	addi	a5,a1,-1
    e254:	3a078a63          	beqz	a5,e608 <__subdf3+0x5d6>
    e258:	23c58b63          	beq	a1,t3,e48e <__subdf3+0x45c>
    e25c:	85be                	mv	a1,a5
    e25e:	b591                	j	e0a2 <__subdf3+0x70>
    e260:	1c059863          	bnez	a1,e430 <__subdf3+0x3fe>
    e264:	00148693          	addi	a3,s1,1
    e268:	7fe6f793          	andi	a5,a3,2046
    e26c:	efc1                	bnez	a5,e304 <__subdf3+0x2d2>
    e26e:	01e367b3          	or	a5,t1,t5
    e272:	34049f63          	bnez	s1,e5d0 <__subdf3+0x59e>
    e276:	44078c63          	beqz	a5,e6ce <__subdf3+0x69c>
    e27a:	01d767b3          	or	a5,a4,t4
    e27e:	46079363          	bnez	a5,e6e4 <__subdf3+0x6b2>
    e282:	050e                	slli	a0,a0,0x3
    e284:	01d31813          	slli	a6,t1,0x1d
    e288:	810d                	srli	a0,a0,0x3
    e28a:	00a86833          	or	a6,a6,a0
    e28e:	00335793          	srli	a5,t1,0x3
    e292:	a86d                	j	e34c <__subdf3+0x31a>
    e294:	409885b3          	sub	a1,a7,s1
    e298:	20049663          	bnez	s1,e4a4 <__subdf3+0x472>
    e29c:	01e367b3          	or	a5,t1,t5
    e2a0:	30078c63          	beqz	a5,e5b8 <__subdf3+0x586>
    e2a4:	fff58793          	addi	a5,a1,-1
    e2a8:	40078863          	beqz	a5,e6b8 <__subdf3+0x686>
    e2ac:	7ff00513          	li	a0,2047
    e2b0:	20a58263          	beq	a1,a0,e4b4 <__subdf3+0x482>
    e2b4:	85be                	mv	a1,a5
    e2b6:	03800793          	li	a5,56
    e2ba:	2ab7c163          	blt	a5,a1,e55c <__subdf3+0x52a>
    e2be:	47fd                	li	a5,31
    e2c0:	3cb7c763          	blt	a5,a1,e68e <__subdf3+0x65c>
    e2c4:	02000793          	li	a5,32
    e2c8:	8f8d                	sub	a5,a5,a1
    e2ca:	00f31833          	sll	a6,t1,a5
    e2ce:	00bf5633          	srl	a2,t5,a1
    e2d2:	00ff17b3          	sll	a5,t5,a5
    e2d6:	00c86833          	or	a6,a6,a2
    e2da:	00f039b3          	snez	s3,a5
    e2de:	00b35333          	srl	t1,t1,a1
    e2e2:	01386833          	or	a6,a6,s3
    e2e6:	40670733          	sub	a4,a4,t1
    e2ea:	acad                	j	e564 <__subdf3+0x532>
    e2ec:	01d767b3          	or	a5,a4,t4
    e2f0:	10078263          	beqz	a5,e3f4 <__subdf3+0x3c2>
    e2f4:	fff58793          	addi	a5,a1,-1
    e2f8:	1e078e63          	beqz	a5,e4f4 <__subdf3+0x4c2>
    e2fc:	2dc58f63          	beq	a1,t3,e5da <__subdf3+0x5a8>
    e300:	85be                	mv	a1,a5
    e302:	b5d1                	j	e1c6 <__subdf3+0x194>
    e304:	7ff00793          	li	a5,2047
    e308:	06f68b63          	beq	a3,a5,e37e <__subdf3+0x34c>
    e30c:	9efa                	add	t4,t4,t5
    e30e:	01eeb633          	sltu	a2,t4,t5
    e312:	00e307b3          	add	a5,t1,a4
    e316:	97b2                	add	a5,a5,a2
    e318:	01f79813          	slli	a6,a5,0x1f
    e31c:	001ede93          	srli	t4,t4,0x1
    e320:	01d869b3          	or	s3,a6,t4
    e324:	0017d613          	srli	a2,a5,0x1
    e328:	84b6                	mv	s1,a3
    e32a:	0079f793          	andi	a5,s3,7
    e32e:	e0079fe3          	bnez	a5,e14c <__subdf3+0x11a>
    e332:	01d61793          	slli	a5,a2,0x1d
    e336:	0039d813          	srli	a6,s3,0x3
    e33a:	00f86833          	or	a6,a6,a5
    e33e:	85a6                	mv	a1,s1
    e340:	00365793          	srli	a5,a2,0x3
    e344:	7ff00713          	li	a4,2047
    e348:	06e58063          	beq	a1,a4,e3a8 <__subdf3+0x376>
    e34c:	07b2                	slli	a5,a5,0xc
    e34e:	83b1                	srli	a5,a5,0xc
    e350:	7ff5f713          	andi	a4,a1,2047
    e354:	8805                	andi	s0,s0,1
    e356:	bd3d                	j	e194 <__subdf3+0x162>
    e358:	01d76733          	or	a4,a4,t4
    e35c:	00e03833          	snez	a6,a4
    e360:	01e809b3          	add	s3,a6,t5
    e364:	01e9b7b3          	sltu	a5,s3,t5
    e368:	00678633          	add	a2,a5,t1
    e36c:	00861793          	slli	a5,a2,0x8
    e370:	fa07dde3          	bgez	a5,e32a <__subdf3+0x2f8>
    e374:	0485                	addi	s1,s1,1
    e376:	7ff00793          	li	a5,2047
    e37a:	18f49b63          	bne	s1,a5,e510 <__subdf3+0x4de>
    e37e:	8805                	andi	s0,s0,1
    e380:	7ff00713          	li	a4,2047
    e384:	4781                	li	a5,0
    e386:	4801                	li	a6,0
    e388:	b531                	j	e194 <__subdf3+0x162>
    e38a:	10079063          	bnez	a5,e48a <__subdf3+0x458>
    e38e:	3c080063          	beqz	a6,e74e <__subdf3+0x71c>
    e392:	00361813          	slli	a6,a2,0x3
    e396:	01d71793          	slli	a5,a4,0x1d
    e39a:	00385813          	srli	a6,a6,0x3
    e39e:	00f86833          	or	a6,a6,a5
    e3a2:	8436                	mv	s0,a3
    e3a4:	00375793          	srli	a5,a4,0x3
    e3a8:	00f867b3          	or	a5,a6,a5
    e3ac:	dbe9                	beqz	a5,e37e <__subdf3+0x34c>
    e3ae:	4401                	li	s0,0
    e3b0:	7ff00713          	li	a4,2047
    e3b4:	000807b7          	lui	a5,0x80
    e3b8:	4801                	li	a6,0
    e3ba:	bbe9                	j	e194 <__subdf3+0x162>
    e3bc:	ff800637          	lui	a2,0xff800
    e3c0:	167d                	addi	a2,a2,-1
    e3c2:	8e7d                	and	a2,a2,a5
    e3c4:	0079f793          	andi	a5,s3,7
    e3c8:	8c99                	sub	s1,s1,a4
    e3ca:	d80791e3          	bnez	a5,e14c <__subdf3+0x11a>
    e3ce:	b795                	j	e332 <__subdf3+0x300>
    e3d0:	854e                	mv	a0,s3
    e3d2:	217d                	jal	e880 <__clzsi2>
    e3d4:	01850713          	addi	a4,a0,24
    e3d8:	47fd                	li	a5,31
    e3da:	d2e7d3e3          	bge	a5,a4,e100 <__subdf3+0xce>
    e3de:	ff850613          	addi	a2,a0,-8
    e3e2:	00c997b3          	sll	a5,s3,a2
    e3e6:	4981                	li	s3,0
    e3e8:	b335                	j	e114 <__subdf3+0xe2>
    e3ea:	01d76833          	or	a6,a4,t4
    e3ee:	01003833          	snez	a6,a6
    e3f2:	b1d5                	j	e0d6 <__subdf3+0xa4>
    e3f4:	00351813          	slli	a6,a0,0x3
    e3f8:	01d31793          	slli	a5,t1,0x1d
    e3fc:	00385813          	srli	a6,a6,0x3
    e400:	00f86833          	or	a6,a6,a5
    e404:	00335793          	srli	a5,t1,0x3
    e408:	bf35                	j	e344 <__subdf3+0x312>
    e40a:	41df09b3          	sub	s3,t5,t4
    e40e:	40e30933          	sub	s2,t1,a4
    e412:	013f3633          	sltu	a2,t5,s3
    e416:	40c90933          	sub	s2,s2,a2
    e41a:	00891793          	slli	a5,s2,0x8
    e41e:	2007ca63          	bltz	a5,e632 <__subdf3+0x600>
    e422:	0129e833          	or	a6,s3,s2
    e426:	cc0817e3          	bnez	a6,e0f4 <__subdf3+0xc2>
    e42a:	4781                	li	a5,0
    e42c:	4401                	li	s0,0
    e42e:	bf39                	j	e34c <__subdf3+0x31a>
    e430:	409885b3          	sub	a1,a7,s1
    e434:	14048163          	beqz	s1,e576 <__subdf3+0x544>
    e438:	008006b7          	lui	a3,0x800
    e43c:	7ff00793          	li	a5,2047
    e440:	00d36333          	or	t1,t1,a3
    e444:	20f88163          	beq	a7,a5,e646 <__subdf3+0x614>
    e448:	03800793          	li	a5,56
    e44c:	22b7cc63          	blt	a5,a1,e684 <__subdf3+0x652>
    e450:	47fd                	li	a5,31
    e452:	2cb7c963          	blt	a5,a1,e724 <__subdf3+0x6f2>
    e456:	02000793          	li	a5,32
    e45a:	8f8d                	sub	a5,a5,a1
    e45c:	00f31833          	sll	a6,t1,a5
    e460:	00bf56b3          	srl	a3,t5,a1
    e464:	00ff17b3          	sll	a5,t5,a5
    e468:	00d86833          	or	a6,a6,a3
    e46c:	00f039b3          	snez	s3,a5
    e470:	00b35333          	srl	t1,t1,a1
    e474:	01386833          	or	a6,a6,s3
    e478:	971a                	add	a4,a4,t1
    e47a:	01d809b3          	add	s3,a6,t4
    e47e:	01d9b7b3          	sltu	a5,s3,t4
    e482:	00e78633          	add	a2,a5,a4
    e486:	84c6                	mv	s1,a7
    e488:	b5d5                	j	e36c <__subdf3+0x33a>
    e48a:	f20812e3          	bnez	a6,e3ae <__subdf3+0x37c>
    e48e:	00351813          	slli	a6,a0,0x3
    e492:	01d31793          	slli	a5,t1,0x1d
    e496:	00385813          	srli	a6,a6,0x3
    e49a:	00f86833          	or	a6,a6,a5
    e49e:	00335793          	srli	a5,t1,0x3
    e4a2:	b719                	j	e3a8 <__subdf3+0x376>
    e4a4:	00800537          	lui	a0,0x800
    e4a8:	7ff00793          	li	a5,2047
    e4ac:	00a36333          	or	t1,t1,a0
    e4b0:	e0f893e3          	bne	a7,a5,e2b6 <__subdf3+0x284>
    e4b4:	060e                	slli	a2,a2,0x3
    e4b6:	01d71813          	slli	a6,a4,0x1d
    e4ba:	820d                	srli	a2,a2,0x3
    e4bc:	00c86833          	or	a6,a6,a2
    e4c0:	00375793          	srli	a5,a4,0x3
    e4c4:	8436                	mv	s0,a3
    e4c6:	b5cd                	j	e3a8 <__subdf3+0x376>
    e4c8:	1705                	addi	a4,a4,-31
    e4ca:	02000693          	li	a3,32
    e4ce:	00e7d733          	srl	a4,a5,a4
    e4d2:	00d60a63          	beq	a2,a3,e4e6 <__subdf3+0x4b4>
    e4d6:	04000693          	li	a3,64
    e4da:	40c68633          	sub	a2,a3,a2
    e4de:	00c79633          	sll	a2,a5,a2
    e4e2:	00c9e9b3          	or	s3,s3,a2
    e4e6:	01303833          	snez	a6,s3
    e4ea:	00e869b3          	or	s3,a6,a4
    e4ee:	4601                	li	a2,0
    e4f0:	4481                	li	s1,0
    e4f2:	bd25                	j	e32a <__subdf3+0x2f8>
    e4f4:	01df09b3          	add	s3,t5,t4
    e4f8:	00e307b3          	add	a5,t1,a4
    e4fc:	01e9bf33          	sltu	t5,s3,t5
    e500:	01e78633          	add	a2,a5,t5
    e504:	00861793          	slli	a5,a2,0x8
    e508:	4485                	li	s1,1
    e50a:	e207d0e3          	bgez	a5,e32a <__subdf3+0x2f8>
    e50e:	4489                	li	s1,2
    e510:	ff8007b7          	lui	a5,0xff800
    e514:	17fd                	addi	a5,a5,-1
    e516:	8ff1                	and	a5,a5,a2
    e518:	0019d713          	srli	a4,s3,0x1
    e51c:	0019f813          	andi	a6,s3,1
    e520:	01076833          	or	a6,a4,a6
    e524:	01f79993          	slli	s3,a5,0x1f
    e528:	0109e9b3          	or	s3,s3,a6
    e52c:	0017d613          	srli	a2,a5,0x1
    e530:	b919                	j	e146 <__subdf3+0x114>
    e532:	fe058813          	addi	a6,a1,-32
    e536:	02000793          	li	a5,32
    e53a:	010759b3          	srl	s3,a4,a6
    e53e:	00f58a63          	beq	a1,a5,e552 <__subdf3+0x520>
    e542:	04000793          	li	a5,64
    e546:	40b785b3          	sub	a1,a5,a1
    e54a:	00b71733          	sll	a4,a4,a1
    e54e:	00eeeeb3          	or	t4,t4,a4
    e552:	01d03833          	snez	a6,t4
    e556:	01386833          	or	a6,a6,s3
    e55a:	beb5                	j	e0d6 <__subdf3+0xa4>
    e55c:	01e36333          	or	t1,t1,t5
    e560:	00603833          	snez	a6,t1
    e564:	410e89b3          	sub	s3,t4,a6
    e568:	013eb7b3          	sltu	a5,t4,s3
    e56c:	40f70633          	sub	a2,a4,a5
    e570:	84c6                	mv	s1,a7
    e572:	8436                	mv	s0,a3
    e574:	b6bd                	j	e0e2 <__subdf3+0xb0>
    e576:	01e367b3          	or	a5,t1,t5
    e57a:	18078763          	beqz	a5,e708 <__subdf3+0x6d6>
    e57e:	fff58793          	addi	a5,a1,-1
    e582:	1c078c63          	beqz	a5,e75a <__subdf3+0x728>
    e586:	7ff00693          	li	a3,2047
    e58a:	0ad58e63          	beq	a1,a3,e646 <__subdf3+0x614>
    e58e:	85be                	mv	a1,a5
    e590:	bd65                	j	e448 <__subdf3+0x416>
    e592:	02000793          	li	a5,32
    e596:	8f8d                	sub	a5,a5,a1
    e598:	00bed9b3          	srl	s3,t4,a1
    e59c:	00f71833          	sll	a6,a4,a5
    e5a0:	00fe9eb3          	sll	t4,t4,a5
    e5a4:	01386833          	or	a6,a6,s3
    e5a8:	00b75733          	srl	a4,a4,a1
    e5ac:	01d039b3          	snez	s3,t4
    e5b0:	01386833          	or	a6,a6,s3
    e5b4:	933a                	add	t1,t1,a4
    e5b6:	b36d                	j	e360 <__subdf3+0x32e>
    e5b8:	00361813          	slli	a6,a2,0x3
    e5bc:	01d71793          	slli	a5,a4,0x1d
    e5c0:	00385813          	srli	a6,a6,0x3
    e5c4:	0107e833          	or	a6,a5,a6
    e5c8:	8436                	mv	s0,a3
    e5ca:	00375793          	srli	a5,a4,0x3
    e5ce:	bb9d                	j	e344 <__subdf3+0x312>
    e5d0:	cbbd                	beqz	a5,e646 <__subdf3+0x614>
    e5d2:	01d76733          	or	a4,a4,t4
    e5d6:	dc071ce3          	bnez	a4,e3ae <__subdf3+0x37c>
    e5da:	050e                	slli	a0,a0,0x3
    e5dc:	01d31813          	slli	a6,t1,0x1d
    e5e0:	810d                	srli	a0,a0,0x3
    e5e2:	00a86833          	or	a6,a6,a0
    e5e6:	00335793          	srli	a5,t1,0x3
    e5ea:	bb7d                	j	e3a8 <__subdf3+0x376>
    e5ec:	e2080fe3          	beqz	a6,e42a <__subdf3+0x3f8>
    e5f0:	00361813          	slli	a6,a2,0x3
    e5f4:	01d71793          	slli	a5,a4,0x1d
    e5f8:	00385813          	srli	a6,a6,0x3
    e5fc:	00f86833          	or	a6,a6,a5
    e600:	8436                	mv	s0,a3
    e602:	00375793          	srli	a5,a4,0x3
    e606:	b399                	j	e34c <__subdf3+0x31a>
    e608:	41df09b3          	sub	s3,t5,t4
    e60c:	40e307b3          	sub	a5,t1,a4
    e610:	013f3f33          	sltu	t5,t5,s3
    e614:	41e78633          	sub	a2,a5,t5
    e618:	4485                	li	s1,1
    e61a:	b4e1                	j	e0e2 <__subdf3+0xb0>
    e61c:	00351813          	slli	a6,a0,0x3
    e620:	01d31693          	slli	a3,t1,0x1d
    e624:	00385813          	srli	a6,a6,0x3
    e628:	0106e833          	or	a6,a3,a6
    e62c:	00335793          	srli	a5,t1,0x3
    e630:	bba5                	j	e3a8 <__subdf3+0x376>
    e632:	41ee89b3          	sub	s3,t4,t5
    e636:	40670633          	sub	a2,a4,t1
    e63a:	013eb933          	sltu	s2,t4,s3
    e63e:	41260933          	sub	s2,a2,s2
    e642:	8436                	mv	s0,a3
    e644:	bc45                	j	e0f4 <__subdf3+0xc2>
    e646:	060e                	slli	a2,a2,0x3
    e648:	01d71813          	slli	a6,a4,0x1d
    e64c:	820d                	srli	a2,a2,0x3
    e64e:	00c86833          	or	a6,a6,a2
    e652:	00375793          	srli	a5,a4,0x3
    e656:	bb89                	j	e3a8 <__subdf3+0x376>
    e658:	41df09b3          	sub	s3,t5,t4
    e65c:	40e307b3          	sub	a5,t1,a4
    e660:	013f3633          	sltu	a2,t5,s3
    e664:	40c78633          	sub	a2,a5,a2
    e668:	00861793          	slli	a5,a2,0x8
    e66c:	0a07d763          	bgez	a5,e71a <__subdf3+0x6e8>
    e670:	41ee89b3          	sub	s3,t4,t5
    e674:	406707b3          	sub	a5,a4,t1
    e678:	013ebeb3          	sltu	t4,t4,s3
    e67c:	41d78633          	sub	a2,a5,t4
    e680:	8436                	mv	s0,a3
    e682:	b4d1                	j	e146 <__subdf3+0x114>
    e684:	01e36333          	or	t1,t1,t5
    e688:	00603833          	snez	a6,t1
    e68c:	b3fd                	j	e47a <__subdf3+0x448>
    e68e:	fe058813          	addi	a6,a1,-32
    e692:	02000793          	li	a5,32
    e696:	010359b3          	srl	s3,t1,a6
    e69a:	00f58a63          	beq	a1,a5,e6ae <__subdf3+0x67c>
    e69e:	04000793          	li	a5,64
    e6a2:	40b785b3          	sub	a1,a5,a1
    e6a6:	00b31333          	sll	t1,t1,a1
    e6aa:	006f6f33          	or	t5,t5,t1
    e6ae:	01e03833          	snez	a6,t5
    e6b2:	01386833          	or	a6,a6,s3
    e6b6:	b57d                	j	e564 <__subdf3+0x532>
    e6b8:	41ee89b3          	sub	s3,t4,t5
    e6bc:	406707b3          	sub	a5,a4,t1
    e6c0:	013ebeb3          	sltu	t4,t4,s3
    e6c4:	41d78633          	sub	a2,a5,t4
    e6c8:	8436                	mv	s0,a3
    e6ca:	4485                	li	s1,1
    e6cc:	bc19                	j	e0e2 <__subdf3+0xb0>
    e6ce:	00361813          	slli	a6,a2,0x3
    e6d2:	01d71793          	slli	a5,a4,0x1d
    e6d6:	00385813          	srli	a6,a6,0x3
    e6da:	00f86833          	or	a6,a6,a5
    e6de:	00375793          	srli	a5,a4,0x3
    e6e2:	b1ad                	j	e34c <__subdf3+0x31a>
    e6e4:	01df09b3          	add	s3,t5,t4
    e6e8:	00e307b3          	add	a5,t1,a4
    e6ec:	01e9bf33          	sltu	t5,s3,t5
    e6f0:	01e78633          	add	a2,a5,t5
    e6f4:	00861793          	slli	a5,a2,0x8
    e6f8:	c207d9e3          	bgez	a5,e32a <__subdf3+0x2f8>
    e6fc:	ff8007b7          	lui	a5,0xff800
    e700:	17fd                	addi	a5,a5,-1
    e702:	8e7d                	and	a2,a2,a5
    e704:	4485                	li	s1,1
    e706:	b115                	j	e32a <__subdf3+0x2f8>
    e708:	060e                	slli	a2,a2,0x3
    e70a:	01d71813          	slli	a6,a4,0x1d
    e70e:	820d                	srli	a2,a2,0x3
    e710:	00c86833          	or	a6,a6,a2
    e714:	00375793          	srli	a5,a4,0x3
    e718:	b135                	j	e344 <__subdf3+0x312>
    e71a:	00c9e833          	or	a6,s3,a2
    e71e:	d00806e3          	beqz	a6,e42a <__subdf3+0x3f8>
    e722:	b121                	j	e32a <__subdf3+0x2f8>
    e724:	fe058813          	addi	a6,a1,-32
    e728:	02000793          	li	a5,32
    e72c:	010359b3          	srl	s3,t1,a6
    e730:	00f58a63          	beq	a1,a5,e744 <__subdf3+0x712>
    e734:	04000793          	li	a5,64
    e738:	40b785b3          	sub	a1,a5,a1
    e73c:	00b31333          	sll	t1,t1,a1
    e740:	006f6f33          	or	t5,t5,t1
    e744:	01e03833          	snez	a6,t5
    e748:	01386833          	or	a6,a6,s3
    e74c:	b33d                	j	e47a <__subdf3+0x448>
    e74e:	4401                	li	s0,0
    e750:	7ff00713          	li	a4,2047
    e754:	000807b7          	lui	a5,0x80
    e758:	bc35                	j	e194 <__subdf3+0x162>
    e75a:	01df09b3          	add	s3,t5,t4
    e75e:	00e307b3          	add	a5,t1,a4
    e762:	01d9beb3          	sltu	t4,s3,t4
    e766:	01d78633          	add	a2,a5,t4
    e76a:	bb69                	j	e504 <__subdf3+0x4d2>

0000e76c <__unorddf2>:
    e76c:	0145d713          	srli	a4,a1,0x14
    e770:	001007b7          	lui	a5,0x100
    e774:	17fd                	addi	a5,a5,-1
    e776:	fff74713          	not	a4,a4
    e77a:	0146d813          	srli	a6,a3,0x14
    e77e:	8dfd                	and	a1,a1,a5
    e780:	8ff5                	and	a5,a5,a3
    e782:	01571693          	slli	a3,a4,0x15
    e786:	7ff87813          	andi	a6,a6,2047
    e78a:	ca99                	beqz	a3,e7a0 <__unorddf2+0x34>
    e78c:	7ff00713          	li	a4,2047
    e790:	4501                	li	a0,0
    e792:	00e80363          	beq	a6,a4,e798 <__unorddf2+0x2c>
    e796:	8082                	ret
    e798:	8fd1                	or	a5,a5,a2
    e79a:	00f03533          	snez	a0,a5
    e79e:	8082                	ret
    e7a0:	8dc9                	or	a1,a1,a0
    e7a2:	4505                	li	a0,1
    e7a4:	d5e5                	beqz	a1,e78c <__unorddf2+0x20>
    e7a6:	8082                	ret

0000e7a8 <__fixdfsi>:
    e7a8:	0145d793          	srli	a5,a1,0x14
    e7ac:	001006b7          	lui	a3,0x100
    e7b0:	fff68713          	addi	a4,a3,-1 # fffff <_data_lma+0xf0df3>
    e7b4:	7ff7f793          	andi	a5,a5,2047
    e7b8:	3fe00613          	li	a2,1022
    e7bc:	8f6d                	and	a4,a4,a1
    e7be:	81fd                	srli	a1,a1,0x1f
    e7c0:	00f65c63          	bge	a2,a5,e7d8 <__fixdfsi+0x30>
    e7c4:	41d00613          	li	a2,1053
    e7c8:	00f65a63          	bge	a2,a5,e7dc <__fixdfsi+0x34>
    e7cc:	80000537          	lui	a0,0x80000
    e7d0:	fff54513          	not	a0,a0
    e7d4:	952e                	add	a0,a0,a1
    e7d6:	8082                	ret
    e7d8:	4501                	li	a0,0
    e7da:	8082                	ret
    e7dc:	43300613          	li	a2,1075
    e7e0:	8e1d                	sub	a2,a2,a5
    e7e2:	487d                	li	a6,31
    e7e4:	8f55                	or	a4,a4,a3
    e7e6:	00c85d63          	bge	a6,a2,e800 <__fixdfsi+0x58>
    e7ea:	41300693          	li	a3,1043
    e7ee:	40f687b3          	sub	a5,a3,a5
    e7f2:	00f757b3          	srl	a5,a4,a5
    e7f6:	40f00533          	neg	a0,a5
    e7fa:	f1e5                	bnez	a1,e7da <__fixdfsi+0x32>
    e7fc:	853e                	mv	a0,a5
    e7fe:	8082                	ret
    e800:	bed78793          	addi	a5,a5,-1043 # ffbed <_data_lma+0xf09e1>
    e804:	00f717b3          	sll	a5,a4,a5
    e808:	00c55533          	srl	a0,a0,a2
    e80c:	8fc9                	or	a5,a5,a0
    e80e:	b7e5                	j	e7f6 <__fixdfsi+0x4e>

0000e810 <__floatsidf>:
    e810:	1141                	addi	sp,sp,-16
    e812:	c606                	sw	ra,12(sp)
    e814:	c422                	sw	s0,8(sp)
    e816:	c226                	sw	s1,4(sp)
    e818:	cd05                	beqz	a0,e850 <__floatsidf+0x40>
    e81a:	41f55793          	srai	a5,a0,0x1f
    e81e:	00a7c4b3          	xor	s1,a5,a0
    e822:	8c9d                	sub	s1,s1,a5
    e824:	842a                	mv	s0,a0
    e826:	8526                	mv	a0,s1
    e828:	28a1                	jal	e880 <__clzsi2>
    e82a:	41e00693          	li	a3,1054
    e82e:	8e89                	sub	a3,a3,a0
    e830:	47a9                	li	a5,10
    e832:	807d                	srli	s0,s0,0x1f
    e834:	7ff6f693          	andi	a3,a3,2047
    e838:	02a7cd63          	blt	a5,a0,e872 <__floatsidf+0x62>
    e83c:	472d                	li	a4,11
    e83e:	8f09                	sub	a4,a4,a0
    e840:	00e4d7b3          	srl	a5,s1,a4
    e844:	0555                	addi	a0,a0,21
    e846:	07b2                	slli	a5,a5,0xc
    e848:	00a494b3          	sll	s1,s1,a0
    e84c:	83b1                	srli	a5,a5,0xc
    e84e:	a029                	j	e858 <__floatsidf+0x48>
    e850:	4401                	li	s0,0
    e852:	4681                	li	a3,0
    e854:	4781                	li	a5,0
    e856:	4481                	li	s1,0
    e858:	07b2                	slli	a5,a5,0xc
    e85a:	06d2                	slli	a3,a3,0x14
    e85c:	83b1                	srli	a5,a5,0xc
    e85e:	047e                	slli	s0,s0,0x1f
    e860:	8fd5                	or	a5,a5,a3
    e862:	8fc1                	or	a5,a5,s0
    e864:	40b2                	lw	ra,12(sp)
    e866:	4422                	lw	s0,8(sp)
    e868:	8526                	mv	a0,s1
    e86a:	85be                	mv	a1,a5
    e86c:	4492                	lw	s1,4(sp)
    e86e:	0141                	addi	sp,sp,16
    e870:	8082                	ret
    e872:	1555                	addi	a0,a0,-11
    e874:	00a497b3          	sll	a5,s1,a0
    e878:	07b2                	slli	a5,a5,0xc
    e87a:	83b1                	srli	a5,a5,0xc
    e87c:	4481                	li	s1,0
    e87e:	bfe9                	j	e858 <__floatsidf+0x48>

0000e880 <__clzsi2>:
    e880:	67c1                	lui	a5,0x10
    e882:	02f57e63          	bgeu	a0,a5,e8be <__clzsi2+0x3e>
    e886:	0ff00793          	li	a5,255
    e88a:	02000713          	li	a4,32
    e88e:	00a7ec63          	bltu	a5,a0,e8a6 <__clzsi2+0x26>
    e892:	00001797          	auipc	a5,0x1
    e896:	83a78793          	addi	a5,a5,-1990 # f0cc <__clz_tab>
    e89a:	97aa                	add	a5,a5,a0
    e89c:	0007c503          	lbu	a0,0(a5)
    e8a0:	40a70533          	sub	a0,a4,a0
    e8a4:	8082                	ret
    e8a6:	8121                	srli	a0,a0,0x8
    e8a8:	00001797          	auipc	a5,0x1
    e8ac:	82478793          	addi	a5,a5,-2012 # f0cc <__clz_tab>
    e8b0:	97aa                	add	a5,a5,a0
    e8b2:	0007c503          	lbu	a0,0(a5)
    e8b6:	4761                	li	a4,24
    e8b8:	40a70533          	sub	a0,a4,a0
    e8bc:	8082                	ret
    e8be:	010007b7          	lui	a5,0x1000
    e8c2:	00f56e63          	bltu	a0,a5,e8de <__clzsi2+0x5e>
    e8c6:	8161                	srli	a0,a0,0x18
    e8c8:	00001797          	auipc	a5,0x1
    e8cc:	80478793          	addi	a5,a5,-2044 # f0cc <__clz_tab>
    e8d0:	97aa                	add	a5,a5,a0
    e8d2:	0007c503          	lbu	a0,0(a5)
    e8d6:	4721                	li	a4,8
    e8d8:	40a70533          	sub	a0,a4,a0
    e8dc:	8082                	ret
    e8de:	8141                	srli	a0,a0,0x10
    e8e0:	00000797          	auipc	a5,0x0
    e8e4:	7ec78793          	addi	a5,a5,2028 # f0cc <__clz_tab>
    e8e8:	97aa                	add	a5,a5,a0
    e8ea:	0007c503          	lbu	a0,0(a5)
    e8ee:	4741                	li	a4,16
    e8f0:	40a70533          	sub	a0,a4,a0
    e8f4:	8082                	ret

0000e8f6 <memcpy>:
    e8f6:	00a5c7b3          	xor	a5,a1,a0
    e8fa:	8b8d                	andi	a5,a5,3
    e8fc:	00c508b3          	add	a7,a0,a2
    e900:	e7a1                	bnez	a5,e948 <memcpy+0x52>
    e902:	478d                	li	a5,3
    e904:	04c7f263          	bgeu	a5,a2,e948 <memcpy+0x52>
    e908:	00357793          	andi	a5,a0,3
    e90c:	872a                	mv	a4,a0
    e90e:	eba9                	bnez	a5,e960 <memcpy+0x6a>
    e910:	ffc8f613          	andi	a2,a7,-4
    e914:	fe060793          	addi	a5,a2,-32 # ff7fffe0 <_eusrstack+0xdf7fbfe0>
    e918:	06f76763          	bltu	a4,a5,e986 <memcpy+0x90>
    e91c:	02c77363          	bgeu	a4,a2,e942 <memcpy+0x4c>
    e920:	86ae                	mv	a3,a1
    e922:	87ba                	mv	a5,a4
    e924:	0006a803          	lw	a6,0(a3)
    e928:	0791                	addi	a5,a5,4
    e92a:	0691                	addi	a3,a3,4
    e92c:	ff07ae23          	sw	a6,-4(a5)
    e930:	fec7eae3          	bltu	a5,a2,e924 <memcpy+0x2e>
    e934:	fff60793          	addi	a5,a2,-1
    e938:	8f99                	sub	a5,a5,a4
    e93a:	9bf1                	andi	a5,a5,-4
    e93c:	0791                	addi	a5,a5,4
    e93e:	973e                	add	a4,a4,a5
    e940:	95be                	add	a1,a1,a5
    e942:	01176663          	bltu	a4,a7,e94e <memcpy+0x58>
    e946:	8082                	ret
    e948:	872a                	mv	a4,a0
    e94a:	ff157ee3          	bgeu	a0,a7,e946 <memcpy+0x50>
    e94e:	0005c783          	lbu	a5,0(a1)
    e952:	0705                	addi	a4,a4,1
    e954:	0585                	addi	a1,a1,1
    e956:	fef70fa3          	sb	a5,-1(a4)
    e95a:	ff176ae3          	bltu	a4,a7,e94e <memcpy+0x58>
    e95e:	8082                	ret
    e960:	0005c683          	lbu	a3,0(a1)
    e964:	0705                	addi	a4,a4,1
    e966:	00377793          	andi	a5,a4,3
    e96a:	fed70fa3          	sb	a3,-1(a4)
    e96e:	0585                	addi	a1,a1,1
    e970:	d3c5                	beqz	a5,e910 <memcpy+0x1a>
    e972:	0005c683          	lbu	a3,0(a1)
    e976:	0705                	addi	a4,a4,1
    e978:	00377793          	andi	a5,a4,3
    e97c:	fed70fa3          	sb	a3,-1(a4)
    e980:	0585                	addi	a1,a1,1
    e982:	fff9                	bnez	a5,e960 <memcpy+0x6a>
    e984:	b771                	j	e910 <memcpy+0x1a>
    e986:	4194                	lw	a3,0(a1)
    e988:	0045a283          	lw	t0,4(a1)
    e98c:	0085af83          	lw	t6,8(a1)
    e990:	00c5af03          	lw	t5,12(a1)
    e994:	0105ae83          	lw	t4,16(a1)
    e998:	0145ae03          	lw	t3,20(a1)
    e99c:	0185a303          	lw	t1,24(a1)
    e9a0:	01c5a803          	lw	a6,28(a1)
    e9a4:	02458593          	addi	a1,a1,36
    e9a8:	c314                	sw	a3,0(a4)
    e9aa:	ffc5a683          	lw	a3,-4(a1)
    e9ae:	00572223          	sw	t0,4(a4)
    e9b2:	01f72423          	sw	t6,8(a4)
    e9b6:	01e72623          	sw	t5,12(a4)
    e9ba:	01d72823          	sw	t4,16(a4)
    e9be:	01c72a23          	sw	t3,20(a4)
    e9c2:	00672c23          	sw	t1,24(a4)
    e9c6:	01072e23          	sw	a6,28(a4)
    e9ca:	02470713          	addi	a4,a4,36
    e9ce:	fed72e23          	sw	a3,-4(a4)
    e9d2:	faf76ae3          	bltu	a4,a5,e986 <memcpy+0x90>
    e9d6:	b799                	j	e91c <memcpy+0x26>

0000e9d8 <strlen>:
    e9d8:	00357793          	andi	a5,a0,3
    e9dc:	872a                	mv	a4,a0
    e9de:	e3a1                	bnez	a5,ea1e <strlen+0x46>
    e9e0:	7f7f86b7          	lui	a3,0x7f7f8
    e9e4:	f7f68693          	addi	a3,a3,-129 # 7f7f7f7f <_eusrstack+0x5f7f3f7f>
    e9e8:	55fd                	li	a1,-1
    e9ea:	0711                	addi	a4,a4,4
    e9ec:	ffc72603          	lw	a2,-4(a4)
    e9f0:	00d677b3          	and	a5,a2,a3
    e9f4:	97b6                	add	a5,a5,a3
    e9f6:	8fd1                	or	a5,a5,a2
    e9f8:	8fd5                	or	a5,a5,a3
    e9fa:	feb788e3          	beq	a5,a1,e9ea <strlen+0x12>
    e9fe:	ffc74683          	lbu	a3,-4(a4)
    ea02:	40a707b3          	sub	a5,a4,a0
    ea06:	ffd74603          	lbu	a2,-3(a4)
    ea0a:	ffe74503          	lbu	a0,-2(a4)
    ea0e:	c68d                	beqz	a3,ea38 <strlen+0x60>
    ea10:	c20d                	beqz	a2,ea32 <strlen+0x5a>
    ea12:	00a03533          	snez	a0,a0
    ea16:	953e                	add	a0,a0,a5
    ea18:	1579                	addi	a0,a0,-2
    ea1a:	8082                	ret
    ea1c:	d2f1                	beqz	a3,e9e0 <strlen+0x8>
    ea1e:	00074783          	lbu	a5,0(a4)
    ea22:	0705                	addi	a4,a4,1
    ea24:	00377693          	andi	a3,a4,3
    ea28:	fbf5                	bnez	a5,ea1c <strlen+0x44>
    ea2a:	8f09                	sub	a4,a4,a0
    ea2c:	fff70513          	addi	a0,a4,-1
    ea30:	8082                	ret
    ea32:	ffd78513          	addi	a0,a5,-3
    ea36:	8082                	ret
    ea38:	ffc78513          	addi	a0,a5,-4
    ea3c:	8082                	ret
    ea3e:	0000                	unimp
    ea40:	000a                	c.slli	zero,0x2
    ea42:	0000                	unimp
    ea44:	2020                	fld	fs0,64(s0)
    ea46:	2020                	fld	fs0,64(s0)
    ea48:	5f5f 205f 2020      	0x2020205f5f5f
    ea4e:	5f20                	lw	s0,120(a4)
    ea50:	205f 5f5f 2020      	0x20205f5f205f
    ea56:	2020                	fld	fs0,64(s0)
    ea58:	2020                	fld	fs0,64(s0)
    ea5a:	2020                	fld	fs0,64(s0)
    ea5c:	2020                	fld	fs0,64(s0)
    ea5e:	2020                	fld	fs0,64(s0)
    ea60:	2020                	fld	fs0,64(s0)
    ea62:	5f5f 5f5f 2020      	0x20205f5f5f5f
    ea68:	5f5f 5f5f 0a5f      	0xa5f5f5f5f5f
    ea6e:	0000                	unimp
    ea70:	2020                	fld	fs0,64(s0)
    ea72:	2f20                	fld	fs0,88(a4)
    ea74:	2020                	fld	fs0,64(s0)
    ea76:	7c20                	flw	fs0,120(s0)
    ea78:	2020                	fld	fs0,64(s0)
    ea7a:	2f2f202f          	0x2f2f202f
    ea7e:	2f5f 2020 5f20      	0x5f2020202f5f
    ea84:	5f5f 205f 5f5f      	0x5f5f205f5f5f
    ea8a:	205f 2f20 5f20      	0x5f202f20205f
    ea90:	205f 2f5c 5f20      	0x5f202f5c205f
    ea96:	5f5f 0a2f 0000      	0xa2f5f5f
    ea9c:	2020                	fld	fs0,64(s0)
    ea9e:	7c2f202f          	0x7c2f202f
    eaa2:	7c20                	flw	fs0,120(s0)
    eaa4:	2f20                	fld	fs0,88(a4)
    eaa6:	2e20                	fld	fs0,88(a2)
    eaa8:	203c                	fld	fa5,64(s0)
    eaaa:	2020                	fld	fs0,64(s0)
    eaac:	2020                	fld	fs0,64(s0)
    eaae:	5f5f202f          	0x5f5f202f
    eab2:	6020                	flw	fs0,64(s0)
    eab4:	5f5f 5c20 202f      	0x202f5c205f5f
    eaba:	202f202f          	amoxor.w	zero,sp,(t5)
    eabe:	5f5f5c2f          	0x5f5f5c2f
    eac2:	5c20                	lw	s0,120(s0)
    eac4:	000a                	c.slli	zero,0x2
    eac6:	0000                	unimp
    eac8:	2f20                	fld	fs0,88(a4)
    eaca:	5f20                	lw	s0,120(a4)
    eacc:	5f5f 7c20 202f      	0x202f7c205f5f
    ead2:	7c207c2f          	0x7c207c2f
    ead6:	2020                	fld	fs0,64(s0)
    ead8:	2f20                	fld	fs0,88(a4)
    eada:	2f20                	fld	fs0,88(a4)
    eadc:	2f20                	fld	fs0,88(a4)
    eade:	2f20                	fld	fs0,88(a4)
    eae0:	2f20                	fld	fs0,88(a4)
    eae2:	2f20                	fld	fs0,88(a4)
    eae4:	2f20                	fld	fs0,88(a4)
    eae6:	2f5f 2f20 5f5f      	0x5f5f2f202f5f
    eaec:	2f5f 2f20 000a      	0xa2f202f5f
    eaf2:	0000                	unimp
    eaf4:	202f5f2f          	0x202f5f2f
    eaf8:	7c20                	flw	fs0,120(s0)
    eafa:	2f5f 2f5f 7c20      	0x7c202f5f2f5f
    eb00:	7c5f 2020 5f2f      	0x5f2f20207c5f
    eb06:	5f2f202f          	0x5f2f202f
    eb0a:	5f2f202f          	0x5f2f202f
    eb0e:	5f5f5c2f          	0x5f5f5c2f
    eb12:	5f5f 2f2f 5f5f      	0x5f5f2f2f5f5f
    eb18:	5f5f 0a2f 0000      	0xa2f5f5f
    eb1e:	0000                	unimp
    eb20:	5720                	lw	s0,104(a4)
    eb22:	6c65                	lui	s8,0x19
    eb24:	656d6f63          	bltu	s10,s6,f182 <__clz_tab+0xb6>
    eb28:	7420                	flw	fs0,104(s0)
    eb2a:	6341206f          	j	2115e <_data_lma+0x11f52>
    eb2e:	6974                	flw	fa3,84(a0)
    eb30:	6576                	flw	fa0,92(sp)
    eb32:	4b20                	lw	s0,80(a4)
    eb34:	7265                	lui	tp,0xffff9
    eb36:	656e                	flw	fa0,216(sp)
    eb38:	206c                	fld	fa1,192(s0)
    eb3a:	696d                	lui	s2,0x1b
    eb3c:	696e                	flw	fs2,216(sp)
    eb3e:	5220                	lw	s0,96(a2)
    eb40:	4f54                	lw	a3,28(a4)
    eb42:	000a2153          	fadd.s	ft2,fs4,ft0,rdn
    eb46:	0000                	unimp
    eb48:	72756f73          	csrrsi	t5,0x727,10
    eb4c:	2f736563          	bltu	t1,s7,ee36 <strlen+0x45e>
    eb50:	4b41                	li	s6,16
    eb52:	6d2d                	lui	s10,0xb
    eb54:	532f534f          	fnmadd.d	ft6,ft10,fs2,fa0,unknown
    eb58:	6372                	flw	ft6,28(sp)
    eb5a:	5f736f2f          	0x5f736f2f
    eb5e:	6e72656b          	0x6e72656b
    eb62:	6c65                	lui	s8,0x19
    eb64:	632e                	flw	ft6,200(sp)
    eb66:	0000                	unimp
    eb68:	31335b1b          	0x31335b1b
    eb6c:	5b6d                	li	s6,-5
    eb6e:	5245                	li	tp,-15
    eb70:	4f52                	lw	t5,20(sp)
    eb72:	3a52                	fld	fs4,304(sp)
    eb74:	2520                	fld	fs0,72(a0)
    eb76:	64253a73          	csrrc	s4,0x642,a0
    eb7a:	205d                	jal	ec20 <strlen+0x248>
    eb7c:	63617453          	0x63617453
    eb80:	766f206b          	0x766f206b
    eb84:	7265                	lui	tp,0xffff9
    eb86:	6c66                	flw	fs8,88(sp)
    eb88:	206e776f          	jal	a4,f5d8e <_data_lma+0xe6b82>
    eb8c:	6425                	lui	s0,0x9
    eb8e:	3a20                	fld	fs0,112(a2)
    eb90:	2520                	fld	fs0,72(a0)
    eb92:	1b64                	addi	s1,sp,444
    eb94:	0d6d305b          	0xd6d305b
    eb98:	000a                	c.slli	zero,0x2
    eb9a:	0000                	unimp
    eb9c:	455f534f          	0x455f534f
    eba0:	5252                	lw	tp,52(sp)
    eba2:	4d5f 4d45 495f      	0x495f4d454d5f
    eba8:	564e                	lw	a2,240(sp)
    ebaa:	4c41                	li	s8,16
    ebac:	4449                	li	s0,18
    ebae:	535f 5a49 0045      	0x455a49535f
    ebb4:	72756f73          	csrrsi	t5,0x727,10
    ebb8:	2f736563          	bltu	t1,s7,eea2 <strlen+0x4ca>
    ebbc:	4b41                	li	s6,16
    ebbe:	6d2d                	lui	s10,0xb
    ebc0:	532f534f          	fnmadd.d	ft6,ft10,fs2,fa0,unknown
    ebc4:	6372                	flw	ft6,28(sp)
    ebc6:	5f736f2f          	0x5f736f2f
    ebca:	656d                	lui	a0,0x1b
    ebcc:	2e6d                	jal	ef86 <strlen+0x5ae>
    ebce:	5b1b0063          	beq	s6,a7,f16e <__clz_tab+0xa2>
    ebd2:	5b6d3133          	0x5b6d3133
    ebd6:	5341                	li	t1,-16
    ebd8:	54524553          	0x54524553
    ebdc:	4620                	lw	s0,72(a2)
    ebde:	4941                	li	s2,16
    ebe0:	454c                	lw	a1,12(a0)
    ebe2:	3a44                	fld	fs1,176(a2)
    ebe4:	2520                	fld	fs0,72(a0)
    ebe6:	64253a73          	csrrc	s4,0x642,a0
    ebea:	205d                	jal	ec90 <strlen+0x2b8>
    ebec:	7325                	lui	t1,0xfffe9
    ebee:	6d305b1b          	0x6d305b1b
    ebf2:	0a0d                	addi	s4,s4,3
    ebf4:	0000                	unimp
    ebf6:	0000                	unimp
    ebf8:	455f534f          	0x455f534f
    ebfc:	5252                	lw	tp,52(sp)
    ebfe:	4d5f 4d45 4e5f      	0x4e5f4d454d5f
    ec04:	4c425f4f          	0x4c425f4f
    ec08:	004b434f          	fnmadd.s	ft6,fs6,ft4,ft0,rmm
    ec0c:	34335b1b          	0x34335b1b
    ec10:	5b6d                	li	s6,-5
    ec12:	4544                	lw	s1,12(a0)
    ec14:	5542                	lw	a0,48(sp)
    ec16:	25203a47          	0x25203a47
    ec1a:	64253a73          	csrrc	s4,0x642,a0
    ec1e:	205d                	jal	ecc4 <strlen+0x2ec>
    ec20:	33335b1b          	0x33335b1b
    ec24:	4d6d                	li	s10,27
    ec26:	6c61                	lui	s8,0x18
    ec28:	6f6c                	flw	fa1,92(a4)
    ec2a:	20203a63          	0x20203a63
    ec2e:	7830                	flw	fa2,112(s0)
    ec30:	3025                	jal	e458 <__subdf3+0x426>
    ec32:	7838                	flw	fa4,112(s0)
    ec34:	0909                	addi	s2,s2,2
    ec36:	657a6953          	0x657a6953
    ec3a:	203a                	fld	ft0,392(sp)
    ec3c:	6425                	lui	s0,0x9
    ec3e:	6d305b1b          	0x6d305b1b
    ec42:	0a0d                	addi	s4,s4,3
    ec44:	0000                	unimp
    ec46:	0000                	unimp
    ec48:	455f534f          	0x455f534f
    ec4c:	5252                	lw	tp,52(sp)
    ec4e:	4d5f 4d45 425f      	0x425f4d454d5f
    ec54:	4f4c                	lw	a1,28(a4)
    ec56:	4e5f4b43          	fmadd.q	fs6,ft10,ft5,fs1,rmm
    ec5a:	4c55                	li	s8,21
    ec5c:	004c                	addi	a1,sp,4
    ec5e:	0000                	unimp
    ec60:	455f534f          	0x455f534f
    ec64:	5252                	lw	tp,52(sp)
    ec66:	4d5f 4d45 495f      	0x495f4d454d5f
    ec6c:	564e                	lw	a2,240(sp)
    ec6e:	4c41                	li	s8,16
    ec70:	4449                	li	s0,18
    ec72:	415f 4444 4552      	0x45524444415f
    ec78:	00005353          	fadd.s	ft6,ft0,ft0,unknown
    ec7c:	455f534f          	0x455f534f
    ec80:	5252                	lw	tp,52(sp)
    ec82:	4d5f 4753 515f      	0x515f47534d5f
    ec88:	4555                	li	a0,21
    ec8a:	4555                	li	a0,21
    ec8c:	495f 5f53 5546      	0x55465f53495f
    ec92:	4c4c                	lw	a1,28(s0)
    ec94:	0000                	unimp
    ec96:	0000                	unimp
    ec98:	72756f73          	csrrsi	t5,0x727,10
    ec9c:	2f736563          	bltu	t1,s7,ef86 <strlen+0x5ae>
    eca0:	4b41                	li	s6,16
    eca2:	6d2d                	lui	s10,0xb
    eca4:	532f534f          	fnmadd.d	ft6,ft10,fs2,fa0,unknown
    eca8:	6372                	flw	ft6,28(sp)
    ecaa:	5f736f2f          	0x5f736f2f
    ecae:	736d                	lui	t1,0xffffb
    ecb0:	00632e67          	0x632e67
    ecb4:	31335b1b          	0x31335b1b
    ecb8:	5b6d                	li	s6,-5
    ecba:	5341                	li	t1,-16
    ecbc:	54524553          	0x54524553
    ecc0:	4620                	lw	s0,72(a2)
    ecc2:	4941                	li	s2,16
    ecc4:	454c                	lw	a1,12(a0)
    ecc6:	3a44                	fld	fs1,176(a2)
    ecc8:	2520                	fld	fs0,72(a0)
    ecca:	64253a73          	csrrc	s4,0x642,a0
    ecce:	205d                	jal	ed74 <strlen+0x39c>
    ecd0:	7325                	lui	t1,0xfffe9
    ecd2:	6d305b1b          	0x6d305b1b
    ecd6:	0a0d                	addi	s4,s4,3
    ecd8:	0000                	unimp
    ecda:	0000                	unimp
    ecdc:	455f534f          	0x455f534f
    ece0:	5252                	lw	tp,52(sp)
    ece2:	4d5f 4753 505f      	0x505f47534d5f
    ece8:	5f4c4f4f          	fnmadd.q	ft10,fs8,fs4,fa1,rmm
    ecec:	5349                	li	t1,-14
    ecee:	465f 4c55 004c      	0x4c4c55465f
    ecf4:	455f534f          	0x455f534f
    ecf8:	5252                	lw	tp,52(sp)
    ecfa:	535f 4843 4445      	0x44454843535f
    ed00:	495f 5f53 5552      	0x55525f53495f
    ed06:	4e4e                	lw	t3,208(sp)
    ed08:	4e49                	li	t3,18
    ed0a:	6f730047          	fmsub.q	ft0,ft6,fs7,fa3,rne
    ed0e:	7275                	lui	tp,0xffffd
    ed10:	2f736563          	bltu	t1,s7,effa <app_task_table+0x22>
    ed14:	4b41                	li	s6,16
    ed16:	6d2d                	lui	s10,0xb
    ed18:	532f534f          	fnmadd.d	ft6,ft10,fs2,fa0,unknown
    ed1c:	6372                	flw	ft6,28(sp)
    ed1e:	5f736f2f          	0x5f736f2f
    ed22:	6174                	flw	fa3,68(a0)
    ed24:	632e6b73          	csrrsi	s6,0x632,28
    ed28:	0000                	unimp
    ed2a:	0000                	unimp
    ed2c:	31335b1b          	0x31335b1b
    ed30:	5b6d                	li	s6,-5
    ed32:	5341                	li	t1,-16
    ed34:	54524553          	0x54524553
    ed38:	4620                	lw	s0,72(a2)
    ed3a:	4941                	li	s2,16
    ed3c:	454c                	lw	a1,12(a0)
    ed3e:	3a44                	fld	fs1,176(a2)
    ed40:	2520                	fld	fs0,72(a0)
    ed42:	64253a73          	csrrc	s4,0x642,a0
    ed46:	205d                	jal	edec <strlen+0x414>
    ed48:	7325                	lui	t1,0xfffe9
    ed4a:	6d305b1b          	0x6d305b1b
    ed4e:	0a0d                	addi	s4,s4,3
    ed50:	0000                	unimp
    ed52:	0000                	unimp
    ed54:	455f534f          	0x455f534f
    ed58:	5252                	lw	tp,52(sp)
    ed5a:	545f 4243 505f      	0x505f4243545f
    ed60:	4952                	lw	s2,20(sp)
    ed62:	4e495f4f          	fnmadd.q	ft10,fs2,ft4,fs1,unknown
    ed66:	4156                	lw	sp,84(sp)
    ed68:	494c                	lw	a1,20(a0)
    ed6a:	0044                	addi	s1,sp,4
    ed6c:	455f534f          	0x455f534f
    ed70:	5252                	lw	tp,52(sp)
    ed72:	545f 4243 465f      	0x465f4243545f
    ed78:	4e55                	li	t3,21
    ed7a:	4e495f43          	fmadd.q	ft10,fs2,ft4,fs1,unknown
    ed7e:	4156                	lw	sp,84(sp)
    ed80:	494c                	lw	a1,20(a0)
    ed82:	0044                	addi	s1,sp,4
    ed84:	455f534f          	0x455f534f
    ed88:	5252                	lw	tp,52(sp)
    ed8a:	545f 4243 535f      	0x535f4243545f
    ed90:	4b54                	lw	a3,20(a4)
    ed92:	535f 5a49 5f45      	0x5f455a49535f
    ed98:	4e49                	li	t3,18
    ed9a:	4156                	lw	sp,84(sp)
    ed9c:	494c                	lw	a1,20(a0)
    ed9e:	0044                	addi	s1,sp,4
    eda0:	455f534f          	0x455f534f
    eda4:	5252                	lw	tp,52(sp)
    eda6:	545f 4243 4e5f      	0x4e5f4243545f
    edac:	455f544f          	0x455f544f
    edb0:	4f4e                	lw	t5,208(sp)
    edb2:	4755                	li	a4,21
    edb4:	5f48                	lw	a0,60(a4)
    edb6:	454d                	li	a0,19
    edb8:	5f4d                	li	t5,-13
    edba:	4c41                	li	s8,16
    edbc:	4f4c                	lw	a1,28(a4)
    edbe:	534f0043          	fmadd.d	ft0,ft10,fs4,fa0,rne
    edc2:	455f 5252 545f      	0x545f5252455f
    edc8:	5341                	li	t1,-16
    edca:	4f505f4b          	fnmsub.q	ft10,ft0,fs5,fs1,unknown
    edce:	4d5f5453          	0x4d5f5453
    edd2:	545f4753          	0x545f4753
    edd6:	54495f4f          	0x54495f4f
    edda:	464c4553          	0x464c4553
    edde:	0000                	unimp
    ede0:	455f534f          	0x455f534f
    ede4:	5252                	lw	tp,52(sp)
    ede6:	445f 5345 545f      	0x545f5345445f
    edec:	5341                	li	t1,-16
    edee:	44495f4b          	0x44495f4b
    edf2:	495f 564e 4c41      	0x4c41564e495f
    edf8:	4449                	li	s0,18
    edfa:	0000                	unimp
    edfc:	72756f73          	csrrsi	t5,0x727,10
    ee00:	2f736563          	bltu	t1,s7,f0ea <__clz_tab+0x1e>
    ee04:	4b41                	li	s6,16
    ee06:	6d2d                	lui	s10,0xb
    ee08:	532f534f          	fnmadd.d	ft6,ft10,fs2,fa0,unknown
    ee0c:	6372                	flw	ft6,28(sp)
    ee0e:	5f736f2f          	0x5f736f2f
    ee12:	6974                	flw	fa3,84(a0)
    ee14:	656d                	lui	a0,0x1b
    ee16:	2e72                	fld	ft8,280(sp)
    ee18:	00000063          	beqz	zero,ee18 <strlen+0x440>
    ee1c:	31335b1b          	0x31335b1b
    ee20:	5b6d                	li	s6,-5
    ee22:	5341                	li	t1,-16
    ee24:	54524553          	0x54524553
    ee28:	4620                	lw	s0,72(a2)
    ee2a:	4941                	li	s2,16
    ee2c:	454c                	lw	a1,12(a0)
    ee2e:	3a44                	fld	fs1,176(a2)
    ee30:	2520                	fld	fs0,72(a0)
    ee32:	64253a73          	csrrc	s4,0x642,a0
    ee36:	205d                	jal	eedc <strlen+0x504>
    ee38:	7325                	lui	t1,0xfffe9
    ee3a:	6d305b1b          	0x6d305b1b
    ee3e:	0a0d                	addi	s4,s4,3
    ee40:	0000                	unimp
    ee42:	0000                	unimp
    ee44:	455f534f          	0x455f534f
    ee48:	5252                	lw	tp,52(sp)
    ee4a:	435f 4e41 4e5f      	0x4e5f4e41435f
    ee50:	535f544f          	fnmadd.d	fs0,ft10,fs5,fa0,unknown
    ee54:	5445                	li	s0,-15
    ee56:	445f 5345 545f      	0x545f5345445f
    ee5c:	54495f4f          	0x54495f4f
    ee60:	464c4553          	0x464c4553
    ee64:	0000                	unimp
    ee66:	0000                	unimp
    ee68:	455f534f          	0x455f534f
    ee6c:	5252                	lw	tp,52(sp)
    ee6e:	545f 4d49 5245      	0x52454d49545f
    ee74:	505f 4f4f 5f4c      	0x5f4c4f4f505f
    ee7a:	5349                	li	t1,-14
    ee7c:	465f 4c55 004c      	0x4c4c55465f
    ee82:	0000                	unimp
    ee84:	455f534f          	0x455f534f
    ee88:	5252                	lw	tp,52(sp)
    ee8a:	545f 4d49 5245      	0x52454d49545f
    ee90:	4e5f 544f 415f      	0x415f544f4e5f
    ee96:	50434543          	fmadd.s	fa0,ft6,ft4,fa0,rmm
    ee9a:	5f54                	lw	a3,60(a4)
    ee9c:	455a                	lw	a0,148(sp)
    ee9e:	4f52                	lw	t5,20(sp)
    eea0:	505f 5245 4f49      	0x4f495245505f
    eea6:	0044                	addi	s1,sp,4
    eea8:	455f534f          	0x455f534f
    eeac:	5252                	lw	tp,52(sp)
    eeae:	545f 4d49 5245      	0x52454d49545f
    eeb4:	495f 5f53 4f4e      	0x4f4e5f53495f
    eeba:	5f54                	lw	a3,60(a4)
    eebc:	5552                	lw	a0,52(sp)
    eebe:	4e4e                	lw	t3,208(sp)
    eec0:	4e49                	li	t3,18
    eec2:	00000047          	fmsub.s	ft0,ft0,ft0,ft0,rne
    eec6:	0000                	unimp
    eec8:	614e                	flw	ft2,208(sp)
    eeca:	004e                	c.slli	zero,0x13
    eecc:	4e49                	li	t3,18
    eece:	0046                	c.slli	zero,0x11
    eed0:	0000564f          	fnmadd.s	fa2,ft0,ft0,ft0,unknown
    eed4:	0000                	unimp
    eed6:	0000                	unimp
    eed8:	bc64                	fsd	fs1,248(s0)
    eeda:	0000                	unimp
    eedc:	bd14                	fsd	fa3,56(a0)
    eede:	0000                	unimp
    eee0:	bd14                	fsd	fa3,56(a0)
    eee2:	0000                	unimp
    eee4:	bd14                	fsd	fa3,56(a0)
    eee6:	0000                	unimp
    eee8:	bd14                	fsd	fa3,56(a0)
    eeea:	0000                	unimp
    eeec:	bd14                	fsd	fa3,56(a0)
    eeee:	0000                	unimp
    eef0:	bd14                	fsd	fa3,56(a0)
    eef2:	0000                	unimp
    eef4:	bd14                	fsd	fa3,56(a0)
    eef6:	0000                	unimp
    eef8:	bd14                	fsd	fa3,56(a0)
    eefa:	0000                	unimp
    eefc:	bd14                	fsd	fa3,56(a0)
    eefe:	0000                	unimp
    ef00:	bd14                	fsd	fa3,56(a0)
    ef02:	0000                	unimp
    ef04:	bd14                	fsd	fa3,56(a0)
    ef06:	0000                	unimp
    ef08:	bd14                	fsd	fa3,56(a0)
    ef0a:	0000                	unimp
    ef0c:	bd14                	fsd	fa3,56(a0)
    ef0e:	0000                	unimp
    ef10:	bd14                	fsd	fa3,56(a0)
    ef12:	0000                	unimp
    ef14:	bd14                	fsd	fa3,56(a0)
    ef16:	0000                	unimp
    ef18:	bd14                	fsd	fa3,56(a0)
    ef1a:	0000                	unimp
    ef1c:	bd14                	fsd	fa3,56(a0)
    ef1e:	0000                	unimp
    ef20:	bd14                	fsd	fa3,56(a0)
    ef22:	0000                	unimp
    ef24:	bb76                	fsd	ft9,432(sp)
    ef26:	0000                	unimp
    ef28:	bd14                	fsd	fa3,56(a0)
    ef2a:	0000                	unimp
    ef2c:	bd14                	fsd	fa3,56(a0)
    ef2e:	0000                	unimp
    ef30:	bd14                	fsd	fa3,56(a0)
    ef32:	0000                	unimp
    ef34:	bd14                	fsd	fa3,56(a0)
    ef36:	0000                	unimp
    ef38:	bd14                	fsd	fa3,56(a0)
    ef3a:	0000                	unimp
    ef3c:	bd14                	fsd	fa3,56(a0)
    ef3e:	0000                	unimp
    ef40:	bd14                	fsd	fa3,56(a0)
    ef42:	0000                	unimp
    ef44:	bd14                	fsd	fa3,56(a0)
    ef46:	0000                	unimp
    ef48:	bd14                	fsd	fa3,56(a0)
    ef4a:	0000                	unimp
    ef4c:	bb5e                	fsd	fs7,432(sp)
    ef4e:	0000                	unimp
    ef50:	bb7e                	fsd	ft11,432(sp)
    ef52:	0000                	unimp
    ef54:	bb6e                	fsd	fs11,432(sp)
    ef56:	0000                	unimp
    ef58:	bc64                	fsd	fs1,248(s0)
    ef5a:	0000                	unimp
    ef5c:	bc64                	fsd	fs1,248(s0)
    ef5e:	0000                	unimp
    ef60:	bd14                	fsd	fa3,56(a0)
    ef62:	0000                	unimp
    ef64:	bd14                	fsd	fa3,56(a0)
    ef66:	0000                	unimp
    ef68:	bd14                	fsd	fa3,56(a0)
    ef6a:	0000                	unimp
    ef6c:	bd14                	fsd	fa3,56(a0)
    ef6e:	0000                	unimp
    ef70:	bd14                	fsd	fa3,56(a0)
    ef72:	0000                	unimp
    ef74:	bd14                	fsd	fa3,56(a0)
    ef76:	0000                	unimp
    ef78:	bd14                	fsd	fa3,56(a0)
    ef7a:	0000                	unimp
    ef7c:	bd14                	fsd	fa3,56(a0)
    ef7e:	0000                	unimp
    ef80:	bb66                	fsd	fs9,432(sp)
    ef82:	0000                	unimp
    ef84:	bd14                	fsd	fa3,56(a0)
    ef86:	0000                	unimp
    ef88:	bd14                	fsd	fa3,56(a0)
    ef8a:	0000                	unimp
    ef8c:	bd14                	fsd	fa3,56(a0)
    ef8e:	0000                	unimp
    ef90:	bb9a                	fsd	ft6,496(sp)
    ef92:	0000                	unimp
    ef94:	bd14                	fsd	fa3,56(a0)
    ef96:	0000                	unimp
    ef98:	bb6e                	fsd	fs11,432(sp)
    ef9a:	0000                	unimp
    ef9c:	bd14                	fsd	fa3,56(a0)
    ef9e:	0000                	unimp
    efa0:	bd14                	fsd	fa3,56(a0)
    efa2:	0000                	unimp
    efa4:	bb76                	fsd	ft9,432(sp)
    efa6:	0000                	unimp
    efa8:	0000                	unimp
    efaa:	0000                	unimp
    efac:	6a00                	flw	fs0,16(a2)
    efae:	40f8                	lw	a4,68(s1)
    efb0:	0000                	unimp
    efb2:	0000                	unimp
    efb4:	0000                	unimp
    efb6:	4024                	lw	s1,64(s0)
    efb8:	68f1                	lui	a7,0x1c
    efba:	f8b588e3          	beq	a1,a1,ef4a <strlen+0x572>
    efbe:	3ee4                	fld	fs1,248(a3)
    efc0:	0000                	unimp
    efc2:	0000                	unimp
    efc4:	0000                	unimp
    efc6:	3ff0                	fld	fa2,248(a5)
    efc8:	ffff                	0xffff
    efca:	ffff                	0xffff
    efcc:	ffff                	0xffff
    efce:	00007fef          	jal	t6,15fce <_data_lma+0x6dc2>
    efd2:	0000                	unimp
    efd4:	0000                	unimp
    efd6:	4000                	lw	s0,0(s0)

0000efd8 <app_task_table>:
    efd8:	0000 0000 c216 0000 0000 0000 0001 0000     ................
    efe8:	0008 0000 0096 0000 0001 0000 c236 0000     ............6...
    eff8:	0000 0000 0001 0000 0008 0000 0096 0000     ................
    f008:	0002 0000 c256 0000 0000 0000 0001 0000     ....V...........
    f018:	0008 0000 0096 0000 6154 6b73 3120 0d20     ........Task 1 .
    f028:	000a 0000 5409 7361 206b 2032 0a0d 0000     .....Task 2 ....
    f038:	0909 6154 6b73 3320 0d20 000a 6548 6c6c     ..Task 3 ...Hell
    f048:	206f 000a e5ee ffff e472 ffff e582 ffff     o ......r.......
    f058:	e58a ffff e582 ffff e4a2 ffff e582 ffff     ................
    f068:	e58a ffff e472 ffff e472 ffff e4a2 ffff     ....r...r.......
    f078:	e58a ffff e5e4 ffff e5e4 ffff e5e4 ffff     ................
    f088:	e4a2 ffff ecfe ffff ebf0 ffff ebf0 ffff     ................
    f098:	ebee ffff ebf6 ffff ebf6 ffff ebbc ffff     ................
    f0a8:	ebee ffff ebf6 ffff ebbc ffff ebf6 ffff     ................
    f0b8:	ebee ffff ecea ffff ecea ffff ecea ffff     ................
    f0c8:	ebbc ffff                                   ....

0000f0cc <__clz_tab>:
    f0cc:	0100 0202 0303 0303 0404 0404 0404 0404     ................
    f0dc:	0505 0505 0505 0505 0505 0505 0505 0505     ................
    f0ec:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    f0fc:	0606 0606 0606 0606 0606 0606 0606 0606     ................
    f10c:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    f11c:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    f12c:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    f13c:	0707 0707 0707 0707 0707 0707 0707 0707     ................
    f14c:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    f15c:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    f16c:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    f17c:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    f18c:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    f19c:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    f1ac:	0808 0808 0808 0808 0808 0808 0808 0808     ................
    f1bc:	0808 0808 0808 0808 0808 0808 0808 0808     ................
